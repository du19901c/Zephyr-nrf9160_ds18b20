
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20002610 	.word	0x20002610
}
   4:	00001e61 	.word	0x00001e61
   8:	000089b1 	.word	0x000089b1
   c:	00001e35 	.word	0x00001e35
  10:	00001e35 	.word	0x00001e35
  14:	00001e35 	.word	0x00001e35
  18:	00001e35 	.word	0x00001e35
  1c:	00001e35 	.word	0x00001e35
	...
  2c:	00001831 	.word	0x00001831
  30:	00001e35 	.word	0x00001e35
  34:	00000000 	.word	0x00000000
  38:	000017d9 	.word	0x000017d9
  3c:	00002e6d 	.word	0x00002e6d

00000040 <_irq_vector_table>:
  40:	000018b1 000018b1 000018b1 000018b1     ................
  50:	000018b1 000018b1 000018b1 000018b1     ................
  60:	000018b1 000018b1 000018b1 000018b1     ................
  70:	000018b1 000018b1 000018b1 000018b1     ................
  80:	000018b1 000018b1 000018b1 000018b1     ................
  90:	000018b1 000018b1 000018b1 000018b1     ................
  a0:	000018b1 000018b1 000018b1 000018b1     ................
  b0:	000018b1 000018b1 000018b1 000018b1     ................
  c0:	000018b1 000018b1 000018b1 000018b1     ................
  d0:	000018b1 000018b1 000018b1 000018b1     ................
  e0:	000018b1 000018b1 000018b1 000018b1     ................
  f0:	000018b1 000018b1 000018b1 000018b1     ................
 100:	000018b1 000018b1 000018b1 000018b1     ................
 110:	000018b1 000018b1 000018b1 000018b1     ................
 120:	000018b1 000018b1 000018b1 000018b1     ................
 130:	000018b1 000018b1 000018b1 000018b1     ................
 140:	000018b1                                ....

00000144 <_vector_end>:
	...

00000200 <m_firmware_info>:
 200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
 210:	00010000 00000001 00000000 00000000     ................
 220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000023c <__aeabi_uldivmod>:
     23c:	b953      	cbnz	r3, 254 <__aeabi_uldivmod+0x18>
     23e:	b94a      	cbnz	r2, 254 <__aeabi_uldivmod+0x18>
     240:	2900      	cmp	r1, #0
     242:	bf08      	it	eq
     244:	2800      	cmpeq	r0, #0
     246:	bf1c      	itt	ne
     248:	f04f 31ff 	movne.w	r1, #4294967295
     24c:	f04f 30ff 	movne.w	r0, #4294967295
     250:	f000 b970 	b.w	534 <__aeabi_idiv0>
     254:	f1ad 0c08 	sub.w	ip, sp, #8
     258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     25c:	f000 f806 	bl	26c <__udivmoddi4>
     260:	f8dd e004 	ldr.w	lr, [sp, #4]
     264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     268:	b004      	add	sp, #16
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	9e08      	ldr	r6, [sp, #32]
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	468a      	mov	sl, r1
     278:	2b00      	cmp	r3, #0
     27a:	d17f      	bne.n	37c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xfc>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d941      	bls.n	306 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x86>
     282:	fab2 f282 	clz	r2, r2
     286:	b14a      	cbz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     288:	f1c2 0120 	rsb	r1, r2, #32
     28c:	fa05 f302 	lsl.w	r3, r5, r2
     290:	4097      	lsls	r7, r2
     292:	4094      	lsls	r4, r2
     294:	fa20 f101 	lsr.w	r1, r0, r1
     298:	ea41 0a03 	orr.w	sl, r1, r3
     29c:	ea4f 4817 	mov.w	r8, r7, lsr #16
     2a0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     2a4:	fa1f f987 	uxth.w	r9, r7
     2a8:	fbba fef8 	udiv	lr, sl, r8
     2ac:	fb08 a31e 	mls	r3, r8, lr, sl
     2b0:	fb0e f109 	mul.w	r1, lr, r9
     2b4:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     2b8:	4299      	cmp	r1, r3
     2ba:	d906      	bls.n	2ca <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4a>
     2bc:	18fb      	adds	r3, r7, r3
     2be:	d202      	bcs.n	2c6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x46>
     2c0:	4299      	cmp	r1, r3
     2c2:	f200 8124 	bhi.w	50e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26>
     2c6:	f10e 3eff 	add.w	lr, lr, #4294967295
     2ca:	1a59      	subs	r1, r3, r1
     2cc:	b2a3      	uxth	r3, r4
     2ce:	fbb1 f0f8 	udiv	r0, r1, r8
     2d2:	fb08 1110 	mls	r1, r8, r0, r1
     2d6:	fb00 f909 	mul.w	r9, r0, r9
     2da:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     2de:	45a1      	cmp	r9, r4
     2e0:	d905      	bls.n	2ee <CONFIG_PM_PARTITION_SIZE_PROVISION+0x6e>
     2e2:	193c      	adds	r4, r7, r4
     2e4:	d202      	bcs.n	2ec <CONFIG_PM_PARTITION_SIZE_PROVISION+0x6c>
     2e6:	45a1      	cmp	r9, r4
     2e8:	f200 810e 	bhi.w	508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>
     2ec:	3801      	subs	r0, #1
     2ee:	eba4 0409 	sub.w	r4, r4, r9
     2f2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     2f6:	2100      	movs	r1, #0
     2f8:	b11e      	cbz	r6, 302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     2fa:	40d4      	lsrs	r4, r2
     2fc:	2300      	movs	r3, #0
     2fe:	e9c6 4300 	strd	r4, r3, [r6]
     302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     306:	b902      	cbnz	r2, 30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     308:	deff      	udf	#255	; 0xff
     30a:	fab2 f282 	clz	r2, r2
     30e:	2a00      	cmp	r2, #0
     310:	d14f      	bne.n	3b2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x132>
     312:	1bcb      	subs	r3, r1, r7
     314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     318:	fa1f f887 	uxth.w	r8, r7
     31c:	2101      	movs	r1, #1
     31e:	0c25      	lsrs	r5, r4, #16
     320:	fbb3 fcfe 	udiv	ip, r3, lr
     324:	fb0e 301c 	mls	r0, lr, ip, r3
     328:	462b      	mov	r3, r5
     32a:	fb08 f90c 	mul.w	r9, r8, ip
     32e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     332:	45a9      	cmp	r9, r5
     334:	d90a      	bls.n	34c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xcc>
     336:	197d      	adds	r5, r7, r5
     338:	bf2c      	ite	cs
     33a:	2301      	movcs	r3, #1
     33c:	2300      	movcc	r3, #0
     33e:	45a9      	cmp	r9, r5
     340:	d902      	bls.n	348 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc8>
     342:	2b00      	cmp	r3, #0
     344:	f000 80d9 	beq.w	4fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12>
     348:	f10c 3cff 	add.w	ip, ip, #4294967295
     34c:	eba5 0509 	sub.w	r5, r5, r9
     350:	b2a3      	uxth	r3, r4
     352:	fbb5 f0fe 	udiv	r0, r5, lr
     356:	fb0e 5510 	mls	r5, lr, r0, r5
     35a:	fb08 f800 	mul.w	r8, r8, r0
     35e:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     362:	45a0      	cmp	r8, r4
     364:	d905      	bls.n	372 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf2>
     366:	193c      	adds	r4, r7, r4
     368:	d202      	bcs.n	370 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf0>
     36a:	45a0      	cmp	r8, r4
     36c:	f200 80c9 	bhi.w	502 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a>
     370:	3801      	subs	r0, #1
     372:	eba4 0408 	sub.w	r4, r4, r8
     376:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     37a:	e7bd      	b.n	2f8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x78>
     37c:	428b      	cmp	r3, r1
     37e:	d908      	bls.n	392 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x112>
     380:	2e00      	cmp	r6, #0
     382:	f000 80b1 	beq.w	4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>
     386:	2100      	movs	r1, #0
     388:	e9c6 0500 	strd	r0, r5, [r6]
     38c:	4608      	mov	r0, r1
     38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     392:	fab3 f183 	clz	r1, r3
     396:	2900      	cmp	r1, #0
     398:	d146      	bne.n	428 <CONFIG_FLASH_SIZE+0x28>
     39a:	42ab      	cmp	r3, r5
     39c:	f0c0 80a7 	bcc.w	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
     3a0:	4282      	cmp	r2, r0
     3a2:	f240 80a4 	bls.w	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
     3a6:	4608      	mov	r0, r1
     3a8:	2e00      	cmp	r6, #0
     3aa:	d0aa      	beq.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     3ac:	e9c6 4a00 	strd	r4, sl, [r6]
     3b0:	e7a7      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     3b2:	f1c2 0020 	rsb	r0, r2, #32
     3b6:	4097      	lsls	r7, r2
     3b8:	fa01 f302 	lsl.w	r3, r1, r2
     3bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     3c0:	40c1      	lsrs	r1, r0
     3c2:	fa24 f500 	lsr.w	r5, r4, r0
     3c6:	fa1f f887 	uxth.w	r8, r7
     3ca:	4094      	lsls	r4, r2
     3cc:	431d      	orrs	r5, r3
     3ce:	fbb1 f0fe 	udiv	r0, r1, lr
     3d2:	0c2b      	lsrs	r3, r5, #16
     3d4:	fb0e 1110 	mls	r1, lr, r0, r1
     3d8:	fb00 fc08 	mul.w	ip, r0, r8
     3dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     3e0:	459c      	cmp	ip, r3
     3e2:	d909      	bls.n	3f8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x178>
     3e4:	18fb      	adds	r3, r7, r3
     3e6:	bf2c      	ite	cs
     3e8:	2101      	movcs	r1, #1
     3ea:	2100      	movcc	r1, #0
     3ec:	459c      	cmp	ip, r3
     3ee:	d902      	bls.n	3f6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x176>
     3f0:	2900      	cmp	r1, #0
     3f2:	f000 8095 	beq.w	520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>
     3f6:	3801      	subs	r0, #1
     3f8:	eba3 030c 	sub.w	r3, r3, ip
     3fc:	b2ad      	uxth	r5, r5
     3fe:	fbb3 f1fe 	udiv	r1, r3, lr
     402:	fb0e 3311 	mls	r3, lr, r1, r3
     406:	fb01 fc08 	mul.w	ip, r1, r8
     40a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     40e:	45ac      	cmp	ip, r5
     410:	d905      	bls.n	41e <CONFIG_FLASH_SIZE+0x1e>
     412:	197d      	adds	r5, r7, r5
     414:	d202      	bcs.n	41c <CONFIG_FLASH_SIZE+0x1c>
     416:	45ac      	cmp	ip, r5
     418:	f200 8089 	bhi.w	52e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x46>
     41c:	3901      	subs	r1, #1
     41e:	eba5 030c 	sub.w	r3, r5, ip
     422:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     426:	e77a      	b.n	31e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9e>
     428:	f1c1 0420 	rsb	r4, r1, #32
     42c:	408b      	lsls	r3, r1
     42e:	fa02 f701 	lsl.w	r7, r2, r1
     432:	fa05 fc01 	lsl.w	ip, r5, r1
     436:	40e2      	lsrs	r2, r4
     438:	fa20 f804 	lsr.w	r8, r0, r4
     43c:	40e5      	lsrs	r5, r4
     43e:	fa00 fe01 	lsl.w	lr, r0, r1
     442:	4313      	orrs	r3, r2
     444:	ea48 020c 	orr.w	r2, r8, ip
     448:	ea4f 4813 	mov.w	r8, r3, lsr #16
     44c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     450:	fa1f f983 	uxth.w	r9, r3
     454:	fbb5 faf8 	udiv	sl, r5, r8
     458:	fb08 551a 	mls	r5, r8, sl, r5
     45c:	fb0a f009 	mul.w	r0, sl, r9
     460:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     464:	4560      	cmp	r0, ip
     466:	d90a      	bls.n	47e <CONFIG_FLASH_SIZE+0x7e>
     468:	eb13 0c0c 	adds.w	ip, r3, ip
     46c:	bf2c      	ite	cs
     46e:	2501      	movcs	r5, #1
     470:	2500      	movcc	r5, #0
     472:	4560      	cmp	r0, ip
     474:	d901      	bls.n	47a <CONFIG_FLASH_SIZE+0x7a>
     476:	2d00      	cmp	r5, #0
     478:	d055      	beq.n	526 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3e>
     47a:	f10a 3aff 	add.w	sl, sl, #4294967295
     47e:	ebac 0c00 	sub.w	ip, ip, r0
     482:	b292      	uxth	r2, r2
     484:	fbbc f0f8 	udiv	r0, ip, r8
     488:	fb08 cc10 	mls	ip, r8, r0, ip
     48c:	fb00 f909 	mul.w	r9, r0, r9
     490:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     494:	45e1      	cmp	r9, ip
     496:	d905      	bls.n	4a4 <CONFIG_FLASH_SIZE+0xa4>
     498:	eb13 0c0c 	adds.w	ip, r3, ip
     49c:	d201      	bcs.n	4a2 <CONFIG_FLASH_SIZE+0xa2>
     49e:	45e1      	cmp	r9, ip
     4a0:	d83b      	bhi.n	51a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x32>
     4a2:	3801      	subs	r0, #1
     4a4:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     4a8:	ebac 0c09 	sub.w	ip, ip, r9
     4ac:	fba0 8907 	umull	r8, r9, r0, r7
     4b0:	45cc      	cmp	ip, r9
     4b2:	4645      	mov	r5, r8
     4b4:	464a      	mov	r2, r9
     4b6:	d302      	bcc.n	4be <CONFIG_FLASH_SIZE+0xbe>
     4b8:	d106      	bne.n	4c8 <CONFIG_FLASH_SIZE+0xc8>
     4ba:	45c6      	cmp	lr, r8
     4bc:	d204      	bcs.n	4c8 <CONFIG_FLASH_SIZE+0xc8>
     4be:	3801      	subs	r0, #1
     4c0:	ebb8 0507 	subs.w	r5, r8, r7
     4c4:	eb69 0203 	sbc.w	r2, r9, r3
     4c8:	b32e      	cbz	r6, 516 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2e>
     4ca:	ebbe 0305 	subs.w	r3, lr, r5
     4ce:	eb6c 0c02 	sbc.w	ip, ip, r2
     4d2:	fa23 f201 	lsr.w	r2, r3, r1
     4d6:	fa0c f404 	lsl.w	r4, ip, r4
     4da:	fa2c f301 	lsr.w	r3, ip, r1
     4de:	2100      	movs	r1, #0
     4e0:	4314      	orrs	r4, r2
     4e2:	e9c6 4300 	strd	r4, r3, [r6]
     4e6:	e70c      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     4e8:	4631      	mov	r1, r6
     4ea:	4630      	mov	r0, r6
     4ec:	e709      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     4ee:	1a84      	subs	r4, r0, r2
     4f0:	eb65 0303 	sbc.w	r3, r5, r3
     4f4:	2001      	movs	r0, #1
     4f6:	469a      	mov	sl, r3
     4f8:	e756      	b.n	3a8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x128>
     4fa:	f1ac 0c02 	sub.w	ip, ip, #2
     4fe:	443d      	add	r5, r7
     500:	e724      	b.n	34c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xcc>
     502:	3802      	subs	r0, #2
     504:	443c      	add	r4, r7
     506:	e734      	b.n	372 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf2>
     508:	3802      	subs	r0, #2
     50a:	443c      	add	r4, r7
     50c:	e6ef      	b.n	2ee <CONFIG_PM_PARTITION_SIZE_PROVISION+0x6e>
     50e:	f1ae 0e02 	sub.w	lr, lr, #2
     512:	443b      	add	r3, r7
     514:	e6d9      	b.n	2ca <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4a>
     516:	4631      	mov	r1, r6
     518:	e6f3      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     51a:	3802      	subs	r0, #2
     51c:	449c      	add	ip, r3
     51e:	e7c1      	b.n	4a4 <CONFIG_FLASH_SIZE+0xa4>
     520:	3802      	subs	r0, #2
     522:	443b      	add	r3, r7
     524:	e768      	b.n	3f8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x178>
     526:	f1aa 0a02 	sub.w	sl, sl, #2
     52a:	449c      	add	ip, r3
     52c:	e7a7      	b.n	47e <CONFIG_FLASH_SIZE+0x7e>
     52e:	3902      	subs	r1, #2
     530:	443d      	add	r5, r7
     532:	e774      	b.n	41e <CONFIG_FLASH_SIZE+0x1e>

00000534 <__aeabi_idiv0>:
     534:	4770      	bx	lr
     536:	bf00      	nop

00000538 <__gnu_cmse_nonsecure_call>:
     538:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
     53c:	4627      	mov	r7, r4
     53e:	46a0      	mov	r8, r4
     540:	46a1      	mov	r9, r4
     542:	46a2      	mov	sl, r4
     544:	46a3      	mov	fp, r4
     546:	46a4      	mov	ip, r4
     548:	b0a2      	sub	sp, #136	; 0x88
     54a:	ec2d 0a00 	vlstm	sp
     54e:	f384 8800 	msr	CPSR_f, r4
     552:	4625      	mov	r5, r4
     554:	4626      	mov	r6, r4
     556:	47a4      	blxns	r4
     558:	ec3d 0a00 	vlldm	sp
     55c:	b022      	add	sp, #136	; 0x88
     55e:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}
	...

00000564 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     564:	680b      	ldr	r3, [r1, #0]
     566:	3301      	adds	r3, #1
     568:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     56a:	4b01      	ldr	r3, [pc, #4]	; (570 <char_out+0xc>)
     56c:	681b      	ldr	r3, [r3, #0]
     56e:	4718      	bx	r3
     570:	20000000 	.word	0x20000000

00000574 <__printk_hook_install>:
	_char_out = fn;
     574:	4b01      	ldr	r3, [pc, #4]	; (57c <__printk_hook_install+0x8>)
     576:	6018      	str	r0, [r3, #0]
}
     578:	4770      	bx	lr
     57a:	bf00      	nop
     57c:	20000000 	.word	0x20000000

00000580 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     580:	b507      	push	{r0, r1, r2, lr}
     582:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     584:	2100      	movs	r1, #0
{
     586:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     588:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     58a:	4803      	ldr	r0, [pc, #12]	; (598 <vprintk+0x18>)
     58c:	a901      	add	r1, sp, #4
     58e:	f000 f805 	bl	59c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     592:	b003      	add	sp, #12
     594:	f85d fb04 	ldr.w	pc, [sp], #4
     598:	00000565 	.word	0x00000565

0000059c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5a0:	468b      	mov	fp, r1
     5a2:	4692      	mov	sl, r2
     5a4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     5a6:	2500      	movs	r5, #0
{
     5a8:	b091      	sub	sp, #68	; 0x44
     5aa:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     5ac:	f89a 0000 	ldrb.w	r0, [sl]
     5b0:	b908      	cbnz	r0, 5b6 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     5b2:	4628      	mov	r0, r5
     5b4:	e35e      	b.n	c74 <CONFIG_ISR_STACK_SIZE+0x474>
		if (*fp != '%') {
     5b6:	2825      	cmp	r0, #37	; 0x25
     5b8:	f10a 0701 	add.w	r7, sl, #1
     5bc:	d007      	beq.n	5ce <cbvprintf+0x32>
			OUTC('%');
     5be:	4659      	mov	r1, fp
     5c0:	9b02      	ldr	r3, [sp, #8]
     5c2:	4798      	blx	r3
     5c4:	2800      	cmp	r0, #0
     5c6:	f2c0 8355 	blt.w	c74 <CONFIG_ISR_STACK_SIZE+0x474>
     5ca:	3501      	adds	r5, #1
			break;
     5cc:	e210      	b.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
		} state = {
     5ce:	2218      	movs	r2, #24
     5d0:	2100      	movs	r1, #0
     5d2:	a80a      	add	r0, sp, #40	; 0x28
     5d4:	f008 fa47 	bl	8a66 <memset>
	if (*sp == '%') {
     5d8:	f89a 3001 	ldrb.w	r3, [sl, #1]
     5dc:	2b25      	cmp	r3, #37	; 0x25
     5de:	d078      	beq.n	6d2 <cbvprintf+0x136>
     5e0:	2200      	movs	r2, #0
     5e2:	4694      	mov	ip, r2
     5e4:	4616      	mov	r6, r2
     5e6:	4696      	mov	lr, r2
     5e8:	4610      	mov	r0, r2
     5ea:	4639      	mov	r1, r7
		switch (*sp) {
     5ec:	f817 3b01 	ldrb.w	r3, [r7], #1
     5f0:	2b2b      	cmp	r3, #43	; 0x2b
     5f2:	f000 809d 	beq.w	730 <cbvprintf+0x194>
     5f6:	f200 8094 	bhi.w	722 <cbvprintf+0x186>
     5fa:	2b20      	cmp	r3, #32
     5fc:	f000 809b 	beq.w	736 <cbvprintf+0x19a>
     600:	2b23      	cmp	r3, #35	; 0x23
     602:	f000 809a 	beq.w	73a <cbvprintf+0x19e>
     606:	b128      	cbz	r0, 614 <cbvprintf+0x78>
     608:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     60c:	f040 0004 	orr.w	r0, r0, #4
     610:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     614:	f1be 0f00 	cmp.w	lr, #0
     618:	d005      	beq.n	626 <cbvprintf+0x8a>
     61a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     61e:	f040 0008 	orr.w	r0, r0, #8
     622:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     626:	b12e      	cbz	r6, 634 <cbvprintf+0x98>
     628:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     62c:	f040 0010 	orr.w	r0, r0, #16
     630:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     634:	f1bc 0f00 	cmp.w	ip, #0
     638:	d005      	beq.n	646 <cbvprintf+0xaa>
     63a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     63e:	f040 0020 	orr.w	r0, r0, #32
     642:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     646:	b12a      	cbz	r2, 654 <cbvprintf+0xb8>
     648:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     64c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     650:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     654:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     658:	f002 0044 	and.w	r0, r2, #68	; 0x44
     65c:	2844      	cmp	r0, #68	; 0x44
     65e:	d103      	bne.n	668 <cbvprintf+0xcc>
		conv->flag_zero = false;
     660:	f36f 1286 	bfc	r2, #6, #1
     664:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     668:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     66c:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     66e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     672:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     676:	d17b      	bne.n	770 <cbvprintf+0x1d4>
		conv->width_star = true;
     678:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     67c:	1c4b      	adds	r3, r1, #1
     67e:	f042 0201 	orr.w	r2, r2, #1
     682:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     686:	781a      	ldrb	r2, [r3, #0]
     688:	2a2e      	cmp	r2, #46	; 0x2e
     68a:	bf0c      	ite	eq
     68c:	2101      	moveq	r1, #1
     68e:	2100      	movne	r1, #0
     690:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     694:	f361 0241 	bfi	r2, r1, #1, #1
     698:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     69c:	d174      	bne.n	788 <cbvprintf+0x1ec>
	if (*sp == '*') {
     69e:	785a      	ldrb	r2, [r3, #1]
     6a0:	2a2a      	cmp	r2, #42	; 0x2a
     6a2:	d06a      	beq.n	77a <cbvprintf+0x1de>
	size_t val = 0;
     6a4:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     6a6:	260a      	movs	r6, #10
     6a8:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     6aa:	4618      	mov	r0, r3
     6ac:	f810 2b01 	ldrb.w	r2, [r0], #1
     6b0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     6b4:	2f09      	cmp	r7, #9
     6b6:	f240 808e 	bls.w	7d6 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     6ba:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     6be:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     6c0:	f3c2 0040 	ubfx	r0, r2, #1, #1
     6c4:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     6c8:	f361 0241 	bfi	r2, r1, #1, #1
     6cc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     6d0:	e05a      	b.n	788 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     6d2:	f10a 0702 	add.w	r7, sl, #2
     6d6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     6da:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     6de:	07d9      	lsls	r1, r3, #31
     6e0:	f140 8149 	bpl.w	976 <CONFIG_ISR_STACK_SIZE+0x176>
			width = va_arg(ap, int);
     6e4:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     6e8:	f1b9 0f00 	cmp.w	r9, #0
     6ec:	da07      	bge.n	6fe <cbvprintf+0x162>
				conv->flag_dash = true;
     6ee:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
     6f2:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
     6f6:	f042 0204 	orr.w	r2, r2, #4
     6fa:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
     6fe:	075a      	lsls	r2, r3, #29
     700:	f140 8142 	bpl.w	988 <CONFIG_ISR_STACK_SIZE+0x188>
			int arg = va_arg(ap, int);
     704:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     708:	f1b8 0f00 	cmp.w	r8, #0
     70c:	f280 8141 	bge.w	992 <CONFIG_ISR_STACK_SIZE+0x192>
				conv->prec_present = false;
     710:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     714:	f36f 0341 	bfc	r3, #1, #1
     718:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     71c:	f04f 38ff 	mov.w	r8, #4294967295
     720:	e137      	b.n	992 <CONFIG_ISR_STACK_SIZE+0x192>
		switch (*sp) {
     722:	2b2d      	cmp	r3, #45	; 0x2d
     724:	d00c      	beq.n	740 <cbvprintf+0x1a4>
     726:	2b30      	cmp	r3, #48	; 0x30
     728:	f47f af6d 	bne.w	606 <cbvprintf+0x6a>
			conv->flag_zero = true;
     72c:	2201      	movs	r2, #1
	} while (loop);
     72e:	e75c      	b.n	5ea <cbvprintf+0x4e>
			conv->flag_plus = true;
     730:	f04f 0e01 	mov.w	lr, #1
     734:	e759      	b.n	5ea <cbvprintf+0x4e>
			conv->flag_space = true;
     736:	2601      	movs	r6, #1
     738:	e757      	b.n	5ea <cbvprintf+0x4e>
			conv->flag_hash = true;
     73a:	f04f 0c01 	mov.w	ip, #1
     73e:	e754      	b.n	5ea <cbvprintf+0x4e>
		switch (*sp) {
     740:	2001      	movs	r0, #1
     742:	e752      	b.n	5ea <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     744:	4633      	mov	r3, r6
     746:	fb0c 0202 	mla	r2, ip, r2, r0
     74a:	3a30      	subs	r2, #48	; 0x30
     74c:	461e      	mov	r6, r3
     74e:	f816 0b01 	ldrb.w	r0, [r6], #1
     752:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     756:	2f09      	cmp	r7, #9
     758:	d9f4      	bls.n	744 <cbvprintf+0x1a8>
	if (sp != wp) {
     75a:	4299      	cmp	r1, r3
     75c:	d093      	beq.n	686 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     75e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     762:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     764:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     766:	f362 0141 	bfi	r1, r2, #1, #1
     76a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     76e:	e78a      	b.n	686 <cbvprintf+0xea>
     770:	460b      	mov	r3, r1
	size_t val = 0;
     772:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     774:	f04f 0c0a 	mov.w	ip, #10
     778:	e7e8      	b.n	74c <cbvprintf+0x1b0>
		conv->prec_star = true;
     77a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     77e:	3302      	adds	r3, #2
		conv->prec_star = true;
     780:	f042 0204 	orr.w	r2, r2, #4
     784:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
     788:	461f      	mov	r7, r3
     78a:	f817 2b01 	ldrb.w	r2, [r7], #1
     78e:	2a6c      	cmp	r2, #108	; 0x6c
     790:	d041      	beq.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
     792:	d825      	bhi.n	7e0 <cbvprintf+0x244>
     794:	2a68      	cmp	r2, #104	; 0x68
     796:	d02b      	beq.n	7f0 <cbvprintf+0x254>
     798:	2a6a      	cmp	r2, #106	; 0x6a
     79a:	d046      	beq.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     79c:	2a4c      	cmp	r2, #76	; 0x4c
     79e:	d04c      	beq.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     7a0:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     7a2:	f817 2b01 	ldrb.w	r2, [r7], #1
     7a6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
     7aa:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
     7ac:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     7b0:	f200 80d9 	bhi.w	966 <CONFIG_ISR_STACK_SIZE+0x166>
     7b4:	2a57      	cmp	r2, #87	; 0x57
     7b6:	d84d      	bhi.n	854 <CONFIG_ISR_STACK_SIZE+0x54>
     7b8:	2a41      	cmp	r2, #65	; 0x41
     7ba:	d003      	beq.n	7c4 <cbvprintf+0x228>
     7bc:	3a45      	subs	r2, #69	; 0x45
     7be:	2a02      	cmp	r2, #2
     7c0:	f200 80d1 	bhi.w	966 <CONFIG_ISR_STACK_SIZE+0x166>
		conv->specifier_cat = SPECIFIER_FP;
     7c4:	2204      	movs	r2, #4
     7c6:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     7ca:	f362 0302 	bfi	r3, r2, #0, #3
     7ce:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     7d2:	2301      	movs	r3, #1
			break;
     7d4:	e09e      	b.n	914 <CONFIG_ISR_STACK_SIZE+0x114>
		val = 10U * val + *sp++ - '0';
     7d6:	fb06 2101 	mla	r1, r6, r1, r2
     7da:	4603      	mov	r3, r0
     7dc:	3930      	subs	r1, #48	; 0x30
     7de:	e764      	b.n	6aa <cbvprintf+0x10e>
	switch (*sp) {
     7e0:	2a74      	cmp	r2, #116	; 0x74
     7e2:	d026      	beq.n	832 <CONFIG_ISR_STACK_SIZE+0x32>
     7e4:	2a7a      	cmp	r2, #122	; 0x7a
     7e6:	d1db      	bne.n	7a0 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     7e8:	2206      	movs	r2, #6
     7ea:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     7ee:	e00d      	b.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		if (*++sp == 'h') {
     7f0:	785a      	ldrb	r2, [r3, #1]
     7f2:	2a68      	cmp	r2, #104	; 0x68
     7f4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     7f8:	d106      	bne.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
			conv->length_mod = LENGTH_HH;
     7fa:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     7fc:	f361 02c6 	bfi	r2, r1, #3, #4
     800:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     804:	1c9f      	adds	r7, r3, #2
     806:	e7cc      	b.n	7a2 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     808:	4613      	mov	r3, r2
     80a:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     80c:	f362 03c6 	bfi	r3, r2, #3, #4
     810:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     814:	e7c5      	b.n	7a2 <cbvprintf+0x206>
		if (*++sp == 'l') {
     816:	785a      	ldrb	r2, [r3, #1]
     818:	2a6c      	cmp	r2, #108	; 0x6c
     81a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     81e:	d101      	bne.n	824 <CONFIG_ISR_STACK_SIZE+0x24>
			conv->length_mod = LENGTH_LL;
     820:	2104      	movs	r1, #4
     822:	e7eb      	b.n	7fc <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
     824:	4613      	mov	r3, r2
     826:	2203      	movs	r2, #3
     828:	e7f0      	b.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		conv->length_mod = LENGTH_J;
     82a:	2205      	movs	r2, #5
     82c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     830:	e7ec      	b.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		conv->length_mod = LENGTH_T;
     832:	2207      	movs	r2, #7
     834:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     838:	e7e8      	b.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		conv->unsupported = true;
     83a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     83e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     842:	f023 0302 	bic.w	r3, r3, #2
     846:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     84a:	f043 0302 	orr.w	r3, r3, #2
     84e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     852:	e7a6      	b.n	7a2 <cbvprintf+0x206>
     854:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     858:	2920      	cmp	r1, #32
     85a:	f200 8084 	bhi.w	966 <CONFIG_ISR_STACK_SIZE+0x166>
     85e:	a001      	add	r0, pc, #4	; (adr r0, 864 <CONFIG_ISR_STACK_SIZE+0x64>)
     860:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     864:	00000929 	.word	0x00000929
     868:	00000967 	.word	0x00000967
     86c:	00000967 	.word	0x00000967
     870:	00000967 	.word	0x00000967
     874:	00000967 	.word	0x00000967
     878:	00000967 	.word	0x00000967
     87c:	00000967 	.word	0x00000967
     880:	00000967 	.word	0x00000967
     884:	00000967 	.word	0x00000967
     888:	000007c5 	.word	0x000007c5
     88c:	00000967 	.word	0x00000967
     890:	00000929 	.word	0x00000929
     894:	000008e9 	.word	0x000008e9
     898:	000007c5 	.word	0x000007c5
     89c:	000007c5 	.word	0x000007c5
     8a0:	000007c5 	.word	0x000007c5
     8a4:	00000967 	.word	0x00000967
     8a8:	000008e9 	.word	0x000008e9
     8ac:	00000967 	.word	0x00000967
     8b0:	00000967 	.word	0x00000967
     8b4:	00000967 	.word	0x00000967
     8b8:	00000967 	.word	0x00000967
     8bc:	00000931 	.word	0x00000931
     8c0:	00000929 	.word	0x00000929
     8c4:	0000094d 	.word	0x0000094d
     8c8:	00000967 	.word	0x00000967
     8cc:	00000967 	.word	0x00000967
     8d0:	0000094d 	.word	0x0000094d
     8d4:	00000967 	.word	0x00000967
     8d8:	00000929 	.word	0x00000929
     8dc:	00000967 	.word	0x00000967
     8e0:	00000967 	.word	0x00000967
     8e4:	00000929 	.word	0x00000929
		conv->specifier_cat = SPECIFIER_SINT;
     8e8:	2001      	movs	r0, #1
     8ea:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     8ee:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     8f2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     8f6:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     8f8:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     8fc:	bf02      	ittt	eq
     8fe:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     902:	f041 0101 	orreq.w	r1, r1, #1
     906:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     90a:	2a63      	cmp	r2, #99	; 0x63
     90c:	d131      	bne.n	972 <CONFIG_ISR_STACK_SIZE+0x172>
			unsupported = (conv->length_mod != LENGTH_NONE);
     90e:	3b00      	subs	r3, #0
     910:	bf18      	it	ne
     912:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     914:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     918:	f3c2 0140 	ubfx	r1, r2, #1, #1
     91c:	430b      	orrs	r3, r1
     91e:	f363 0241 	bfi	r2, r3, #1, #1
     922:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     926:	e6d8      	b.n	6da <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     928:	2002      	movs	r0, #2
     92a:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     92e:	e7de      	b.n	8ee <CONFIG_ISR_STACK_SIZE+0xee>
		conv->specifier_cat = SPECIFIER_PTR;
     930:	2103      	movs	r1, #3
     932:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     936:	f003 0378 	and.w	r3, r3, #120	; 0x78
     93a:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     93e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     942:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     944:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     948:	4143      	adcs	r3, r0
     94a:	e7e3      	b.n	914 <CONFIG_ISR_STACK_SIZE+0x114>
		conv->specifier_cat = SPECIFIER_PTR;
     94c:	2103      	movs	r1, #3
     94e:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     952:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     956:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
     95a:	bf14      	ite	ne
     95c:	2301      	movne	r3, #1
     95e:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
     960:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     964:	e7d6      	b.n	914 <CONFIG_ISR_STACK_SIZE+0x114>
		conv->invalid = true;
     966:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     96a:	f043 0301 	orr.w	r3, r3, #1
     96e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     972:	2300      	movs	r3, #0
     974:	e7ce      	b.n	914 <CONFIG_ISR_STACK_SIZE+0x114>
		} else if (conv->width_present) {
     976:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     97a:	2a00      	cmp	r2, #0
		int width = -1;
     97c:	bfac      	ite	ge
     97e:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
     982:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
     986:	e6ba      	b.n	6fe <cbvprintf+0x162>
		} else if (conv->prec_present) {
     988:	079b      	lsls	r3, r3, #30
     98a:	f57f aec7 	bpl.w	71c <cbvprintf+0x180>
			precision = conv->prec_value;
     98e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
     992:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     994:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     998:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
     99c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
     9a0:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     9a4:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     9a6:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     9aa:	d136      	bne.n	a1a <CONFIG_ISR_STACK_SIZE+0x21a>
			switch (length_mod) {
     9ac:	1ed3      	subs	r3, r2, #3
     9ae:	2b04      	cmp	r3, #4
     9b0:	d820      	bhi.n	9f4 <CONFIG_ISR_STACK_SIZE+0x1f4>
     9b2:	e8df f003 	tbb	[pc, r3]
     9b6:	0703      	.short	0x0703
     9b8:	1f07      	.short	0x1f07
     9ba:	1f          	.byte	0x1f
     9bb:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     9bc:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
     9c0:	17c1      	asrs	r1, r0, #31
     9c2:	e004      	b.n	9ce <CONFIG_ISR_STACK_SIZE+0x1ce>
					(sint_value_type)va_arg(ap, intmax_t);
     9c4:	3407      	adds	r4, #7
     9c6:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     9ca:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
     9ce:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     9d2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     9d6:	f013 0603 	ands.w	r6, r3, #3
     9da:	d054      	beq.n	a86 <CONFIG_ISR_STACK_SIZE+0x286>
			OUTS(sp, fp);
     9dc:	463b      	mov	r3, r7
     9de:	4652      	mov	r2, sl
     9e0:	4659      	mov	r1, fp
     9e2:	9802      	ldr	r0, [sp, #8]
     9e4:	f007 ff6e 	bl	88c4 <outs>
     9e8:	2800      	cmp	r0, #0
     9ea:	f2c0 8143 	blt.w	c74 <CONFIG_ISR_STACK_SIZE+0x474>
     9ee:	4405      	add	r5, r0
			continue;
     9f0:	46ba      	mov	sl, r7
     9f2:	e5db      	b.n	5ac <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     9f4:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
     9f8:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     9fa:	ea4f 71e0 	mov.w	r1, r0, asr #31
     9fe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     a02:	d105      	bne.n	a10 <CONFIG_ISR_STACK_SIZE+0x210>
				value->uint = (unsigned char)value->uint;
     a04:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     a08:	930a      	str	r3, [sp, #40]	; 0x28
     a0a:	2300      	movs	r3, #0
     a0c:	930b      	str	r3, [sp, #44]	; 0x2c
     a0e:	e7e0      	b.n	9d2 <CONFIG_ISR_STACK_SIZE+0x1d2>
			} else if (length_mod == LENGTH_H) {
     a10:	2a02      	cmp	r2, #2
     a12:	d1de      	bne.n	9d2 <CONFIG_ISR_STACK_SIZE+0x1d2>
				value->sint = (short)value->sint;
     a14:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
     a18:	e7d2      	b.n	9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
		} else if (specifier_cat == SPECIFIER_UINT) {
     a1a:	2b02      	cmp	r3, #2
     a1c:	d123      	bne.n	a66 <CONFIG_ISR_STACK_SIZE+0x266>
			switch (length_mod) {
     a1e:	1ed3      	subs	r3, r2, #3
     a20:	2b04      	cmp	r3, #4
     a22:	d813      	bhi.n	a4c <CONFIG_ISR_STACK_SIZE+0x24c>
     a24:	e8df f003 	tbb	[pc, r3]
     a28:	120a0a03 	.word	0x120a0a03
     a2c:	12          	.byte	0x12
     a2d:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
     a2e:	2100      	movs	r1, #0
					value->uint = (wchar_t)va_arg(ap,
     a30:	6820      	ldr	r0, [r4, #0]
     a32:	1d23      	adds	r3, r4, #4
     a34:	900a      	str	r0, [sp, #40]	; 0x28
     a36:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     a38:	461c      	mov	r4, r3
     a3a:	e7ca      	b.n	9d2 <CONFIG_ISR_STACK_SIZE+0x1d2>
					(uint_value_type)va_arg(ap,
     a3c:	3407      	adds	r4, #7
     a3e:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
     a42:	e8f3 0102 	ldrd	r0, r1, [r3], #8
     a46:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
     a4a:	e7f5      	b.n	a38 <CONFIG_ISR_STACK_SIZE+0x238>
					(uint_value_type)va_arg(ap, size_t);
     a4c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     a50:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
     a52:	930a      	str	r3, [sp, #40]	; 0x28
     a54:	f04f 0300 	mov.w	r3, #0
     a58:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     a5a:	d0d3      	beq.n	a04 <CONFIG_ISR_STACK_SIZE+0x204>
			} else if (length_mod == LENGTH_H) {
     a5c:	2a02      	cmp	r2, #2
     a5e:	d1b8      	bne.n	9d2 <CONFIG_ISR_STACK_SIZE+0x1d2>
				value->uint = (unsigned short)value->uint;
     a60:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     a64:	e7d0      	b.n	a08 <CONFIG_ISR_STACK_SIZE+0x208>
		} else if (specifier_cat == SPECIFIER_FP) {
     a66:	2b04      	cmp	r3, #4
     a68:	d107      	bne.n	a7a <CONFIG_ISR_STACK_SIZE+0x27a>
			if (length_mod == LENGTH_UPPER_L) {
     a6a:	3407      	adds	r4, #7
     a6c:	f024 0407 	bic.w	r4, r4, #7
     a70:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
     a74:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
     a78:	e7ab      	b.n	9d2 <CONFIG_ISR_STACK_SIZE+0x1d2>
		} else if (specifier_cat == SPECIFIER_PTR) {
     a7a:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     a7c:	bf04      	itt	eq
     a7e:	f854 3b04 	ldreq.w	r3, [r4], #4
     a82:	930a      	streq	r3, [sp, #40]	; 0x28
     a84:	e7a5      	b.n	9d2 <CONFIG_ISR_STACK_SIZE+0x1d2>
		switch (conv->specifier) {
     a86:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     a8a:	2878      	cmp	r0, #120	; 0x78
     a8c:	d8b0      	bhi.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
     a8e:	2862      	cmp	r0, #98	; 0x62
     a90:	d822      	bhi.n	ad8 <CONFIG_ISR_STACK_SIZE+0x2d8>
     a92:	2825      	cmp	r0, #37	; 0x25
     a94:	f43f ad93 	beq.w	5be <cbvprintf+0x22>
     a98:	2858      	cmp	r0, #88	; 0x58
     a9a:	d1a9      	bne.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
			bps = encode_uint(value->uint, conv, buf, bpe);
     a9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     aa0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     aa4:	9300      	str	r3, [sp, #0]
     aa6:	aa0c      	add	r2, sp, #48	; 0x30
     aa8:	ab04      	add	r3, sp, #16
     aaa:	f007 fec0 	bl	882e <encode_uint>
     aae:	4682      	mov	sl, r0
			if (precision >= 0) {
     ab0:	f1b8 0f00 	cmp.w	r8, #0
     ab4:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     ab8:	db0c      	blt.n	ad4 <CONFIG_ISR_STACK_SIZE+0x2d4>
				conv->flag_zero = false;
     aba:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     abe:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     ac2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     ac6:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     ac8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     acc:	d902      	bls.n	ad4 <CONFIG_ISR_STACK_SIZE+0x2d4>
					conv->pad0_value = precision - (int)len;
     ace:	eba8 0303 	sub.w	r3, r8, r3
     ad2:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     ad4:	4680      	mov	r8, r0
     ad6:	e03d      	b.n	b54 <CONFIG_ISR_STACK_SIZE+0x354>
     ad8:	3863      	subs	r0, #99	; 0x63
     ada:	2815      	cmp	r0, #21
     adc:	d888      	bhi.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
     ade:	a101      	add	r1, pc, #4	; (adr r1, ae4 <CONFIG_ISR_STACK_SIZE+0x2e4>)
     ae0:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
     ae4:	00000b65 	.word	0x00000b65
     ae8:	00000bc9 	.word	0x00000bc9
     aec:	000009f1 	.word	0x000009f1
     af0:	000009f1 	.word	0x000009f1
     af4:	000009f1 	.word	0x000009f1
     af8:	000009f1 	.word	0x000009f1
     afc:	00000bc9 	.word	0x00000bc9
     b00:	000009f1 	.word	0x000009f1
     b04:	000009f1 	.word	0x000009f1
     b08:	000009f1 	.word	0x000009f1
     b0c:	000009f1 	.word	0x000009f1
     b10:	00000c27 	.word	0x00000c27
     b14:	00000bf5 	.word	0x00000bf5
     b18:	00000bf9 	.word	0x00000bf9
     b1c:	000009f1 	.word	0x000009f1
     b20:	000009f1 	.word	0x000009f1
     b24:	00000b3d 	.word	0x00000b3d
     b28:	000009f1 	.word	0x000009f1
     b2c:	00000bf5 	.word	0x00000bf5
     b30:	000009f1 	.word	0x000009f1
     b34:	000009f1 	.word	0x000009f1
     b38:	00000bf5 	.word	0x00000bf5
			if (precision >= 0) {
     b3c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     b40:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     b44:	db0a      	blt.n	b5c <CONFIG_ISR_STACK_SIZE+0x35c>
				len = strnlen(bps, precision);
     b46:	4641      	mov	r1, r8
     b48:	4650      	mov	r0, sl
     b4a:	f007 ff51 	bl	89f0 <strnlen>
		char sign = 0;
     b4e:	2600      	movs	r6, #0
			bpe = bps + len;
     b50:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
     b54:	f1ba 0f00 	cmp.w	sl, #0
     b58:	d10c      	bne.n	b74 <CONFIG_ISR_STACK_SIZE+0x374>
     b5a:	e749      	b.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
				len = strlen(bps);
     b5c:	4650      	mov	r0, sl
     b5e:	f007 ff40 	bl	89e2 <strlen>
     b62:	e7f4      	b.n	b4e <CONFIG_ISR_STACK_SIZE+0x34e>
			break;
     b64:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bpe = buf + 1;
     b68:	f10d 0811 	add.w	r8, sp, #17
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     b6c:	f88d 3010 	strb.w	r3, [sp, #16]
			bps = buf;
     b70:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
     b74:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     b78:	b106      	cbz	r6, b7c <CONFIG_ISR_STACK_SIZE+0x37c>
			nj_len += 1U;
     b7a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     b7c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     b80:	06d0      	lsls	r0, r2, #27
     b82:	d56b      	bpl.n	c5c <CONFIG_ISR_STACK_SIZE+0x45c>
			nj_len += 2U;
     b84:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     b86:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     b88:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     b8a:	bf48      	it	mi
     b8c:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     b8e:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     b90:	bf48      	it	mi
     b92:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     b94:	f1b9 0f00 	cmp.w	r9, #0
     b98:	dd79      	ble.n	c8e <CONFIG_ISR_STACK_SIZE+0x48e>
			if (!conv->flag_dash) {
     b9a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     b9e:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     ba2:	f3c2 0380 	ubfx	r3, r2, #2, #1
     ba6:	9303      	str	r3, [sp, #12]
     ba8:	0753      	lsls	r3, r2, #29
     baa:	d470      	bmi.n	c8e <CONFIG_ISR_STACK_SIZE+0x48e>
				if (conv->flag_zero) {
     bac:	0650      	lsls	r0, r2, #25
     bae:	d564      	bpl.n	c7a <CONFIG_ISR_STACK_SIZE+0x47a>
					if (sign != 0) {
     bb0:	b146      	cbz	r6, bc4 <CONFIG_ISR_STACK_SIZE+0x3c4>
						OUTC(sign);
     bb2:	4659      	mov	r1, fp
     bb4:	4630      	mov	r0, r6
     bb6:	9b02      	ldr	r3, [sp, #8]
     bb8:	4798      	blx	r3
     bba:	2800      	cmp	r0, #0
     bbc:	db5a      	blt.n	c74 <CONFIG_ISR_STACK_SIZE+0x474>
						sign = 0;
     bbe:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     bc0:	3501      	adds	r5, #1
						sign = 0;
     bc2:	461e      	mov	r6, r3
					pad = '0';
     bc4:	2330      	movs	r3, #48	; 0x30
     bc6:	e059      	b.n	c7c <CONFIG_ISR_STACK_SIZE+0x47c>
			if (conv->flag_plus) {
     bc8:	071e      	lsls	r6, r3, #28
     bca:	d411      	bmi.n	bf0 <CONFIG_ISR_STACK_SIZE+0x3f0>
				sign = ' ';
     bcc:	f013 0610 	ands.w	r6, r3, #16
     bd0:	bf18      	it	ne
     bd2:	2620      	movne	r6, #32
			sint = value->sint;
     bd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
     bd8:	2a00      	cmp	r2, #0
     bda:	f173 0100 	sbcs.w	r1, r3, #0
     bde:	f6bf af5d 	bge.w	a9c <CONFIG_ISR_STACK_SIZE+0x29c>
				value->uint = (uint_value_type)-sint;
     be2:	4252      	negs	r2, r2
     be4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
     be8:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
     bea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
     bee:	e755      	b.n	a9c <CONFIG_ISR_STACK_SIZE+0x29c>
				sign = '+';
     bf0:	262b      	movs	r6, #43	; 0x2b
     bf2:	e7ef      	b.n	bd4 <CONFIG_ISR_STACK_SIZE+0x3d4>
		switch (conv->specifier) {
     bf4:	2600      	movs	r6, #0
     bf6:	e751      	b.n	a9c <CONFIG_ISR_STACK_SIZE+0x29c>
			if (value->ptr != NULL) {
     bf8:	980a      	ldr	r0, [sp, #40]	; 0x28
     bfa:	b348      	cbz	r0, c50 <CONFIG_ISR_STACK_SIZE+0x450>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     bfc:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     c00:	9300      	str	r3, [sp, #0]
     c02:	2100      	movs	r1, #0
     c04:	ab04      	add	r3, sp, #16
     c06:	aa0c      	add	r2, sp, #48	; 0x30
     c08:	f007 fe11 	bl	882e <encode_uint>
				conv->altform_0c = true;
     c0c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
     c10:	4682      	mov	sl, r0
				conv->altform_0c = true;
     c12:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     c16:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     c1a:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
     c1e:	2600      	movs	r6, #0
				conv->altform_0c = true;
     c20:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
     c24:	e744      	b.n	ab0 <CONFIG_ISR_STACK_SIZE+0x2b0>
				store_count(conv, value->ptr, count);
     c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
     c28:	2a07      	cmp	r2, #7
     c2a:	f63f aee1 	bhi.w	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
     c2e:	e8df f002 	tbb	[pc, r2]
     c32:	040d      	.short	0x040d
     c34:	08080d06 	.word	0x08080d06
     c38:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
     c3a:	701d      	strb	r5, [r3, #0]
		break;
     c3c:	e6d8      	b.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
		*(short *)dp = (short)count;
     c3e:	801d      	strh	r5, [r3, #0]
		break;
     c40:	e6d6      	b.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
		*(intmax_t *)dp = (intmax_t)count;
     c42:	4628      	mov	r0, r5
     c44:	17e9      	asrs	r1, r5, #31
     c46:	e9c3 0100 	strd	r0, r1, [r3]
		break;
     c4a:	e6d1      	b.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     c4c:	601d      	str	r5, [r3, #0]
		break;
     c4e:	e6cf      	b.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
			bpe = bps + 5;
     c50:	f8df 80c4 	ldr.w	r8, [pc, #196]	; d18 <CONFIG_ISR_STACK_SIZE+0x518>
     c54:	4606      	mov	r6, r0
			bps = "(nil)";
     c56:	f1a8 0a05 	sub.w	sl, r8, #5
     c5a:	e78b      	b.n	b74 <CONFIG_ISR_STACK_SIZE+0x374>
		} else if (conv->altform_0) {
     c5c:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     c5e:	bf48      	it	mi
     c60:	3301      	addmi	r3, #1
     c62:	e790      	b.n	b86 <CONFIG_ISR_STACK_SIZE+0x386>
					OUTC(pad);
     c64:	4618      	mov	r0, r3
     c66:	9303      	str	r3, [sp, #12]
     c68:	4659      	mov	r1, fp
     c6a:	9b02      	ldr	r3, [sp, #8]
     c6c:	4798      	blx	r3
     c6e:	2800      	cmp	r0, #0
     c70:	9b03      	ldr	r3, [sp, #12]
     c72:	da04      	bge.n	c7e <CONFIG_ISR_STACK_SIZE+0x47e>
#undef OUTS
#undef OUTC
}
     c74:	b011      	add	sp, #68	; 0x44
     c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     c7a:	2320      	movs	r3, #32
     c7c:	444d      	add	r5, r9
     c7e:	464a      	mov	r2, r9
				while (width-- > 0) {
     c80:	2a00      	cmp	r2, #0
     c82:	eba5 0109 	sub.w	r1, r5, r9
     c86:	f109 39ff 	add.w	r9, r9, #4294967295
     c8a:	dceb      	bgt.n	c64 <CONFIG_ISR_STACK_SIZE+0x464>
     c8c:	460d      	mov	r5, r1
		if (sign != 0) {
     c8e:	b136      	cbz	r6, c9e <CONFIG_ISR_STACK_SIZE+0x49e>
			OUTC(sign);
     c90:	4659      	mov	r1, fp
     c92:	4630      	mov	r0, r6
     c94:	9b02      	ldr	r3, [sp, #8]
     c96:	4798      	blx	r3
     c98:	2800      	cmp	r0, #0
     c9a:	dbeb      	blt.n	c74 <CONFIG_ISR_STACK_SIZE+0x474>
     c9c:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     c9e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     ca2:	06d9      	lsls	r1, r3, #27
     ca4:	d401      	bmi.n	caa <CONFIG_ISR_STACK_SIZE+0x4aa>
     ca6:	071a      	lsls	r2, r3, #28
     ca8:	d506      	bpl.n	cb8 <CONFIG_ISR_STACK_SIZE+0x4b8>
				OUTC('0');
     caa:	4659      	mov	r1, fp
     cac:	2030      	movs	r0, #48	; 0x30
     cae:	9b02      	ldr	r3, [sp, #8]
     cb0:	4798      	blx	r3
     cb2:	2800      	cmp	r0, #0
     cb4:	dbde      	blt.n	c74 <CONFIG_ISR_STACK_SIZE+0x474>
     cb6:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     cb8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     cbc:	06db      	lsls	r3, r3, #27
     cbe:	d507      	bpl.n	cd0 <CONFIG_ISR_STACK_SIZE+0x4d0>
				OUTC(conv->specifier);
     cc0:	4659      	mov	r1, fp
     cc2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     cc6:	9b02      	ldr	r3, [sp, #8]
     cc8:	4798      	blx	r3
     cca:	2800      	cmp	r0, #0
     ccc:	dbd2      	blt.n	c74 <CONFIG_ISR_STACK_SIZE+0x474>
     cce:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     cd0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
     cd2:	442e      	add	r6, r5
     cd4:	1b73      	subs	r3, r6, r5
     cd6:	2b00      	cmp	r3, #0
     cd8:	dc16      	bgt.n	d08 <CONFIG_ISR_STACK_SIZE+0x508>
			OUTS(bps, bpe);
     cda:	4643      	mov	r3, r8
     cdc:	4652      	mov	r2, sl
     cde:	4659      	mov	r1, fp
     ce0:	9802      	ldr	r0, [sp, #8]
     ce2:	f007 fdef 	bl	88c4 <outs>
     ce6:	2800      	cmp	r0, #0
     ce8:	dbc4      	blt.n	c74 <CONFIG_ISR_STACK_SIZE+0x474>
     cea:	4405      	add	r5, r0
		while (width > 0) {
     cec:	44a9      	add	r9, r5
     cee:	eba9 0305 	sub.w	r3, r9, r5
     cf2:	2b00      	cmp	r3, #0
     cf4:	f77f ae7c 	ble.w	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
			OUTC(' ');
     cf8:	4659      	mov	r1, fp
     cfa:	2020      	movs	r0, #32
     cfc:	9b02      	ldr	r3, [sp, #8]
     cfe:	4798      	blx	r3
     d00:	2800      	cmp	r0, #0
     d02:	dbb7      	blt.n	c74 <CONFIG_ISR_STACK_SIZE+0x474>
     d04:	3501      	adds	r5, #1
			--width;
     d06:	e7f2      	b.n	cee <CONFIG_ISR_STACK_SIZE+0x4ee>
				OUTC('0');
     d08:	4659      	mov	r1, fp
     d0a:	2030      	movs	r0, #48	; 0x30
     d0c:	9b02      	ldr	r3, [sp, #8]
     d0e:	4798      	blx	r3
     d10:	2800      	cmp	r0, #0
     d12:	dbaf      	blt.n	c74 <CONFIG_ISR_STACK_SIZE+0x474>
     d14:	3501      	adds	r5, #1
     d16:	e7dd      	b.n	cd4 <CONFIG_ISR_STACK_SIZE+0x4d4>
     d18:	00009711 	.word	0x00009711

00000d1c <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
     d1c:	4604      	mov	r4, r0
     d1e:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     d20:	f04f 0220 	mov.w	r2, #32
     d24:	f3ef 8311 	mrs	r3, BASEPRI
     d28:	f382 8812 	msr	BASEPRI_MAX, r2
     d2c:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();
     d30:	f002 f98e 	bl	3050 <sys_clock_disable>

	sys_arch_reboot(type);
     d34:	4620      	mov	r0, r4
     d36:	f001 f8c3 	bl	1ec0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     d3a:	4803      	ldr	r0, [pc, #12]	; (d48 <sys_reboot+0x2c>)
     d3c:	f007 fd4d 	bl	87da <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     d40:	f000 fc90 	bl	1664 <arch_cpu_idle>
     d44:	e7fc      	b.n	d40 <sys_reboot+0x24>
     d46:	bf00      	nop
     d48:	00009712 	.word	0x00009712

00000d4c <nordicsemi_nrf91_init>:
     d4c:	f04f 0220 	mov.w	r2, #32
     d50:	f3ef 8311 	mrs	r3, BASEPRI
     d54:	f382 8812 	msr	BASEPRI_MAX, r2
     d58:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     d5c:	2101      	movs	r1, #1
     d5e:	4a04      	ldr	r2, [pc, #16]	; (d70 <nordicsemi_nrf91_init+0x24>)
     d60:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     d64:	f383 8811 	msr	BASEPRI, r3
     d68:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     d6c:	2000      	movs	r0, #0
     d6e:	4770      	bx	lr
     d70:	50039000 	.word	0x50039000

00000d74 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     d74:	b120      	cbz	r0, d80 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
     d76:	4b03      	ldr	r3, [pc, #12]	; (d84 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
     d78:	0180      	lsls	r0, r0, #6
     d7a:	f043 0301 	orr.w	r3, r3, #1
     d7e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
     d80:	4770      	bx	lr
     d82:	bf00      	nop
     d84:	00009310 	.word	0x00009310

00000d88 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
     d88:	b084      	sub	sp, #16
     d8a:	ab04      	add	r3, sp, #16
     d8c:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
     d90:	f89d 3004 	ldrb.w	r3, [sp, #4]
     d94:	2b06      	cmp	r3, #6
     d96:	d107      	bne.n	da8 <pm_power_state_set+0x20>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
     d98:	2201      	movs	r2, #1
     d9a:	4b04      	ldr	r3, [pc, #16]	; (dac <pm_power_state_set+0x24>)
     d9c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     da0:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
     da4:	bf20      	wfe
    while (true)
     da6:	e7fd      	b.n	da4 <pm_power_state_set+0x1c>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
     da8:	b004      	add	sp, #16
     daa:	4770      	bx	lr
     dac:	50004000 	.word	0x50004000

00000db0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     db4:	4605      	mov	r5, r0
	__asm__ volatile(
     db6:	f04f 0320 	mov.w	r3, #32
     dba:	f3ef 8611 	mrs	r6, BASEPRI
     dbe:	f383 8812 	msr	BASEPRI_MAX, r3
     dc2:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     dc6:	481e      	ldr	r0, [pc, #120]	; (e40 <pm_state_notify+0x90>)
     dc8:	f003 faa4 	bl	4314 <z_spin_lock_valid>
     dcc:	b940      	cbnz	r0, de0 <pm_state_notify+0x30>
     dce:	491d      	ldr	r1, [pc, #116]	; (e44 <pm_state_notify+0x94>)
     dd0:	481d      	ldr	r0, [pc, #116]	; (e48 <pm_state_notify+0x98>)
     dd2:	2281      	movs	r2, #129	; 0x81
     dd4:	f007 fd01 	bl	87da <printk>
     dd8:	2181      	movs	r1, #129	; 0x81
     dda:	481a      	ldr	r0, [pc, #104]	; (e44 <pm_state_notify+0x94>)
     ddc:	f007 fd88 	bl	88f0 <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
     de0:	4817      	ldr	r0, [pc, #92]	; (e40 <pm_state_notify+0x90>)
     de2:	f003 fab3 	bl	434c <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     de6:	4b19      	ldr	r3, [pc, #100]	; (e4c <pm_state_notify+0x9c>)
     de8:	681c      	ldr	r4, [r3, #0]
     dea:	2c00      	cmp	r4, #0
     dec:	bf38      	it	cc
     dee:	2400      	movcc	r4, #0
     df0:	b19c      	cbz	r4, e1a <pm_state_notify+0x6a>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
     df2:	f04f 090c 	mov.w	r9, #12
     df6:	4f16      	ldr	r7, [pc, #88]	; (e50 <pm_state_notify+0xa0>)
     df8:	f8df 8058 	ldr.w	r8, [pc, #88]	; e54 <pm_state_notify+0xa4>
			callback = notifier->state_exit;
     dfc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
     e00:	2d00      	cmp	r5, #0
     e02:	bf08      	it	eq
     e04:	4613      	moveq	r3, r2
		if (callback) {
     e06:	b12b      	cbz	r3, e14 <pm_state_notify+0x64>
			callback(z_power_states[_current_cpu->id].state);
     e08:	f898 2014 	ldrb.w	r2, [r8, #20]
     e0c:	fb09 f202 	mul.w	r2, r9, r2
     e10:	5cb8      	ldrb	r0, [r7, r2]
     e12:	4798      	blx	r3
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     e14:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     e16:	2c00      	cmp	r4, #0
     e18:	d1f0      	bne.n	dfc <pm_state_notify+0x4c>
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     e1a:	4809      	ldr	r0, [pc, #36]	; (e40 <pm_state_notify+0x90>)
     e1c:	f003 fa88 	bl	4330 <z_spin_unlock_valid>
     e20:	b940      	cbnz	r0, e34 <pm_state_notify+0x84>
     e22:	4908      	ldr	r1, [pc, #32]	; (e44 <pm_state_notify+0x94>)
     e24:	4808      	ldr	r0, [pc, #32]	; (e48 <pm_state_notify+0x98>)
     e26:	22ac      	movs	r2, #172	; 0xac
     e28:	f007 fcd7 	bl	87da <printk>
     e2c:	21ac      	movs	r1, #172	; 0xac
     e2e:	4805      	ldr	r0, [pc, #20]	; (e44 <pm_state_notify+0x94>)
     e30:	f007 fd5e 	bl	88f0 <assert_post_action>
	__asm__ volatile(
     e34:	f386 8811 	msr	BASEPRI, r6
     e38:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     e3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     e40:	20000298 	.word	0x20000298
     e44:	0000973f 	.word	0x0000973f
     e48:	00009765 	.word	0x00009765
     e4c:	2000029c 	.word	0x2000029c
     e50:	200002a8 	.word	0x200002a8
     e54:	20000a30 	.word	0x20000a30

00000e58 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     e58:	2201      	movs	r2, #1
     e5a:	f000 031f 	and.w	r3, r0, #31
     e5e:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
     e60:	4b08      	ldr	r3, [pc, #32]	; (e84 <atomic_test_and_set_bit.constprop.0+0x2c>)
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
     e62:	0940      	lsrs	r0, r0, #5
     e64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     e68:	e8d0 3fef 	ldaex	r3, [r0]
     e6c:	ea43 0102 	orr.w	r1, r3, r2
     e70:	e8c0 1fec 	stlex	ip, r1, [r0]
     e74:	f1bc 0f00 	cmp.w	ip, #0
     e78:	d1f6      	bne.n	e68 <atomic_test_and_set_bit.constprop.0+0x10>

	return (old & mask) != 0;
     e7a:	421a      	tst	r2, r3
}
     e7c:	bf14      	ite	ne
     e7e:	2001      	movne	r0, #1
     e80:	2000      	moveq	r0, #0
     e82:	4770      	bx	lr
     e84:	200002b4 	.word	0x200002b4

00000e88 <pm_system_resume>:
	atomic_val_t mask = ATOMIC_MASK(bit);
     e88:	2201      	movs	r2, #1

void pm_system_resume(void)
{
     e8a:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
     e8c:	4b1a      	ldr	r3, [pc, #104]	; (ef8 <pm_system_resume+0x70>)
{
     e8e:	b085      	sub	sp, #20
	uint8_t id = _current_cpu->id;
     e90:	7d1d      	ldrb	r5, [r3, #20]
     e92:	f005 031f 	and.w	r3, r5, #31
     e96:	409a      	lsls	r2, r3
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     e98:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     e9a:	4b18      	ldr	r3, [pc, #96]	; (efc <pm_system_resume+0x74>)
     e9c:	0969      	lsrs	r1, r5, #5
     e9e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     ea2:	e8d3 1fef 	ldaex	r1, [r3]
     ea6:	ea01 0400 	and.w	r4, r1, r0
     eaa:	e8c3 4fec 	stlex	ip, r4, [r3]
     eae:	f1bc 0f00 	cmp.w	ip, #0
     eb2:	d1f6      	bne.n	ea2 <pm_system_resume+0x1a>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     eb4:	4211      	tst	r1, r2
     eb6:	d017      	beq.n	ee8 <pm_system_resume+0x60>
		exit_pos_ops(z_power_states[id]);
     eb8:	220c      	movs	r2, #12
     eba:	4c11      	ldr	r4, [pc, #68]	; (f00 <pm_system_resume+0x78>)
     ebc:	ab01      	add	r3, sp, #4
     ebe:	fb02 4205 	mla	r2, r2, r5, r4
     ec2:	ca07      	ldmia	r2, {r0, r1, r2}
     ec4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
     ec8:	4a0e      	ldr	r2, [pc, #56]	; (f04 <pm_system_resume+0x7c>)
     eca:	b17a      	cbz	r2, eec <pm_system_resume+0x64>
		pm_power_state_exit_post_ops(info);
     ecc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     ed0:	f007 fd16 	bl	8900 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
     ed4:	2000      	movs	r0, #0
     ed6:	f7ff ff6b 	bl	db0 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
     eda:	230c      	movs	r3, #12
     edc:	2200      	movs	r2, #0
     ede:	436b      	muls	r3, r5
     ee0:	18e1      	adds	r1, r4, r3
     ee2:	50e2      	str	r2, [r4, r3]
     ee4:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
     ee8:	b005      	add	sp, #20
     eea:	bd30      	pop	{r4, r5, pc}
     eec:	f382 8811 	msr	BASEPRI, r2
     ef0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
     ef4:	e7ee      	b.n	ed4 <pm_system_resume+0x4c>
     ef6:	bf00      	nop
     ef8:	20000a30 	.word	0x20000a30
     efc:	200002a4 	.word	0x200002a4
     f00:	200002a8 	.word	0x200002a8
     f04:	00008901 	.word	0x00008901

00000f08 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
     f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
     f0c:	4b33      	ldr	r3, [pc, #204]	; (fdc <pm_system_suspend+0xd4>)
{
     f0e:	4607      	mov	r7, r0
	uint8_t id = _current_cpu->id;
     f10:	7d1c      	ldrb	r4, [r3, #20]
{
     f12:	b088      	sub	sp, #32

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
     f14:	4620      	mov	r0, r4
     f16:	f7ff ff9f 	bl	e58 <atomic_test_and_set_bit.constprop.0>
     f1a:	f8df 80d8 	ldr.w	r8, [pc, #216]	; ff4 <pm_system_suspend+0xec>
     f1e:	b960      	cbnz	r0, f3a <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
     f20:	250c      	movs	r5, #12
     f22:	466e      	mov	r6, sp
     f24:	fb05 8504 	mla	r5, r5, r4, r8
     f28:	463a      	mov	r2, r7
     f2a:	4621      	mov	r1, r4
     f2c:	4630      	mov	r0, r6
     f2e:	f007 fcff 	bl	8930 <pm_policy_next_state>
     f32:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
     f36:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
     f3a:	230c      	movs	r3, #12
     f3c:	4363      	muls	r3, r4
     f3e:	f818 0003 	ldrb.w	r0, [r8, r3]
     f42:	eb08 0203 	add.w	r2, r8, r3
     f46:	0965      	lsrs	r5, r4, #5
     f48:	f004 061f 	and.w	r6, r4, #31
     f4c:	b3a8      	cbz	r0, fba <pm_system_suspend+0xb2>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
     f4e:	1c7b      	adds	r3, r7, #1
     f50:	d00f      	beq.n	f72 <pm_system_suspend+0x6a>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
     f52:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
     f56:	2100      	movs	r1, #0
     f58:	f8d2 e008 	ldr.w	lr, [r2, #8]
     f5c:	4820      	ldr	r0, [pc, #128]	; (fe0 <pm_system_suspend+0xd8>)
     f5e:	2300      	movs	r3, #0
     f60:	fbec 010e 	umlal	r0, r1, ip, lr
     f64:	4a1f      	ldr	r2, [pc, #124]	; (fe4 <pm_system_suspend+0xdc>)
     f66:	f7ff f969 	bl	23c <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
     f6a:	2101      	movs	r1, #1
     f6c:	1a38      	subs	r0, r7, r0
     f6e:	f004 fd21 	bl	59b4 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
     f72:	f003 fccf 	bl	4914 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
     f76:	2001      	movs	r0, #1
     f78:	f7ff ff1a 	bl	db0 <pm_state_notify>
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     f7c:	2201      	movs	r2, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
     f7e:	4b1a      	ldr	r3, [pc, #104]	; (fe8 <pm_system_suspend+0xe0>)
     f80:	40b2      	lsls	r2, r6
     f82:	eb03 0385 	add.w	r3, r3, r5, lsl #2
     f86:	e8d3 1fef 	ldaex	r1, [r3]
     f8a:	4311      	orrs	r1, r2
     f8c:	e8c3 1fe0 	stlex	r0, r1, [r3]
     f90:	2800      	cmp	r0, #0
     f92:	d1f8      	bne.n	f86 <pm_system_suspend+0x7e>
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
     f94:	230c      	movs	r3, #12
     f96:	fb03 8404 	mla	r4, r3, r4, r8
     f9a:	ab05      	add	r3, sp, #20
     f9c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
     fa0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
     fa4:	4a11      	ldr	r2, [pc, #68]	; (fec <pm_system_suspend+0xe4>)
     fa6:	b11a      	cbz	r2, fb0 <pm_system_suspend+0xa8>
		pm_power_state_set(info);
     fa8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     fac:	f7ff feec 	bl	d88 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
     fb0:	f7ff ff6a 	bl	e88 <pm_system_resume>
	k_sched_unlock();
     fb4:	f004 f8e4 	bl	5180 <k_sched_unlock>
	bool ret = true;
     fb8:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
     fba:	2301      	movs	r3, #1
     fbc:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     fbe:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     fc0:	4a0b      	ldr	r2, [pc, #44]	; (ff0 <pm_system_suspend+0xe8>)
     fc2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
     fc6:	e8d5 2fef 	ldaex	r2, [r5]
     fca:	401a      	ands	r2, r3
     fcc:	e8c5 2fe1 	stlex	r1, r2, [r5]
     fd0:	2900      	cmp	r1, #0
     fd2:	d1f8      	bne.n	fc6 <pm_system_suspend+0xbe>
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
     fd4:	b008      	add	sp, #32
     fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     fda:	bf00      	nop
     fdc:	20000a30 	.word	0x20000a30
     fe0:	000f423f 	.word	0x000f423f
     fe4:	000f4240 	.word	0x000f4240
     fe8:	200002a4 	.word	0x200002a4
     fec:	00000d89 	.word	0x00000d89
     ff0:	200002b4 	.word	0x200002b4
     ff4:	200002a8 	.word	0x200002a8

00000ff8 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     ff8:	2800      	cmp	r0, #0
     ffa:	db0d      	blt.n	1018 <CONFIG_MAIN_STACK_SIZE+0x18>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ffc:	2201      	movs	r2, #1
     ffe:	0943      	lsrs	r3, r0, #5
    1000:	f000 001f 	and.w	r0, r0, #31
    1004:	fa02 f000 	lsl.w	r0, r2, r0
    1008:	4a04      	ldr	r2, [pc, #16]	; (101c <CONFIG_MAIN_STACK_SIZE+0x1c>)
    100a:	3320      	adds	r3, #32
    100c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1010:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1014:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    1018:	4770      	bx	lr
    101a:	bf00      	nop
    101c:	e000e100 	.word	0xe000e100

00001020 <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, uint32_t perm)
{
    1020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
    1022:	2800      	cmp	r0, #0
{
    1024:	461c      	mov	r4, r3
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
    1026:	bf14      	ite	ne
    1028:	f44f 5300 	movne.w	r3, #8192	; 0x2000
    102c:	f44f 4300 	moveq.w	r3, #32768	; 0x8000

	__ASSERT_NO_MSG(end >= start);
    1030:	428a      	cmp	r2, r1
    1032:	d20b      	bcs.n	104c <config_regions+0x2c>
    1034:	2294      	movs	r2, #148	; 0x94
    1036:	4927      	ldr	r1, [pc, #156]	; (10d4 <config_regions+0xb4>)
    1038:	4827      	ldr	r0, [pc, #156]	; (10d8 <config_regions+0xb8>)
    103a:	f007 fbce 	bl	87da <printk>
    103e:	2194      	movs	r1, #148	; 0x94
    1040:	4824      	ldr	r0, [pc, #144]	; (10d4 <config_regions+0xb4>)
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
	PRINT("\n");
}
    1042:	b003      	add	sp, #12
    1044:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(end >= start);
    1048:	f007 bc52 	b.w	88f0 <assert_post_action>
	if (end <= start) {
    104c:	d040      	beq.n	10d0 <config_regions+0xb0>
    104e:	460d      	mov	r5, r1
    1050:	4e22      	ldr	r6, [pc, #136]	; (10dc <config_regions+0xbc>)
		if (ram) {
    1052:	2800      	cmp	r0, #0
    1054:	d039      	beq.n	10ca <config_regions+0xaa>
			NRF_SPU->RAMREGION[i].PERM = perm;
    1056:	f505 77e0 	add.w	r7, r5, #448	; 0x1c0
	for (size_t i = start; i < end; i++) {
    105a:	3501      	adds	r5, #1
    105c:	42aa      	cmp	r2, r5
			NRF_SPU->FLASHREGION[i].PERM = perm;
    105e:	f846 4027 	str.w	r4, [r6, r7, lsl #2]
	for (size_t i = start; i < end; i++) {
    1062:	d8f6      	bhi.n	1052 <config_regions+0x32>
	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
    1064:	fb02 f003 	mul.w	r0, r2, r3
    1068:	3a01      	subs	r2, #1
    106a:	434b      	muls	r3, r1
    106c:	9000      	str	r0, [sp, #0]
    106e:	481c      	ldr	r0, [pc, #112]	; (10e0 <config_regions+0xc0>)
    1070:	f007 fbb3 	bl	87da <printk>
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
    1074:	4b1b      	ldr	r3, [pc, #108]	; (10e4 <config_regions+0xc4>)
    1076:	f014 0f10 	tst.w	r4, #16
    107a:	491b      	ldr	r1, [pc, #108]	; (10e8 <config_regions+0xc8>)
    107c:	481b      	ldr	r0, [pc, #108]	; (10ec <config_regions+0xcc>)
    107e:	bf08      	it	eq
    1080:	4619      	moveq	r1, r3
    1082:	f007 fbaa 	bl	87da <printk>
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
    1086:	f014 0f04 	tst.w	r4, #4
    108a:	bf14      	ite	ne
    108c:	2172      	movne	r1, #114	; 0x72
    108e:	212d      	moveq	r1, #45	; 0x2d
    1090:	4817      	ldr	r0, [pc, #92]	; (10f0 <config_regions+0xd0>)
    1092:	f007 fba2 	bl	87da <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
    1096:	f014 0f02 	tst.w	r4, #2
    109a:	bf14      	ite	ne
    109c:	2177      	movne	r1, #119	; 0x77
    109e:	212d      	moveq	r1, #45	; 0x2d
    10a0:	4813      	ldr	r0, [pc, #76]	; (10f0 <config_regions+0xd0>)
    10a2:	f007 fb9a 	bl	87da <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
    10a6:	f014 0f01 	tst.w	r4, #1
    10aa:	bf0c      	ite	eq
    10ac:	212d      	moveq	r1, #45	; 0x2d
    10ae:	2178      	movne	r1, #120	; 0x78
    10b0:	480f      	ldr	r0, [pc, #60]	; (10f0 <config_regions+0xd0>)
    10b2:	f007 fb92 	bl	87da <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
    10b6:	216c      	movs	r1, #108	; 0x6c
    10b8:	480d      	ldr	r0, [pc, #52]	; (10f0 <config_regions+0xd0>)
    10ba:	f007 fb8e 	bl	87da <printk>
	PRINT("\n");
    10be:	480d      	ldr	r0, [pc, #52]	; (10f4 <config_regions+0xd4>)
}
    10c0:	b003      	add	sp, #12
    10c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
    10c6:	f007 bb88 	b.w	87da <printk>
			NRF_SPU->FLASHREGION[i].PERM = perm;
    10ca:	f505 77c0 	add.w	r7, r5, #384	; 0x180
    10ce:	e7c4      	b.n	105a <config_regions+0x3a>
}
    10d0:	b003      	add	sp, #12
    10d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10d4:	00009795 	.word	0x00009795
    10d8:	00009765 	.word	0x00009765
    10dc:	50003000 	.word	0x50003000
    10e0:	000097b6 	.word	0x000097b6
    10e4:	00009789 	.word	0x00009789
    10e8:	00009780 	.word	0x00009780
    10ec:	00009967 	.word	0x00009967
    10f0:	000097d0 	.word	0x000097d0
    10f4:	0000a479 	.word	0x0000a479

000010f8 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
    10f8:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	uint32_t *vtor_ns = (uint32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    10fa:	f44f 3480 	mov.w	r4, #65536	; 0x10000
{
    10fe:	b085      	sub	sp, #20
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
    1100:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1104:	4825      	ldr	r0, [pc, #148]	; (119c <spm_jump+0xa4>)
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
    1106:	4d26      	ldr	r5, [pc, #152]	; (11a0 <spm_jump+0xa8>)
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
    1108:	f007 fb67 	bl	87da <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    110c:	6821      	ldr	r1, [r4, #0]
    110e:	4825      	ldr	r0, [pc, #148]	; (11a4 <spm_jump+0xac>)
    1110:	f007 fb63 	bl	87da <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
    1114:	6829      	ldr	r1, [r5, #0]
    1116:	4824      	ldr	r0, [pc, #144]	; (11a8 <spm_jump+0xb0>)
    1118:	f007 fb5f 	bl	87da <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    111c:	2210      	movs	r2, #16
    111e:	2100      	movs	r1, #0
    1120:	4668      	mov	r0, sp
    1122:	f007 fca0 	bl	8a66 <memset>
		.vtor_ns = (uint32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
    1126:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
    1128:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    112a:	9300      	str	r3, [sp, #0]
    112c:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
    112e:	f000 ff21 	bl	1f74 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
    1132:	2001      	movs	r0, #1
    1134:	f000 ff50 	bl	1fd8 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
    1138:	2000      	movs	r0, #0
    113a:	f000 ff39 	bl	1fb0 <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
    113e:	2000      	movs	r0, #0
    1140:	f000 ff5e 	bl	2000 <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
    1144:	2101      	movs	r1, #1
    1146:	2000      	movs	r0, #0
    1148:	f000 ff78 	bl	203c <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
    114c:	f000 ff6c 	bl	2028 <tz_nonsecure_fpu_access_enable>
	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
    1150:	4816      	ldr	r0, [pc, #88]	; (11ac <spm_jump+0xb4>)
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    1152:	682c      	ldr	r4, [r5, #0]
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
    1154:	f007 fb41 	bl	87da <printk>
	NVIC_DisableIRQ(id);
    1158:	2008      	movs	r0, #8
    115a:	f7ff ff4d 	bl	ff8 <__NVIC_DisableIRQ>
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    115e:	4a14      	ldr	r2, [pc, #80]	; (11b0 <spm_jump+0xb8>)
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    1160:	f024 0401 	bic.w	r4, r4, #1
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    1164:	f8d2 3820 	ldr.w	r3, [r2, #2080]	; 0x820
	return present && (usel || split);
    1168:	2b00      	cmp	r3, #0
    116a:	da07      	bge.n	117c <spm_jump+0x84>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
    116c:	f003 0303 	and.w	r3, r3, #3
	return present && (usel || split);
    1170:	3b02      	subs	r3, #2
    1172:	2b01      	cmp	r3, #1
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
    1174:	bf9c      	itt	ls
    1176:	4b0f      	ldrls	r3, [pc, #60]	; (11b4 <spm_jump+0xbc>)
    1178:	f8c2 3820 	strls.w	r3, [r2, #2080]	; 0x820
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
    117c:	2101      	movs	r1, #1
    117e:	2008      	movs	r0, #8
    1180:	f007 fbe7 	bl	8952 <irq_target_state_set>
  __ASM volatile ("dsb 0xF":::"memory");
    1184:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1188:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
    118c:	0864      	lsrs	r4, r4, #1
    118e:	0064      	lsls	r4, r4, #1
    1190:	4620      	mov	r0, r4
    1192:	4621      	mov	r1, r4
    1194:	4622      	mov	r2, r4
    1196:	4623      	mov	r3, r4
    1198:	f7ff f9ce 	bl	538 <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
    119c:	000097d3 	.word	0x000097d3
    11a0:	00010004 	.word	0x00010004
    11a4:	000097ea 	.word	0x000097ea
    11a8:	000097ff 	.word	0x000097ff
    11ac:	0000981d 	.word	0x0000981d
    11b0:	50003000 	.word	0x50003000
    11b4:	80000100 	.word	0x80000100

000011b8 <spm_config>:
		      (uint32_t)reset_ns);
	}
}

void spm_config(void)
{
    11b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
    11bc:	4860      	ldr	r0, [pc, #384]	; (1340 <spm_config+0x188>)
    11be:	f007 fb0c 	bl	87da <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
    11c2:	2100      	movs	r1, #0
    11c4:	f240 1317 	movw	r3, #279	; 0x117
    11c8:	4608      	mov	r0, r1
    11ca:	2202      	movs	r2, #2
    11cc:	f7ff ff28 	bl	1020 <config_regions>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    11d0:	4d5c      	ldr	r5, [pc, #368]	; (1344 <spm_config+0x18c>)
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
    11d2:	f240 1307 	movw	r3, #263	; 0x107
    11d6:	2220      	movs	r2, #32
    11d8:	2102      	movs	r1, #2
    11da:	2000      	movs	r0, #0
    11dc:	f7ff ff20 	bl	1020 <config_regions>
	PRINT("\n");
    11e0:	4859      	ldr	r0, [pc, #356]	; (1348 <spm_config+0x190>)
    11e2:	f007 fafa 	bl	87da <printk>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    11e6:	f3c5 040e 	ubfx	r4, r5, #0, #15
	__ASSERT((uint32_t)__sg_size <= nsc_size,
    11ea:	4b58      	ldr	r3, [pc, #352]	; (134c <spm_config+0x194>)
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    11ec:	f5c4 4400 	rsb	r4, r4, #32768	; 0x8000
	__ASSERT((uint32_t)__sg_size <= nsc_size,
    11f0:	429c      	cmp	r4, r3
    11f2:	d208      	bcs.n	1206 <spm_config+0x4e>
    11f4:	4956      	ldr	r1, [pc, #344]	; (1350 <spm_config+0x198>)
    11f6:	4857      	ldr	r0, [pc, #348]	; (1354 <spm_config+0x19c>)
    11f8:	2282      	movs	r2, #130	; 0x82
    11fa:	f007 faee 	bl	87da <printk>
    11fe:	2182      	movs	r1, #130	; 0x82
    1200:	4853      	ldr	r0, [pc, #332]	; (1350 <spm_config+0x198>)
    1202:	f007 fb75 	bl	88f0 <assert_post_action>
	nrf_spu_flashnsc_set(NRF_SPU, 0, FLASH_NSC_SIZE_REG(nsc_size),
    1206:	fab4 f484 	clz	r4, r4
                                            uint8_t            flash_nsc_id,
                                            nrf_spu_nsc_size_t flash_nsc_size,
                                            uint8_t            region_number,
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
    120a:	4e53      	ldr	r6, [pc, #332]	; (1358 <spm_config+0x1a0>)
    120c:	f1c4 041b 	rsb	r4, r4, #27
    1210:	f8d6 2500 	ldr.w	r2, [r6, #1280]	; 0x500
    1214:	b2e4      	uxtb	r4, r4
    1216:	05d2      	lsls	r2, r2, #23
    1218:	f3c5 35c4 	ubfx	r5, r5, #15, #5
    121c:	d50a      	bpl.n	1234 <spm_config+0x7c>
    121e:	494f      	ldr	r1, [pc, #316]	; (135c <spm_config+0x1a4>)
    1220:	484c      	ldr	r0, [pc, #304]	; (1354 <spm_config+0x19c>)
    1222:	f44f 72bd 	mov.w	r2, #378	; 0x17a
    1226:	f007 fad8 	bl	87da <printk>
    122a:	f44f 71bd 	mov.w	r1, #378	; 0x17a
    122e:	484b      	ldr	r0, [pc, #300]	; (135c <spm_config+0x1a4>)
    1230:	f007 fb5e 	bl	88f0 <assert_post_action>
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));
    1234:	f8d6 3504 	ldr.w	r3, [r6, #1284]	; 0x504
    1238:	05db      	lsls	r3, r3, #23
    123a:	d50a      	bpl.n	1252 <spm_config+0x9a>
    123c:	4947      	ldr	r1, [pc, #284]	; (135c <spm_config+0x1a4>)
    123e:	4845      	ldr	r0, [pc, #276]	; (1354 <spm_config+0x19c>)
    1240:	f240 127b 	movw	r2, #379	; 0x17b
    1244:	f007 fac9 	bl	87da <printk>
    1248:	f240 117b 	movw	r1, #379	; 0x17b
    124c:	4843      	ldr	r0, [pc, #268]	; (135c <spm_config+0x1a4>)
    124e:	f007 fb4f 	bl	88f0 <assert_post_action>

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
    1252:	4b41      	ldr	r3, [pc, #260]	; (1358 <spm_config+0x1a0>)
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
    1254:	4842      	ldr	r0, [pc, #264]	; (1360 <spm_config+0x1a8>)
    1256:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
    125a:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
    125e:	f8d3 1500 	ldr.w	r1, [r3, #1280]	; 0x500
    1262:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    1266:	0152      	lsls	r2, r2, #5
    1268:	f007 fab7 	bl	87da <printk>
	PRINT("\n");
    126c:	4836      	ldr	r0, [pc, #216]	; (1348 <spm_config+0x190>)
    126e:	f007 fab4 	bl	87da <printk>
	int err = spm_secure_services_init();
    1272:	f000 f88b 	bl	138c <spm_secure_services_init>
	if (err != 0) {
    1276:	4601      	mov	r1, r0
    1278:	b110      	cbz	r0, 1280 <spm_config+0xc8>
		PRINT("Could not initialize secure services (err %d).\n", err);
    127a:	483a      	ldr	r0, [pc, #232]	; (1364 <spm_config+0x1ac>)
    127c:	f007 faad 	bl	87da <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    1280:	2400      	movs	r4, #0
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
    1282:	4839      	ldr	r0, [pc, #228]	; (1368 <spm_config+0x1b0>)
    1284:	f007 faa9 	bl	87da <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
    1288:	f240 1317 	movw	r3, #279	; 0x117
    128c:	2204      	movs	r2, #4
    128e:	2100      	movs	r1, #0
    1290:	2001      	movs	r0, #1
    1292:	f7ff fec5 	bl	1020 <config_regions>
	NRF_SPU->DPPI[0].PERM = mask;
    1296:	4d30      	ldr	r5, [pc, #192]	; (1358 <spm_config+0x1a0>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
    1298:	f240 1307 	movw	r3, #263	; 0x107
    129c:	2220      	movs	r2, #32
    129e:	2104      	movs	r1, #4
    12a0:	2001      	movs	r0, #1
    12a2:	f7ff febd 	bl	1020 <config_regions>
	PRINT("\n");
    12a6:	4828      	ldr	r0, [pc, #160]	; (1348 <spm_config+0x190>)
    12a8:	f007 fa97 	bl	87da <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    12ac:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
    12b0:	482e      	ldr	r0, [pc, #184]	; (136c <spm_config+0x1b4>)
    12b2:	f007 fa92 	bl	87da <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
    12b6:	4e2e      	ldr	r6, [pc, #184]	; (1370 <spm_config+0x1b8>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
    12b8:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
    12bc:	4f2d      	ldr	r7, [pc, #180]	; (1374 <spm_config+0x1bc>)
    12be:	4d2e      	ldr	r5, [pc, #184]	; (1378 <spm_config+0x1c0>)
    12c0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1388 <spm_config+0x1d0>
    12c4:	f895 9005 	ldrb.w	r9, [r5, #5]
    12c8:	4621      	mov	r1, r4
    12ca:	f1b9 0f00 	cmp.w	r9, #0
    12ce:	bf14      	ite	ne
    12d0:	4633      	movne	r3, r6
    12d2:	463b      	moveq	r3, r7
    12d4:	4640      	mov	r0, r8
    12d6:	682a      	ldr	r2, [r5, #0]
    12d8:	f007 fa7f 	bl	87da <printk>
		if (!periph[i].nonsecure) {
    12dc:	f1b9 0f00 	cmp.w	r9, #0
    12e0:	d10c      	bne.n	12fc <spm_config+0x144>
			PRINT("\tSKIP\n");
    12e2:	4826      	ldr	r0, [pc, #152]	; (137c <spm_config+0x1c4>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    12e4:	3401      	adds	r4, #1
			PRINT("\tOK\n");
    12e6:	f007 fa78 	bl	87da <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    12ea:	2c20      	cmp	r4, #32
    12ec:	f105 0508 	add.w	r5, r5, #8
    12f0:	d1e8      	bne.n	12c4 <spm_config+0x10c>
	PRINT("\n");
    12f2:	4815      	ldr	r0, [pc, #84]	; (1348 <spm_config+0x190>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
    12f4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
    12f8:	f007 ba6f 	b.w	87da <printk>
		err = spm_config_peripheral(periph[i].id, false);
    12fc:	f895 9004 	ldrb.w	r9, [r5, #4]
	NVIC_DisableIRQ(id);
    1300:	f995 0004 	ldrsb.w	r0, [r5, #4]
    1304:	f7ff fe78 	bl	ff8 <__NVIC_DisableIRQ>
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    1308:	ea4f 0389 	mov.w	r3, r9, lsl #2
    130c:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    1310:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    1314:	f1b9 0f31 	cmp.w	r9, #49	; 0x31
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    1318:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    131c:	d006      	beq.n	132c <spm_config+0x174>
	return present && (usel || split);
    131e:	2a00      	cmp	r2, #0
    1320:	da07      	bge.n	1332 <spm_config+0x17a>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
    1322:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
    1326:	3a02      	subs	r2, #2
    1328:	2a01      	cmp	r2, #1
    132a:	d802      	bhi.n	1332 <spm_config+0x17a>
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
    132c:	4a14      	ldr	r2, [pc, #80]	; (1380 <spm_config+0x1c8>)
    132e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
    1332:	2101      	movs	r1, #1
    1334:	4648      	mov	r0, r9
    1336:	f007 fb0c 	bl	8952 <irq_target_state_set>
			PRINT("\tOK\n");
    133a:	4812      	ldr	r0, [pc, #72]	; (1384 <spm_config+0x1cc>)
    133c:	e7d2      	b.n	12e4 <spm_config+0x12c>
    133e:	bf00      	nop
    1340:	00009853 	.word	0x00009853
    1344:	0000ffe0 	.word	0x0000ffe0
    1348:	0000a479 	.word	0x0000a479
    134c:	00000020 	.word	0x00000020
    1350:	00009795 	.word	0x00009795
    1354:	00009765 	.word	0x00009765
    1358:	50003000 	.word	0x50003000
    135c:	00009877 	.word	0x00009877
    1360:	000098a9 	.word	0x000098a9
    1364:	000098ef 	.word	0x000098ef
    1368:	0000991f 	.word	0x0000991f
    136c:	00009941 	.word	0x00009941
    1370:	00009848 	.word	0x00009848
    1374:	0000978d 	.word	0x0000978d
    1378:	00009318 	.word	0x00009318
    137c:	0000996a 	.word	0x0000996a
    1380:	80000100 	.word	0x80000100
    1384:	00009971 	.word	0x00009971
    1388:	0000995d 	.word	0x0000995d

0000138c <spm_secure_services_init>:
int spm_secure_services_init(void)
{
	int err = 0;

#ifdef CONFIG_SPM_SERVICE_RNG
	err = nrf_cc3xx_platform_ctr_drbg_init(&ctr_drbg_ctx, NULL, 0);
    138c:	2200      	movs	r2, #0
    138e:	4802      	ldr	r0, [pc, #8]	; (1398 <spm_secure_services_init+0xc>)
    1390:	4611      	mov	r1, r2
    1392:	f004 bca3 	b.w	5cdc <nrf_cc3xx_platform_ctr_drbg_init>
    1396:	bf00      	nop
    1398:	200002b8 	.word	0x200002b8

0000139c <__acle_se_spm_request_read_nse>:
};


__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read_nse(void *destination, uint32_t addr, size_t len)
{
    139c:	b570      	push	{r4, r5, r6, lr}
    139e:	460c      	mov	r4, r1
    13a0:	4615      	mov	r5, r2
#endif
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
    13a2:	4606      	mov	r6, r0
    13a4:	b950      	cbnz	r0, 13bc <__acle_se_spm_request_read_nse+0x20>
		return -EINVAL;
    13a6:	f06f 0015 	mvn.w	r0, #21
			return 0;
		}
	}

	return -EPERM;
}
    13aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    13ae:	4671      	mov	r1, lr
    13b0:	4672      	mov	r2, lr
    13b2:	4673      	mov	r3, lr
    13b4:	46f4      	mov	ip, lr
    13b6:	f38e 8c00 	msr	CPSR_fs, lr
    13ba:	4774      	bxns	lr
	if (destination == NULL || len <= 0) {
    13bc:	2a00      	cmp	r2, #0
    13be:	d0f2      	beq.n	13a6 <__acle_se_spm_request_read_nse+0xa>
	return arm_cmse_addr_is_secure(ptr) == 1;
    13c0:	f007 fb0a 	bl	89d8 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)destination)) {
    13c4:	2801      	cmp	r0, #1
    13c6:	d0ee      	beq.n	13a6 <__acle_se_spm_request_read_nse+0xa>
		if (addr >= start && addr + len <= start + size) {
    13c8:	4b0b      	ldr	r3, [pc, #44]	; (13f8 <__acle_se_spm_request_read_nse+0x5c>)
    13ca:	429c      	cmp	r4, r3
    13cc:	d90a      	bls.n	13e4 <__acle_se_spm_request_read_nse+0x48>
    13ce:	192a      	adds	r2, r5, r4
    13d0:	332d      	adds	r3, #45	; 0x2d
    13d2:	429a      	cmp	r2, r3
    13d4:	d809      	bhi.n	13ea <__acle_se_spm_request_read_nse+0x4e>
			memcpy(destination, (const void *)addr, len);
    13d6:	462a      	mov	r2, r5
    13d8:	4621      	mov	r1, r4
    13da:	4630      	mov	r0, r6
    13dc:	f007 fb38 	bl	8a50 <memcpy>
			return 0;
    13e0:	2000      	movs	r0, #0
    13e2:	e7e2      	b.n	13aa <__acle_se_spm_request_read_nse+0xe>
		if (addr >= start && addr + len <= start + size) {
    13e4:	4b05      	ldr	r3, [pc, #20]	; (13fc <__acle_se_spm_request_read_nse+0x60>)
    13e6:	429c      	cmp	r4, r3
    13e8:	d903      	bls.n	13f2 <__acle_se_spm_request_read_nse+0x56>
    13ea:	4b05      	ldr	r3, [pc, #20]	; (1400 <__acle_se_spm_request_read_nse+0x64>)
    13ec:	192a      	adds	r2, r5, r4
    13ee:	429a      	cmp	r2, r3
    13f0:	d9f1      	bls.n	13d6 <__acle_se_spm_request_read_nse+0x3a>
	return -EPERM;
    13f2:	f04f 30ff 	mov.w	r0, #4294967295
    13f6:	e7d8      	b.n	13aa <__acle_se_spm_request_read_nse+0xe>
    13f8:	00ff01ff 	.word	0x00ff01ff
    13fc:	00ff012f 	.word	0x00ff012f
    1400:	00ff0138 	.word	0x00ff0138

00001404 <__acle_se_spm_request_random_number_nse>:


#ifdef CONFIG_SPM_SERVICE_RNG
__TZ_NONSECURE_ENTRY_FUNC
int spm_request_random_number_nse(uint8_t *output, size_t len, size_t *olen)
{
    1404:	b570      	push	{r4, r5, r6, lr}
    1406:	4606      	mov	r6, r0
    1408:	460d      	mov	r5, r1
    140a:	4614      	mov	r4, r2
	return arm_cmse_addr_is_secure(ptr) == 1;
    140c:	f007 fae4 	bl	89d8 <arm_cmse_addr_is_secure>
	int err = -EINVAL;

	if (ptr_in_secure_area((intptr_t)output) ||
    1410:	2801      	cmp	r0, #1
    1412:	d00d      	beq.n	1430 <__acle_se_spm_request_random_number_nse+0x2c>
	return arm_cmse_addr_is_secure(ptr) == 1;
    1414:	4620      	mov	r0, r4
    1416:	f007 fadf 	bl	89d8 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)output) ||
    141a:	2801      	cmp	r0, #1
    141c:	d008      	beq.n	1430 <__acle_se_spm_request_random_number_nse+0x2c>
	    ptr_in_secure_area((intptr_t)olen)) {
		return -EINVAL;
	}

	err = nrf_cc3xx_platform_ctr_drbg_get(&ctr_drbg_ctx, output, len, olen);
    141e:	4623      	mov	r3, r4
    1420:	462a      	mov	r2, r5
    1422:	4631      	mov	r1, r6
    1424:	4808      	ldr	r0, [pc, #32]	; (1448 <__acle_se_spm_request_random_number_nse+0x44>)
    1426:	f004 fc8d 	bl	5d44 <nrf_cc3xx_platform_ctr_drbg_get>
	if (*olen != len) {
    142a:	6823      	ldr	r3, [r4, #0]
    142c:	42ab      	cmp	r3, r5
    142e:	d001      	beq.n	1434 <__acle_se_spm_request_random_number_nse+0x30>
		return -EINVAL;
    1430:	f06f 0015 	mvn.w	r0, #21
	}

	return err;
}
    1434:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1438:	4671      	mov	r1, lr
    143a:	4672      	mov	r2, lr
    143c:	4673      	mov	r3, lr
    143e:	46f4      	mov	ip, lr
    1440:	f38e 8c00 	msr	CPSR_fs, lr
    1444:	4774      	bxns	lr
    1446:	bf00      	nop
    1448:	200002b8 	.word	0x200002b8

0000144c <__acle_se_spm_firmware_info_nse>:
#endif /* CONFIG_SPM_SERVICE_S0_ACTIVE */

#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info_nse(uint32_t fw_address, struct fw_info *info)
{
    144c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1450:	4681      	mov	r9, r0
	const struct fw_info *tmp_info;

	if (info == NULL) {
    1452:	460d      	mov	r5, r1
{
    1454:	b085      	sub	sp, #20
	if (info == NULL) {
    1456:	b381      	cbz	r1, 14ba <__acle_se_spm_firmware_info_nse+0x6e>
	return arm_cmse_addr_is_secure(ptr) == 1;
    1458:	f007 fabe 	bl	89d8 <arm_cmse_addr_is_secure>
		return -EINVAL;
	}

	/* Ensure that fw_address is within secure area */
	if (!ptr_in_secure_area(fw_address)) {
    145c:	2801      	cmp	r0, #1
    145e:	d12c      	bne.n	14ba <__acle_se_spm_firmware_info_nse+0x6e>
	return arm_cmse_addr_is_secure(ptr) == 1;
    1460:	4628      	mov	r0, r5
    1462:	f007 fab9 	bl	89d8 <arm_cmse_addr_is_secure>
		return -EINVAL;
	}

	/* Ensure that *info is in non-secure RAM */
	if (ptr_in_secure_area((intptr_t)info)) {
    1466:	2801      	cmp	r0, #1
    1468:	d027      	beq.n	14ba <__acle_se_spm_firmware_info_nse+0x6e>
 */
static inline const struct fw_info *fw_info_find(uint32_t firmware_address)
{
	const struct fw_info *finfo;

	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    146a:	f04f 0800 	mov.w	r8, #0
    146e:	f8df b05c 	ldr.w	fp, [pc, #92]	; 14cc <__acle_se_spm_firmware_info_nse+0x80>
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    1472:	f8df a05c 	ldr.w	sl, [pc, #92]	; 14d0 <__acle_se_spm_firmware_info_nse+0x84>
    1476:	af01      	add	r7, sp, #4
		finfo = fw_info_check(firmware_address +
						fw_info_allowed_offsets[i]);
    1478:	f85b 6b04 	ldr.w	r6, [fp], #4
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    147c:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
    1480:	444e      	add	r6, r9
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    1482:	e887 0007 	stmia.w	r7, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
    1486:	220c      	movs	r2, #12
    1488:	4639      	mov	r1, r7
    148a:	4630      	mov	r0, r6
    148c:	f007 fab9 	bl	8a02 <memcmp>
    1490:	4604      	mov	r4, r0
    1492:	b900      	cbnz	r0, 1496 <__acle_se_spm_firmware_info_nse+0x4a>
		if (finfo) {
    1494:	b9a6      	cbnz	r6, 14c0 <__acle_se_spm_firmware_info_nse+0x74>
	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    1496:	f108 0801 	add.w	r8, r8, #1
    149a:	f1b8 0f05 	cmp.w	r8, #5
    149e:	d1eb      	bne.n	1478 <__acle_se_spm_firmware_info_nse+0x2c>
	if (tmp_info != NULL) {
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
    14a0:	f06f 040d 	mvn.w	r4, #13
}
    14a4:	4620      	mov	r0, r4
    14a6:	b005      	add	sp, #20
    14a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14ac:	4671      	mov	r1, lr
    14ae:	4672      	mov	r2, lr
    14b0:	4673      	mov	r3, lr
    14b2:	46f4      	mov	ip, lr
    14b4:	f38e 8c00 	msr	CPSR_fs, lr
    14b8:	4774      	bxns	lr
		return -EINVAL;
    14ba:	f06f 0415 	mvn.w	r4, #21
    14be:	e7f1      	b.n	14a4 <__acle_se_spm_firmware_info_nse+0x58>
		memcpy(info, tmp_info, sizeof(*tmp_info));
    14c0:	223c      	movs	r2, #60	; 0x3c
    14c2:	4631      	mov	r1, r6
    14c4:	4628      	mov	r0, r5
    14c6:	f007 fac3 	bl	8a50 <memcpy>
		return 0;
    14ca:	e7eb      	b.n	14a4 <__acle_se_spm_firmware_info_nse+0x58>
    14cc:	00009418 	.word	0x00009418
    14d0:	000092e0 	.word	0x000092e0

000014d4 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    14d4:	4801      	ldr	r0, [pc, #4]	; (14dc <nrf_cc3xx_platform_abort_init+0x8>)
    14d6:	f004 bbf9 	b.w	5ccc <nrf_cc3xx_platform_set_abort>
    14da:	bf00      	nop
    14dc:	0000942c 	.word	0x0000942c

000014e0 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    14e0:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    14e2:	b1b0      	cbz	r0, 1512 <mutex_unlock_platform+0x32>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    14e4:	6843      	ldr	r3, [r0, #4]
    14e6:	2b04      	cmp	r3, #4
    14e8:	d10d      	bne.n	1506 <mutex_unlock_platform+0x26>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    14ea:	2200      	movs	r2, #0
    14ec:	6803      	ldr	r3, [r0, #0]
    14ee:	e8d3 1fef 	ldaex	r1, [r3]
    14f2:	2901      	cmp	r1, #1
    14f4:	d103      	bne.n	14fe <mutex_unlock_platform+0x1e>
    14f6:	e8c3 2fe0 	stlex	r0, r2, [r3]
    14fa:	2800      	cmp	r0, #0
    14fc:	d1f7      	bne.n	14ee <mutex_unlock_platform+0xe>
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    14fe:	4807      	ldr	r0, [pc, #28]	; (151c <mutex_unlock_platform+0x3c>)
    1500:	bf08      	it	eq
    1502:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1504:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1506:	b13b      	cbz	r3, 1518 <mutex_unlock_platform+0x38>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1508:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    150a:	f003 f827 	bl	455c <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    150e:	2000      	movs	r0, #0
    1510:	e7f8      	b.n	1504 <mutex_unlock_platform+0x24>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1512:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1516:	e7f5      	b.n	1504 <mutex_unlock_platform+0x24>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1518:	4801      	ldr	r0, [pc, #4]	; (1520 <mutex_unlock_platform+0x40>)
    151a:	e7f3      	b.n	1504 <mutex_unlock_platform+0x24>
    151c:	ffff8fe9 	.word	0xffff8fe9
    1520:	ffff8fea 	.word	0xffff8fea

00001524 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1524:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1526:	4604      	mov	r4, r0
    1528:	b918      	cbnz	r0, 1532 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    152a:	4b0d      	ldr	r3, [pc, #52]	; (1560 <mutex_free_platform+0x3c>)
    152c:	480d      	ldr	r0, [pc, #52]	; (1564 <mutex_free_platform+0x40>)
    152e:	685b      	ldr	r3, [r3, #4]
    1530:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1532:	6861      	ldr	r1, [r4, #4]
    1534:	2908      	cmp	r1, #8
    1536:	d00d      	beq.n	1554 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1538:	f031 0304 	bics.w	r3, r1, #4
    153c:	d00a      	beq.n	1554 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    153e:	f011 0102 	ands.w	r1, r1, #2
    1542:	d008      	beq.n	1556 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1544:	4621      	mov	r1, r4
    1546:	4808      	ldr	r0, [pc, #32]	; (1568 <mutex_free_platform+0x44>)
    1548:	f002 fdbe 	bl	40c8 <k_mem_slab_free>
        mutex->mutex = NULL;
    154c:	2300      	movs	r3, #0
    154e:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1550:	2300      	movs	r3, #0
    1552:	6063      	str	r3, [r4, #4]
}
    1554:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1556:	2214      	movs	r2, #20
    1558:	6820      	ldr	r0, [r4, #0]
    155a:	f007 fa84 	bl	8a66 <memset>
    155e:	e7f7      	b.n	1550 <mutex_free_platform+0x2c>
    1560:	200000b8 	.word	0x200000b8
    1564:	00009aa6 	.word	0x00009aa6
    1568:	20000474 	.word	0x20000474

0000156c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    156c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    156e:	4604      	mov	r4, r0
    1570:	b918      	cbnz	r0, 157a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    1572:	4b16      	ldr	r3, [pc, #88]	; (15cc <mutex_init_platform+0x60>)
    1574:	4816      	ldr	r0, [pc, #88]	; (15d0 <mutex_init_platform+0x64>)
    1576:	685b      	ldr	r3, [r3, #4]
    1578:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    157a:	6863      	ldr	r3, [r4, #4]
    157c:	2b04      	cmp	r3, #4
    157e:	d023      	beq.n	15c8 <mutex_init_platform+0x5c>
    1580:	2b08      	cmp	r3, #8
    1582:	d021      	beq.n	15c8 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1584:	b9cb      	cbnz	r3, 15ba <mutex_init_platform+0x4e>
    1586:	6823      	ldr	r3, [r4, #0]
    1588:	b9bb      	cbnz	r3, 15ba <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    158a:	f04f 32ff 	mov.w	r2, #4294967295
    158e:	f04f 33ff 	mov.w	r3, #4294967295
    1592:	4621      	mov	r1, r4
    1594:	480f      	ldr	r0, [pc, #60]	; (15d4 <mutex_init_platform+0x68>)
    1596:	f002 fd3d 	bl	4014 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    159a:	b908      	cbnz	r0, 15a0 <mutex_init_platform+0x34>
    159c:	6823      	ldr	r3, [r4, #0]
    159e:	b91b      	cbnz	r3, 15a8 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    15a0:	4b0a      	ldr	r3, [pc, #40]	; (15cc <mutex_init_platform+0x60>)
    15a2:	480d      	ldr	r0, [pc, #52]	; (15d8 <mutex_init_platform+0x6c>)
    15a4:	685b      	ldr	r3, [r3, #4]
    15a6:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    15a8:	2214      	movs	r2, #20
    15aa:	2100      	movs	r1, #0
    15ac:	6820      	ldr	r0, [r4, #0]
    15ae:	f007 fa5a 	bl	8a66 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    15b2:	6863      	ldr	r3, [r4, #4]
    15b4:	f043 0302 	orr.w	r3, r3, #2
    15b8:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    15ba:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    15bc:	f007 fcbd 	bl	8f3a <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    15c0:	6863      	ldr	r3, [r4, #4]
    15c2:	f043 0301 	orr.w	r3, r3, #1
    15c6:	6063      	str	r3, [r4, #4]
}
    15c8:	bd10      	pop	{r4, pc}
    15ca:	bf00      	nop
    15cc:	200000b8 	.word	0x200000b8
    15d0:	00009aa6 	.word	0x00009aa6
    15d4:	20000474 	.word	0x20000474
    15d8:	00009acc 	.word	0x00009acc

000015dc <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    15dc:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    15de:	b1e8      	cbz	r0, 161c <mutex_lock_platform+0x40>
    switch (mutex->flags) {
    15e0:	6843      	ldr	r3, [r0, #4]
    15e2:	2b04      	cmp	r3, #4
    15e4:	d10c      	bne.n	1600 <mutex_lock_platform+0x24>
    15e6:	2201      	movs	r2, #1
    15e8:	6803      	ldr	r3, [r0, #0]
    15ea:	e8d3 1fef 	ldaex	r1, [r3]
    15ee:	2900      	cmp	r1, #0
    15f0:	d103      	bne.n	15fa <mutex_lock_platform+0x1e>
    15f2:	e8c3 2fe0 	stlex	r0, r2, [r3]
    15f6:	2800      	cmp	r0, #0
    15f8:	d1f7      	bne.n	15ea <mutex_lock_platform+0xe>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    15fa:	d10b      	bne.n	1614 <mutex_lock_platform+0x38>
    15fc:	2000      	movs	r0, #0
}
    15fe:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1600:	b153      	cbz	r3, 1618 <mutex_lock_platform+0x3c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1602:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    1604:	f04f 32ff 	mov.w	r2, #4294967295
    1608:	f04f 33ff 	mov.w	r3, #4294967295
    160c:	f002 fece 	bl	43ac <z_impl_k_mutex_lock>
        if (ret == 0) {
    1610:	2800      	cmp	r0, #0
    1612:	d0f3      	beq.n	15fc <mutex_lock_platform+0x20>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1614:	4803      	ldr	r0, [pc, #12]	; (1624 <mutex_lock_platform+0x48>)
    1616:	e7f2      	b.n	15fe <mutex_lock_platform+0x22>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1618:	4803      	ldr	r0, [pc, #12]	; (1628 <mutex_lock_platform+0x4c>)
    161a:	e7f0      	b.n	15fe <mutex_lock_platform+0x22>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    161c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1620:	e7ed      	b.n	15fe <mutex_lock_platform+0x22>
    1622:	bf00      	nop
    1624:	ffff8fe9 	.word	0xffff8fe9
    1628:	ffff8fea 	.word	0xffff8fea

0000162c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    162c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    162e:	4906      	ldr	r1, [pc, #24]	; (1648 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1630:	2340      	movs	r3, #64	; 0x40
    1632:	2214      	movs	r2, #20
    1634:	4805      	ldr	r0, [pc, #20]	; (164c <nrf_cc3xx_platform_mutex_init+0x20>)
    1636:	f007 fc55 	bl	8ee4 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    163a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    163e:	4904      	ldr	r1, [pc, #16]	; (1650 <nrf_cc3xx_platform_mutex_init+0x24>)
    1640:	4804      	ldr	r0, [pc, #16]	; (1654 <nrf_cc3xx_platform_mutex_init+0x28>)
    1642:	f004 bbf7 	b.w	5e34 <nrf_cc3xx_platform_set_mutexes>
    1646:	bf00      	nop
    1648:	20000494 	.word	0x20000494
    164c:	20000474 	.word	0x20000474
    1650:	00009444 	.word	0x00009444
    1654:	00009434 	.word	0x00009434

00001658 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1658:	4901      	ldr	r1, [pc, #4]	; (1660 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    165a:	2210      	movs	r2, #16
	str	r2, [r1]
    165c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    165e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1660:	e000ed10 	.word	0xe000ed10

00001664 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1664:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1666:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1668:	f380 8811 	msr	BASEPRI, r0
	isb
    166c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1670:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1674:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1676:	b662      	cpsie	i
	isb
    1678:	f3bf 8f6f 	isb	sy

	bx	lr
    167c:	4770      	bx	lr
    167e:	bf00      	nop

00001680 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    1680:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1682:	4605      	mov	r5, r0

	if (esf != NULL) {
    1684:	460c      	mov	r4, r1
    1686:	b1c9      	cbz	r1, 16bc <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    1688:	688b      	ldr	r3, [r1, #8]
    168a:	4810      	ldr	r0, [pc, #64]	; (16cc <z_arm_fatal_error+0x4c>)
    168c:	9300      	str	r3, [sp, #0]
    168e:	e9d1 2300 	ldrd	r2, r3, [r1]
    1692:	2145      	movs	r1, #69	; 0x45
    1694:	f007 f93f 	bl	8916 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    1698:	6963      	ldr	r3, [r4, #20]
    169a:	2145      	movs	r1, #69	; 0x45
    169c:	9300      	str	r3, [sp, #0]
    169e:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    16a2:	480b      	ldr	r0, [pc, #44]	; (16d0 <z_arm_fatal_error+0x50>)
    16a4:	f007 f937 	bl	8916 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    16a8:	2145      	movs	r1, #69	; 0x45
    16aa:	69e2      	ldr	r2, [r4, #28]
    16ac:	4809      	ldr	r0, [pc, #36]	; (16d4 <z_arm_fatal_error+0x54>)
    16ae:	f007 f932 	bl	8916 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    16b2:	2145      	movs	r1, #69	; 0x45
    16b4:	69a2      	ldr	r2, [r4, #24]
    16b6:	4808      	ldr	r0, [pc, #32]	; (16d8 <z_arm_fatal_error+0x58>)
    16b8:	f007 f92d 	bl	8916 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    16bc:	4621      	mov	r1, r4
    16be:	4628      	mov	r0, r5
}
    16c0:	b003      	add	sp, #12
    16c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    16c6:	f002 bb4b 	b.w	3d60 <z_fatal_error>
    16ca:	bf00      	nop
    16cc:	00009af9 	.word	0x00009af9
    16d0:	00009b2d 	.word	0x00009b2d
    16d4:	00009b61 	.word	0x00009b61
    16d8:	00009b75 	.word	0x00009b75

000016dc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    16dc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    16de:	2b00      	cmp	r3, #0
    16e0:	db08      	blt.n	16f4 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    16e2:	2201      	movs	r2, #1
    16e4:	f000 001f 	and.w	r0, r0, #31
    16e8:	fa02 f000 	lsl.w	r0, r2, r0
    16ec:	4a02      	ldr	r2, [pc, #8]	; (16f8 <arch_irq_enable+0x1c>)
    16ee:	095b      	lsrs	r3, r3, #5
    16f0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    16f4:	4770      	bx	lr
    16f6:	bf00      	nop
    16f8:	e000e100 	.word	0xe000e100

000016fc <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    16fc:	4b05      	ldr	r3, [pc, #20]	; (1714 <arch_irq_is_enabled+0x18>)
    16fe:	0942      	lsrs	r2, r0, #5
    1700:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1704:	2301      	movs	r3, #1
    1706:	f000 001f 	and.w	r0, r0, #31
    170a:	fa03 f000 	lsl.w	r0, r3, r0
}
    170e:	4010      	ands	r0, r2
    1710:	4770      	bx	lr
    1712:	bf00      	nop
    1714:	e000e100 	.word	0xe000e100

00001718 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    1718:	b538      	push	{r3, r4, r5, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    171a:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    171c:	2c07      	cmp	r4, #7
{
    171e:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1720:	d908      	bls.n	1734 <z_arm_irq_priority_set+0x1c>
    1722:	490d      	ldr	r1, [pc, #52]	; (1758 <z_arm_irq_priority_set+0x40>)
    1724:	480d      	ldr	r0, [pc, #52]	; (175c <z_arm_irq_priority_set+0x44>)
    1726:	2259      	movs	r2, #89	; 0x59
    1728:	f007 f857 	bl	87da <printk>
    172c:	2159      	movs	r1, #89	; 0x59
    172e:	480a      	ldr	r0, [pc, #40]	; (1758 <z_arm_irq_priority_set+0x40>)
    1730:	f007 f8de 	bl	88f0 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1734:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1736:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1738:	bfac      	ite	ge
    173a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    173e:	4b08      	ldrlt	r3, [pc, #32]	; (1760 <z_arm_irq_priority_set+0x48>)
    1740:	ea4f 1444 	mov.w	r4, r4, lsl #5
    1744:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1746:	bfab      	itete	ge
    1748:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    174c:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1750:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1754:	555c      	strblt	r4, [r3, r5]
}
    1756:	bd38      	pop	{r3, r4, r5, pc}
    1758:	00009ba8 	.word	0x00009ba8
    175c:	00009765 	.word	0x00009765
    1760:	e000ed14 	.word	0xe000ed14

00001764 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1764:	bf30      	wfi
    b z_SysNmiOnReset
    1766:	f7ff bffd 	b.w	1764 <z_SysNmiOnReset>
    176a:	bf00      	nop

0000176c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    176c:	4a0b      	ldr	r2, [pc, #44]	; (179c <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    176e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1770:	4b0b      	ldr	r3, [pc, #44]	; (17a0 <z_arm_prep_c+0x34>)
    1772:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1776:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1778:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    177c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1780:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1784:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1788:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    178c:	f002 fb88 	bl	3ea0 <z_bss_zero>
	z_data_copy();
    1790:	f003 ff7a 	bl	5688 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1794:	f000 fb58 	bl	1e48 <z_arm_interrupt_init>
	z_cstart();
    1798:	f002 fb8c 	bl	3eb4 <z_cstart>
    179c:	00000000 	.word	0x00000000
    17a0:	e000ed00 	.word	0xe000ed00

000017a4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    17a4:	4a09      	ldr	r2, [pc, #36]	; (17cc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    17a6:	490a      	ldr	r1, [pc, #40]	; (17d0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    17a8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    17aa:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    17ac:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    17ae:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    17b0:	4908      	ldr	r1, [pc, #32]	; (17d4 <arch_swap+0x30>)
    17b2:	684b      	ldr	r3, [r1, #4]
    17b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    17b8:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    17ba:	2300      	movs	r3, #0
    17bc:	f383 8811 	msr	BASEPRI, r3
    17c0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    17c4:	6893      	ldr	r3, [r2, #8]
}
    17c6:	6f98      	ldr	r0, [r3, #120]	; 0x78
    17c8:	4770      	bx	lr
    17ca:	bf00      	nop
    17cc:	20000a30 	.word	0x20000a30
    17d0:	0000956c 	.word	0x0000956c
    17d4:	e000ed00 	.word	0xe000ed00

000017d8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    17d8:	4913      	ldr	r1, [pc, #76]	; (1828 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    17da:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    17dc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    17e0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    17e2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    17e6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    17ea:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    17ec:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    17f0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    17f4:	4f0d      	ldr	r7, [pc, #52]	; (182c <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    17f6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    17fa:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    17fc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    17fe:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1800:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1802:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1804:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1806:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    180a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    180e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1812:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    1816:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    181a:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    181c:	f007 f8cf 	bl	89be <configure_builtin_stack_guard>
    pop {r2, lr}
    1820:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1824:	4770      	bx	lr
    1826:	0000      	.short	0x0000
    ldr r1, =_kernel
    1828:	20000a30 	.word	0x20000a30
    ldr v4, =_SCS_ICSR
    182c:	e000ed04 	.word	0xe000ed04

00001830 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1830:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1834:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1836:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    183a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    183e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1840:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1844:	2902      	cmp	r1, #2
    beq _oops
    1846:	d0ff      	beq.n	1848 <_oops>

00001848 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1848:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    184a:	f007 f87a 	bl	8942 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    184e:	bd01      	pop	{r0, pc}

00001850 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1850:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1854:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    1856:	490b      	ldr	r1, [pc, #44]	; (1884 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    1858:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    185c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    185e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    1862:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1866:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    1868:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    186c:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1870:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1874:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1878:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    187a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    187c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    187e:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1880:	4770      	bx	lr
    1882:	bf00      	nop
    1884:	0000881b 	.word	0x0000881b

00001888 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1888:	4b08      	ldr	r3, [pc, #32]	; (18ac <arch_switch_to_main_thread+0x24>)
    188a:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    188c:	6e43      	ldr	r3, [r0, #100]	; 0x64
    188e:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1892:	4610      	mov	r0, r2
    1894:	f381 8809 	msr	PSP, r1
    1898:	2100      	movs	r1, #0
    189a:	b663      	cpsie	if
    189c:	f381 8811 	msr	BASEPRI, r1
    18a0:	f3bf 8f6f 	isb	sy
    18a4:	2200      	movs	r2, #0
    18a6:	2300      	movs	r3, #0
    18a8:	f006 ffb7 	bl	881a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    18ac:	20000a30 	.word	0x20000a30

000018b0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    18b0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    18b2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    18b4:	4a0b      	ldr	r2, [pc, #44]	; (18e4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    18b6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    18b8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    18ba:	bf1e      	ittt	ne
	movne	r1, #0
    18bc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    18be:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    18c0:	f007 fb34 	blne	8f2c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    18c4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    18c6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    18ca:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    18ce:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    18d2:	4905      	ldr	r1, [pc, #20]	; (18e8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    18d4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    18d6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    18d8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    18da:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    18de:	4903      	ldr	r1, [pc, #12]	; (18ec <_isr_wrapper+0x3c>)
	bx r1
    18e0:	4708      	bx	r1
    18e2:	0000      	.short	0x0000
	ldr r2, =_kernel
    18e4:	20000a30 	.word	0x20000a30
	ldr r1, =_sw_isr_table
    18e8:	00009080 	.word	0x00009080
	ldr r1, =z_arm_int_exit
    18ec:	000018f1 	.word	0x000018f1

000018f0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    18f0:	4b04      	ldr	r3, [pc, #16]	; (1904 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    18f2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    18f4:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    18f6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    18f8:	d003      	beq.n	1902 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    18fa:	4903      	ldr	r1, [pc, #12]	; (1908 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    18fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1900:	600a      	str	r2, [r1, #0]

00001902 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1902:	4770      	bx	lr
	ldr r3, =_kernel
    1904:	20000a30 	.word	0x20000a30
	ldr r1, =_SCS_ICSR
    1908:	e000ed04 	.word	0xe000ed04

0000190c <mem_manage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    190c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    190e:	4c2b      	ldr	r4, [pc, #172]	; (19bc <mem_manage_fault.isra.0+0xb0>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1910:	4606      	mov	r6, r0
    1912:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    1914:	482a      	ldr	r0, [pc, #168]	; (19c0 <mem_manage_fault.isra.0+0xb4>)
    1916:	2145      	movs	r1, #69	; 0x45
    1918:	f006 fffd 	bl	8916 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    191c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    191e:	06d0      	lsls	r0, r2, #27
    1920:	d503      	bpl.n	192a <mem_manage_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    1922:	2145      	movs	r1, #69	; 0x45
    1924:	4827      	ldr	r0, [pc, #156]	; (19c4 <mem_manage_fault.isra.0+0xb8>)
    1926:	f006 fff6 	bl	8916 <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    192a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    192c:	0719      	lsls	r1, r3, #28
    192e:	d503      	bpl.n	1938 <mem_manage_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    1930:	2145      	movs	r1, #69	; 0x45
    1932:	4825      	ldr	r0, [pc, #148]	; (19c8 <mem_manage_fault.isra.0+0xbc>)
    1934:	f006 ffef 	bl	8916 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1938:	4c20      	ldr	r4, [pc, #128]	; (19bc <mem_manage_fault.isra.0+0xb0>)
    193a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    193c:	079a      	lsls	r2, r3, #30
    193e:	d510      	bpl.n	1962 <mem_manage_fault.isra.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    1940:	2145      	movs	r1, #69	; 0x45
    1942:	4822      	ldr	r0, [pc, #136]	; (19cc <mem_manage_fault.isra.0+0xc0>)
    1944:	f006 ffe7 	bl	8916 <z_log_minimal_printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1948:	6b62      	ldr	r2, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    194a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    194c:	061b      	lsls	r3, r3, #24
    194e:	d508      	bpl.n	1962 <mem_manage_fault.isra.0+0x56>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    1950:	2145      	movs	r1, #69	; 0x45
    1952:	481f      	ldr	r0, [pc, #124]	; (19d0 <mem_manage_fault.isra.0+0xc4>)
    1954:	f006 ffdf 	bl	8916 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    1958:	b11e      	cbz	r6, 1962 <mem_manage_fault.isra.0+0x56>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    195a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    195c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1960:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1962:	4c16      	ldr	r4, [pc, #88]	; (19bc <mem_manage_fault.isra.0+0xb0>)
    1964:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1966:	07d6      	lsls	r6, r2, #31
    1968:	d503      	bpl.n	1972 <mem_manage_fault.isra.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    196a:	2145      	movs	r1, #69	; 0x45
    196c:	4819      	ldr	r0, [pc, #100]	; (19d4 <mem_manage_fault.isra.0+0xc8>)
    196e:	f006 ffd2 	bl	8916 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1972:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1974:	0698      	lsls	r0, r3, #26
    1976:	d503      	bpl.n	1980 <mem_manage_fault.isra.0+0x74>
		PR_FAULT_INFO(
    1978:	2145      	movs	r1, #69	; 0x45
    197a:	4817      	ldr	r0, [pc, #92]	; (19d8 <mem_manage_fault.isra.0+0xcc>)
    197c:	f006 ffcb 	bl	8916 <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1980:	4b0e      	ldr	r3, [pc, #56]	; (19bc <mem_manage_fault.isra.0+0xb0>)
    1982:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1984:	06d1      	lsls	r1, r2, #27
    1986:	d402      	bmi.n	198e <mem_manage_fault.isra.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1988:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    198a:	0792      	lsls	r2, r2, #30
    198c:	d50d      	bpl.n	19aa <mem_manage_fault.isra.0+0x9e>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1990:	06db      	lsls	r3, r3, #27
    1992:	d50a      	bpl.n	19aa <mem_manage_fault.isra.0+0x9e>
    1994:	4911      	ldr	r1, [pc, #68]	; (19dc <mem_manage_fault.isra.0+0xd0>)
    1996:	4812      	ldr	r0, [pc, #72]	; (19e0 <mem_manage_fault.isra.0+0xd4>)
    1998:	f240 124f 	movw	r2, #335	; 0x14f
    199c:	f006 ff1d 	bl	87da <printk>
    19a0:	f240 114f 	movw	r1, #335	; 0x14f
    19a4:	480d      	ldr	r0, [pc, #52]	; (19dc <mem_manage_fault.isra.0+0xd0>)
    19a6:	f006 ffa3 	bl	88f0 <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    19aa:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    19ac:	4a03      	ldr	r2, [pc, #12]	; (19bc <mem_manage_fault.isra.0+0xb0>)
    19ae:	6a93      	ldr	r3, [r2, #40]	; 0x28
    19b0:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    19b4:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    19b6:	7028      	strb	r0, [r5, #0]

	return reason;
}
    19b8:	bd70      	pop	{r4, r5, r6, pc}
    19ba:	bf00      	nop
    19bc:	e000ed00 	.word	0xe000ed00
    19c0:	00009bde 	.word	0x00009bde
    19c4:	00009bf9 	.word	0x00009bf9
    19c8:	00009c31 	.word	0x00009c31
    19cc:	00009c49 	.word	0x00009c49
    19d0:	00009c66 	.word	0x00009c66
    19d4:	00009c81 	.word	0x00009c81
    19d8:	00009ca5 	.word	0x00009ca5
    19dc:	00009cd9 	.word	0x00009cd9
    19e0:	00009765 	.word	0x00009765

000019e4 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    19e4:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    19e6:	4c23      	ldr	r4, [pc, #140]	; (1a74 <bus_fault.isra.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    19e8:	4606      	mov	r6, r0
    19ea:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    19ec:	4822      	ldr	r0, [pc, #136]	; (1a78 <bus_fault.isra.0+0x94>)
    19ee:	2145      	movs	r1, #69	; 0x45
    19f0:	f006 ff91 	bl	8916 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    19f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    19f6:	04d1      	lsls	r1, r2, #19
    19f8:	d503      	bpl.n	1a02 <bus_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    19fa:	2145      	movs	r1, #69	; 0x45
    19fc:	481f      	ldr	r0, [pc, #124]	; (1a7c <bus_fault.isra.0+0x98>)
    19fe:	f006 ff8a 	bl	8916 <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1a02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a04:	051a      	lsls	r2, r3, #20
    1a06:	d503      	bpl.n	1a10 <bus_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    1a08:	2145      	movs	r1, #69	; 0x45
    1a0a:	481d      	ldr	r0, [pc, #116]	; (1a80 <bus_fault.isra.0+0x9c>)
    1a0c:	f006 ff83 	bl	8916 <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1a10:	4c18      	ldr	r4, [pc, #96]	; (1a74 <bus_fault.isra.0+0x90>)
    1a12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a14:	059b      	lsls	r3, r3, #22
    1a16:	d510      	bpl.n	1a3a <bus_fault.isra.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    1a18:	481a      	ldr	r0, [pc, #104]	; (1a84 <bus_fault.isra.0+0xa0>)
    1a1a:	2145      	movs	r1, #69	; 0x45
    1a1c:	f006 ff7b 	bl	8916 <z_log_minimal_printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1a20:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1a22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a24:	0418      	lsls	r0, r3, #16
    1a26:	d508      	bpl.n	1a3a <bus_fault.isra.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    1a28:	2145      	movs	r1, #69	; 0x45
    1a2a:	4817      	ldr	r0, [pc, #92]	; (1a88 <bus_fault.isra.0+0xa4>)
    1a2c:	f006 ff73 	bl	8916 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    1a30:	b11e      	cbz	r6, 1a3a <bus_fault.isra.0+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1a32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1a38:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1a3a:	4c0e      	ldr	r4, [pc, #56]	; (1a74 <bus_fault.isra.0+0x90>)
    1a3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a3e:	0559      	lsls	r1, r3, #21
    1a40:	d503      	bpl.n	1a4a <bus_fault.isra.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    1a42:	2145      	movs	r1, #69	; 0x45
    1a44:	4811      	ldr	r0, [pc, #68]	; (1a8c <bus_fault.isra.0+0xa8>)
    1a46:	f006 ff66 	bl	8916 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1a4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a4c:	05da      	lsls	r2, r3, #23
    1a4e:	d50b      	bpl.n	1a68 <bus_fault.isra.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    1a50:	2145      	movs	r1, #69	; 0x45
    1a52:	480f      	ldr	r0, [pc, #60]	; (1a90 <bus_fault.isra.0+0xac>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1a54:	f006 ff5f 	bl	8916 <z_log_minimal_printk>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    1a58:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1a5a:	4a06      	ldr	r2, [pc, #24]	; (1a74 <bus_fault.isra.0+0x90>)
    1a5c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1a5e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1a62:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1a64:	7028      	strb	r0, [r5, #0]

	return reason;
}
    1a66:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1a68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a6a:	049b      	lsls	r3, r3, #18
    1a6c:	d5f4      	bpl.n	1a58 <bus_fault.isra.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1a6e:	2145      	movs	r1, #69	; 0x45
    1a70:	4808      	ldr	r0, [pc, #32]	; (1a94 <bus_fault.isra.0+0xb0>)
    1a72:	e7ef      	b.n	1a54 <bus_fault.isra.0+0x70>
    1a74:	e000ed00 	.word	0xe000ed00
    1a78:	00009d13 	.word	0x00009d13
    1a7c:	00009d2e 	.word	0x00009d2e
    1a80:	00009c31 	.word	0x00009c31
    1a84:	00009d44 	.word	0x00009d44
    1a88:	00009d62 	.word	0x00009d62
    1a8c:	00009d7c 	.word	0x00009d7c
    1a90:	00009d9c 	.word	0x00009d9c
    1a94:	00009ca5 	.word	0x00009ca5

00001a98 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    1a98:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1a9a:	4c21      	ldr	r4, [pc, #132]	; (1b20 <usage_fault.isra.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    1a9c:	2145      	movs	r1, #69	; 0x45
    1a9e:	4821      	ldr	r0, [pc, #132]	; (1b24 <usage_fault.isra.0+0x8c>)
    1aa0:	f006 ff39 	bl	8916 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1aa4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1aa6:	0195      	lsls	r5, r2, #6
    1aa8:	d503      	bpl.n	1ab2 <usage_fault.isra.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    1aaa:	2145      	movs	r1, #69	; 0x45
    1aac:	481e      	ldr	r0, [pc, #120]	; (1b28 <usage_fault.isra.0+0x90>)
    1aae:	f006 ff32 	bl	8916 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1ab2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ab4:	01dc      	lsls	r4, r3, #7
    1ab6:	d503      	bpl.n	1ac0 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    1ab8:	2145      	movs	r1, #69	; 0x45
    1aba:	481c      	ldr	r0, [pc, #112]	; (1b2c <usage_fault.isra.0+0x94>)
    1abc:	f006 ff2b 	bl	8916 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    1ac0:	4d17      	ldr	r5, [pc, #92]	; (1b20 <usage_fault.isra.0+0x88>)
    1ac2:	6aac      	ldr	r4, [r5, #40]	; 0x28
    1ac4:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    1ac8:	d004      	beq.n	1ad4 <usage_fault.isra.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    1aca:	2145      	movs	r1, #69	; 0x45
    1acc:	4818      	ldr	r0, [pc, #96]	; (1b30 <usage_fault.isra.0+0x98>)
    1ace:	f006 ff22 	bl	8916 <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    1ad2:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1ad4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1ad6:	0318      	lsls	r0, r3, #12
    1ad8:	d503      	bpl.n	1ae2 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    1ada:	2145      	movs	r1, #69	; 0x45
    1adc:	4815      	ldr	r0, [pc, #84]	; (1b34 <usage_fault.isra.0+0x9c>)
    1ade:	f006 ff1a 	bl	8916 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1ae2:	4d0f      	ldr	r5, [pc, #60]	; (1b20 <usage_fault.isra.0+0x88>)
    1ae4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1ae6:	0351      	lsls	r1, r2, #13
    1ae8:	d503      	bpl.n	1af2 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    1aea:	2145      	movs	r1, #69	; 0x45
    1aec:	4812      	ldr	r0, [pc, #72]	; (1b38 <usage_fault.isra.0+0xa0>)
    1aee:	f006 ff12 	bl	8916 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1af2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1af4:	039a      	lsls	r2, r3, #14
    1af6:	d503      	bpl.n	1b00 <usage_fault.isra.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    1af8:	2145      	movs	r1, #69	; 0x45
    1afa:	4810      	ldr	r0, [pc, #64]	; (1b3c <usage_fault.isra.0+0xa4>)
    1afc:	f006 ff0b 	bl	8916 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1b00:	4d07      	ldr	r5, [pc, #28]	; (1b20 <usage_fault.isra.0+0x88>)
    1b02:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1b04:	03db      	lsls	r3, r3, #15
    1b06:	d503      	bpl.n	1b10 <usage_fault.isra.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    1b08:	2145      	movs	r1, #69	; 0x45
    1b0a:	480d      	ldr	r0, [pc, #52]	; (1b40 <usage_fault.isra.0+0xa8>)
    1b0c:	f006 ff03 	bl	8916 <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1b10:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    1b12:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1b14:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    1b18:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    1b1c:	62ab      	str	r3, [r5, #40]	; 0x28
}
    1b1e:	bd38      	pop	{r3, r4, r5, pc}
    1b20:	e000ed00 	.word	0xe000ed00
    1b24:	00009db9 	.word	0x00009db9
    1b28:	00009dd6 	.word	0x00009dd6
    1b2c:	00009dee 	.word	0x00009dee
    1b30:	00009e0d 	.word	0x00009e0d
    1b34:	00009e3c 	.word	0x00009e3c
    1b38:	00009e5f 	.word	0x00009e5f
    1b3c:	00009e89 	.word	0x00009e89
    1b40:	00009ea8 	.word	0x00009ea8

00001b44 <secure_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void secure_fault(const z_arch_esf_t *esf)
    1b44:	b510      	push	{r4, lr}
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
    1b46:	4c1e      	ldr	r4, [pc, #120]	; (1bc0 <secure_fault.isra.0+0x7c>)
	PR_FAULT_INFO("***** SECURE FAULT *****");
    1b48:	481e      	ldr	r0, [pc, #120]	; (1bc4 <secure_fault.isra.0+0x80>)
    1b4a:	2145      	movs	r1, #69	; 0x45
    1b4c:	f006 fee3 	bl	8916 <z_log_minimal_printk>
	STORE_xFAR(sfar, SAU->SFAR);
    1b50:	69a2      	ldr	r2, [r4, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
    1b52:	6963      	ldr	r3, [r4, #20]
    1b54:	0658      	lsls	r0, r3, #25
    1b56:	d503      	bpl.n	1b60 <secure_fault.isra.0+0x1c>
		PR_EXC("  Address: 0x%x", sfar);
    1b58:	2145      	movs	r1, #69	; 0x45
    1b5a:	481b      	ldr	r0, [pc, #108]	; (1bc8 <secure_fault.isra.0+0x84>)
    1b5c:	f006 fedb 	bl	8916 <z_log_minimal_printk>
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
    1b60:	6963      	ldr	r3, [r4, #20]
    1b62:	07d9      	lsls	r1, r3, #31
    1b64:	d508      	bpl.n	1b78 <secure_fault.isra.0+0x34>
		PR_FAULT_INFO("  Invalid entry point");
    1b66:	2145      	movs	r1, #69	; 0x45
    1b68:	4818      	ldr	r0, [pc, #96]	; (1bcc <secure_fault.isra.0+0x88>)
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state error");
    1b6a:	f006 fed4 	bl	8916 <z_log_minimal_printk>
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
    1b6e:	6963      	ldr	r3, [r4, #20]
    1b70:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1b74:	6163      	str	r3, [r4, #20]
}
    1b76:	bd10      	pop	{r4, pc}
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
    1b78:	6963      	ldr	r3, [r4, #20]
    1b7a:	079a      	lsls	r2, r3, #30
    1b7c:	d502      	bpl.n	1b84 <secure_fault.isra.0+0x40>
		PR_FAULT_INFO("  Invalid integrity signature");
    1b7e:	2145      	movs	r1, #69	; 0x45
    1b80:	4813      	ldr	r0, [pc, #76]	; (1bd0 <secure_fault.isra.0+0x8c>)
    1b82:	e7f2      	b.n	1b6a <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
    1b84:	6963      	ldr	r3, [r4, #20]
    1b86:	075b      	lsls	r3, r3, #29
    1b88:	d502      	bpl.n	1b90 <secure_fault.isra.0+0x4c>
		PR_FAULT_INFO("  Invalid exception return");
    1b8a:	2145      	movs	r1, #69	; 0x45
    1b8c:	4811      	ldr	r0, [pc, #68]	; (1bd4 <secure_fault.isra.0+0x90>)
    1b8e:	e7ec      	b.n	1b6a <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
    1b90:	6963      	ldr	r3, [r4, #20]
    1b92:	0718      	lsls	r0, r3, #28
    1b94:	d502      	bpl.n	1b9c <secure_fault.isra.0+0x58>
		PR_FAULT_INFO("  Attribution unit violation");
    1b96:	2145      	movs	r1, #69	; 0x45
    1b98:	480f      	ldr	r0, [pc, #60]	; (1bd8 <secure_fault.isra.0+0x94>)
    1b9a:	e7e6      	b.n	1b6a <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
    1b9c:	6963      	ldr	r3, [r4, #20]
    1b9e:	06d9      	lsls	r1, r3, #27
    1ba0:	d502      	bpl.n	1ba8 <secure_fault.isra.0+0x64>
		PR_FAULT_INFO("  Invalid transition");
    1ba2:	2145      	movs	r1, #69	; 0x45
    1ba4:	480d      	ldr	r0, [pc, #52]	; (1bdc <secure_fault.isra.0+0x98>)
    1ba6:	e7e0      	b.n	1b6a <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
    1ba8:	6963      	ldr	r3, [r4, #20]
    1baa:	069a      	lsls	r2, r3, #26
    1bac:	d502      	bpl.n	1bb4 <secure_fault.isra.0+0x70>
		PR_FAULT_INFO("  Lazy state preservation");
    1bae:	2145      	movs	r1, #69	; 0x45
    1bb0:	480b      	ldr	r0, [pc, #44]	; (1be0 <secure_fault.isra.0+0x9c>)
    1bb2:	e7da      	b.n	1b6a <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
    1bb4:	6963      	ldr	r3, [r4, #20]
    1bb6:	061b      	lsls	r3, r3, #24
    1bb8:	d5d9      	bpl.n	1b6e <secure_fault.isra.0+0x2a>
		PR_FAULT_INFO("  Lazy state error");
    1bba:	2145      	movs	r1, #69	; 0x45
    1bbc:	4809      	ldr	r0, [pc, #36]	; (1be4 <secure_fault.isra.0+0xa0>)
    1bbe:	e7d4      	b.n	1b6a <secure_fault.isra.0+0x26>
    1bc0:	e000edd0 	.word	0xe000edd0
    1bc4:	00009ed8 	.word	0x00009ed8
    1bc8:	00009ef6 	.word	0x00009ef6
    1bcc:	00009f0b 	.word	0x00009f0b
    1bd0:	00009f26 	.word	0x00009f26
    1bd4:	00009f49 	.word	0x00009f49
    1bd8:	00009f69 	.word	0x00009f69
    1bdc:	00009f8b 	.word	0x00009f8b
    1be0:	00009fa5 	.word	0x00009fa5
    1be4:	00009fc4 	.word	0x00009fc4

00001be8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1bec:	4b7a      	ldr	r3, [pc, #488]	; (1dd8 <z_arm_fault+0x1f0>)
{
    1bee:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1bf0:	685c      	ldr	r4, [r3, #4]
    1bf2:	2600      	movs	r6, #0
{
    1bf4:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1bf6:	f3c4 0708 	ubfx	r7, r4, #0, #9
    1bfa:	f386 8811 	msr	BASEPRI, r6
    1bfe:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1c02:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1c06:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1c0a:	d11e      	bne.n	1c4a <z_arm_fault+0x62>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
    1c0c:	f012 0301 	ands.w	r3, r2, #1
    1c10:	d03a      	beq.n	1c88 <z_arm_fault+0xa0>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    1c12:	f012 0340 	ands.w	r3, r2, #64	; 0x40
    1c16:	f002 0808 	and.w	r8, r2, #8
    1c1a:	f040 80d6 	bne.w	1dca <z_arm_fault+0x1e2>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    1c1e:	0752      	lsls	r2, r2, #29
			secure_esf = (z_arch_esf_t *)msp;
    1c20:	bf54      	ite	pl
    1c22:	4605      	movpl	r5, r0
	*nested_exc = false;
    1c24:	461e      	movmi	r6, r3
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    1c26:	682a      	ldr	r2, [r5, #0]
    1c28:	4b6c      	ldr	r3, [pc, #432]	; (1ddc <z_arm_fault+0x1f4>)
			*nested_exc = true;
    1c2a:	bf58      	it	pl
    1c2c:	2601      	movpl	r6, #1
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    1c2e:	4413      	add	r3, r2
    1c30:	2b01      	cmp	r3, #1
		sec_ret_addr = secure_esf->basic.pc;
    1c32:	bf98      	it	ls
    1c34:	6c2a      	ldrls	r2, [r5, #64]	; 0x40
	PR_FAULT_INFO("  S instruction address:  0x%x", sec_ret_addr);
    1c36:	2145      	movs	r1, #69	; 0x45
    1c38:	4869      	ldr	r0, [pc, #420]	; (1de0 <z_arm_fault+0x1f8>)
    1c3a:	f006 fe6c 	bl	8916 <z_log_minimal_printk>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1c3e:	f1b8 0f00 	cmp.w	r8, #0
    1c42:	d01e      	beq.n	1c82 <z_arm_fault+0x9a>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
    1c44:	f3ef 8589 	mrs	r5, PSP_NS

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    1c48:	b95d      	cbnz	r5, 1c62 <z_arm_fault+0x7a>
    1c4a:	f240 32f2 	movw	r2, #1010	; 0x3f2
    1c4e:	4965      	ldr	r1, [pc, #404]	; (1de4 <z_arm_fault+0x1fc>)
    1c50:	4865      	ldr	r0, [pc, #404]	; (1de8 <z_arm_fault+0x200>)
    1c52:	f006 fdc2 	bl	87da <printk>
    1c56:	f240 31f2 	movw	r1, #1010	; 0x3f2
    1c5a:	4862      	ldr	r0, [pc, #392]	; (1de4 <z_arm_fault+0x1fc>)
    1c5c:	f006 fe48 	bl	88f0 <assert_post_action>
    1c60:	2500      	movs	r5, #0
	*recoverable = false;
    1c62:	2300      	movs	r3, #0
    1c64:	1efa      	subs	r2, r7, #3
    1c66:	4698      	mov	r8, r3
    1c68:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    1c6c:	4613      	mov	r3, r2
    1c6e:	2b09      	cmp	r3, #9
    1c70:	f200 8099 	bhi.w	1da6 <z_arm_fault+0x1be>
    1c74:	e8df f003 	tbb	[pc, r3]
    1c78:	6a8c880a 	.word	0x6a8c880a
    1c7c:	97979790 	.word	0x97979790
    1c80:	9497      	.short	0x9497
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
    1c82:	f3ef 8588 	mrs	r5, MSP_NS
  return(result);
    1c86:	e7df      	b.n	1c48 <z_arm_fault+0x60>
	*nested_exc = false;
    1c88:	461e      	mov	r6, r3
    1c8a:	e7de      	b.n	1c4a <z_arm_fault+0x62>
	PR_FAULT_INFO("***** HARD FAULT *****");
    1c8c:	2145      	movs	r1, #69	; 0x45
    1c8e:	4857      	ldr	r0, [pc, #348]	; (1dec <z_arm_fault+0x204>)
    1c90:	f006 fe41 	bl	8916 <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1c94:	4b50      	ldr	r3, [pc, #320]	; (1dd8 <z_arm_fault+0x1f0>)
	*recoverable = false;
    1c96:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1c9a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1c9c:	f014 0402 	ands.w	r4, r4, #2
    1ca0:	d004      	beq.n	1cac <z_arm_fault+0xc4>
		PR_EXC("  Bus fault on vector table read");
    1ca2:	2145      	movs	r1, #69	; 0x45
    1ca4:	4852      	ldr	r0, [pc, #328]	; (1df0 <z_arm_fault+0x208>)
	PR_FAULT_INFO(
    1ca6:	f006 fe36 	bl	8916 <z_log_minimal_printk>
    1caa:	e077      	b.n	1d9c <z_arm_fault+0x1b4>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1cae:	2a00      	cmp	r2, #0
    1cb0:	da1d      	bge.n	1cee <z_arm_fault+0x106>
		PR_EXC("  Debug event");
    1cb2:	2145      	movs	r1, #69	; 0x45
    1cb4:	484f      	ldr	r0, [pc, #316]	; (1df4 <z_arm_fault+0x20c>)
    1cb6:	f006 fe2e 	bl	8916 <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1cba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1cbe:	b99b      	cbnz	r3, 1ce8 <z_arm_fault+0x100>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1cc0:	2220      	movs	r2, #32
    1cc2:	4629      	mov	r1, r5
    1cc4:	a802      	add	r0, sp, #8
    1cc6:	f006 fec3 	bl	8a50 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1ccc:	2e00      	cmp	r6, #0
    1cce:	d077      	beq.n	1dc0 <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1cd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1cd4:	b922      	cbnz	r2, 1ce0 <z_arm_fault+0xf8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1cd6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1cda:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1cde:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1ce0:	4620      	mov	r0, r4
    1ce2:	a902      	add	r1, sp, #8
    1ce4:	f7ff fccc 	bl	1680 <z_arm_fatal_error>
}
    1ce8:	b00a      	add	sp, #40	; 0x28
    1cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1cf0:	005b      	lsls	r3, r3, #1
    1cf2:	d540      	bpl.n	1d76 <z_arm_fault+0x18e>
		PR_EXC("  Fault escalation (see below)");
    1cf4:	2145      	movs	r1, #69	; 0x45
    1cf6:	4840      	ldr	r0, [pc, #256]	; (1df8 <z_arm_fault+0x210>)
    1cf8:	f006 fe0d 	bl	8916 <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
    1cfc:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1cfe:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    1d02:	f64d 7302 	movw	r3, #57090	; 0xdf02
    1d06:	429a      	cmp	r2, r3
    1d08:	d00c      	beq.n	1d24 <z_arm_fault+0x13c>
		} else if (SCB_MMFSR != 0) {
    1d0a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1d0e:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    1d12:	781b      	ldrb	r3, [r3, #0]
    1d14:	b16b      	cbz	r3, 1d32 <z_arm_fault+0x14a>
			reason = mem_manage_fault(esf, 1, recoverable);
    1d16:	2001      	movs	r0, #1
    1d18:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    1d1c:	f7ff fdf6 	bl	190c <mem_manage_fault.isra.0>
		reason = bus_fault(esf, 0, recoverable);
    1d20:	4604      	mov	r4, r0
		break;
    1d22:	e7ca      	b.n	1cba <z_arm_fault+0xd2>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    1d24:	2145      	movs	r1, #69	; 0x45
    1d26:	682a      	ldr	r2, [r5, #0]
    1d28:	4834      	ldr	r0, [pc, #208]	; (1dfc <z_arm_fault+0x214>)
    1d2a:	f006 fdf4 	bl	8916 <z_log_minimal_printk>
			reason = esf->basic.r0;
    1d2e:	682c      	ldr	r4, [r5, #0]
    1d30:	e7c3      	b.n	1cba <z_arm_fault+0xd2>
		} else if (SCB_BFSR != 0) {
    1d32:	4b33      	ldr	r3, [pc, #204]	; (1e00 <z_arm_fault+0x218>)
    1d34:	781b      	ldrb	r3, [r3, #0]
    1d36:	b12b      	cbz	r3, 1d44 <z_arm_fault+0x15c>
			reason = bus_fault(esf, 1, recoverable);
    1d38:	2001      	movs	r0, #1
    1d3a:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    1d3e:	f7ff fe51 	bl	19e4 <bus_fault.isra.0>
    1d42:	e7ed      	b.n	1d20 <z_arm_fault+0x138>
		} else if (SCB_UFSR != 0) {
    1d44:	4b2f      	ldr	r3, [pc, #188]	; (1e04 <z_arm_fault+0x21c>)
    1d46:	881b      	ldrh	r3, [r3, #0]
    1d48:	b29b      	uxth	r3, r3
    1d4a:	b113      	cbz	r3, 1d52 <z_arm_fault+0x16a>
		reason = usage_fault(esf);
    1d4c:	f7ff fea4 	bl	1a98 <usage_fault.isra.0>
    1d50:	e7e6      	b.n	1d20 <z_arm_fault+0x138>
		} else if (SAU->SFSR != 0) {
    1d52:	4b2d      	ldr	r3, [pc, #180]	; (1e08 <z_arm_fault+0x220>)
    1d54:	695b      	ldr	r3, [r3, #20]
    1d56:	b113      	cbz	r3, 1d5e <z_arm_fault+0x176>
			secure_fault(esf);
    1d58:	f7ff fef4 	bl	1b44 <secure_fault.isra.0>
    1d5c:	e7ad      	b.n	1cba <z_arm_fault+0xd2>
			__ASSERT(0,
    1d5e:	4921      	ldr	r1, [pc, #132]	; (1de4 <z_arm_fault+0x1fc>)
    1d60:	f240 22c3 	movw	r2, #707	; 0x2c3
    1d64:	4820      	ldr	r0, [pc, #128]	; (1de8 <z_arm_fault+0x200>)
    1d66:	f006 fd38 	bl	87da <printk>
    1d6a:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
    1d6e:	481d      	ldr	r0, [pc, #116]	; (1de4 <z_arm_fault+0x1fc>)
    1d70:	f006 fdbe 	bl	88f0 <assert_post_action>
    1d74:	e7a1      	b.n	1cba <z_arm_fault+0xd2>
    1d76:	491b      	ldr	r1, [pc, #108]	; (1de4 <z_arm_fault+0x1fc>)
    1d78:	f240 22c7 	movw	r2, #711	; 0x2c7
    1d7c:	481a      	ldr	r0, [pc, #104]	; (1de8 <z_arm_fault+0x200>)
    1d7e:	f006 fd2c 	bl	87da <printk>
    1d82:	f240 21c7 	movw	r1, #711	; 0x2c7
    1d86:	e7f2      	b.n	1d6e <z_arm_fault+0x186>
		reason = mem_manage_fault(esf, 0, recoverable);
    1d88:	2000      	movs	r0, #0
    1d8a:	f10d 0107 	add.w	r1, sp, #7
    1d8e:	e7c5      	b.n	1d1c <z_arm_fault+0x134>
		reason = bus_fault(esf, 0, recoverable);
    1d90:	2000      	movs	r0, #0
    1d92:	f10d 0107 	add.w	r1, sp, #7
    1d96:	e7d2      	b.n	1d3e <z_arm_fault+0x156>
		secure_fault(esf);
    1d98:	f7ff fed4 	bl	1b44 <secure_fault.isra.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1d9c:	2400      	movs	r4, #0
}
    1d9e:	e78c      	b.n	1cba <z_arm_fault+0xd2>
	PR_FAULT_INFO(
    1da0:	2145      	movs	r1, #69	; 0x45
    1da2:	481a      	ldr	r0, [pc, #104]	; (1e0c <z_arm_fault+0x224>)
    1da4:	e77f      	b.n	1ca6 <z_arm_fault+0xbe>
	PR_FAULT_INFO("***** %s %d) *****",
    1da6:	491a      	ldr	r1, [pc, #104]	; (1e10 <z_arm_fault+0x228>)
    1da8:	f414 7ff8 	tst.w	r4, #496	; 0x1f0
    1dac:	4a19      	ldr	r2, [pc, #100]	; (1e14 <z_arm_fault+0x22c>)
    1dae:	481a      	ldr	r0, [pc, #104]	; (1e18 <z_arm_fault+0x230>)
    1db0:	bf08      	it	eq
    1db2:	460a      	moveq	r2, r1
    1db4:	f1a7 0310 	sub.w	r3, r7, #16
    1db8:	2145      	movs	r1, #69	; 0x45
    1dba:	f006 fdac 	bl	8916 <z_log_minimal_printk>
    1dbe:	e7ed      	b.n	1d9c <z_arm_fault+0x1b4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1dc0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1dc4:	f023 0301 	bic.w	r3, r3, #1
    1dc8:	e789      	b.n	1cde <z_arm_fault+0xf6>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1dca:	f1b8 0f00 	cmp.w	r8, #0
    1dce:	f47f af3b 	bne.w	1c48 <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)msp;
    1dd2:	4605      	mov	r5, r0
			*nested_exc = true;
    1dd4:	2601      	movs	r6, #1
    1dd6:	e737      	b.n	1c48 <z_arm_fault+0x60>
    1dd8:	e000ed00 	.word	0xe000ed00
    1ddc:	0105eda6 	.word	0x0105eda6
    1de0:	0000a00a 	.word	0x0000a00a
    1de4:	00009cd9 	.word	0x00009cd9
    1de8:	00009765 	.word	0x00009765
    1dec:	0000a02e 	.word	0x0000a02e
    1df0:	0000a04a 	.word	0x0000a04a
    1df4:	0000a070 	.word	0x0000a070
    1df8:	0000a083 	.word	0x0000a083
    1dfc:	0000a0a7 	.word	0x0000a0a7
    1e00:	e000ed29 	.word	0xe000ed29
    1e04:	e000ed2a 	.word	0xe000ed2a
    1e08:	e000edd0 	.word	0xe000edd0
    1e0c:	0000a0c8 	.word	0x0000a0c8
    1e10:	00009fdc 	.word	0x00009fdc
    1e14:	00009ff1 	.word	0x00009ff1
    1e18:	0000a0f1 	.word	0x0000a0f1

00001e1c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1e1c:	4b04      	ldr	r3, [pc, #16]	; (1e30 <z_arm_fault_init+0x14>)
    1e1e:	695a      	ldr	r2, [r3, #20]
    1e20:	f042 0210 	orr.w	r2, r2, #16
    1e24:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    1e26:	695a      	ldr	r2, [r3, #20]
    1e28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    1e2c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1e2e:	4770      	bx	lr
    1e30:	e000ed00 	.word	0xe000ed00

00001e34 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1e34:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1e38:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1e3c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1e3e:	4672      	mov	r2, lr
	bl z_arm_fault
    1e40:	f7ff fed2 	bl	1be8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1e44:	bd01      	pop	{r0, pc}
    1e46:	bf00      	nop

00001e48 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1e48:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e4a:	2120      	movs	r1, #32
    1e4c:	4803      	ldr	r0, [pc, #12]	; (1e5c <z_arm_interrupt_init+0x14>)
    1e4e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1e50:	3301      	adds	r3, #1
    1e52:	2b41      	cmp	r3, #65	; 0x41
    1e54:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1e58:	d1f9      	bne.n	1e4e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1e5a:	4770      	bx	lr
    1e5c:	e000e100 	.word	0xe000e100

00001e60 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1e60:	2000      	movs	r0, #0
    msr CONTROL, r0
    1e62:	f380 8814 	msr	CONTROL, r0
    isb
    1e66:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    1e6a:	2000      	movs	r0, #0
    msr MSPLIM, r0
    1e6c:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    1e70:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1e74:	f007 f892 	bl	8f9c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1e78:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1e7a:	490e      	ldr	r1, [pc, #56]	; (1eb4 <__start+0x54>)
    str r0, [r1]
    1e7c:	6008      	str	r0, [r1, #0]
    dsb
    1e7e:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1e82:	480d      	ldr	r0, [pc, #52]	; (1eb8 <__start+0x58>)
    msr msp, r0
    1e84:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1e88:	f000 f83c 	bl	1f04 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1e8c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1e8e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1e92:	480a      	ldr	r0, [pc, #40]	; (1ebc <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1e94:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1e98:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1e9a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1e9e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1ea2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1ea4:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1ea6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1eaa:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1eae:	f7ff fc5d 	bl	176c <z_arm_prep_c>
    1eb2:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    1eb4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1eb8:	20002610 	.word	0x20002610
    ldr r0, =z_interrupt_stacks
    1ebc:	20002750 	.word	0x20002750

00001ec0 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    1ec0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1ec4:	4905      	ldr	r1, [pc, #20]	; (1edc <sys_arch_reboot+0x1c>)
    1ec6:	4b06      	ldr	r3, [pc, #24]	; (1ee0 <sys_arch_reboot+0x20>)
    1ec8:	68ca      	ldr	r2, [r1, #12]
    1eca:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1ece:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1ed0:	60cb      	str	r3, [r1, #12]
    1ed2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1ed6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1ed8:	e7fd      	b.n	1ed6 <sys_arch_reboot+0x16>
    1eda:	bf00      	nop
    1edc:	e000ed00 	.word	0xe000ed00
    1ee0:	05fa0004 	.word	0x05fa0004

00001ee4 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    1ee4:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    1ee6:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1ee8:	4a05      	ldr	r2, [pc, #20]	; (1f00 <z_arm_clear_arm_mpu_config+0x1c>)
    1eea:	6811      	ldr	r1, [r2, #0]
	int num_regions =
    1eec:	f3c1 2107 	ubfx	r1, r1, #8, #8
	for (i = 0; i < num_regions; i++) {
    1ef0:	428b      	cmp	r3, r1
    1ef2:	d100      	bne.n	1ef6 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    1ef4:	4770      	bx	lr
  mpu->RNR = rnr;
    1ef6:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    1ef8:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    1efa:	3301      	adds	r3, #1
    1efc:	e7f8      	b.n	1ef0 <z_arm_clear_arm_mpu_config+0xc>
    1efe:	bf00      	nop
    1f00:	e000ed90 	.word	0xe000ed90

00001f04 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1f04:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1f06:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1f08:	2400      	movs	r4, #0
    1f0a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1f0e:	f7ff ffe9 	bl	1ee4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1f12:	4a0e      	ldr	r2, [pc, #56]	; (1f4c <z_arm_init_arch_hw_at_boot+0x48>)
	z_arm_clear_arm_mpu_config();
    1f14:	4623      	mov	r3, r4
    1f16:	4611      	mov	r1, r2
		NVIC->ICER[i] = 0xFFFFFFFF;
    1f18:	f04f 34ff 	mov.w	r4, #4294967295
    1f1c:	f103 0020 	add.w	r0, r3, #32
    1f20:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1f22:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    1f24:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1f28:	d1f8      	bne.n	1f1c <z_arm_init_arch_hw_at_boot+0x18>
    1f2a:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1f2c:	f04f 30ff 	mov.w	r0, #4294967295
    1f30:	f103 0260 	add.w	r2, r3, #96	; 0x60
    1f34:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1f36:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1f38:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1f3c:	d1f8      	bne.n	1f30 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    1f3e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1f40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1f44:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1f48:	bd10      	pop	{r4, pc}
    1f4a:	bf00      	nop
    1f4c:	e000e100 	.word	0xe000e100

00001f50 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1f50:	4b06      	ldr	r3, [pc, #24]	; (1f6c <z_impl_k_thread_abort+0x1c>)
    1f52:	689b      	ldr	r3, [r3, #8]
    1f54:	4283      	cmp	r3, r0
    1f56:	d107      	bne.n	1f68 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1f58:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1f5c:	b123      	cbz	r3, 1f68 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1f5e:	4a04      	ldr	r2, [pc, #16]	; (1f70 <z_impl_k_thread_abort+0x20>)
    1f60:	6853      	ldr	r3, [r2, #4]
    1f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1f66:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    1f68:	f003 bafa 	b.w	5560 <z_thread_abort>
    1f6c:	20000a30 	.word	0x20000a30
    1f70:	e000ed00 	.word	0xe000ed00

00001f74 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
    1f74:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
    1f76:	4b0d      	ldr	r3, [pc, #52]	; (1fac <tz_nonsecure_state_setup+0x38>)
    1f78:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
    1f7a:	6803      	ldr	r3, [r0, #0]
    1f7c:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
    1f80:	6843      	ldr	r3, [r0, #4]
    1f82:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
    1f86:	7b02      	ldrb	r2, [r0, #12]
    1f88:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
    1f8c:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
    1f90:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
    1f94:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
    1f96:	bf48      	it	mi
    1f98:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
    1f9c:	b109      	cbz	r1, 1fa2 <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
    1f9e:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
    1fa2:	f383 8894 	msr	CONTROL_NS, r3
  __ASM volatile ("isb 0xF":::"memory");
    1fa6:	f3bf 8f6f 	isb	sy
}
    1faa:	4770      	bx	lr
    1fac:	e002ed00 	.word	0xe002ed00

00001fb0 <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1fb0:	4a08      	ldr	r2, [pc, #32]	; (1fd4 <tz_nbanked_exception_target_state_set+0x24>)
    1fb2:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
    1fb4:	b148      	cbz	r0, 1fca <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
    1fb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1fba:	041b      	lsls	r3, r3, #16
    1fbc:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    1fbe:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    1fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    1fc6:	60d3      	str	r3, [r2, #12]
}
    1fc8:	4770      	bx	lr
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1fca:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
    1fcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1fd0:	e7f5      	b.n	1fbe <tz_nbanked_exception_target_state_set+0xe>
    1fd2:	bf00      	nop
    1fd4:	e000ed00 	.word	0xe000ed00

00001fd8 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1fd8:	4a08      	ldr	r2, [pc, #32]	; (1ffc <tz_nonsecure_exception_prio_config+0x24>)
    1fda:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
    1fdc:	b140      	cbz	r0, 1ff0 <tz_nonsecure_exception_prio_config+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1fde:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
    1fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    1fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    1fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    1fec:	60d3      	str	r3, [r2, #12]
}
    1fee:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
    1ff0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ff4:	041b      	lsls	r3, r3, #16
    1ff6:	0c1b      	lsrs	r3, r3, #16
    1ff8:	e7f4      	b.n	1fe4 <tz_nonsecure_exception_prio_config+0xc>
    1ffa:	bf00      	nop
    1ffc:	e000ed00 	.word	0xe000ed00

00002000 <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2000:	4a08      	ldr	r2, [pc, #32]	; (2024 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x24>)
    2002:	68d3      	ldr	r3, [r2, #12]
	if (block) {
    2004:	b140      	cbz	r0, 2018 <tz_nonsecure_system_reset_req_block+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2006:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
    2008:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    200c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    2010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
    2014:	60d3      	str	r3, [r2, #12]
}
    2016:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
    2018:	f023 0308 	bic.w	r3, r3, #8
    201c:	041b      	lsls	r3, r3, #16
    201e:	0c1b      	lsrs	r3, r3, #16
    2020:	e7f4      	b.n	200c <tz_nonsecure_system_reset_req_block+0xc>
    2022:	bf00      	nop
    2024:	e000ed00 	.word	0xe000ed00

00002028 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
    2028:	4a03      	ldr	r2, [pc, #12]	; (2038 <tz_nonsecure_fpu_access_enable+0x10>)
    202a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    202e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    2032:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
    2036:	4770      	bx	lr
    2038:	e000ed00 	.word	0xe000ed00

0000203c <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
    203c:	4b08      	ldr	r3, [pc, #32]	; (2060 <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
    203e:	681a      	ldr	r2, [r3, #0]
    2040:	b118      	cbz	r0, 204a <tz_sau_configure+0xe>
    2042:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    2046:	601a      	str	r2, [r3, #0]
		}
	}
}
    2048:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
    204a:	f022 0201 	bic.w	r2, r2, #1
    204e:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    2050:	681a      	ldr	r2, [r3, #0]
		if (allns) {
    2052:	b111      	cbz	r1, 205a <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    2054:	f042 0202 	orr.w	r2, r2, #2
    2058:	e7f5      	b.n	2046 <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    205a:	f022 0202 	bic.w	r2, r2, #2
    205e:	e7f2      	b.n	2046 <tz_sau_configure+0xa>
    2060:	e000edd0 	.word	0xe000edd0

00002064 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    2064:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2066:	4c09      	ldr	r4, [pc, #36]	; (208c <z_arm_configure_static_mpu_regions+0x28>)
    2068:	4a09      	ldr	r2, [pc, #36]	; (2090 <z_arm_configure_static_mpu_regions+0x2c>)
    206a:	4623      	mov	r3, r4
    206c:	2101      	movs	r1, #1
    206e:	4809      	ldr	r0, [pc, #36]	; (2094 <z_arm_configure_static_mpu_regions+0x30>)
    2070:	f000 f91a 	bl	22a8 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    2074:	2300      	movs	r3, #0
    2076:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    2078:	4b07      	ldr	r3, [pc, #28]	; (2098 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    207a:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    207c:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    207e:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    2080:	9301      	str	r3, [sp, #4]
    2082:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    2084:	f000 f92c 	bl	22e0 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    2088:	b004      	add	sp, #16
    208a:	bd10      	pop	{r4, pc}
    208c:	20008000 	.word	0x20008000
    2090:	20000000 	.word	0x20000000
    2094:	00009458 	.word	0x00009458
    2098:	20000190 	.word	0x20000190

0000209c <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    209c:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    209e:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    20a0:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    20a2:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    20a6:	f004 031f 	and.w	r3, r4, #31
    20aa:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    20ac:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    20ae:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    20b0:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    20b4:	4904      	ldr	r1, [pc, #16]	; (20c8 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    20b6:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    20ba:	f043 0301 	orr.w	r3, r3, #1
    20be:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    20c0:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    20c2:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    20c4:	bd10      	pop	{r4, pc}
    20c6:	bf00      	nop
    20c8:	e000ed90 	.word	0xe000ed90

000020cc <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    20cc:	b530      	push	{r4, r5, lr}
	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
#if defined(CONFIG_CPU_CORTEX_R)
	region_conf.size = size_to_mpu_rasr_size(new_region->size);
#endif
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    20ce:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    20d0:	680c      	ldr	r4, [r1, #0]
{
    20d2:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    20d4:	890a      	ldrh	r2, [r1, #8]
    20d6:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
    20d8:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    20da:	3b01      	subs	r3, #1
    20dc:	f024 041f 	bic.w	r4, r4, #31
    20e0:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    20e2:	f002 021f 	and.w	r2, r2, #31
    20e6:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    20ea:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    20ee:	280f      	cmp	r0, #15
    20f0:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    20f2:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    20f6:	9303      	str	r3, [sp, #12]
    20f8:	d909      	bls.n	210e <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    20fa:	4602      	mov	r2, r0
    20fc:	2145      	movs	r1, #69	; 0x45
    20fe:	4806      	ldr	r0, [pc, #24]	; (2118 <mpu_configure_region+0x4c>)
    2100:	f006 fc09 	bl	8916 <z_log_minimal_printk>
    2104:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    2108:	4620      	mov	r0, r4
    210a:	b005      	add	sp, #20
    210c:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    210e:	4669      	mov	r1, sp
    2110:	f7ff ffc4 	bl	209c <region_init>
	return region_allocate_and_init(index,
    2114:	e7f8      	b.n	2108 <mpu_configure_region+0x3c>
    2116:	bf00      	nop
    2118:	0000a10d 	.word	0x0000a10d

0000211c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    211c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2120:	4689      	mov	r9, r1
    2122:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2124:	4606      	mov	r6, r0
    2126:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    212a:	4d52      	ldr	r5, [pc, #328]	; (2274 <mpu_configure_regions_and_partition.constprop.0+0x158>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    212c:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    212e:	45c8      	cmp	r8, r9
    2130:	da23      	bge.n	217a <mpu_configure_regions_and_partition.constprop.0+0x5e>
		if (regions[i].size == 0U) {
    2132:	6877      	ldr	r7, [r6, #4]
    2134:	2f00      	cmp	r7, #0
    2136:	d042      	beq.n	21be <mpu_configure_regions_and_partition.constprop.0+0xa2>
		&&
    2138:	2f1f      	cmp	r7, #31
    213a:	d917      	bls.n	216c <mpu_configure_regions_and_partition.constprop.0+0x50>
		&&
    213c:	06fb      	lsls	r3, r7, #27
    213e:	d115      	bne.n	216c <mpu_configure_regions_and_partition.constprop.0+0x50>
		((part->start &
    2140:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    2144:	f01a 0f1f 	tst.w	sl, #31
    2148:	d110      	bne.n	216c <mpu_configure_regions_and_partition.constprop.0+0x50>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    214a:	4650      	mov	r0, sl
    214c:	f006 fc3b 	bl	89c6 <arm_cmse_mpu_region_get>
    2150:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2152:	eb07 000a 	add.w	r0, r7, sl
    2156:	3801      	subs	r0, #1
    2158:	f006 fc35 	bl	89c6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    215c:	4583      	cmp	fp, r0
    215e:	d010      	beq.n	2182 <mpu_configure_regions_and_partition.constprop.0+0x66>
	return -EINVAL;
    2160:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    2164:	465a      	mov	r2, fp
    2166:	2145      	movs	r1, #69	; 0x45
    2168:	4843      	ldr	r0, [pc, #268]	; (2278 <mpu_configure_regions_and_partition.constprop.0+0x15c>)
    216a:	e002      	b.n	2172 <mpu_configure_regions_and_partition.constprop.0+0x56>
			LOG_ERR("Partition %u: sanity check failed.", i);
    216c:	4642      	mov	r2, r8
    216e:	2145      	movs	r1, #69	; 0x45
    2170:	4842      	ldr	r0, [pc, #264]	; (227c <mpu_configure_regions_and_partition.constprop.0+0x160>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2172:	f006 fbd0 	bl	8916 <z_log_minimal_printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    2176:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    217a:	4620      	mov	r0, r4
    217c:	b005      	add	sp, #20
    217e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    2182:	f11b 0f16 	cmn.w	fp, #22
    2186:	d0ed      	beq.n	2164 <mpu_configure_regions_and_partition.constprop.0+0x48>
			(u_reg_index > (reg_index - 1))) {
    2188:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    218a:	455b      	cmp	r3, fp
    218c:	dbea      	blt.n	2164 <mpu_configure_regions_and_partition.constprop.0+0x48>
	MPU->RNR = index;
    218e:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2192:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
    2194:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2198:	692f      	ldr	r7, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    219a:	f021 011f 	bic.w	r1, r1, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    219e:	e9d6 3200 	ldrd	r3, r2, [r6]
    21a2:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    21a4:	4299      	cmp	r1, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    21a6:	f047 071f 	orr.w	r7, r7, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    21aa:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    21ae:	d11c      	bne.n	21ea <mpu_configure_regions_and_partition.constprop.0+0xce>
    21b0:	4557      	cmp	r7, sl
    21b2:	d108      	bne.n	21c6 <mpu_configure_regions_and_partition.constprop.0+0xaa>
			mpu_configure_region(u_reg_index, &regions[i]);
    21b4:	4631      	mov	r1, r6
    21b6:	fa5f f08b 	uxtb.w	r0, fp
    21ba:	f7ff ff87 	bl	20cc <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    21be:	f108 0801 	add.w	r8, r8, #1
    21c2:	360c      	adds	r6, #12
    21c4:	e7b3      	b.n	212e <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    21c6:	4631      	mov	r1, r6
	MPU->RNR = index;
    21c8:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    21cc:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    21ce:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    21d2:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    21d6:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    21d8:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
    21da:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    21dc:	f7ff ff76 	bl	20cc <mpu_configure_region>
			if (reg_index == -EINVAL) {
    21e0:	f110 0f16 	cmn.w	r0, #22
    21e4:	d0c7      	beq.n	2176 <mpu_configure_regions_and_partition.constprop.0+0x5a>
			reg_index++;
    21e6:	1c44      	adds	r4, r0, #1
    21e8:	e7e9      	b.n	21be <mpu_configure_regions_and_partition.constprop.0+0xa2>
		} else if (reg_last == u_reg_last) {
    21ea:	3b01      	subs	r3, #1
    21ec:	4557      	cmp	r7, sl
    21ee:	b2e0      	uxtb	r0, r4
    21f0:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    21f4:	f8c5 b008 	str.w	fp, [r5, #8]
		} else if (reg_last == u_reg_last) {
    21f8:	d106      	bne.n	2208 <mpu_configure_regions_and_partition.constprop.0+0xec>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    21fa:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    21fc:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    21fe:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    2202:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2204:	612b      	str	r3, [r5, #16]
			reg_index =
    2206:	e7e9      	b.n	21dc <mpu_configure_regions_and_partition.constprop.0+0xc0>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2208:	6929      	ldr	r1, [r5, #16]
    220a:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    220e:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2210:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    2212:	4631      	mov	r1, r6
    2214:	f7ff ff5a 	bl	20cc <mpu_configure_region>
			if (reg_index == -EINVAL) {
    2218:	f110 0f16 	cmn.w	r0, #22
    221c:	d0ab      	beq.n	2176 <mpu_configure_regions_and_partition.constprop.0+0x5a>
	MPU->RNR = index;
    221e:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    2222:	68ea      	ldr	r2, [r5, #12]
    2224:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    2228:	3f01      	subs	r7, #1
	attr->rbar = MPU->RBAR &
    222a:	f362 0304 	bfi	r3, r2, #0, #5
    222e:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    2232:	692b      	ldr	r3, [r5, #16]
    2234:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2238:	085b      	lsrs	r3, r3, #1
    223a:	f363 1247 	bfi	r2, r3, #5, #3
    223e:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    2242:	e9d6 3200 	ldrd	r3, r2, [r6]
    2246:	4413      	add	r3, r2
    2248:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    224a:	f023 031f 	bic.w	r3, r3, #31
    224e:	443b      	add	r3, r7
			reg_index++;
    2250:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    2252:	eba3 0a0a 	sub.w	sl, r3, sl
    2256:	b2e0      	uxtb	r0, r4
    2258:	f02a 031f 	bic.w	r3, sl, #31
	if (index > (get_num_regions() - 1U)) {
    225c:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    225e:	9303      	str	r3, [sp, #12]
    2260:	d903      	bls.n	226a <mpu_configure_regions_and_partition.constprop.0+0x14e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2262:	4602      	mov	r2, r0
    2264:	2145      	movs	r1, #69	; 0x45
    2266:	4806      	ldr	r0, [pc, #24]	; (2280 <mpu_configure_regions_and_partition.constprop.0+0x164>)
    2268:	e783      	b.n	2172 <mpu_configure_regions_and_partition.constprop.0+0x56>
	region_init(index, region_conf);
    226a:	4669      	mov	r1, sp
    226c:	f7ff ff16 	bl	209c <region_init>
    2270:	e7b9      	b.n	21e6 <mpu_configure_regions_and_partition.constprop.0+0xca>
    2272:	bf00      	nop
    2274:	e000ed90 	.word	0xe000ed90
    2278:	0000a160 	.word	0x0000a160
    227c:	0000a138 	.word	0x0000a138
    2280:	0000a10d 	.word	0x0000a10d

00002284 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2284:	2205      	movs	r2, #5
    2286:	4b03      	ldr	r3, [pc, #12]	; (2294 <arm_core_mpu_enable+0x10>)
    2288:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    228a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    228e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2292:	4770      	bx	lr
    2294:	e000ed90 	.word	0xe000ed90

00002298 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2298:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    229c:	2200      	movs	r2, #0
    229e:	4b01      	ldr	r3, [pc, #4]	; (22a4 <arm_core_mpu_disable+0xc>)
    22a0:	605a      	str	r2, [r3, #4]
}
    22a2:	4770      	bx	lr
    22a4:	e000ed90 	.word	0xe000ed90

000022a8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    22a8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    22aa:	4c0a      	ldr	r4, [pc, #40]	; (22d4 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    22ac:	7822      	ldrb	r2, [r4, #0]
    22ae:	f7ff ff35 	bl	211c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    22b2:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    22b4:	3016      	adds	r0, #22
    22b6:	d10c      	bne.n	22d2 <arm_core_mpu_configure_static_mpu_regions+0x2a>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    22b8:	4907      	ldr	r1, [pc, #28]	; (22d8 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    22ba:	4808      	ldr	r0, [pc, #32]	; (22dc <arm_core_mpu_configure_static_mpu_regions+0x34>)
    22bc:	f240 1211 	movw	r2, #273	; 0x111
    22c0:	f006 fa8b 	bl	87da <printk>
			regions_num);
	}
}
    22c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    22c8:	f240 1111 	movw	r1, #273	; 0x111
    22cc:	4802      	ldr	r0, [pc, #8]	; (22d8 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    22ce:	f006 bb0f 	b.w	88f0 <assert_post_action>
}
    22d2:	bd10      	pop	{r4, pc}
    22d4:	20001450 	.word	0x20001450
    22d8:	0000a188 	.word	0x0000a188
    22dc:	00009765 	.word	0x00009765

000022e0 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    22e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22e4:	4d2d      	ldr	r5, [pc, #180]	; (239c <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>)
    22e6:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    22e8:	4606      	mov	r6, r0
    22ea:	f04f 0800 	mov.w	r8, #0
    22ee:	46ab      	mov	fp, r5
	MPU->RNR = index;
    22f0:	4f2b      	ldr	r7, [pc, #172]	; (23a0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    22f2:	45d0      	cmp	r8, sl
    22f4:	db02      	blt.n	22fc <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    22f6:	b003      	add	sp, #12
    22f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    22fc:	f8d6 9004 	ldr.w	r9, [r6, #4]
    2300:	f1b9 0f00 	cmp.w	r9, #0
    2304:	d044      	beq.n	2390 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    2306:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2308:	4608      	mov	r0, r1
    230a:	9101      	str	r1, [sp, #4]
    230c:	f006 fb5b 	bl	89c6 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2310:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2312:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2314:	eb09 0001 	add.w	r0, r9, r1
    2318:	3801      	subs	r0, #1
    231a:	f006 fb54 	bl	89c6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    231e:	4284      	cmp	r4, r0
    2320:	f04f 0214 	mov.w	r2, #20
    2324:	4b1f      	ldr	r3, [pc, #124]	; (23a4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
    2326:	d013      	beq.n	2350 <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
    2328:	f06f 0315 	mvn.w	r3, #21
    232c:	fb02 f808 	mul.w	r8, r2, r8
    2330:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    2334:	f240 1221 	movw	r2, #289	; 0x121
    2338:	491b      	ldr	r1, [pc, #108]	; (23a8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    233a:	481c      	ldr	r0, [pc, #112]	; (23ac <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
    233c:	f006 fa4d 	bl	87da <printk>
    2340:	f240 1121 	movw	r1, #289	; 0x121
    2344:	4818      	ldr	r0, [pc, #96]	; (23a8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
}
    2346:	b003      	add	sp, #12
    2348:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    234c:	f006 bad0 	b.w	88f0 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    2350:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    2354:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    2356:	d0ed      	beq.n	2334 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    2358:	7819      	ldrb	r1, [r3, #0]
    235a:	42a1      	cmp	r1, r4
    235c:	ddea      	ble.n	2334 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    235e:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    2362:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    2364:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    2366:	68fc      	ldr	r4, [r7, #12]
    2368:	f100 0108 	add.w	r1, r0, #8
    236c:	7b00      	ldrb	r0, [r0, #12]
    236e:	f364 0004 	bfi	r0, r4, #0, #5
    2372:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    2374:	6938      	ldr	r0, [r7, #16]
    2376:	790c      	ldrb	r4, [r1, #4]
    2378:	0840      	lsrs	r0, r0, #1
    237a:	f360 1447 	bfi	r4, r0, #5, #3
    237e:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    2380:	68f9      	ldr	r1, [r7, #12]
    2382:	f021 011f 	bic.w	r1, r1, #31
    2386:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    2388:	6939      	ldr	r1, [r7, #16]
    238a:	f021 011f 	bic.w	r1, r1, #31
    238e:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    2390:	f108 0801 	add.w	r8, r8, #1
    2394:	3514      	adds	r5, #20
    2396:	360c      	adds	r6, #12
    2398:	e7ab      	b.n	22f2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    239a:	bf00      	nop
    239c:	20000994 	.word	0x20000994
    23a0:	e000ed90 	.word	0xe000ed90
    23a4:	20001450 	.word	0x20001450
    23a8:	0000a188 	.word	0x0000a188
    23ac:	00009765 	.word	0x00009765

000023b0 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    23b0:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    23b2:	4d1b      	ldr	r5, [pc, #108]	; (2420 <z_arm_mpu_init+0x70>)
    23b4:	682e      	ldr	r6, [r5, #0]
    23b6:	2e10      	cmp	r6, #16
    23b8:	d90d      	bls.n	23d6 <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    23ba:	f44f 72a4 	mov.w	r2, #328	; 0x148
    23be:	4919      	ldr	r1, [pc, #100]	; (2424 <z_arm_mpu_init+0x74>)
    23c0:	4819      	ldr	r0, [pc, #100]	; (2428 <z_arm_mpu_init+0x78>)
    23c2:	f006 fa0a 	bl	87da <printk>
    23c6:	4817      	ldr	r0, [pc, #92]	; (2424 <z_arm_mpu_init+0x74>)
    23c8:	f44f 71a4 	mov.w	r1, #328	; 0x148
    23cc:	f006 fa90 	bl	88f0 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    23d0:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    23d4:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
    23d6:	f7ff ff5f 	bl	2298 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    23da:	2000      	movs	r0, #0
	MPU->MAIR0 =
    23dc:	4c13      	ldr	r4, [pc, #76]	; (242c <z_arm_mpu_init+0x7c>)
    23de:	4a14      	ldr	r2, [pc, #80]	; (2430 <z_arm_mpu_init+0x80>)
    23e0:	6322      	str	r2, [r4, #48]	; 0x30
    23e2:	4286      	cmp	r6, r0
    23e4:	d115      	bne.n	2412 <z_arm_mpu_init+0x62>
	static_regions_num = mpu_config.num_regions;
    23e6:	4b13      	ldr	r3, [pc, #76]	; (2434 <z_arm_mpu_init+0x84>)
    23e8:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
    23ea:	f7ff ff4b 	bl	2284 <arm_core_mpu_enable>
	__ASSERT(
    23ee:	6823      	ldr	r3, [r4, #0]
    23f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
    23f4:	2b10      	cmp	r3, #16
    23f6:	d00a      	beq.n	240e <z_arm_mpu_init+0x5e>
    23f8:	490a      	ldr	r1, [pc, #40]	; (2424 <z_arm_mpu_init+0x74>)
    23fa:	480b      	ldr	r0, [pc, #44]	; (2428 <z_arm_mpu_init+0x78>)
    23fc:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
    2400:	f006 f9eb 	bl	87da <printk>
    2404:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    2408:	4806      	ldr	r0, [pc, #24]	; (2424 <z_arm_mpu_init+0x74>)
    240a:	f006 fa71 	bl	88f0 <assert_post_action>
	return 0;
    240e:	2000      	movs	r0, #0
    2410:	e7e0      	b.n	23d4 <z_arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    2412:	6869      	ldr	r1, [r5, #4]
    2414:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    2418:	f7ff fe40 	bl	209c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    241c:	3001      	adds	r0, #1
    241e:	e7e0      	b.n	23e2 <z_arm_mpu_init+0x32>
    2420:	00009464 	.word	0x00009464
    2424:	0000a188 	.word	0x0000a188
    2428:	00009765 	.word	0x00009765
    242c:	e000ed90 	.word	0xe000ed90
    2430:	0044ffaa 	.word	0x0044ffaa
    2434:	20001450 	.word	0x20001450

00002438 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2438:	4b01      	ldr	r3, [pc, #4]	; (2440 <__stdout_hook_install+0x8>)
    243a:	6018      	str	r0, [r3, #0]
}
    243c:	4770      	bx	lr
    243e:	bf00      	nop
    2440:	20000024 	.word	0x20000024

00002444 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2448:	4c0e      	ldr	r4, [pc, #56]	; (2484 <onoff_start+0x40>)
{
    244a:	4607      	mov	r7, r0
	size_t offset = (size_t)(mgr - data->mgr);
    244c:	1b05      	subs	r5, r0, r4
    244e:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    2452:	250c      	movs	r5, #12
    2454:	435d      	muls	r5, r3
    2456:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
    245a:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    245c:	4420      	add	r0, r4
    245e:	2140      	movs	r1, #64	; 0x40
    2460:	f006 fb0d 	bl	8a7e <set_starting_state>
	if (err < 0) {
    2464:	1e01      	subs	r1, r0, #0
    2466:	db08      	blt.n	247a <onoff_start+0x36>
	subdata->cb = cb;
    2468:	4b07      	ldr	r3, [pc, #28]	; (2488 <onoff_start+0x44>)
    246a:	442c      	add	r4, r5
	subdata->user_data = user_data;
    246c:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    2470:	4b06      	ldr	r3, [pc, #24]	; (248c <onoff_start+0x48>)
    2472:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    2474:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    2478:	4718      	bx	r3
		notify(mgr, err);
    247a:	4638      	mov	r0, r7
    247c:	4633      	mov	r3, r6
}
    247e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    2482:	4718      	bx	r3
    2484:	200009a8 	.word	0x200009a8
    2488:	00008ae1 	.word	0x00008ae1
    248c:	000094a4 	.word	0x000094a4

00002490 <get_status>:
{
    2490:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2492:	b2cc      	uxtb	r4, r1
    2494:	2c01      	cmp	r4, #1
{
    2496:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2498:	d908      	bls.n	24ac <get_status+0x1c>
    249a:	4908      	ldr	r1, [pc, #32]	; (24bc <get_status+0x2c>)
    249c:	4808      	ldr	r0, [pc, #32]	; (24c0 <get_status+0x30>)
    249e:	2279      	movs	r2, #121	; 0x79
    24a0:	f006 f99b 	bl	87da <printk>
    24a4:	2179      	movs	r1, #121	; 0x79
    24a6:	4805      	ldr	r0, [pc, #20]	; (24bc <get_status+0x2c>)
    24a8:	f006 fa22 	bl	88f0 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    24ac:	210c      	movs	r1, #12
    24ae:	692b      	ldr	r3, [r5, #16]
    24b0:	fb04 3401 	mla	r4, r4, r1, r3
    24b4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    24b6:	f000 0007 	and.w	r0, r0, #7
    24ba:	bd38      	pop	{r3, r4, r5, pc}
    24bc:	0000a1ce 	.word	0x0000a1ce
    24c0:	00009765 	.word	0x00009765

000024c4 <stop>:
{
    24c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24c6:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    24c8:	2c01      	cmp	r4, #1
{
    24ca:	4605      	mov	r5, r0
    24cc:	4616      	mov	r6, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    24ce:	6907      	ldr	r7, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    24d0:	d90a      	bls.n	24e8 <stop+0x24>
    24d2:	4918      	ldr	r1, [pc, #96]	; (2534 <stop+0x70>)
    24d4:	4818      	ldr	r0, [pc, #96]	; (2538 <stop+0x74>)
    24d6:	f240 124d 	movw	r2, #333	; 0x14d
    24da:	f006 f97e 	bl	87da <printk>
    24de:	f240 114d 	movw	r1, #333	; 0x14d
    24e2:	4814      	ldr	r0, [pc, #80]	; (2534 <stop+0x70>)
    24e4:	f006 fa04 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    24e8:	f04f 0320 	mov.w	r3, #32
    24ec:	f3ef 8211 	mrs	r2, BASEPRI
    24f0:	f383 8812 	msr	BASEPRI_MAX, r3
    24f4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    24f8:	230c      	movs	r3, #12
    24fa:	fb03 7104 	mla	r1, r3, r4, r7
    24fe:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    2500:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    2504:	d001      	beq.n	250a <stop+0x46>
    2506:	428e      	cmp	r6, r1
    2508:	d111      	bne.n	252e <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    250a:	2101      	movs	r1, #1
	int err = 0;
    250c:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
    250e:	fb03 7304 	mla	r3, r3, r4, r7
    2512:	6499      	str	r1, [r3, #72]	; 0x48
	__asm__ volatile(
    2514:	f382 8811 	msr	BASEPRI, r2
    2518:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    251c:	b930      	cbnz	r0, 252c <stop+0x68>
	get_sub_config(dev, type)->stop();
    251e:	230c      	movs	r3, #12
    2520:	6869      	ldr	r1, [r5, #4]
    2522:	fb03 1404 	mla	r4, r3, r4, r1
    2526:	6863      	ldr	r3, [r4, #4]
    2528:	4798      	blx	r3
	return 0;
    252a:	2000      	movs	r0, #0
}
    252c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    252e:	f04f 30ff 	mov.w	r0, #4294967295
    2532:	e7ef      	b.n	2514 <stop+0x50>
    2534:	0000a1ce 	.word	0x0000a1ce
    2538:	00009765 	.word	0x00009765

0000253c <onoff_stop>:
{
    253c:	b570      	push	{r4, r5, r6, lr}
    253e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    2540:	4906      	ldr	r1, [pc, #24]	; (255c <onoff_stop+0x20>)
{
    2542:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    2544:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2546:	1149      	asrs	r1, r1, #5
    2548:	2240      	movs	r2, #64	; 0x40
    254a:	4805      	ldr	r0, [pc, #20]	; (2560 <onoff_stop+0x24>)
    254c:	f7ff ffba 	bl	24c4 <stop>
	notify(mgr, res);
    2550:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2552:	4601      	mov	r1, r0
	notify(mgr, res);
    2554:	4620      	mov	r0, r4
}
    2556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    255a:	4718      	bx	r3
    255c:	200009a8 	.word	0x200009a8
    2560:	00009008 	.word	0x00009008

00002564 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    2564:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2566:	2200      	movs	r2, #0
    2568:	2101      	movs	r1, #1
{
    256a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    256c:	2005      	movs	r0, #5
    256e:	f7ff f8d3 	bl	1718 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    2572:	2005      	movs	r0, #5
    2574:	f7ff f8b2 	bl	16dc <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2578:	480f      	ldr	r0, [pc, #60]	; (25b8 <clk_init+0x54>)
    257a:	f000 ff17 	bl	33ac <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    257e:	4b0f      	ldr	r3, [pc, #60]	; (25bc <clk_init+0x58>)
    2580:	4298      	cmp	r0, r3
    2582:	d115      	bne.n	25b0 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2584:	f000 ff32 	bl	33ec <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    2588:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    258a:	490d      	ldr	r1, [pc, #52]	; (25c0 <clk_init+0x5c>)
    258c:	4630      	mov	r0, r6
    258e:	f006 f931 	bl	87f4 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2592:	2800      	cmp	r0, #0
    2594:	db0b      	blt.n	25ae <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2596:	2501      	movs	r5, #1
    2598:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    259a:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    259c:	4908      	ldr	r1, [pc, #32]	; (25c0 <clk_init+0x5c>)
    259e:	f104 0020 	add.w	r0, r4, #32
    25a2:	f006 f927 	bl	87f4 <onoff_manager_init>
		if (err < 0) {
    25a6:	2800      	cmp	r0, #0
    25a8:	db01      	blt.n	25ae <clk_init+0x4a>
	}

	return 0;
    25aa:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    25ac:	6565      	str	r5, [r4, #84]	; 0x54
}
    25ae:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    25b0:	f06f 0004 	mvn.w	r0, #4
    25b4:	e7fb      	b.n	25ae <clk_init+0x4a>
    25b6:	bf00      	nop
    25b8:	000025f9 	.word	0x000025f9
    25bc:	0bad0000 	.word	0x0bad0000
    25c0:	000094bc 	.word	0x000094bc

000025c4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    25c4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    25c6:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    25c8:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    25ca:	434b      	muls	r3, r1
    25cc:	4808      	ldr	r0, [pc, #32]	; (25f0 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
    25ce:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    25d0:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    25d2:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
    25d4:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    25d8:	4418      	add	r0, r3
	sub_data->cb = NULL;
    25da:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    25dc:	f006 fa6d 	bl	8aba <set_on_state>
	if (callback) {
    25e0:	b12d      	cbz	r5, 25ee <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    25e2:	4632      	mov	r2, r6
    25e4:	462b      	mov	r3, r5
}
    25e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    25ea:	4802      	ldr	r0, [pc, #8]	; (25f4 <clkstarted_handle.constprop.0+0x30>)
    25ec:	4718      	bx	r3
}
    25ee:	bd70      	pop	{r4, r5, r6, pc}
    25f0:	200009a8 	.word	0x200009a8
    25f4:	00009008 	.word	0x00009008

000025f8 <clock_event_handler>:
	switch (event) {
    25f8:	2801      	cmp	r0, #1
{
    25fa:	b508      	push	{r3, lr}
	switch (event) {
    25fc:	d006      	beq.n	260c <clock_event_handler+0x14>
    25fe:	2803      	cmp	r0, #3
    2600:	d008      	beq.n	2614 <clock_event_handler+0x1c>
    2602:	b9a0      	cbnz	r0, 262e <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2604:	4b0f      	ldr	r3, [pc, #60]	; (2644 <clock_event_handler+0x4c>)
    2606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2608:	075b      	lsls	r3, r3, #29
    260a:	d119      	bne.n	2640 <clock_event_handler+0x48>
}
    260c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2610:	f7ff bfd8 	b.w	25c4 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    2614:	490c      	ldr	r1, [pc, #48]	; (2648 <clock_event_handler+0x50>)
    2616:	f240 225e 	movw	r2, #606	; 0x25e
    261a:	480c      	ldr	r0, [pc, #48]	; (264c <clock_event_handler+0x54>)
    261c:	f006 f8dd 	bl	87da <printk>
    2620:	f240 215e 	movw	r1, #606	; 0x25e
}
    2624:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    2628:	4807      	ldr	r0, [pc, #28]	; (2648 <clock_event_handler+0x50>)
    262a:	f006 b961 	b.w	88f0 <assert_post_action>
    262e:	4906      	ldr	r1, [pc, #24]	; (2648 <clock_event_handler+0x50>)
    2630:	f240 2262 	movw	r2, #610	; 0x262
    2634:	4805      	ldr	r0, [pc, #20]	; (264c <clock_event_handler+0x54>)
    2636:	f006 f8d0 	bl	87da <printk>
    263a:	f240 2162 	movw	r1, #610	; 0x262
    263e:	e7f1      	b.n	2624 <clock_event_handler+0x2c>
}
    2640:	bd08      	pop	{r3, pc}
    2642:	bf00      	nop
    2644:	200009a8 	.word	0x200009a8
    2648:	0000a1ce 	.word	0x0000a1ce
    264c:	00009765 	.word	0x00009765

00002650 <generic_hfclk_start>:
{
    2650:	b508      	push	{r3, lr}
	__asm__ volatile(
    2652:	f04f 0320 	mov.w	r3, #32
    2656:	f3ef 8111 	mrs	r1, BASEPRI
    265a:	f383 8812 	msr	BASEPRI_MAX, r3
    265e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2662:	4a12      	ldr	r2, [pc, #72]	; (26ac <generic_hfclk_start+0x5c>)
    2664:	6813      	ldr	r3, [r2, #0]
    2666:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    266a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    266e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2670:	d00c      	beq.n	268c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2672:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    2676:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    267a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    267e:	f013 0301 	ands.w	r3, r3, #1
    2682:	d003      	beq.n	268c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2684:	480a      	ldr	r0, [pc, #40]	; (26b0 <generic_hfclk_start+0x60>)
    2686:	f006 fa18 	bl	8aba <set_on_state>
			already_started = true;
    268a:	2301      	movs	r3, #1
	__asm__ volatile(
    268c:	f381 8811 	msr	BASEPRI, r1
    2690:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2694:	b123      	cbz	r3, 26a0 <generic_hfclk_start+0x50>
}
    2696:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    269a:	2000      	movs	r0, #0
    269c:	f7ff bf92 	b.w	25c4 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    26a0:	2001      	movs	r0, #1
}
    26a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    26a6:	f000 bebf 	b.w	3428 <nrfx_clock_start>
    26aa:	bf00      	nop
    26ac:	20000a00 	.word	0x20000a00
    26b0:	200009f0 	.word	0x200009f0

000026b4 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    26b4:	4b07      	ldr	r3, [pc, #28]	; (26d4 <generic_hfclk_stop+0x20>)
    26b6:	e8d3 2fef 	ldaex	r2, [r3]
    26ba:	f022 0102 	bic.w	r1, r2, #2
    26be:	e8c3 1fe0 	stlex	r0, r1, [r3]
    26c2:	2800      	cmp	r0, #0
    26c4:	d1f7      	bne.n	26b6 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    26c6:	07d3      	lsls	r3, r2, #31
    26c8:	d402      	bmi.n	26d0 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    26ca:	2001      	movs	r0, #1
    26cc:	f000 befc 	b.w	34c8 <nrfx_clock_stop>
}
    26d0:	4770      	bx	lr
    26d2:	bf00      	nop
    26d4:	20000a00 	.word	0x20000a00

000026d8 <api_blocking_start>:
{
    26d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    26da:	2200      	movs	r2, #0
    26dc:	2301      	movs	r3, #1
    26de:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    26e2:	466b      	mov	r3, sp
    26e4:	4a08      	ldr	r2, [pc, #32]	; (2708 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    26e6:	f8cd d000 	str.w	sp, [sp]
    26ea:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    26ee:	f006 fa09 	bl	8b04 <api_start>
	if (err < 0) {
    26f2:	2800      	cmp	r0, #0
    26f4:	db05      	blt.n	2702 <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    26f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    26fa:	2300      	movs	r3, #0
    26fc:	4668      	mov	r0, sp
    26fe:	f001 ffff 	bl	4700 <z_impl_k_sem_take>
}
    2702:	b005      	add	sp, #20
    2704:	f85d fb04 	ldr.w	pc, [sp], #4
    2708:	00008aff 	.word	0x00008aff

0000270c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    270c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    270e:	4808      	ldr	r0, [pc, #32]	; (2730 <uart_console_init+0x24>)
    2710:	4b08      	ldr	r3, [pc, #32]	; (2734 <uart_console_init+0x28>)
    2712:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    2714:	f006 fbdc 	bl	8ed0 <z_device_ready>
    2718:	b138      	cbz	r0, 272a <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    271a:	4807      	ldr	r0, [pc, #28]	; (2738 <uart_console_init+0x2c>)
    271c:	f7ff fe8c 	bl	2438 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2720:	4805      	ldr	r0, [pc, #20]	; (2738 <uart_console_init+0x2c>)
    2722:	f7fd ff27 	bl	574 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    2726:	2000      	movs	r0, #0
}
    2728:	bd08      	pop	{r3, pc}
		return -ENODEV;
    272a:	f06f 0012 	mvn.w	r0, #18
    272e:	e7fb      	b.n	2728 <uart_console_init+0x1c>
    2730:	00009068 	.word	0x00009068
    2734:	20000a04 	.word	0x20000a04
    2738:	0000273d 	.word	0x0000273d

0000273c <console_out>:
	if ('\n' == c) {
    273c:	280a      	cmp	r0, #10
{
    273e:	b538      	push	{r3, r4, r5, lr}
    2740:	4604      	mov	r4, r0
    2742:	4d07      	ldr	r5, [pc, #28]	; (2760 <console_out+0x24>)
	if ('\n' == c) {
    2744:	d104      	bne.n	2750 <console_out+0x14>
    2746:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2748:	6883      	ldr	r3, [r0, #8]
    274a:	210d      	movs	r1, #13
    274c:	685b      	ldr	r3, [r3, #4]
    274e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2750:	6828      	ldr	r0, [r5, #0]
    2752:	6883      	ldr	r3, [r0, #8]
    2754:	b2e1      	uxtb	r1, r4
    2756:	685b      	ldr	r3, [r3, #4]
    2758:	4798      	blx	r3
}
    275a:	4620      	mov	r0, r4
    275c:	bd38      	pop	{r3, r4, r5, pc}
    275e:	bf00      	nop
    2760:	20000a04 	.word	0x20000a04

00002764 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    2764:	b570      	push	{r4, r5, r6, lr}
    2766:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    2768:	460c      	mov	r4, r1
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    276a:	6905      	ldr	r5, [r0, #16]
    276c:	b941      	cbnz	r1, 2780 <gpio_nrfx_manage_callback+0x1c>
    276e:	491e      	ldr	r1, [pc, #120]	; (27e8 <gpio_nrfx_manage_callback+0x84>)
    2770:	481e      	ldr	r0, [pc, #120]	; (27ec <gpio_nrfx_manage_callback+0x88>)
    2772:	2224      	movs	r2, #36	; 0x24
    2774:	f006 f831 	bl	87da <printk>
    2778:	2124      	movs	r1, #36	; 0x24
    277a:	481b      	ldr	r0, [pc, #108]	; (27e8 <gpio_nrfx_manage_callback+0x84>)
    277c:	f006 f8b8 	bl	88f0 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    2780:	6863      	ldr	r3, [r4, #4]
    2782:	b943      	cbnz	r3, 2796 <gpio_nrfx_manage_callback+0x32>
    2784:	4918      	ldr	r1, [pc, #96]	; (27e8 <gpio_nrfx_manage_callback+0x84>)
    2786:	4819      	ldr	r0, [pc, #100]	; (27ec <gpio_nrfx_manage_callback+0x88>)
    2788:	2225      	movs	r2, #37	; 0x25
    278a:	f006 f826 	bl	87da <printk>
    278e:	2125      	movs	r1, #37	; 0x25
    2790:	4815      	ldr	r0, [pc, #84]	; (27e8 <gpio_nrfx_manage_callback+0x84>)
    2792:	f006 f8ad 	bl	88f0 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    2796:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    2798:	b15b      	cbz	r3, 27b2 <gpio_nrfx_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    279a:	2200      	movs	r2, #0
    279c:	429c      	cmp	r4, r3
    279e:	d113      	bne.n	27c8 <gpio_nrfx_manage_callback+0x64>
Z_GENLIST_REMOVE(slist, snode)
    27a0:	6823      	ldr	r3, [r4, #0]
    27a2:	b95a      	cbnz	r2, 27bc <gpio_nrfx_manage_callback+0x58>
    27a4:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
    27a6:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    27a8:	4294      	cmp	r4, r2
    27aa:	d100      	bne.n	27ae <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
    27ac:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    27ae:	2300      	movs	r3, #0
    27b0:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    27b2:	b976      	cbnz	r6, 27d2 <gpio_nrfx_manage_callback+0x6e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    27b4:	2000      	movs	r0, #0
				     callback, set);
}
    27b6:	bd70      	pop	{r4, r5, r6, pc}
    27b8:	460b      	mov	r3, r1
    27ba:	e7ef      	b.n	279c <gpio_nrfx_manage_callback+0x38>
    27bc:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    27be:	68ab      	ldr	r3, [r5, #8]
    27c0:	429c      	cmp	r4, r3
	list->tail = node;
    27c2:	bf08      	it	eq
    27c4:	60aa      	streq	r2, [r5, #8]
}
    27c6:	e7f2      	b.n	27ae <gpio_nrfx_manage_callback+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    27c8:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    27ca:	461a      	mov	r2, r3
    27cc:	2900      	cmp	r1, #0
    27ce:	d1f3      	bne.n	27b8 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
    27d0:	b13e      	cbz	r6, 27e2 <gpio_nrfx_manage_callback+0x7e>
Z_GENLIST_PREPEND(slist, snode)
    27d2:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    27d4:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    27d6:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
    27d8:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    27da:	2800      	cmp	r0, #0
    27dc:	d1ea      	bne.n	27b4 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
    27de:	60ac      	str	r4, [r5, #8]
}
    27e0:	e7e9      	b.n	27b6 <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
    27e2:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    27e6:	e7e6      	b.n	27b6 <gpio_nrfx_manage_callback+0x52>
    27e8:	0000a225 	.word	0x0000a225
    27ec:	00009765 	.word	0x00009765

000027f0 <gpio_nrfx_pin_interrupt_configure>:
{
    27f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    27f2:	6840      	ldr	r0, [r0, #4]
    27f4:	f001 041f 	and.w	r4, r1, #31
    27f8:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
    27fa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    27fe:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    2802:	f04f 0500 	mov.w	r5, #0
    2806:	d104      	bne.n	2812 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    2808:	4620      	mov	r0, r4
    280a:	f001 f98f 	bl	3b2c <nrfx_gpiote_trigger_disable>
	return 0;
    280e:	2000      	movs	r0, #0
    2810:	e04b      	b.n	28aa <gpio_nrfx_pin_interrupt_configure+0xba>
	if (mode == GPIO_INT_MODE_LEVEL) {
    2812:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2816:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    281a:	d148      	bne.n	28ae <gpio_nrfx_pin_interrupt_configure+0xbe>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    281c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    2820:	bf0c      	ite	eq
    2822:	2304      	moveq	r3, #4
    2824:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    2826:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    282a:	6883      	ldr	r3, [r0, #8]
    282c:	fa23 f101 	lsr.w	r1, r3, r1
    2830:	07c9      	lsls	r1, r1, #31
    2832:	d448      	bmi.n	28c6 <gpio_nrfx_pin_interrupt_configure+0xd6>
    2834:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    2838:	d145      	bne.n	28c6 <gpio_nrfx_pin_interrupt_configure+0xd6>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    283a:	0966      	lsrs	r6, r4, #5
    283c:	bf0c      	ite	eq
    283e:	f04f 33ff 	moveq.w	r3, #4294967295
    2842:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
    2844:	f004 051f 	and.w	r5, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
    2848:	40eb      	lsrs	r3, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    284a:	07da      	lsls	r2, r3, #31
    284c:	d40a      	bmi.n	2864 <gpio_nrfx_pin_interrupt_configure+0x74>
    284e:	4926      	ldr	r1, [pc, #152]	; (28e8 <gpio_nrfx_pin_interrupt_configure+0xf8>)
    2850:	4826      	ldr	r0, [pc, #152]	; (28ec <gpio_nrfx_pin_interrupt_configure+0xfc>)
    2852:	f240 2229 	movw	r2, #553	; 0x229
    2856:	f005 ffc0 	bl	87da <printk>
    285a:	f240 2129 	movw	r1, #553	; 0x229
    285e:	4822      	ldr	r0, [pc, #136]	; (28e8 <gpio_nrfx_pin_interrupt_configure+0xf8>)
    2860:	f006 f846 	bl	88f0 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2864:	b156      	cbz	r6, 287c <gpio_nrfx_pin_interrupt_configure+0x8c>
            NRFX_ASSERT(0);
    2866:	4920      	ldr	r1, [pc, #128]	; (28e8 <gpio_nrfx_pin_interrupt_configure+0xf8>)
    2868:	4820      	ldr	r0, [pc, #128]	; (28ec <gpio_nrfx_pin_interrupt_configure+0xfc>)
    286a:	f240 222e 	movw	r2, #558	; 0x22e
    286e:	f005 ffb4 	bl	87da <printk>
    2872:	f240 212e 	movw	r1, #558	; 0x22e
    2876:	481c      	ldr	r0, [pc, #112]	; (28e8 <gpio_nrfx_pin_interrupt_configure+0xf8>)
    2878:	f006 f83a 	bl	88f0 <assert_post_action>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    287c:	4b1c      	ldr	r3, [pc, #112]	; (28f0 <gpio_nrfx_pin_interrupt_configure+0x100>)
    287e:	3580      	adds	r5, #128	; 0x80
    2880:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2884:	07db      	lsls	r3, r3, #31
    2886:	d41e      	bmi.n	28c6 <gpio_nrfx_pin_interrupt_configure+0xd6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2888:	f10d 0507 	add.w	r5, sp, #7
    288c:	4629      	mov	r1, r5
    288e:	4620      	mov	r0, r4
    2890:	f001 f882 	bl	3998 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2894:	4b17      	ldr	r3, [pc, #92]	; (28f4 <gpio_nrfx_pin_interrupt_configure+0x104>)
    2896:	4298      	cmp	r0, r3
    2898:	d114      	bne.n	28c4 <gpio_nrfx_pin_interrupt_configure+0xd4>
			err = nrfx_gpiote_channel_alloc(&ch);
    289a:	4628      	mov	r0, r5
    289c:	f001 f8d8 	bl	3a50 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    28a0:	4b15      	ldr	r3, [pc, #84]	; (28f8 <gpio_nrfx_pin_interrupt_configure+0x108>)
    28a2:	4298      	cmp	r0, r3
    28a4:	d00e      	beq.n	28c4 <gpio_nrfx_pin_interrupt_configure+0xd4>
				return -ENOMEM;
    28a6:	f06f 000b 	mvn.w	r0, #11
}
    28aa:	b004      	add	sp, #16
    28ac:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    28ae:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    28b2:	d005      	beq.n	28c0 <gpio_nrfx_pin_interrupt_configure+0xd0>
    28b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    28b8:	bf0c      	ite	eq
    28ba:	2302      	moveq	r3, #2
    28bc:	2301      	movne	r3, #1
    28be:	e7b2      	b.n	2826 <gpio_nrfx_pin_interrupt_configure+0x36>
    28c0:	2303      	movs	r3, #3
    28c2:	e7b0      	b.n	2826 <gpio_nrfx_pin_interrupt_configure+0x36>
		trigger_config.p_in_channel = &ch;
    28c4:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    28c6:	2300      	movs	r3, #0
    28c8:	4620      	mov	r0, r4
    28ca:	4619      	mov	r1, r3
    28cc:	aa02      	add	r2, sp, #8
    28ce:	f000 ff45 	bl	375c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    28d2:	4b09      	ldr	r3, [pc, #36]	; (28f8 <gpio_nrfx_pin_interrupt_configure+0x108>)
    28d4:	4298      	cmp	r0, r3
    28d6:	d104      	bne.n	28e2 <gpio_nrfx_pin_interrupt_configure+0xf2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    28d8:	2101      	movs	r1, #1
    28da:	4620      	mov	r0, r4
    28dc:	f001 f8be 	bl	3a5c <nrfx_gpiote_trigger_enable>
    28e0:	e795      	b.n	280e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
    28e2:	f06f 0004 	mvn.w	r0, #4
    28e6:	e7e0      	b.n	28aa <gpio_nrfx_pin_interrupt_configure+0xba>
    28e8:	0000a252 	.word	0x0000a252
    28ec:	00009765 	.word	0x00009765
    28f0:	50842500 	.word	0x50842500
    28f4:	0bad0004 	.word	0x0bad0004
    28f8:	0bad0000 	.word	0x0bad0000

000028fc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    28fc:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    28fe:	f001 f897 	bl	3a30 <nrfx_gpiote_is_init>
    2902:	4604      	mov	r4, r0
    2904:	b968      	cbnz	r0, 2922 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    2906:	f001 f86b 	bl	39e0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    290a:	4b08      	ldr	r3, [pc, #32]	; (292c <gpio_nrfx_init+0x30>)
    290c:	4298      	cmp	r0, r3
    290e:	d10a      	bne.n	2926 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2910:	4621      	mov	r1, r4
    2912:	4807      	ldr	r0, [pc, #28]	; (2930 <gpio_nrfx_init+0x34>)
    2914:	f001 f83a 	bl	398c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2918:	4622      	mov	r2, r4
    291a:	2105      	movs	r1, #5
    291c:	200d      	movs	r0, #13
    291e:	f7fe fefb 	bl	1718 <z_arm_irq_priority_set>
		return 0;
    2922:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2924:	bd10      	pop	{r4, pc}
		return -EIO;
    2926:	f06f 0004 	mvn.w	r0, #4
    292a:	e7fb      	b.n	2924 <gpio_nrfx_init+0x28>
    292c:	0bad0000 	.word	0x0bad0000
    2930:	00002935 	.word	0x00002935

00002934 <nrfx_gpio_handler>:
{
    2934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2938:	0943      	lsrs	r3, r0, #5
    293a:	d129      	bne.n	2990 <nrfx_gpio_handler+0x5c>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    293c:	4b15      	ldr	r3, [pc, #84]	; (2994 <nrfx_gpio_handler+0x60>)
    293e:	685c      	ldr	r4, [r3, #4]
    2940:	b334      	cbz	r4, 2990 <nrfx_gpio_handler+0x5c>
    2942:	6825      	ldr	r5, [r4, #0]
	gpio_fire_callbacks(list, port, BIT(pin));
    2944:	2601      	movs	r6, #1
    2946:	2d00      	cmp	r5, #0
    2948:	bf38      	it	cc
    294a:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    294c:	f8df 804c 	ldr.w	r8, [pc, #76]	; 299c <nrfx_gpio_handler+0x68>
			__ASSERT(cb->handler, "No callback handler!");
    2950:	4f11      	ldr	r7, [pc, #68]	; (2998 <nrfx_gpio_handler+0x64>)
    2952:	f8df 904c 	ldr.w	r9, [pc, #76]	; 29a0 <nrfx_gpio_handler+0x6c>
    2956:	4086      	lsls	r6, r0
		if (cb->pin_mask & pins) {
    2958:	68a3      	ldr	r3, [r4, #8]
    295a:	421e      	tst	r6, r3
    295c:	d010      	beq.n	2980 <nrfx_gpio_handler+0x4c>
			__ASSERT(cb->handler, "No callback handler!");
    295e:	6863      	ldr	r3, [r4, #4]
    2960:	b943      	cbnz	r3, 2974 <nrfx_gpio_handler+0x40>
    2962:	4639      	mov	r1, r7
    2964:	4648      	mov	r0, r9
    2966:	2245      	movs	r2, #69	; 0x45
    2968:	f005 ff37 	bl	87da <printk>
    296c:	2145      	movs	r1, #69	; 0x45
    296e:	4638      	mov	r0, r7
    2970:	f005 ffbe 	bl	88f0 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    2974:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    2978:	4621      	mov	r1, r4
    297a:	4640      	mov	r0, r8
    297c:	4032      	ands	r2, r6
    297e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2980:	b135      	cbz	r5, 2990 <nrfx_gpio_handler+0x5c>
	return node->next;
    2982:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2984:	462c      	mov	r4, r5
    2986:	2b00      	cmp	r3, #0
    2988:	bf38      	it	cc
    298a:	2300      	movcc	r3, #0
    298c:	461d      	mov	r5, r3
    298e:	e7e3      	b.n	2958 <nrfx_gpio_handler+0x24>
}
    2990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2994:	20000a08 	.word	0x20000a08
    2998:	0000a225 	.word	0x0000a225
    299c:	00009020 	.word	0x00009020
    29a0:	00009765 	.word	0x00009765

000029a4 <gpio_nrfx_pin_configure>:
{
    29a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    29a8:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    29aa:	f001 051f 	and.w	r5, r1, #31
    29ae:	7b3b      	ldrb	r3, [r7, #12]
{
    29b0:	460e      	mov	r6, r1
	if (flags == GPIO_DISCONNECTED) {
    29b2:	4614      	mov	r4, r2
{
    29b4:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    29b6:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    29ba:	b9ca      	cbnz	r2, 29f0 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    29bc:	a902      	add	r1, sp, #8
    29be:	4628      	mov	r0, r5
    29c0:	f000 ffea 	bl	3998 <nrfx_gpiote_channel_get>
    29c4:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    29c6:	4628      	mov	r0, r5
    29c8:	f001 f8d2 	bl	3b70 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    29cc:	4b47      	ldr	r3, [pc, #284]	; (2aec <gpio_nrfx_pin_configure+0x148>)
    29ce:	4298      	cmp	r0, r3
    29d0:	d004      	beq.n	29dc <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    29d2:	f06f 0004 	mvn.w	r0, #4
}
    29d6:	b005      	add	sp, #20
    29d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    29dc:	4284      	cmp	r4, r0
    29de:	d105      	bne.n	29ec <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    29e0:	f89d 0008 	ldrb.w	r0, [sp, #8]
    29e4:	f001 f82e 	bl	3a44 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    29e8:	42a0      	cmp	r0, r4
    29ea:	d1f2      	bne.n	29d2 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    29ec:	2000      	movs	r0, #0
    29ee:	e7f2      	b.n	29d6 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    29f0:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    29f4:	f10d 0103 	add.w	r1, sp, #3
    29f8:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    29fa:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    29fe:	f000 ffcb 	bl	3998 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2a02:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    2a04:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2a06:	4649      	mov	r1, r9
    2a08:	4628      	mov	r0, r5
    2a0a:	aa02      	add	r2, sp, #8
    2a0c:	f000 fea6 	bl	375c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2a10:	4b36      	ldr	r3, [pc, #216]	; (2aec <gpio_nrfx_pin_configure+0x148>)
    2a12:	4298      	cmp	r0, r3
    2a14:	d002      	beq.n	2a1c <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2a16:	f06f 0015 	mvn.w	r0, #21
    2a1a:	e7dc      	b.n	29d6 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    2a1c:	4580      	cmp	r8, r0
    2a1e:	d103      	bne.n	2a28 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    2a20:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2a24:	f001 f80e 	bl	3a44 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    2a28:	05a3      	lsls	r3, r4, #22
    2a2a:	d54c      	bpl.n	2ac6 <gpio_nrfx_pin_configure+0x122>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2a2c:	4b30      	ldr	r3, [pc, #192]	; (2af0 <gpio_nrfx_pin_configure+0x14c>)
    2a2e:	4a31      	ldr	r2, [pc, #196]	; (2af4 <gpio_nrfx_pin_configure+0x150>)
    2a30:	4023      	ands	r3, r4
    2a32:	4293      	cmp	r3, r2
    2a34:	d039      	beq.n	2aaa <gpio_nrfx_pin_configure+0x106>
    2a36:	d80c      	bhi.n	2a52 <gpio_nrfx_pin_configure+0xae>
    2a38:	2b06      	cmp	r3, #6
    2a3a:	d014      	beq.n	2a66 <gpio_nrfx_pin_configure+0xc2>
    2a3c:	d804      	bhi.n	2a48 <gpio_nrfx_pin_configure+0xa4>
    2a3e:	b193      	cbz	r3, 2a66 <gpio_nrfx_pin_configure+0xc2>
    2a40:	2b02      	cmp	r3, #2
    2a42:	d1e8      	bne.n	2a16 <gpio_nrfx_pin_configure+0x72>
    2a44:	2304      	movs	r3, #4
    2a46:	e00e      	b.n	2a66 <gpio_nrfx_pin_configure+0xc2>
    2a48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2a4c:	d1e3      	bne.n	2a16 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    2a4e:	2301      	movs	r3, #1
    2a50:	e009      	b.n	2a66 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2a52:	4a29      	ldr	r2, [pc, #164]	; (2af8 <gpio_nrfx_pin_configure+0x154>)
    2a54:	4293      	cmp	r3, r2
    2a56:	d02a      	beq.n	2aae <gpio_nrfx_pin_configure+0x10a>
    2a58:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    2a5c:	d029      	beq.n	2ab2 <gpio_nrfx_pin_configure+0x10e>
    2a5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2a62:	d1d8      	bne.n	2a16 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    2a64:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    2a66:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2a6a:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    2a6e:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    2a72:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2a74:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    2a78:	bf4c      	ite	mi
    2a7a:	2303      	movmi	r3, #3
		return NRF_GPIO_PIN_PULLDOWN;
    2a7c:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2a80:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    2a82:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2a86:	d516      	bpl.n	2ab6 <gpio_nrfx_pin_configure+0x112>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2a88:	2101      	movs	r1, #1
    2a8a:	687b      	ldr	r3, [r7, #4]
    2a8c:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    2a90:	609e      	str	r6, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2a92:	2200      	movs	r2, #0
    2a94:	4628      	mov	r0, r5
    2a96:	a901      	add	r1, sp, #4
    2a98:	f000 ff06 	bl	38a8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2a9c:	4b13      	ldr	r3, [pc, #76]	; (2aec <gpio_nrfx_pin_configure+0x148>)
    2a9e:	4298      	cmp	r0, r3
    2aa0:	bf14      	ite	ne
    2aa2:	f06f 0015 	mvnne.w	r0, #21
    2aa6:	2000      	moveq	r0, #0
    2aa8:	e795      	b.n	29d6 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    2aaa:	2307      	movs	r3, #7
    2aac:	e7db      	b.n	2a66 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    2aae:	2305      	movs	r3, #5
    2ab0:	e7d9      	b.n	2a66 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    2ab2:	2303      	movs	r3, #3
    2ab4:	e7d7      	b.n	2a66 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2ab6:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2ab8:	bf41      	itttt	mi
    2aba:	2101      	movmi	r1, #1
    2abc:	687b      	ldrmi	r3, [r7, #4]
    2abe:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    2ac2:	60de      	strmi	r6, [r3, #12]
}
    2ac4:	e7e5      	b.n	2a92 <gpio_nrfx_pin_configure+0xee>
	if (flags & GPIO_PULL_UP) {
    2ac6:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2ac8:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    2acc:	bf4c      	ite	mi
    2ace:	2403      	movmi	r4, #3
    2ad0:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2ad4:	461a      	mov	r2, r3
    2ad6:	4628      	mov	r0, r5
    2ad8:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    2ada:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2ade:	f000 fe3d 	bl	375c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2ae2:	4b02      	ldr	r3, [pc, #8]	; (2aec <gpio_nrfx_pin_configure+0x148>)
    2ae4:	4298      	cmp	r0, r3
    2ae6:	d081      	beq.n	29ec <gpio_nrfx_pin_configure+0x48>
    2ae8:	e795      	b.n	2a16 <gpio_nrfx_pin_configure+0x72>
    2aea:	bf00      	nop
    2aec:	0bad0000 	.word	0x0bad0000
    2af0:	00f00006 	.word	0x00f00006
    2af4:	00100006 	.word	0x00100006
    2af8:	00400002 	.word	0x00400002

00002afc <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2afc:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2afe:	794b      	ldrb	r3, [r1, #5]
    2b00:	2b01      	cmp	r3, #1
    2b02:	d026      	beq.n	2b52 <uarte_nrfx_configure+0x56>
    2b04:	2b03      	cmp	r3, #3
    2b06:	d121      	bne.n	2b4c <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2b08:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2b0a:	798b      	ldrb	r3, [r1, #6]
    2b0c:	2b03      	cmp	r3, #3
    2b0e:	d11d      	bne.n	2b4c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2b10:	79cc      	ldrb	r4, [r1, #7]
    2b12:	b10c      	cbz	r4, 2b18 <uarte_nrfx_configure+0x1c>
    2b14:	2c01      	cmp	r4, #1
    2b16:	d119      	bne.n	2b4c <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2b18:	790a      	ldrb	r2, [r1, #4]
    2b1a:	b112      	cbz	r2, 2b22 <uarte_nrfx_configure+0x26>
    2b1c:	2a02      	cmp	r2, #2
    2b1e:	d115      	bne.n	2b4c <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2b20:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2b22:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2b24:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    2b26:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2b2a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    2b2c:	d065      	beq.n	2bfa <uarte_nrfx_configure+0xfe>
    2b2e:	d82d      	bhi.n	2b8c <uarte_nrfx_configure+0x90>
    2b30:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2b34:	d064      	beq.n	2c00 <uarte_nrfx_configure+0x104>
    2b36:	d816      	bhi.n	2b66 <uarte_nrfx_configure+0x6a>
    2b38:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2b3c:	d062      	beq.n	2c04 <uarte_nrfx_configure+0x108>
    2b3e:	d80a      	bhi.n	2b56 <uarte_nrfx_configure+0x5a>
    2b40:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2b44:	d061      	beq.n	2c0a <uarte_nrfx_configure+0x10e>
    2b46:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2b4a:	d061      	beq.n	2c10 <uarte_nrfx_configure+0x114>
    2b4c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2b50:	e052      	b.n	2bf8 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    2b52:	2600      	movs	r6, #0
    2b54:	e7d9      	b.n	2b0a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    2b56:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2b5a:	d05c      	beq.n	2c16 <uarte_nrfx_configure+0x11a>
    2b5c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2b60:	d1f4      	bne.n	2b4c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2b62:	4b37      	ldr	r3, [pc, #220]	; (2c40 <uarte_nrfx_configure+0x144>)
    2b64:	e03c      	b.n	2be0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2b66:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2b6a:	d057      	beq.n	2c1c <uarte_nrfx_configure+0x120>
    2b6c:	d807      	bhi.n	2b7e <uarte_nrfx_configure+0x82>
    2b6e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2b72:	d055      	beq.n	2c20 <uarte_nrfx_configure+0x124>
    2b74:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2b78:	d1e8      	bne.n	2b4c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2b7a:	4b32      	ldr	r3, [pc, #200]	; (2c44 <uarte_nrfx_configure+0x148>)
    2b7c:	e030      	b.n	2be0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2b7e:	f647 2712 	movw	r7, #31250	; 0x7a12
    2b82:	42bb      	cmp	r3, r7
    2b84:	d1e2      	bne.n	2b4c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2b86:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2b8a:	e029      	b.n	2be0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2b8c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2b90:	d048      	beq.n	2c24 <uarte_nrfx_configure+0x128>
    2b92:	d813      	bhi.n	2bbc <uarte_nrfx_configure+0xc0>
    2b94:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2b98:	d047      	beq.n	2c2a <uarte_nrfx_configure+0x12e>
    2b9a:	d809      	bhi.n	2bb0 <uarte_nrfx_configure+0xb4>
    2b9c:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    2ba0:	42bb      	cmp	r3, r7
    2ba2:	d044      	beq.n	2c2e <uarte_nrfx_configure+0x132>
    2ba4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2ba8:	d1d0      	bne.n	2b4c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2baa:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2bae:	e017      	b.n	2be0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2bb0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2bb4:	d1ca      	bne.n	2b4c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2bb6:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2bba:	e011      	b.n	2be0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2bbc:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2bc0:	d038      	beq.n	2c34 <uarte_nrfx_configure+0x138>
    2bc2:	d808      	bhi.n	2bd6 <uarte_nrfx_configure+0xda>
    2bc4:	4f20      	ldr	r7, [pc, #128]	; (2c48 <uarte_nrfx_configure+0x14c>)
    2bc6:	42bb      	cmp	r3, r7
    2bc8:	d037      	beq.n	2c3a <uarte_nrfx_configure+0x13e>
    2bca:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2bce:	d1bd      	bne.n	2b4c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2bd0:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2bd4:	e004      	b.n	2be0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2bd6:	4f1d      	ldr	r7, [pc, #116]	; (2c4c <uarte_nrfx_configure+0x150>)
    2bd8:	42bb      	cmp	r3, r7
    2bda:	d1b7      	bne.n	2b4c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2bdc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2be0:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    2be4:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
    2be6:	4334      	orrs	r4, r6
    2be8:	4322      	orrs	r2, r4
    2bea:	3304      	adds	r3, #4
    2bec:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2bee:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    2bf2:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2bf6:	2000      	movs	r0, #0
}
    2bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2bfa:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2bfe:	e7ef      	b.n	2be0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2c00:	4b13      	ldr	r3, [pc, #76]	; (2c50 <uarte_nrfx_configure+0x154>)
    2c02:	e7ed      	b.n	2be0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2c04:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2c08:	e7ea      	b.n	2be0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    2c0a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2c0e:	e7e7      	b.n	2be0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2c10:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2c14:	e7e4      	b.n	2be0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2c16:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2c1a:	e7e1      	b.n	2be0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2c1c:	4b0d      	ldr	r3, [pc, #52]	; (2c54 <uarte_nrfx_configure+0x158>)
    2c1e:	e7df      	b.n	2be0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2c20:	4b0d      	ldr	r3, [pc, #52]	; (2c58 <uarte_nrfx_configure+0x15c>)
    2c22:	e7dd      	b.n	2be0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2c24:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2c28:	e7da      	b.n	2be0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2c2a:	4b0c      	ldr	r3, [pc, #48]	; (2c5c <uarte_nrfx_configure+0x160>)
    2c2c:	e7d8      	b.n	2be0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2c2e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2c32:	e7d5      	b.n	2be0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2c34:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2c38:	e7d2      	b.n	2be0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2c3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2c3e:	e7cf      	b.n	2be0 <uarte_nrfx_configure+0xe4>
    2c40:	0013b000 	.word	0x0013b000
    2c44:	004ea000 	.word	0x004ea000
    2c48:	0003d090 	.word	0x0003d090
    2c4c:	000f4240 	.word	0x000f4240
    2c50:	00275000 	.word	0x00275000
    2c54:	0075c000 	.word	0x0075c000
    2c58:	003af000 	.word	0x003af000
    2c5c:	013a9000 	.word	0x013a9000

00002c60 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2c60:	6803      	ldr	r3, [r0, #0]
{
    2c62:	b510      	push	{r4, lr}
    switch (port)
    2c64:	095a      	lsrs	r2, r3, #5
    2c66:	bf0c      	ite	eq
    2c68:	f04f 32ff 	moveq.w	r2, #4294967295
    2c6c:	2200      	movne	r2, #0
    pin_number &= 0x1F;
    2c6e:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
    2c72:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2c76:	07db      	lsls	r3, r3, #31
{
    2c78:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2c7a:	d40a      	bmi.n	2c92 <nrf_gpio_pin_port_decode+0x32>
    2c7c:	490e      	ldr	r1, [pc, #56]	; (2cb8 <nrf_gpio_pin_port_decode+0x58>)
    2c7e:	480f      	ldr	r0, [pc, #60]	; (2cbc <nrf_gpio_pin_port_decode+0x5c>)
    2c80:	f240 2229 	movw	r2, #553	; 0x229
    2c84:	f005 fda9 	bl	87da <printk>
    2c88:	f240 2129 	movw	r1, #553	; 0x229
    2c8c:	480a      	ldr	r0, [pc, #40]	; (2cb8 <nrf_gpio_pin_port_decode+0x58>)
    2c8e:	f005 fe2f 	bl	88f0 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    2c92:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    2c94:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2c98:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    2c9a:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2c9c:	d00a      	beq.n	2cb4 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
    2c9e:	4906      	ldr	r1, [pc, #24]	; (2cb8 <nrf_gpio_pin_port_decode+0x58>)
    2ca0:	4806      	ldr	r0, [pc, #24]	; (2cbc <nrf_gpio_pin_port_decode+0x5c>)
    2ca2:	f240 222e 	movw	r2, #558	; 0x22e
    2ca6:	f005 fd98 	bl	87da <printk>
    2caa:	f240 212e 	movw	r1, #558	; 0x22e
    2cae:	4802      	ldr	r0, [pc, #8]	; (2cb8 <nrf_gpio_pin_port_decode+0x58>)
    2cb0:	f005 fe1e 	bl	88f0 <assert_post_action>
}
    2cb4:	4802      	ldr	r0, [pc, #8]	; (2cc0 <nrf_gpio_pin_port_decode+0x60>)
    2cb6:	bd10      	pop	{r4, pc}
    2cb8:	0000a252 	.word	0x0000a252
    2cbc:	00009765 	.word	0x00009765
    2cc0:	50842500 	.word	0x50842500

00002cc4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    2cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cc6:	4605      	mov	r5, r0
    2cc8:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    2cca:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2ccc:	f006 f926 	bl	8f1c <k_is_in_isr>
    2cd0:	b910      	cbnz	r0, 2cd8 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    2cd2:	4b2c      	ldr	r3, [pc, #176]	; (2d84 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    2cd4:	781b      	ldrb	r3, [r3, #0]
    2cd6:	b983      	cbnz	r3, 2cfa <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2cd8:	f04f 0320 	mov.w	r3, #32
    2cdc:	f3ef 8411 	mrs	r4, BASEPRI
    2ce0:	f383 8812 	msr	BASEPRI_MAX, r3
    2ce4:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    2ce8:	4628      	mov	r0, r5
    2cea:	f005 ff8e 	bl	8c0a <is_tx_ready>
    2cee:	bb28      	cbnz	r0, 2d3c <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    2cf0:	f384 8811 	msr	BASEPRI, r4
    2cf4:	f3bf 8f6f 	isb	sy
}
    2cf8:	e7ee      	b.n	2cd8 <uarte_nrfx_poll_out+0x14>
{
    2cfa:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2cfc:	4628      	mov	r0, r5
    2cfe:	f005 ff84 	bl	8c0a <is_tx_ready>
    2d02:	b970      	cbnz	r0, 2d22 <uarte_nrfx_poll_out+0x5e>
    2d04:	2001      	movs	r0, #1
    2d06:	f006 f876 	bl	8df6 <nrfx_busy_wait>
    2d0a:	3c01      	subs	r4, #1
    2d0c:	d1f6      	bne.n	2cfc <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    2d0e:	2100      	movs	r1, #0
    2d10:	2021      	movs	r0, #33	; 0x21
    2d12:	f002 fbef 	bl	54f4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2d16:	e7f0      	b.n	2cfa <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2d18:	f384 8811 	msr	BASEPRI, r4
    2d1c:	f3bf 8f6f 	isb	sy
}
    2d20:	e7f5      	b.n	2d0e <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    2d22:	f04f 0320 	mov.w	r3, #32
    2d26:	f3ef 8411 	mrs	r4, BASEPRI
    2d2a:	f383 8812 	msr	BASEPRI_MAX, r3
    2d2e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2d32:	4628      	mov	r0, r5
    2d34:	f005 ff69 	bl	8c0a <is_tx_ready>
    2d38:	2800      	cmp	r0, #0
    2d3a:	d0ed      	beq.n	2d18 <uarte_nrfx_poll_out+0x54>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    2d3c:	2201      	movs	r2, #1
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    2d3e:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    2d42:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    2d44:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2d46:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2d4a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2d4e:	2200      	movs	r2, #0
    2d50:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2d54:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    2d58:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    2d5c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2d60:	684a      	ldr	r2, [r1, #4]
    2d62:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2d64:	bf41      	itttt	mi
    2d66:	2208      	movmi	r2, #8
    2d68:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    2d6c:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    2d70:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2d74:	2201      	movs	r2, #1
    2d76:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    2d78:	f384 8811 	msr	BASEPRI, r4
    2d7c:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    2d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d82:	bf00      	nop
    2d84:	20001451 	.word	0x20001451

00002d88 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
    2d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2d8a:	460f      	mov	r7, r1
    2d8c:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
    2d8e:	b940      	cbnz	r0, 2da2 <entropy_cc3xx_rng_get_entropy+0x1a>
    2d90:	4918      	ldr	r1, [pc, #96]	; (2df4 <entropy_cc3xx_rng_get_entropy+0x6c>)
    2d92:	4819      	ldr	r0, [pc, #100]	; (2df8 <entropy_cc3xx_rng_get_entropy+0x70>)
    2d94:	2224      	movs	r2, #36	; 0x24
    2d96:	f005 fd20 	bl	87da <printk>
    2d9a:	2124      	movs	r1, #36	; 0x24
    2d9c:	4815      	ldr	r0, [pc, #84]	; (2df4 <entropy_cc3xx_rng_get_entropy+0x6c>)
    2d9e:	f005 fda7 	bl	88f0 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
    2da2:	b947      	cbnz	r7, 2db6 <entropy_cc3xx_rng_get_entropy+0x2e>
    2da4:	4913      	ldr	r1, [pc, #76]	; (2df4 <entropy_cc3xx_rng_get_entropy+0x6c>)
    2da6:	4814      	ldr	r0, [pc, #80]	; (2df8 <entropy_cc3xx_rng_get_entropy+0x70>)
    2da8:	2225      	movs	r2, #37	; 0x25
    2daa:	f005 fd16 	bl	87da <printk>
    2dae:	2125      	movs	r1, #37	; 0x25
    2db0:	4810      	ldr	r0, [pc, #64]	; (2df4 <entropy_cc3xx_rng_get_entropy+0x6c>)
    2db2:	f005 fd9d 	bl	88f0 <assert_post_action>
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
    2db6:	f44f 6580 	mov.w	r5, #1024	; 0x400
    2dba:	2400      	movs	r4, #0
    2dbc:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
    2dc0:	42a6      	cmp	r6, r4
    2dc2:	d801      	bhi.n	2dc8 <entropy_cc3xx_rng_get_entropy+0x40>
		offset += chunk_size;
	}
#endif

	return res;
}
    2dc4:	b003      	add	sp, #12
    2dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
    2dc8:	1b33      	subs	r3, r6, r4
    2dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2dce:	bf38      	it	cc
    2dd0:	461d      	movcc	r5, r3
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
    2dd2:	2000      	movs	r0, #0
    2dd4:	ab01      	add	r3, sp, #4
    2dd6:	462a      	mov	r2, r5
    2dd8:	1939      	adds	r1, r7, r4
    2dda:	f002 ffb3 	bl	5d44 <nrf_cc3xx_platform_ctr_drbg_get>
		if (olen != chunk_size) {
    2dde:	9b01      	ldr	r3, [sp, #4]
    2de0:	42ab      	cmp	r3, r5
    2de2:	d103      	bne.n	2dec <entropy_cc3xx_rng_get_entropy+0x64>
		if (res != 0) {
    2de4:	2800      	cmp	r0, #0
    2de6:	d1ed      	bne.n	2dc4 <entropy_cc3xx_rng_get_entropy+0x3c>
		offset += chunk_size;
    2de8:	442c      	add	r4, r5
    2dea:	e7e9      	b.n	2dc0 <entropy_cc3xx_rng_get_entropy+0x38>
			return -EINVAL;
    2dec:	f06f 0015 	mvn.w	r0, #21
    2df0:	e7e8      	b.n	2dc4 <entropy_cc3xx_rng_get_entropy+0x3c>
    2df2:	bf00      	nop
    2df4:	0000a2aa 	.word	0x0000a2aa
    2df8:	00009765 	.word	0x00009765

00002dfc <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
    2dfc:	4b0b      	ldr	r3, [pc, #44]	; (2e2c <elapsed+0x30>)
{
    2dfe:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
    2e00:	689a      	ldr	r2, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
    2e02:	6819      	ldr	r1, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
    2e04:	6898      	ldr	r0, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
    2e06:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    2e0a:	4b09      	ldr	r3, [pc, #36]	; (2e30 <elapsed+0x34>)
    2e0c:	4909      	ldr	r1, [pc, #36]	; (2e34 <elapsed+0x38>)
    2e0e:	d101      	bne.n	2e14 <elapsed+0x18>
	    || (val1 < val2)) {
    2e10:	4282      	cmp	r2, r0
    2e12:	d205      	bcs.n	2e20 <elapsed+0x24>
		overflow_cyc += last_load;
    2e14:	681a      	ldr	r2, [r3, #0]
    2e16:	680c      	ldr	r4, [r1, #0]
    2e18:	4422      	add	r2, r4
    2e1a:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
    2e1c:	4a03      	ldr	r2, [pc, #12]	; (2e2c <elapsed+0x30>)
    2e1e:	6812      	ldr	r2, [r2, #0]
	}

	return (last_load - val2) + overflow_cyc;
    2e20:	681b      	ldr	r3, [r3, #0]
    2e22:	680a      	ldr	r2, [r1, #0]
    2e24:	4413      	add	r3, r2
}
    2e26:	1a18      	subs	r0, r3, r0
    2e28:	bd10      	pop	{r4, pc}
    2e2a:	bf00      	nop
    2e2c:	e000e010 	.word	0xe000e010
    2e30:	20000a24 	.word	0x20000a24
    2e34:	20000a1c 	.word	0x20000a1c

00002e38 <sys_clock_driver_init>:
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2e38:	2220      	movs	r2, #32
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
    2e3a:	2000      	movs	r0, #0
    2e3c:	4b07      	ldr	r3, [pc, #28]	; (2e5c <sys_clock_driver_init+0x24>)
    2e3e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    2e42:	4b07      	ldr	r3, [pc, #28]	; (2e60 <sys_clock_driver_init+0x28>)
    2e44:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
    2e46:	4b07      	ldr	r3, [pc, #28]	; (2e64 <sys_clock_driver_init+0x2c>)
    2e48:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
    2e4a:	4b07      	ldr	r3, [pc, #28]	; (2e68 <sys_clock_driver_init+0x30>)
    2e4c:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
    2e4e:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
    2e50:	681a      	ldr	r2, [r3, #0]
    2e52:	f042 0207 	orr.w	r2, r2, #7
    2e56:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
    2e58:	4770      	bx	lr
    2e5a:	bf00      	nop
    2e5c:	e000ed00 	.word	0xe000ed00
    2e60:	20000a1c 	.word	0x20000a1c
    2e64:	20000a24 	.word	0x20000a24
    2e68:	e000e010 	.word	0xe000e010

00002e6c <sys_clock_isr>:
{
    2e6c:	b508      	push	{r3, lr}
	elapsed();
    2e6e:	f7ff ffc5 	bl	2dfc <elapsed>
	cycle_count += overflow_cyc;
    2e72:	4a09      	ldr	r2, [pc, #36]	; (2e98 <sys_clock_isr+0x2c>)
    2e74:	4909      	ldr	r1, [pc, #36]	; (2e9c <sys_clock_isr+0x30>)
    2e76:	6813      	ldr	r3, [r2, #0]
    2e78:	6808      	ldr	r0, [r1, #0]
    2e7a:	4403      	add	r3, r0
    2e7c:	600b      	str	r3, [r1, #0]
	overflow_cyc = 0;
    2e7e:	2100      	movs	r1, #0
    2e80:	6011      	str	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
    2e82:	4a07      	ldr	r2, [pc, #28]	; (2ea0 <sys_clock_isr+0x34>)
    2e84:	6810      	ldr	r0, [r2, #0]
		announced_cycles += dticks * CYC_PER_TICK;
    2e86:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
    2e88:	1a18      	subs	r0, r3, r0
    2e8a:	f002 fdd1 	bl	5a30 <sys_clock_announce>
}
    2e8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    2e92:	f7fe bd2d 	b.w	18f0 <z_arm_exc_exit>
    2e96:	bf00      	nop
    2e98:	20000a24 	.word	0x20000a24
    2e9c:	20000a18 	.word	0x20000a18
    2ea0:	20000a14 	.word	0x20000a14

00002ea4 <sys_clock_set_timeout>:
{
    2ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ea8:	4f39      	ldr	r7, [pc, #228]	; (2f90 <sys_clock_set_timeout+0xec>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
    2eaa:	b159      	cbz	r1, 2ec4 <sys_clock_set_timeout+0x20>
    2eac:	1c43      	adds	r3, r0, #1
    2eae:	d109      	bne.n	2ec4 <sys_clock_set_timeout+0x20>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
    2eb0:	4a38      	ldr	r2, [pc, #224]	; (2f94 <sys_clock_set_timeout+0xf0>)
    2eb2:	6813      	ldr	r3, [r2, #0]
    2eb4:	f023 0301 	bic.w	r3, r3, #1
    2eb8:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
    2eba:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    2ebe:	603b      	str	r3, [r7, #0]
}
    2ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2ec4:	4b34      	ldr	r3, [pc, #208]	; (2f98 <sys_clock_set_timeout+0xf4>)
	uint32_t last_load_ = last_load;
    2ec6:	683d      	ldr	r5, [r7, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2ec8:	f1b0 3fff 	cmp.w	r0, #4294967295
    2ecc:	bf08      	it	eq
    2ece:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2ed0:	1e44      	subs	r4, r0, #1
    2ed2:	2c00      	cmp	r4, #0
    2ed4:	dd54      	ble.n	2f80 <sys_clock_set_timeout+0xdc>
    2ed6:	429c      	cmp	r4, r3
    2ed8:	bfa8      	it	ge
    2eda:	461c      	movge	r4, r3
	__asm__ volatile(
    2edc:	f04f 0320 	mov.w	r3, #32
    2ee0:	f3ef 8611 	mrs	r6, BASEPRI
    2ee4:	f383 8812 	msr	BASEPRI_MAX, r3
    2ee8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2eec:	482b      	ldr	r0, [pc, #172]	; (2f9c <sys_clock_set_timeout+0xf8>)
    2eee:	f001 fa11 	bl	4314 <z_spin_lock_valid>
    2ef2:	b940      	cbnz	r0, 2f06 <sys_clock_set_timeout+0x62>
    2ef4:	492a      	ldr	r1, [pc, #168]	; (2fa0 <sys_clock_set_timeout+0xfc>)
    2ef6:	482b      	ldr	r0, [pc, #172]	; (2fa4 <sys_clock_set_timeout+0x100>)
    2ef8:	2281      	movs	r2, #129	; 0x81
    2efa:	f005 fc6e 	bl	87da <printk>
    2efe:	2181      	movs	r1, #129	; 0x81
    2f00:	4827      	ldr	r0, [pc, #156]	; (2fa0 <sys_clock_set_timeout+0xfc>)
    2f02:	f005 fcf5 	bl	88f0 <assert_post_action>
	z_spin_lock_set_owner(l);
    2f06:	4825      	ldr	r0, [pc, #148]	; (2f9c <sys_clock_set_timeout+0xf8>)
    2f08:	f001 fa20 	bl	434c <z_spin_lock_set_owner>
	uint32_t pending = elapsed();
    2f0c:	f7ff ff76 	bl	2dfc <elapsed>
	overflow_cyc = 0U;
    2f10:	f04f 0e00 	mov.w	lr, #0
	val1 = SysTick->VAL;
    2f14:	f8df 807c 	ldr.w	r8, [pc, #124]	; 2f94 <sys_clock_set_timeout+0xf0>
	overflow_cyc = 0U;
    2f18:	f8df c090 	ldr.w	ip, [pc, #144]	; 2fac <sys_clock_set_timeout+0x108>
	cycle_count += pending;
    2f1c:	4a22      	ldr	r2, [pc, #136]	; (2fa8 <sys_clock_set_timeout+0x104>)
	val1 = SysTick->VAL;
    2f1e:	f8d8 1008 	ldr.w	r1, [r8, #8]
	overflow_cyc = 0U;
    2f22:	f8cc e000 	str.w	lr, [ip]
	uint32_t unannounced = cycle_count - announced_cycles;
    2f26:	f8df c088 	ldr.w	ip, [pc, #136]	; 2fb0 <sys_clock_set_timeout+0x10c>
	cycle_count += pending;
    2f2a:	6813      	ldr	r3, [r2, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
    2f2c:	f8dc c000 	ldr.w	ip, [ip]
	cycle_count += pending;
    2f30:	4418      	add	r0, r3
	uint32_t unannounced = cycle_count - announced_cycles;
    2f32:	eba0 0c0c 	sub.w	ip, r0, ip
	if ((int32_t)unannounced < 0) {
    2f36:	45f4      	cmp	ip, lr
    2f38:	4643      	mov	r3, r8
	cycle_count += pending;
    2f3a:	6010      	str	r0, [r2, #0]
	if ((int32_t)unannounced < 0) {
    2f3c:	da22      	bge.n	2f84 <sys_clock_set_timeout+0xe0>
		last_load = MIN_DELAY;
    2f3e:	f44f 6480 	mov.w	r4, #1024	; 0x400
			last_load = delay;
    2f42:	603c      	str	r4, [r7, #0]
	SysTick->LOAD = last_load - 1;
    2f44:	683f      	ldr	r7, [r7, #0]
	val2 = SysTick->VAL;
    2f46:	689c      	ldr	r4, [r3, #8]
	SysTick->LOAD = last_load - 1;
    2f48:	3f01      	subs	r7, #1
    2f4a:	605f      	str	r7, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
    2f4c:	2700      	movs	r7, #0
	if (val1 < val2) {
    2f4e:	42a1      	cmp	r1, r4
		cycle_count += (val1 + (last_load_ - val2));
    2f50:	bf38      	it	cc
    2f52:	1949      	addcc	r1, r1, r5
		cycle_count += (val1 - val2);
    2f54:	1b09      	subs	r1, r1, r4
    2f56:	4408      	add	r0, r1
	SysTick->VAL = 0; /* resets timer to last_load */
    2f58:	609f      	str	r7, [r3, #8]
		cycle_count += (val1 - val2);
    2f5a:	6010      	str	r0, [r2, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2f5c:	480f      	ldr	r0, [pc, #60]	; (2f9c <sys_clock_set_timeout+0xf8>)
    2f5e:	f001 f9e7 	bl	4330 <z_spin_unlock_valid>
    2f62:	b940      	cbnz	r0, 2f76 <sys_clock_set_timeout+0xd2>
    2f64:	490e      	ldr	r1, [pc, #56]	; (2fa0 <sys_clock_set_timeout+0xfc>)
    2f66:	480f      	ldr	r0, [pc, #60]	; (2fa4 <sys_clock_set_timeout+0x100>)
    2f68:	22ac      	movs	r2, #172	; 0xac
    2f6a:	f005 fc36 	bl	87da <printk>
    2f6e:	21ac      	movs	r1, #172	; 0xac
    2f70:	480b      	ldr	r0, [pc, #44]	; (2fa0 <sys_clock_set_timeout+0xfc>)
    2f72:	f005 fcbd 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    2f76:	f386 8811 	msr	BASEPRI, r6
    2f7a:	f3bf 8f6f 	isb	sy
    2f7e:	e79f      	b.n	2ec0 <sys_clock_set_timeout+0x1c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2f80:	2400      	movs	r4, #0
    2f82:	e7ab      	b.n	2edc <sys_clock_set_timeout+0x38>
			last_load = delay;
    2f84:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    2f88:	bfb8      	it	lt
    2f8a:	f44f 6480 	movlt.w	r4, #1024	; 0x400
    2f8e:	e7d8      	b.n	2f42 <sys_clock_set_timeout+0x9e>
    2f90:	20000a1c 	.word	0x20000a1c
    2f94:	e000e010 	.word	0xe000e010
    2f98:	00fffffe 	.word	0x00fffffe
    2f9c:	20000a20 	.word	0x20000a20
    2fa0:	0000973f 	.word	0x0000973f
    2fa4:	00009765 	.word	0x00009765
    2fa8:	20000a18 	.word	0x20000a18
    2fac:	20000a24 	.word	0x20000a24
    2fb0:	20000a14 	.word	0x20000a14

00002fb4 <sys_clock_elapsed>:
{
    2fb4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    2fb6:	f04f 0320 	mov.w	r3, #32
    2fba:	f3ef 8511 	mrs	r5, BASEPRI
    2fbe:	f383 8812 	msr	BASEPRI_MAX, r3
    2fc2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2fc6:	4815      	ldr	r0, [pc, #84]	; (301c <sys_clock_elapsed+0x68>)
    2fc8:	f001 f9a4 	bl	4314 <z_spin_lock_valid>
    2fcc:	b940      	cbnz	r0, 2fe0 <sys_clock_elapsed+0x2c>
    2fce:	4914      	ldr	r1, [pc, #80]	; (3020 <sys_clock_elapsed+0x6c>)
    2fd0:	4814      	ldr	r0, [pc, #80]	; (3024 <sys_clock_elapsed+0x70>)
    2fd2:	2281      	movs	r2, #129	; 0x81
    2fd4:	f005 fc01 	bl	87da <printk>
    2fd8:	2181      	movs	r1, #129	; 0x81
    2fda:	4811      	ldr	r0, [pc, #68]	; (3020 <sys_clock_elapsed+0x6c>)
    2fdc:	f005 fc88 	bl	88f0 <assert_post_action>
	z_spin_lock_set_owner(l);
    2fe0:	480e      	ldr	r0, [pc, #56]	; (301c <sys_clock_elapsed+0x68>)
    2fe2:	f001 f9b3 	bl	434c <z_spin_lock_set_owner>
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
    2fe6:	f7ff ff09 	bl	2dfc <elapsed>
    2fea:	4b0f      	ldr	r3, [pc, #60]	; (3028 <sys_clock_elapsed+0x74>)
    2fec:	681c      	ldr	r4, [r3, #0]
    2fee:	4b0f      	ldr	r3, [pc, #60]	; (302c <sys_clock_elapsed+0x78>)
    2ff0:	681b      	ldr	r3, [r3, #0]
    2ff2:	1ae4      	subs	r4, r4, r3
    2ff4:	4404      	add	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2ff6:	4809      	ldr	r0, [pc, #36]	; (301c <sys_clock_elapsed+0x68>)
    2ff8:	f001 f99a 	bl	4330 <z_spin_unlock_valid>
    2ffc:	b940      	cbnz	r0, 3010 <sys_clock_elapsed+0x5c>
    2ffe:	4908      	ldr	r1, [pc, #32]	; (3020 <sys_clock_elapsed+0x6c>)
    3000:	4808      	ldr	r0, [pc, #32]	; (3024 <sys_clock_elapsed+0x70>)
    3002:	22ac      	movs	r2, #172	; 0xac
    3004:	f005 fbe9 	bl	87da <printk>
    3008:	21ac      	movs	r1, #172	; 0xac
    300a:	4805      	ldr	r0, [pc, #20]	; (3020 <sys_clock_elapsed+0x6c>)
    300c:	f005 fc70 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    3010:	f385 8811 	msr	BASEPRI, r5
    3014:	f3bf 8f6f 	isb	sy
}
    3018:	4620      	mov	r0, r4
    301a:	bd38      	pop	{r3, r4, r5, pc}
    301c:	20000a20 	.word	0x20000a20
    3020:	0000973f 	.word	0x0000973f
    3024:	00009765 	.word	0x00009765
    3028:	20000a18 	.word	0x20000a18
    302c:	20000a14 	.word	0x20000a14

00003030 <sys_clock_idle_exit>:
	if (last_load == TIMER_STOPPED) {
    3030:	4b05      	ldr	r3, [pc, #20]	; (3048 <sys_clock_idle_exit+0x18>)
    3032:	681b      	ldr	r3, [r3, #0]
    3034:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
		SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
    3038:	bf01      	itttt	eq
    303a:	4a04      	ldreq	r2, [pc, #16]	; (304c <sys_clock_idle_exit+0x1c>)
    303c:	6813      	ldreq	r3, [r2, #0]
    303e:	f043 0301 	orreq.w	r3, r3, #1
    3042:	6013      	streq	r3, [r2, #0]
}
    3044:	4770      	bx	lr
    3046:	bf00      	nop
    3048:	20000a1c 	.word	0x20000a1c
    304c:	e000e010 	.word	0xe000e010

00003050 <sys_clock_disable>:
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
    3050:	4a02      	ldr	r2, [pc, #8]	; (305c <sys_clock_disable+0xc>)
    3052:	6813      	ldr	r3, [r2, #0]
    3054:	f023 0301 	bic.w	r3, r3, #1
    3058:	6013      	str	r3, [r2, #0]
}
    305a:	4770      	bx	lr
    305c:	e000e010 	.word	0xe000e010

00003060 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    3060:	4803      	ldr	r0, [pc, #12]	; (3070 <k_sys_fatal_error_handler+0x10>)
    3062:	2145      	movs	r1, #69	; 0x45
{
    3064:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    3066:	f005 fc56 	bl	8916 <z_log_minimal_printk>
		sys_arch_reboot(0);
    306a:	2000      	movs	r0, #0
    306c:	f7fe ff28 	bl	1ec0 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    3070:	0000a2e5 	.word	0x0000a2e5

00003074 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
    3074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    3078:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
    307a:	4c21      	ldr	r4, [pc, #132]	; (3100 <check_ext_api_requests+0x8c>)
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
    307c:	4e21      	ldr	r6, [pc, #132]	; (3104 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    307e:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
    3082:	f8df 9088 	ldr.w	r9, [pc, #136]	; 310c <check_ext_api_requests+0x98>
{
    3086:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    3088:	45a8      	cmp	r8, r5
    308a:	d803      	bhi.n	3094 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
    308c:	2000      	movs	r0, #0
    308e:	b005      	add	sp, #20
    3090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
    3094:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3096:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    309a:	681f      	ldr	r7, [r3, #0]
    309c:	ab01      	add	r3, sp, #4
    309e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
    30a2:	220c      	movs	r2, #12
    30a4:	4619      	mov	r1, r3
    30a6:	4638      	mov	r0, r7
    30a8:	f005 fcab 	bl	8a02 <memcmp>
    30ac:	b990      	cbnz	r0, 30d4 <check_ext_api_requests+0x60>
    30ae:	b18f      	cbz	r7, 30d4 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    30b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
    30b2:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    30b4:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
    30b6:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    30b8:	4291      	cmp	r1, r2
    30ba:	d10b      	bne.n	30d4 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
    30bc:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
    30be:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
    30c0:	4291      	cmp	r1, r2
    30c2:	d807      	bhi.n	30d4 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
    30c4:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
    30c6:	4291      	cmp	r1, r2
    30c8:	d904      	bls.n	30d4 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
    30ca:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    30cc:	695b      	ldr	r3, [r3, #20]
    30ce:	ea32 0303 	bics.w	r3, r2, r3
    30d2:	d00a      	beq.n	30ea <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
    30d4:	6a27      	ldr	r7, [r4, #32]
    30d6:	b167      	cbz	r7, 30f2 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
    30d8:	480b      	ldr	r0, [pc, #44]	; (3108 <check_ext_api_requests+0x94>)
    30da:	f005 fb7e 	bl	87da <printk>
			k_panic();
    30de:	4040      	eors	r0, r0
    30e0:	f380 8811 	msr	BASEPRI, r0
    30e4:	f04f 0004 	mov.w	r0, #4
    30e8:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
    30ea:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    30ec:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
    30ee:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    30f0:	e7ca      	b.n	3088 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
    30f2:	4648      	mov	r0, r9
    30f4:	f005 fb71 	bl	87da <printk>
			*ext_api_req->ext_api = NULL;
    30f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    30fa:	601f      	str	r7, [r3, #0]
    30fc:	e7f5      	b.n	30ea <check_ext_api_requests+0x76>
    30fe:	bf00      	nop
    3100:	0000023c 	.word	0x0000023c
    3104:	000092ec 	.word	0x000092ec
    3108:	0000a307 	.word	0x0000a307
    310c:	0000a330 	.word	0x0000a330

00003110 <nrf91_errata_14>:
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    3110:	4a06      	ldr	r2, [pc, #24]	; (312c <nrf91_errata_14+0x1c>)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    3112:	4b07      	ldr	r3, [pc, #28]	; (3130 <nrf91_errata_14+0x20>)
    3114:	681b      	ldr	r3, [r3, #0]
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    3116:	6810      	ldr	r0, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    3118:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    311c:	2b09      	cmp	r3, #9
    311e:	d103      	bne.n	3128 <nrf91_errata_14+0x18>
            {
                switch(var2)
    3120:	1e43      	subs	r3, r0, #1
    3122:	4258      	negs	r0, r3
    3124:	4158      	adcs	r0, r3
    3126:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    3128:	2000      	movs	r0, #0
    #endif
}
    312a:	4770      	bx	lr
    312c:	00ff0134 	.word	0x00ff0134
    3130:	00ff0130 	.word	0x00ff0130

00003134 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    3134:	4a57      	ldr	r2, [pc, #348]	; (3294 <SystemInit+0x160>)
{
    3136:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    3138:	6813      	ldr	r3, [r2, #0]
    313a:	f043 0302 	orr.w	r3, r3, #2
    313e:	6013      	str	r3, [r2, #0]
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    3140:	4b55      	ldr	r3, [pc, #340]	; (3298 <SystemInit+0x164>)
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    3142:	4a56      	ldr	r2, [pc, #344]	; (329c <SystemInit+0x168>)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    3144:	681b      	ldr	r3, [r3, #0]
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    3146:	6812      	ldr	r2, [r2, #0]
    3148:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    314c:	2b09      	cmp	r3, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    314e:	bf01      	itttt	eq
    3150:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    3154:	2200      	moveq	r2, #0
    3156:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    315a:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    315e:	f7ff ffd7 	bl	3110 <nrf91_errata_14>
    3162:	b130      	cbz	r0, 3172 <SystemInit+0x3e>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    3164:	2301      	movs	r3, #1
    3166:	4a4e      	ldr	r2, [pc, #312]	; (32a0 <SystemInit+0x16c>)
    3168:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    316a:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    316e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    3172:	4b49      	ldr	r3, [pc, #292]	; (3298 <SystemInit+0x164>)
    3174:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    3176:	3304      	adds	r3, #4
    3178:	681b      	ldr	r3, [r3, #0]
    317a:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    317e:	2a09      	cmp	r2, #9
    3180:	d105      	bne.n	318e <SystemInit+0x5a>
            {
                switch(var2)
    3182:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    3184:	bf1e      	ittt	ne
    3186:	2201      	movne	r2, #1
    3188:	4b46      	ldrne	r3, [pc, #280]	; (32a4 <SystemInit+0x170>)
    318a:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    318e:	f7ff ffbf 	bl	3110 <nrf91_errata_14>
    3192:	b110      	cbz	r0, 319a <SystemInit+0x66>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    3194:	220e      	movs	r2, #14
    3196:	4b44      	ldr	r3, [pc, #272]	; (32a8 <SystemInit+0x174>)
    3198:	601a      	str	r2, [r3, #0]
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    319a:	4b3f      	ldr	r3, [pc, #252]	; (3298 <SystemInit+0x164>)
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    319c:	4a3f      	ldr	r2, [pc, #252]	; (329c <SystemInit+0x168>)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    319e:	681b      	ldr	r3, [r3, #0]
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    31a0:	6812      	ldr	r2, [r2, #0]
    31a2:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    31a6:	2b09      	cmp	r3, #9
    31a8:	d104      	bne.n	31b4 <SystemInit+0x80>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    31aa:	2200      	movs	r2, #0
    31ac:	4b3f      	ldr	r3, [pc, #252]	; (32ac <SystemInit+0x178>)
    31ae:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    31b0:	2201      	movs	r2, #1
    31b2:	605a      	str	r2, [r3, #4]
{
    31b4:	2200      	movs	r2, #0
    31b6:	00d3      	lsls	r3, r2, #3
    31b8:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        return false;
    }
    
    bool is_empty_word(uint32_t const volatile * word)
    {
        uint32_t val = *word;
    31bc:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    31c0:	f3bf 8f4f 	dsb	sy
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    31c4:	3101      	adds	r1, #1
    31c6:	d008      	beq.n	31da <SystemInit+0xa6>
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    31c8:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    31cc:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    31ce:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    31d2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    31d6:	600b      	str	r3, [r1, #0]
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    31d8:	d1ed      	bne.n	31b6 <SystemInit+0x82>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    31da:	4b35      	ldr	r3, [pc, #212]	; (32b0 <SystemInit+0x17c>)
    31dc:	69db      	ldr	r3, [r3, #28]
    31de:	f3bf 8f4f 	dsb	sy
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    31e2:	07d9      	lsls	r1, r3, #31
    31e4:	d545      	bpl.n	3272 <SystemInit+0x13e>
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    31e6:	4b33      	ldr	r3, [pc, #204]	; (32b4 <SystemInit+0x180>)
    31e8:	4619      	mov	r1, r3
    31ea:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    31ee:	2a01      	cmp	r2, #1
    31f0:	d1fb      	bne.n	31ea <SystemInit+0xb6>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    31f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    31f6:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    31fa:	2b01      	cmp	r3, #1
    31fc:	d1fb      	bne.n	31f6 <SystemInit+0xc2>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    31fe:	4b2c      	ldr	r3, [pc, #176]	; (32b0 <SystemInit+0x17c>)
    3200:	69da      	ldr	r2, [r3, #28]
    3202:	f3bf 8f4f 	dsb	sy
              if (uicr_HFXOSRC_erased()){
    3206:	07d2      	lsls	r2, r2, #31
    3208:	d50a      	bpl.n	3220 <SystemInit+0xec>
                    uicr_erased_value = NRF_UICR_S->HFXOSRC;
    320a:	69da      	ldr	r2, [r3, #28]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    320c:	f022 0201 	bic.w	r2, r2, #1
                    NRF_UICR_S->HFXOSRC = uicr_new_value;
    3210:	61da      	str	r2, [r3, #28]
    3212:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3216:	4a27      	ldr	r2, [pc, #156]	; (32b4 <SystemInit+0x180>)
    3218:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    321c:	2b01      	cmp	r3, #1
    321e:	d1fb      	bne.n	3218 <SystemInit+0xe4>
        uint32_t val = *word;
    3220:	4b25      	ldr	r3, [pc, #148]	; (32b8 <SystemInit+0x184>)
    3222:	681b      	ldr	r3, [r3, #0]
    3224:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    3228:	3301      	adds	r3, #1
    322a:	d10d      	bne.n	3248 <SystemInit+0x114>
                    uicr_erased_value = NRF_UICR_S->HFXOCNT;
    322c:	4a20      	ldr	r2, [pc, #128]	; (32b0 <SystemInit+0x17c>)
    322e:	6a13      	ldr	r3, [r2, #32]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    3230:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    3234:	f043 0320 	orr.w	r3, r3, #32
                    NRF_UICR_S->HFXOCNT = uicr_new_value;
    3238:	6213      	str	r3, [r2, #32]
    323a:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    323e:	4a1d      	ldr	r2, [pc, #116]	; (32b4 <SystemInit+0x180>)
    3240:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    3244:	2b01      	cmp	r3, #1
    3246:	d1fb      	bne.n	3240 <SystemInit+0x10c>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    3248:	2200      	movs	r2, #0
    324a:	4b1a      	ldr	r3, [pc, #104]	; (32b4 <SystemInit+0x180>)
    324c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3250:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3254:	2a01      	cmp	r2, #1
    3256:	d1fb      	bne.n	3250 <SystemInit+0x11c>
    3258:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    325c:	4917      	ldr	r1, [pc, #92]	; (32bc <SystemInit+0x188>)
    325e:	4b18      	ldr	r3, [pc, #96]	; (32c0 <SystemInit+0x18c>)
    3260:	68ca      	ldr	r2, [r1, #12]
    3262:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3266:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3268:	60cb      	str	r3, [r1, #12]
    326a:	f3bf 8f4f 	dsb	sy
    __NOP();
    326e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3270:	e7fd      	b.n	326e <SystemInit+0x13a>
        uint32_t val = *word;
    3272:	4b11      	ldr	r3, [pc, #68]	; (32b8 <SystemInit+0x184>)
    3274:	681b      	ldr	r3, [r3, #0]
    3276:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    327a:	3301      	adds	r3, #1
    327c:	d0b3      	beq.n	31e6 <SystemInit+0xb2>
        SCB->NSACR |= (3UL << 10);
    327e:	4a0f      	ldr	r2, [pc, #60]	; (32bc <SystemInit+0x188>)
    3280:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    3284:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    3288:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    SystemCoreClock = __SYSTEM_CLOCK;
    328c:	4b0d      	ldr	r3, [pc, #52]	; (32c4 <SystemInit+0x190>)
    328e:	4a0e      	ldr	r2, [pc, #56]	; (32c8 <SystemInit+0x194>)
    3290:	601a      	str	r2, [r3, #0]
}
    3292:	bd08      	pop	{r3, pc}
    3294:	e000edd0 	.word	0xe000edd0
    3298:	00ff0130 	.word	0x00ff0130
    329c:	00ff0134 	.word	0x00ff0134
    32a0:	50004a38 	.word	0x50004a38
    32a4:	50004000 	.word	0x50004000
    32a8:	5003aee4 	.word	0x5003aee4
    32ac:	5000470c 	.word	0x5000470c
    32b0:	00ff8000 	.word	0x00ff8000
    32b4:	50039000 	.word	0x50039000
    32b8:	00ff8020 	.word	0x00ff8020
    32bc:	e000ed00 	.word	0xe000ed00
    32c0:	05fa0004 	.word	0x05fa0004
    32c4:	20000050 	.word	0x20000050
    32c8:	03d09000 	.word	0x03d09000

000032cc <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    32cc:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    32ce:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    32d0:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    32d2:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    32d6:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    32d8:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    32dc:	d010      	beq.n	3300 <nrfx_flag32_alloc+0x34>
        new_mask = prev_mask & ~NRFX_BIT(idx);
    32de:	fa05 f204 	lsl.w	r2, r5, r4
    32e2:	ea23 0202 	bic.w	r2, r3, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    32e6:	e8d0 6fef 	ldaex	r6, [r0]
    32ea:	429e      	cmp	r6, r3
    32ec:	d104      	bne.n	32f8 <nrfx_flag32_alloc+0x2c>
    32ee:	e8c0 2fec 	stlex	ip, r2, [r0]
    32f2:	f1bc 0f00 	cmp.w	ip, #0
    32f6:	d1f6      	bne.n	32e6 <nrfx_flag32_alloc+0x1a>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    32f8:	d1ea      	bne.n	32d0 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    32fa:	4802      	ldr	r0, [pc, #8]	; (3304 <nrfx_flag32_alloc+0x38>)
    *p_flag = idx;
    32fc:	700c      	strb	r4, [r1, #0]
}
    32fe:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    3300:	4801      	ldr	r0, [pc, #4]	; (3308 <nrfx_flag32_alloc+0x3c>)
    3302:	e7fc      	b.n	32fe <nrfx_flag32_alloc+0x32>
    3304:	0bad0000 	.word	0x0bad0000
    3308:	0bad0002 	.word	0x0bad0002

0000330c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    330c:	6803      	ldr	r3, [r0, #0]
{
    330e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    3310:	40cb      	lsrs	r3, r1
    3312:	07db      	lsls	r3, r3, #31
    3314:	d411      	bmi.n	333a <nrfx_flag32_free+0x2e>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    3316:	2301      	movs	r3, #1
    3318:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    331c:	6803      	ldr	r3, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    331e:	ea41 0203 	orr.w	r2, r1, r3
    3322:	e8d0 4fef 	ldaex	r4, [r0]
    3326:	429c      	cmp	r4, r3
    3328:	d104      	bne.n	3334 <nrfx_flag32_free+0x28>
    332a:	e8c0 2fec 	stlex	ip, r2, [r0]
    332e:	f1bc 0f00 	cmp.w	ip, #0
    3332:	d1f6      	bne.n	3322 <nrfx_flag32_free+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3334:	d1f2      	bne.n	331c <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    3336:	4802      	ldr	r0, [pc, #8]	; (3340 <nrfx_flag32_free+0x34>)
}
    3338:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    333a:	4802      	ldr	r0, [pc, #8]	; (3344 <nrfx_flag32_free+0x38>)
    333c:	e7fc      	b.n	3338 <nrfx_flag32_free+0x2c>
    333e:	bf00      	nop
    3340:	0bad0000 	.word	0x0bad0000
    3344:	0bad0004 	.word	0x0bad0004

00003348 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
    3348:	b508      	push	{r3, lr}
    switch (domain)
    334a:	b170      	cbz	r0, 336a <nrf_clock_is_running.constprop.0+0x22>
    334c:	2801      	cmp	r0, #1
    334e:	d01b      	beq.n	3388 <nrf_clock_is_running.constprop.0+0x40>
        case NRF_CLOCK_DOMAIN_HFCLKAUDIO:
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
                   CLOCK_HFCLKAUDIOSTAT_STATE_Msk;
#endif
        default:
            NRFX_ASSERT(0);
    3350:	f44f 724f 	mov.w	r2, #828	; 0x33c
    3354:	4913      	ldr	r1, [pc, #76]	; (33a4 <nrf_clock_is_running.constprop.0+0x5c>)
    3356:	4814      	ldr	r0, [pc, #80]	; (33a8 <nrf_clock_is_running.constprop.0+0x60>)
    3358:	f005 fa3f 	bl	87da <printk>
    335c:	4811      	ldr	r0, [pc, #68]	; (33a4 <nrf_clock_is_running.constprop.0+0x5c>)
    335e:	f44f 714f 	mov.w	r1, #828	; 0x33c
    3362:	f005 fac5 	bl	88f0 <assert_post_action>
            return false;
    3366:	2000      	movs	r0, #0
    3368:	e00d      	b.n	3386 <nrf_clock_is_running.constprop.0+0x3e>
            if (p_clk_src != NULL)
    336a:	b131      	cbz	r1, 337a <nrf_clock_is_running.constprop.0+0x32>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    336c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3370:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    3374:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    3378:	700b      	strb	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    337a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    337e:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3382:	f3c0 4000 	ubfx	r0, r0, #16, #1
    }
    return false;
}
    3386:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
    3388:	b131      	cbz	r1, 3398 <nrf_clock_is_running.constprop.0+0x50>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    338a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    338e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    3392:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    3396:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3398:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    339c:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    33a0:	e7ef      	b.n	3382 <nrf_clock_is_running.constprop.0+0x3a>
    33a2:	bf00      	nop
    33a4:	0000a363 	.word	0x0000a363
    33a8:	00009765 	.word	0x00009765

000033ac <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    33ac:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    33ae:	4604      	mov	r4, r0
    33b0:	b940      	cbnz	r0, 33c4 <nrfx_clock_init+0x18>
    33b2:	4909      	ldr	r1, [pc, #36]	; (33d8 <nrfx_clock_init+0x2c>)
    33b4:	4809      	ldr	r0, [pc, #36]	; (33dc <nrfx_clock_init+0x30>)
    33b6:	22bd      	movs	r2, #189	; 0xbd
    33b8:	f005 fa0f 	bl	87da <printk>
    33bc:	21bd      	movs	r1, #189	; 0xbd
    33be:	4806      	ldr	r0, [pc, #24]	; (33d8 <nrfx_clock_init+0x2c>)
    33c0:	f005 fa96 	bl	88f0 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    33c4:	4b06      	ldr	r3, [pc, #24]	; (33e0 <nrfx_clock_init+0x34>)
    33c6:	791a      	ldrb	r2, [r3, #4]
    33c8:	b922      	cbnz	r2, 33d4 <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    33ca:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    33cc:	4805      	ldr	r0, [pc, #20]	; (33e4 <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
    33ce:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    33d0:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    33d2:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    33d4:	4804      	ldr	r0, [pc, #16]	; (33e8 <nrfx_clock_init+0x3c>)
    return err_code;
    33d6:	e7fc      	b.n	33d2 <nrfx_clock_init+0x26>
    33d8:	0000a397 	.word	0x0000a397
    33dc:	00009765 	.word	0x00009765
    33e0:	20000a28 	.word	0x20000a28
    33e4:	0bad0000 	.word	0x0bad0000
    33e8:	0bad000c 	.word	0x0bad000c

000033ec <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    33ec:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    33ee:	4b0b      	ldr	r3, [pc, #44]	; (341c <nrfx_clock_enable+0x30>)
    33f0:	791b      	ldrb	r3, [r3, #4]
    33f2:	b943      	cbnz	r3, 3406 <nrfx_clock_enable+0x1a>
    33f4:	490a      	ldr	r1, [pc, #40]	; (3420 <nrfx_clock_enable+0x34>)
    33f6:	480b      	ldr	r0, [pc, #44]	; (3424 <nrfx_clock_enable+0x38>)
    33f8:	22d6      	movs	r2, #214	; 0xd6
    33fa:	f005 f9ee 	bl	87da <printk>
    33fe:	21d6      	movs	r1, #214	; 0xd6
    3400:	4807      	ldr	r0, [pc, #28]	; (3420 <nrfx_clock_enable+0x34>)
    3402:	f005 fa75 	bl	88f0 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    3406:	2005      	movs	r0, #5
    3408:	f7fe f978 	bl	16fc <arch_irq_is_enabled>
    340c:	b920      	cbnz	r0, 3418 <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    340e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    3412:	2005      	movs	r0, #5
    3414:	f7fe b962 	b.w	16dc <arch_irq_enable>
    3418:	bd08      	pop	{r3, pc}
    341a:	bf00      	nop
    341c:	20000a28 	.word	0x20000a28
    3420:	0000a397 	.word	0x0000a397
    3424:	00009765 	.word	0x00009765

00003428 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3428:	4b22      	ldr	r3, [pc, #136]	; (34b4 <nrfx_clock_start+0x8c>)
{
    342a:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    342c:	791b      	ldrb	r3, [r3, #4]
{
    342e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3430:	b953      	cbnz	r3, 3448 <nrfx_clock_start+0x20>
    3432:	4921      	ldr	r1, [pc, #132]	; (34b8 <nrfx_clock_start+0x90>)
    3434:	4821      	ldr	r0, [pc, #132]	; (34bc <nrfx_clock_start+0x94>)
    3436:	f44f 7289 	mov.w	r2, #274	; 0x112
    343a:	f005 f9ce 	bl	87da <printk>
    343e:	f44f 7189 	mov.w	r1, #274	; 0x112
    3442:	481d      	ldr	r0, [pc, #116]	; (34b8 <nrfx_clock_start+0x90>)
    3444:	f005 fa54 	bl	88f0 <assert_post_action>
    switch (domain)
    3448:	b16c      	cbz	r4, 3466 <nrfx_clock_start+0x3e>
    344a:	2c01      	cmp	r4, #1
    344c:	d028      	beq.n	34a0 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    344e:	f44f 72a2 	mov.w	r2, #324	; 0x144
    3452:	4919      	ldr	r1, [pc, #100]	; (34b8 <nrfx_clock_start+0x90>)
    3454:	4819      	ldr	r0, [pc, #100]	; (34bc <nrfx_clock_start+0x94>)
    3456:	f005 f9c0 	bl	87da <printk>
    345a:	f44f 71a2 	mov.w	r1, #324	; 0x144
    345e:	4816      	ldr	r0, [pc, #88]	; (34b8 <nrfx_clock_start+0x90>)
    3460:	f005 fa46 	bl	88f0 <assert_post_action>
            break;
    }
}
    3464:	e018      	b.n	3498 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    3466:	4620      	mov	r0, r4
    3468:	f10d 0107 	add.w	r1, sp, #7
    346c:	f7ff ff6c 	bl	3348 <nrf_clock_is_running.constprop.0>
    3470:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3474:	b190      	cbz	r0, 349c <nrfx_clock_start+0x74>
    3476:	f89d 2007 	ldrb.w	r2, [sp, #7]
    347a:	2a02      	cmp	r2, #2
    347c:	d10e      	bne.n	349c <nrfx_clock_start+0x74>

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    347e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3482:	2200      	movs	r2, #0
    3484:	4b0e      	ldr	r3, [pc, #56]	; (34c0 <nrfx_clock_start+0x98>)
    3486:	601a      	str	r2, [r3, #0]
    3488:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    348a:	2202      	movs	r2, #2
    348c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3490:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3494:	2201      	movs	r2, #1
    3496:	609a      	str	r2, [r3, #8]
}
    3498:	b002      	add	sp, #8
    349a:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    349c:	2201      	movs	r2, #1
    349e:	e7ee      	b.n	347e <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    34a0:	2200      	movs	r2, #0
    34a2:	4b08      	ldr	r3, [pc, #32]	; (34c4 <nrfx_clock_start+0x9c>)
    34a4:	601a      	str	r2, [r3, #0]
    34a6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    34a8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    34ac:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    34b0:	601c      	str	r4, [r3, #0]
}
    34b2:	e7f1      	b.n	3498 <nrfx_clock_start+0x70>
    34b4:	20000a28 	.word	0x20000a28
    34b8:	0000a397 	.word	0x0000a397
    34bc:	00009765 	.word	0x00009765
    34c0:	50005104 	.word	0x50005104
    34c4:	50005100 	.word	0x50005100

000034c8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    34c8:	4b2d      	ldr	r3, [pc, #180]	; (3580 <nrfx_clock_stop+0xb8>)
{
    34ca:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    34cc:	791b      	ldrb	r3, [r3, #4]
{
    34ce:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    34d0:	b953      	cbnz	r3, 34e8 <nrfx_clock_stop+0x20>
    34d2:	492c      	ldr	r1, [pc, #176]	; (3584 <nrfx_clock_stop+0xbc>)
    34d4:	482c      	ldr	r0, [pc, #176]	; (3588 <nrfx_clock_stop+0xc0>)
    34d6:	f240 124b 	movw	r2, #331	; 0x14b
    34da:	f005 f97e 	bl	87da <printk>
    34de:	f240 114b 	movw	r1, #331	; 0x14b
    34e2:	4828      	ldr	r0, [pc, #160]	; (3584 <nrfx_clock_stop+0xbc>)
    34e4:	f005 fa04 	bl	88f0 <assert_post_action>
    switch (domain)
    34e8:	b174      	cbz	r4, 3508 <nrfx_clock_stop+0x40>
    34ea:	2c01      	cmp	r4, #1
    34ec:	d027      	beq.n	353e <nrfx_clock_stop+0x76>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    34ee:	4925      	ldr	r1, [pc, #148]	; (3584 <nrfx_clock_stop+0xbc>)
    34f0:	4825      	ldr	r0, [pc, #148]	; (3588 <nrfx_clock_stop+0xc0>)
    34f2:	f240 1267 	movw	r2, #359	; 0x167
    34f6:	f005 f970 	bl	87da <printk>
    34fa:	f240 1167 	movw	r1, #359	; 0x167
    34fe:	4821      	ldr	r0, [pc, #132]	; (3584 <nrfx_clock_stop+0xbc>)
    3500:	f005 f9f6 	bl	88f0 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3504:	b002      	add	sp, #8
    3506:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    3508:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    350c:	2202      	movs	r2, #2
    350e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3512:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3514:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3518:	f242 7410 	movw	r4, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    351c:	f503 7382 	add.w	r3, r3, #260	; 0x104
    3520:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3522:	4b1a      	ldr	r3, [pc, #104]	; (358c <nrfx_clock_stop+0xc4>)
    3524:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    3526:	2100      	movs	r1, #0
    3528:	4608      	mov	r0, r1
    352a:	f7ff ff0d 	bl	3348 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    352e:	2800      	cmp	r0, #0
    3530:	d0e8      	beq.n	3504 <nrfx_clock_stop+0x3c>
    3532:	2001      	movs	r0, #1
    3534:	f005 fc5f 	bl	8df6 <nrfx_busy_wait>
    3538:	3c01      	subs	r4, #1
    353a:	d1f4      	bne.n	3526 <nrfx_clock_stop+0x5e>
    353c:	e7e2      	b.n	3504 <nrfx_clock_stop+0x3c>
    p_reg->INTENCLR = mask;
    353e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3542:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    3544:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3548:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    354c:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3550:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3552:	4b0f      	ldr	r3, [pc, #60]	; (3590 <nrfx_clock_stop+0xc8>)
    3554:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    3556:	f88d 4007 	strb.w	r4, [sp, #7]
    355a:	f242 7410 	movw	r4, #10000	; 0x2710
    355e:	2001      	movs	r0, #1
    3560:	f10d 0107 	add.w	r1, sp, #7
    3564:	f7ff fef0 	bl	3348 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    3568:	2800      	cmp	r0, #0
    356a:	d0cb      	beq.n	3504 <nrfx_clock_stop+0x3c>
    356c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    3570:	2801      	cmp	r0, #1
    3572:	d1c7      	bne.n	3504 <nrfx_clock_stop+0x3c>
    3574:	f005 fc3f 	bl	8df6 <nrfx_busy_wait>
    3578:	3c01      	subs	r4, #1
    357a:	d1f0      	bne.n	355e <nrfx_clock_stop+0x96>
    357c:	e7c2      	b.n	3504 <nrfx_clock_stop+0x3c>
    357e:	bf00      	nop
    3580:	20000a28 	.word	0x20000a28
    3584:	0000a397 	.word	0x0000a397
    3588:	00009765 	.word	0x00009765
    358c:	5000500c 	.word	0x5000500c
    3590:	50005004 	.word	0x50005004

00003594 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3594:	4b16      	ldr	r3, [pc, #88]	; (35f0 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3596:	b507      	push	{r0, r1, r2, lr}
    3598:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    359a:	b152      	cbz	r2, 35b2 <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    359c:	2000      	movs	r0, #0
    359e:	6018      	str	r0, [r3, #0]
    35a0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    35a2:	2201      	movs	r2, #1
    35a4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    35a8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    35ac:	4b11      	ldr	r3, [pc, #68]	; (35f4 <nrfx_power_clock_irq_handler+0x60>)
    35ae:	681b      	ldr	r3, [r3, #0]
    35b0:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    35b2:	4b11      	ldr	r3, [pc, #68]	; (35f8 <nrfx_power_clock_irq_handler+0x64>)
    35b4:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    35b6:	b18a      	cbz	r2, 35dc <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    35b8:	2000      	movs	r0, #0
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    35ba:	f10d 0107 	add.w	r1, sp, #7
    35be:	6018      	str	r0, [r3, #0]
    35c0:	681b      	ldr	r3, [r3, #0]
    35c2:	f7ff fec1 	bl	3348 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    35c6:	f89d 1007 	ldrb.w	r1, [sp, #7]
    35ca:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    35ce:	2901      	cmp	r1, #1
    35d0:	f04f 0202 	mov.w	r2, #2
    35d4:	d105      	bne.n	35e2 <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    35d6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    35da:	6099      	str	r1, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    35dc:	b003      	add	sp, #12
    35de:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
    35e2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    35e6:	4b03      	ldr	r3, [pc, #12]	; (35f4 <nrfx_power_clock_irq_handler+0x60>)
    35e8:	2001      	movs	r0, #1
    35ea:	681b      	ldr	r3, [r3, #0]
    35ec:	4798      	blx	r3
}
    35ee:	e7f5      	b.n	35dc <nrfx_power_clock_irq_handler+0x48>
    35f0:	50005100 	.word	0x50005100
    35f4:	20000a28 	.word	0x20000a28
    35f8:	50005104 	.word	0x50005104

000035fc <pin_is_task_output>:
 *
 * @return True if pin is task output.
 */
static bool pin_is_task_output(uint32_t pin)
{
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    35fc:	4b05      	ldr	r3, [pc, #20]	; (3614 <pin_is_task_output+0x18>)
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    35fe:	3008      	adds	r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    3600:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    3604:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
    3608:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
    360c:	4258      	negs	r0, r3
    360e:	4158      	adcs	r0, r3
    3610:	4770      	bx	lr
    3612:	bf00      	nop
    3614:	20000054 	.word	0x20000054

00003618 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    3618:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    361a:	4c0d      	ldr	r4, [pc, #52]	; (3650 <call_handler+0x38>)
    361c:	f100 0308 	add.w	r3, r0, #8
    3620:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    3624:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3626:	05da      	lsls	r2, r3, #23
{
    3628:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    362a:	d507      	bpl.n	363c <call_handler+0x24>
    362c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    3630:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    3634:	6852      	ldr	r2, [r2, #4]
    3636:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    363a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    363c:	68a3      	ldr	r3, [r4, #8]
    363e:	b12b      	cbz	r3, 364c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3640:	4631      	mov	r1, r6
    3642:	4628      	mov	r0, r5
    3644:	68e2      	ldr	r2, [r4, #12]
    }
}
    3646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    364a:	4718      	bx	r3
}
    364c:	bd70      	pop	{r4, r5, r6, pc}
    364e:	bf00      	nop
    3650:	20000054 	.word	0x20000054

00003654 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3654:	4b19      	ldr	r3, [pc, #100]	; (36bc <release_handler+0x68>)
    3656:	3008      	adds	r0, #8
    3658:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
{
    365c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    365e:	05d1      	lsls	r1, r2, #23
    3660:	d51d      	bpl.n	369e <release_handler+0x4a>
    3662:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    3666:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    366a:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    366e:	2000      	movs	r0, #0
    3670:	f103 0410 	add.w	r4, r3, #16
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3674:	f834 2b02 	ldrh.w	r2, [r4], #2
    3678:	f412 7f80 	tst.w	r2, #256	; 0x100
    367c:	d003      	beq.n	3686 <release_handler+0x32>
    367e:	f3c2 2243 	ubfx	r2, r2, #9, #4
    3682:	4291      	cmp	r1, r2
    3684:	d00b      	beq.n	369e <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3686:	3001      	adds	r0, #1
    3688:	2820      	cmp	r0, #32
    368a:	d1f3      	bne.n	3674 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    368c:	2200      	movs	r2, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    368e:	480c      	ldr	r0, [pc, #48]	; (36c0 <release_handler+0x6c>)
        m_cb.handlers[handler_id].handler = NULL;
    3690:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3694:	f7ff fe3a 	bl	330c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3698:	4b0a      	ldr	r3, [pc, #40]	; (36c4 <release_handler+0x70>)
    369a:	4298      	cmp	r0, r3
    369c:	d100      	bne.n	36a0 <release_handler+0x4c>
}
    369e:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    36a0:	4909      	ldr	r1, [pc, #36]	; (36c8 <release_handler+0x74>)
    36a2:	480a      	ldr	r0, [pc, #40]	; (36cc <release_handler+0x78>)
    36a4:	f44f 7299 	mov.w	r2, #306	; 0x132
    36a8:	f005 f897 	bl	87da <printk>
}
    36ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    36b0:	f44f 7199 	mov.w	r1, #306	; 0x132
    36b4:	4804      	ldr	r0, [pc, #16]	; (36c8 <release_handler+0x74>)
    36b6:	f005 b91b 	b.w	88f0 <assert_post_action>
    36ba:	bf00      	nop
    36bc:	20000054 	.word	0x20000054
    36c0:	200000a8 	.word	0x200000a8
    36c4:	0bad0000 	.word	0x0bad0000
    36c8:	0000a3d4 	.word	0x0000a3d4
    36cc:	00009765 	.word	0x00009765

000036d0 <pin_handler_trigger_uninit>:
{
    36d0:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    36d2:	4c0c      	ldr	r4, [pc, #48]	; (3704 <pin_handler_trigger_uninit+0x34>)
    36d4:	f100 0508 	add.w	r5, r0, #8
    36d8:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    36dc:	069a      	lsls	r2, r3, #26
    36de:	d50a      	bpl.n	36f6 <pin_handler_trigger_uninit+0x26>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    36e0:	2200      	movs	r2, #0
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    36e2:	0b5b      	lsrs	r3, r3, #13
    36e4:	009b      	lsls	r3, r3, #2
    36e6:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    36ea:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    36ee:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    36f2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    release_handler(pin);
    36f6:	f7ff ffad 	bl	3654 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    36fa:	2300      	movs	r3, #0
    36fc:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    3700:	bd38      	pop	{r3, r4, r5, pc}
    3702:	bf00      	nop
    3704:	20000054 	.word	0x20000054

00003708 <nrf_gpio_pin_port_decode>:
{
    3708:	b510      	push	{r4, lr}
    370a:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    370c:	6800      	ldr	r0, [r0, #0]
    370e:	f005 fb74 	bl	8dfa <nrf_gpio_pin_present_check>
    3712:	b950      	cbnz	r0, 372a <nrf_gpio_pin_port_decode+0x22>
    3714:	490e      	ldr	r1, [pc, #56]	; (3750 <nrf_gpio_pin_port_decode+0x48>)
    3716:	480f      	ldr	r0, [pc, #60]	; (3754 <nrf_gpio_pin_port_decode+0x4c>)
    3718:	f240 2229 	movw	r2, #553	; 0x229
    371c:	f005 f85d 	bl	87da <printk>
    3720:	f240 2129 	movw	r1, #553	; 0x229
    3724:	480a      	ldr	r0, [pc, #40]	; (3750 <nrf_gpio_pin_port_decode+0x48>)
    3726:	f005 f8e3 	bl	88f0 <assert_post_action>
    uint32_t pin_number = *p_pin;
    372a:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    372c:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3730:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    3732:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3734:	d00a      	beq.n	374c <nrf_gpio_pin_port_decode+0x44>
            NRFX_ASSERT(0);
    3736:	4906      	ldr	r1, [pc, #24]	; (3750 <nrf_gpio_pin_port_decode+0x48>)
    3738:	4806      	ldr	r0, [pc, #24]	; (3754 <nrf_gpio_pin_port_decode+0x4c>)
    373a:	f240 222e 	movw	r2, #558	; 0x22e
    373e:	f005 f84c 	bl	87da <printk>
    3742:	f240 212e 	movw	r1, #558	; 0x22e
    3746:	4802      	ldr	r0, [pc, #8]	; (3750 <nrf_gpio_pin_port_decode+0x48>)
    3748:	f005 f8d2 	bl	88f0 <assert_post_action>
}
    374c:	4802      	ldr	r0, [pc, #8]	; (3758 <nrf_gpio_pin_port_decode+0x50>)
    374e:	bd10      	pop	{r4, pc}
    3750:	0000a252 	.word	0x0000a252
    3754:	00009765 	.word	0x00009765
    3758:	50842500 	.word	0x50842500

0000375c <nrfx_gpiote_input_configure>:
{
    375c:	b5f0      	push	{r4, r5, r6, r7, lr}
    375e:	4604      	mov	r4, r0
    3760:	4616      	mov	r6, r2
    3762:	461d      	mov	r5, r3
    3764:	b085      	sub	sp, #20
    if (p_input_config)
    3766:	b1f1      	cbz	r1, 37a6 <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    3768:	f7ff ff48 	bl	35fc <pin_is_task_output>
    376c:	b110      	cbz	r0, 3774 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    376e:	484a      	ldr	r0, [pc, #296]	; (3898 <nrfx_gpiote_input_configure+0x13c>)
}
    3770:	b005      	add	sp, #20
    3772:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3774:	460b      	mov	r3, r1
    3776:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    377a:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    377e:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3782:	f10d 020f 	add.w	r2, sp, #15
    3786:	f10d 010e 	add.w	r1, sp, #14
    378a:	4620      	mov	r0, r4
    378c:	f005 fb45 	bl	8e1a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3790:	4a42      	ldr	r2, [pc, #264]	; (389c <nrfx_gpiote_input_configure+0x140>)
    3792:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    3796:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    379a:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    379e:	f043 0301 	orr.w	r3, r3, #1
    37a2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    37a6:	b196      	cbz	r6, 37ce <nrfx_gpiote_input_configure+0x72>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    37a8:	4b3c      	ldr	r3, [pc, #240]	; (389c <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    37aa:	7830      	ldrb	r0, [r6, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    37ac:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    37ae:	f104 0608 	add.w	r6, r4, #8
    37b2:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
    37b6:	078f      	lsls	r7, r1, #30
    37b8:	d50c      	bpl.n	37d4 <nrfx_gpiote_input_configure+0x78>
            if (use_evt)
    37ba:	2a00      	cmp	r2, #0
    37bc:	d1d7      	bne.n	376e <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    37be:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    37c2:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    37c6:	ea42 0080 	orr.w	r0, r2, r0, lsl #2
    37ca:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
    if (p_handler_config)
    37ce:	bbcd      	cbnz	r5, 3844 <nrfx_gpiote_input_configure+0xe8>
    return NRFX_SUCCESS;
    37d0:	4833      	ldr	r0, [pc, #204]	; (38a0 <nrfx_gpiote_input_configure+0x144>)
    37d2:	e7cd      	b.n	3770 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    37d4:	f021 0120 	bic.w	r1, r1, #32
    37d8:	04c9      	lsls	r1, r1, #19
    37da:	0cc9      	lsrs	r1, r1, #19
    37dc:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    37e0:	2a00      	cmp	r2, #0
    37e2:	d0ec      	beq.n	37be <nrfx_gpiote_input_configure+0x62>
                if (!edge)
    37e4:	2803      	cmp	r0, #3
    37e6:	d8c2      	bhi.n	376e <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    37e8:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    37ec:	4662      	mov	r2, ip
    37ee:	0092      	lsls	r2, r2, #2
    37f0:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    37f4:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    37f8:	b920      	cbnz	r0, 3804 <nrfx_gpiote_input_configure+0xa8>
    p_reg->CONFIG[idx] = 0;
    37fa:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    37fe:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
#endif
}
    3802:	e7dc      	b.n	37be <nrfx_gpiote_input_configure+0x62>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3804:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3808:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    380c:	f027 0703 	bic.w	r7, r7, #3
    3810:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3814:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
    3818:	f041 0120 	orr.w	r1, r1, #32
    381c:	f427 3747 	bic.w	r7, r7, #203776	; 0x31c00
    3820:	f427 7740 	bic.w	r7, r7, #768	; 0x300
    3824:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3828:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    382c:	0227      	lsls	r7, r4, #8
    382e:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
    3832:	ea4e 4e00 	orr.w	lr, lr, r0, lsl #16
    3836:	ea47 070e 	orr.w	r7, r7, lr
    383a:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
    383e:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    3842:	e7bc      	b.n	37be <nrfx_gpiote_input_configure+0x62>
    release_handler(pin);
    3844:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3846:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    384a:	f7ff ff03 	bl	3654 <release_handler>
    if (!handler)
    384e:	2e00      	cmp	r6, #0
    3850:	d0be      	beq.n	37d0 <nrfx_gpiote_input_configure+0x74>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3852:	4d12      	ldr	r5, [pc, #72]	; (389c <nrfx_gpiote_input_configure+0x140>)
    3854:	682b      	ldr	r3, [r5, #0]
    3856:	429e      	cmp	r6, r3
    3858:	d104      	bne.n	3864 <nrfx_gpiote_input_configure+0x108>
    385a:	686b      	ldr	r3, [r5, #4]
    385c:	429f      	cmp	r7, r3
    385e:	d101      	bne.n	3864 <nrfx_gpiote_input_configure+0x108>
    3860:	2200      	movs	r2, #0
    3862:	e00a      	b.n	387a <nrfx_gpiote_input_configure+0x11e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3864:	480f      	ldr	r0, [pc, #60]	; (38a4 <nrfx_gpiote_input_configure+0x148>)
    3866:	f10d 010f 	add.w	r1, sp, #15
    386a:	f7ff fd2f 	bl	32cc <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    386e:	4b0c      	ldr	r3, [pc, #48]	; (38a0 <nrfx_gpiote_input_configure+0x144>)
    3870:	4298      	cmp	r0, r3
    3872:	f47f af7d 	bne.w	3770 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    3876:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
    387a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    387e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    3880:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3882:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    3886:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    388a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    388e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3892:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    3896:	e79b      	b.n	37d0 <nrfx_gpiote_input_configure+0x74>
    3898:	0bad0004 	.word	0x0bad0004
    389c:	20000054 	.word	0x20000054
    38a0:	0bad0000 	.word	0x0bad0000
    38a4:	200000a8 	.word	0x200000a8

000038a8 <nrfx_gpiote_output_configure>:
{
    38a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    38aa:	4604      	mov	r4, r0
    38ac:	4615      	mov	r5, r2
    38ae:	b085      	sub	sp, #20
    if (p_config)
    38b0:	b309      	cbz	r1, 38f6 <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    38b2:	4e33      	ldr	r6, [pc, #204]	; (3980 <nrfx_gpiote_output_configure+0xd8>)
    38b4:	f100 0708 	add.w	r7, r0, #8
    38b8:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    38bc:	0798      	lsls	r0, r3, #30
    38be:	d401      	bmi.n	38c4 <nrfx_gpiote_output_configure+0x1c>
    38c0:	069a      	lsls	r2, r3, #26
    38c2:	d45a      	bmi.n	397a <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    38c4:	f013 0f1c 	tst.w	r3, #28
    38c8:	d002      	beq.n	38d0 <nrfx_gpiote_output_configure+0x28>
    38ca:	784b      	ldrb	r3, [r1, #1]
    38cc:	2b01      	cmp	r3, #1
    38ce:	d054      	beq.n	397a <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    38d0:	2301      	movs	r3, #1
    38d2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    38d6:	2300      	movs	r3, #0
    38d8:	1c4a      	adds	r2, r1, #1
    38da:	e9cd 1300 	strd	r1, r3, [sp]
    38de:	4620      	mov	r0, r4
    38e0:	1c8b      	adds	r3, r1, #2
    38e2:	f10d 010f 	add.w	r1, sp, #15
    38e6:	f005 fa98 	bl	8e1a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    38ea:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    38ee:	f043 0303 	orr.w	r3, r3, #3
    38f2:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    38f6:	b915      	cbnz	r5, 38fe <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    38f8:	4822      	ldr	r0, [pc, #136]	; (3984 <nrfx_gpiote_output_configure+0xdc>)
}
    38fa:	b005      	add	sp, #20
    38fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    38fe:	4e20      	ldr	r6, [pc, #128]	; (3980 <nrfx_gpiote_output_configure+0xd8>)
    3900:	f104 0708 	add.w	r7, r4, #8
    3904:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    3908:	0783      	lsls	r3, r0, #30
    390a:	d536      	bpl.n	397a <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    390c:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    3910:	2300      	movs	r3, #0
    3912:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3914:	f020 0020 	bic.w	r0, r0, #32
    3918:	0089      	lsls	r1, r1, #2
    391a:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    391e:	04c0      	lsls	r0, r0, #19
    3920:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    3924:	0cc0      	lsrs	r0, r0, #19
    3926:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    392a:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    392e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3932:	786a      	ldrb	r2, [r5, #1]
    3934:	2a00      	cmp	r2, #0
    3936:	d0df      	beq.n	38f8 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3938:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    393c:	78ad      	ldrb	r5, [r5, #2]
    393e:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    3942:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3946:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    394a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    394e:	0223      	lsls	r3, r4, #8
    3950:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3954:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3956:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    395a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    395e:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3960:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3962:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3966:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    396a:	432b      	orrs	r3, r5
    396c:	f040 0020 	orr.w	r0, r0, #32
    3970:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    3974:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3978:	e7be      	b.n	38f8 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
    397a:	4803      	ldr	r0, [pc, #12]	; (3988 <nrfx_gpiote_output_configure+0xe0>)
    397c:	e7bd      	b.n	38fa <nrfx_gpiote_output_configure+0x52>
    397e:	bf00      	nop
    3980:	20000054 	.word	0x20000054
    3984:	0bad0000 	.word	0x0bad0000
    3988:	0bad0004 	.word	0x0bad0004

0000398c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    398c:	4b01      	ldr	r3, [pc, #4]	; (3994 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    398e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    3992:	4770      	bx	lr
    3994:	20000054 	.word	0x20000054

00003998 <nrfx_gpiote_channel_get>:
{
    3998:	b538      	push	{r3, r4, r5, lr}
    399a:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    399c:	460d      	mov	r5, r1
    399e:	b951      	cbnz	r1, 39b6 <nrfx_gpiote_channel_get+0x1e>
    39a0:	490a      	ldr	r1, [pc, #40]	; (39cc <nrfx_gpiote_channel_get+0x34>)
    39a2:	480b      	ldr	r0, [pc, #44]	; (39d0 <nrfx_gpiote_channel_get+0x38>)
    39a4:	f240 2235 	movw	r2, #565	; 0x235
    39a8:	f004 ff17 	bl	87da <printk>
    39ac:	f240 2135 	movw	r1, #565	; 0x235
    39b0:	4806      	ldr	r0, [pc, #24]	; (39cc <nrfx_gpiote_channel_get+0x34>)
    39b2:	f004 ff9d 	bl	88f0 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    39b6:	4b07      	ldr	r3, [pc, #28]	; (39d4 <nrfx_gpiote_channel_get+0x3c>)
    39b8:	3408      	adds	r4, #8
    39ba:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin))
    39be:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    39c0:	bf43      	ittte	mi
    39c2:	0b5b      	lsrmi	r3, r3, #13
    39c4:	702b      	strbmi	r3, [r5, #0]
        return NRFX_SUCCESS;
    39c6:	4804      	ldrmi	r0, [pc, #16]	; (39d8 <nrfx_gpiote_channel_get+0x40>)
        return NRFX_ERROR_INVALID_PARAM;
    39c8:	4804      	ldrpl	r0, [pc, #16]	; (39dc <nrfx_gpiote_channel_get+0x44>)
}
    39ca:	bd38      	pop	{r3, r4, r5, pc}
    39cc:	0000a3d4 	.word	0x0000a3d4
    39d0:	00009765 	.word	0x00009765
    39d4:	20000054 	.word	0x20000054
    39d8:	0bad0000 	.word	0x0bad0000
    39dc:	0bad0004 	.word	0x0bad0004

000039e0 <nrfx_gpiote_init>:
{
    39e0:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    39e2:	4c0e      	ldr	r4, [pc, #56]	; (3a1c <nrfx_gpiote_init+0x3c>)
    39e4:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    39e8:	b9b5      	cbnz	r5, 3a18 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    39ea:	2240      	movs	r2, #64	; 0x40
    39ec:	4629      	mov	r1, r5
    39ee:	f104 0010 	add.w	r0, r4, #16
    39f2:	f005 f838 	bl	8a66 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    39f6:	200d      	movs	r0, #13
    39f8:	f7fd fe70 	bl	16dc <arch_irq_enable>
    p_reg->INTENSET = mask;
    39fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3a00:	4b07      	ldr	r3, [pc, #28]	; (3a20 <nrfx_gpiote_init+0x40>)
    return err_code;
    3a02:	4808      	ldr	r0, [pc, #32]	; (3a24 <nrfx_gpiote_init+0x44>)
    3a04:	601d      	str	r5, [r3, #0]
    3a06:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3a08:	4b07      	ldr	r3, [pc, #28]	; (3a28 <nrfx_gpiote_init+0x48>)
    3a0a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3a0e:	2301      	movs	r3, #1
    3a10:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3a14:	6563      	str	r3, [r4, #84]	; 0x54
}
    3a16:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    3a18:	4804      	ldr	r0, [pc, #16]	; (3a2c <nrfx_gpiote_init+0x4c>)
    3a1a:	e7fc      	b.n	3a16 <nrfx_gpiote_init+0x36>
    3a1c:	20000054 	.word	0x20000054
    3a20:	5000d17c 	.word	0x5000d17c
    3a24:	0bad0000 	.word	0x0bad0000
    3a28:	5000d000 	.word	0x5000d000
    3a2c:	0bad0005 	.word	0x0bad0005

00003a30 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3a30:	4b03      	ldr	r3, [pc, #12]	; (3a40 <nrfx_gpiote_is_init+0x10>)
    3a32:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    3a36:	3800      	subs	r0, #0
    3a38:	bf18      	it	ne
    3a3a:	2001      	movne	r0, #1
    3a3c:	4770      	bx	lr
    3a3e:	bf00      	nop
    3a40:	20000054 	.word	0x20000054

00003a44 <nrfx_gpiote_channel_free>:
{
    3a44:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3a46:	4801      	ldr	r0, [pc, #4]	; (3a4c <nrfx_gpiote_channel_free+0x8>)
    3a48:	f7ff bc60 	b.w	330c <nrfx_flag32_free>
    3a4c:	200000a4 	.word	0x200000a4

00003a50 <nrfx_gpiote_channel_alloc>:
{
    3a50:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3a52:	4801      	ldr	r0, [pc, #4]	; (3a58 <nrfx_gpiote_channel_alloc+0x8>)
    3a54:	f7ff bc3a 	b.w	32cc <nrfx_flag32_alloc>
    3a58:	200000a4 	.word	0x200000a4

00003a5c <nrfx_gpiote_trigger_enable>:
{
    3a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    3a5e:	4d2f      	ldr	r5, [pc, #188]	; (3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>)
    3a60:	f100 0708 	add.w	r7, r0, #8
    3a64:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
{
    3a68:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
    3a6a:	f013 0f1c 	tst.w	r3, #28
{
    3a6e:	460e      	mov	r6, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    3a70:	d10a      	bne.n	3a88 <nrfx_gpiote_trigger_enable+0x2c>
    3a72:	492b      	ldr	r1, [pc, #172]	; (3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>)
    3a74:	482b      	ldr	r0, [pc, #172]	; (3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>)
    3a76:	f240 32df 	movw	r2, #991	; 0x3df
    3a7a:	f004 feae 	bl	87da <printk>
    3a7e:	f240 31df 	movw	r1, #991	; 0x3df
    3a82:	4827      	ldr	r0, [pc, #156]	; (3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>)
    3a84:	f004 ff34 	bl	88f0 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3a88:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3a8c:	0683      	lsls	r3, r0, #26
    3a8e:	d51f      	bpl.n	3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>
    3a90:	f010 0302 	ands.w	r3, r0, #2
    3a94:	d11c      	bne.n	3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3a96:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    3a98:	4608      	mov	r0, r1
    3a9a:	f005 f9ba 	bl	8e12 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    3a9e:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    3aa2:	f500 4050 	add.w	r0, r0, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3aa6:	6003      	str	r3, [r0, #0]
    3aa8:	6803      	ldr	r3, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3aaa:	008b      	lsls	r3, r1, #2
    3aac:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3ab0:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    3ab4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3ab8:	f042 0201 	orr.w	r2, r2, #1
    3abc:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    3ac0:	b126      	cbz	r6, 3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3ac2:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
    3ac4:	4a18      	ldr	r2, [pc, #96]	; (3b28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x90>)
    3ac6:	408b      	lsls	r3, r1
    3ac8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3acc:	b003      	add	sp, #12
    3ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    3ad0:	b956      	cbnz	r6, 3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>
    3ad2:	4913      	ldr	r1, [pc, #76]	; (3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>)
    3ad4:	4813      	ldr	r0, [pc, #76]	; (3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>)
    3ad6:	f240 32ee 	movw	r2, #1006	; 0x3ee
    3ada:	f004 fe7e 	bl	87da <printk>
    3ade:	f240 31ee 	movw	r1, #1006	; 0x3ee
    3ae2:	480f      	ldr	r0, [pc, #60]	; (3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>)
    3ae4:	f004 ff04 	bl	88f0 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3ae8:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    3aec:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    3af0:	2b04      	cmp	r3, #4
    3af2:	d00f      	beq.n	3b14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7c>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3af4:	2b05      	cmp	r3, #5
    3af6:	d00f      	beq.n	3b18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x80>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3af8:	a801      	add	r0, sp, #4
    3afa:	9401      	str	r4, [sp, #4]
    3afc:	f7ff fe04 	bl	3708 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3b00:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    3b02:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3b04:	40d9      	lsrs	r1, r3
    3b06:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3b0a:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3b0c:	4620      	mov	r0, r4
    3b0e:	f005 f9cf 	bl	8eb0 <nrf_gpio_cfg_sense_set>
}
    3b12:	e7db      	b.n	3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3b14:	2103      	movs	r1, #3
    3b16:	e7f9      	b.n	3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3b18:	2102      	movs	r1, #2
    3b1a:	e7f7      	b.n	3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>
    3b1c:	20000054 	.word	0x20000054
    3b20:	0000a3d4 	.word	0x0000a3d4
    3b24:	00009765 	.word	0x00009765
    3b28:	5000d000 	.word	0x5000d000

00003b2c <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3b2c:	4b0e      	ldr	r3, [pc, #56]	; (3b68 <nrfx_gpiote_trigger_disable+0x3c>)
    3b2e:	f100 0208 	add.w	r2, r0, #8
    3b32:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3b36:	0699      	lsls	r1, r3, #26
    3b38:	d513      	bpl.n	3b62 <nrfx_gpiote_trigger_disable+0x36>
    3b3a:	079a      	lsls	r2, r3, #30
    3b3c:	d411      	bmi.n	3b62 <nrfx_gpiote_trigger_disable+0x36>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3b3e:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3b40:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3b42:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    3b44:	4909      	ldr	r1, [pc, #36]	; (3b6c <nrfx_gpiote_trigger_disable+0x40>)
    3b46:	009b      	lsls	r3, r3, #2
    3b48:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3b4c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3b50:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    3b54:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3b58:	f022 0203 	bic.w	r2, r2, #3
    3b5c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    3b60:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3b62:	2100      	movs	r1, #0
    3b64:	f005 b9a4 	b.w	8eb0 <nrf_gpio_cfg_sense_set>
    3b68:	20000054 	.word	0x20000054
    3b6c:	5000d000 	.word	0x5000d000

00003b70 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3b70:	4b0d      	ldr	r3, [pc, #52]	; (3ba8 <nrfx_gpiote_pin_uninit+0x38>)
    3b72:	f100 0208 	add.w	r2, r0, #8
    3b76:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
{
    3b7a:	b513      	push	{r0, r1, r4, lr}
    if (!pin_in_use(pin))
    3b7c:	07db      	lsls	r3, r3, #31
{
    3b7e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3b80:	d510      	bpl.n	3ba4 <nrfx_gpiote_pin_uninit+0x34>
    nrfx_gpiote_trigger_disable(pin);
    3b82:	f7ff ffd3 	bl	3b2c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    3b86:	4620      	mov	r0, r4
    3b88:	f7ff fda2 	bl	36d0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3b8c:	a801      	add	r0, sp, #4
    3b8e:	9401      	str	r4, [sp, #4]
    3b90:	f7ff fdba 	bl	3708 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3b94:	2202      	movs	r2, #2
    3b96:	9b01      	ldr	r3, [sp, #4]
    3b98:	3380      	adds	r3, #128	; 0x80
    3b9a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    3b9e:	4803      	ldr	r0, [pc, #12]	; (3bac <nrfx_gpiote_pin_uninit+0x3c>)
}
    3ba0:	b002      	add	sp, #8
    3ba2:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3ba4:	4802      	ldr	r0, [pc, #8]	; (3bb0 <nrfx_gpiote_pin_uninit+0x40>)
    3ba6:	e7fb      	b.n	3ba0 <nrfx_gpiote_pin_uninit+0x30>
    3ba8:	20000054 	.word	0x20000054
    3bac:	0bad0000 	.word	0x0bad0000
    3bb0:	0bad0004 	.word	0x0bad0004

00003bb4 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    3bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    3bb8:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3bba:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3bbc:	4634      	mov	r4, r6
{
    3bbe:	4b52      	ldr	r3, [pc, #328]	; (3d08 <nrfx_gpiote_irq_handler+0x154>)
    return p_reg->INTENSET & mask;
    3bc0:	4852      	ldr	r0, [pc, #328]	; (3d0c <nrfx_gpiote_irq_handler+0x158>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3bc2:	4953      	ldr	r1, [pc, #332]	; (3d10 <nrfx_gpiote_irq_handler+0x15c>)
{
    3bc4:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3bc6:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3bc8:	b135      	cbz	r5, 3bd8 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    3bca:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    3bce:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3bd0:	bf1e      	ittt	ne
    3bd2:	601c      	strne	r4, [r3, #0]
    3bd4:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    3bd6:	4316      	orrne	r6, r2
        }
        mask <<= 1;
    3bd8:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3bda:	428b      	cmp	r3, r1
        mask <<= 1;
    3bdc:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3be0:	d1f1      	bne.n	3bc6 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3be2:	4b4c      	ldr	r3, [pc, #304]	; (3d14 <nrfx_gpiote_irq_handler+0x160>)
    3be4:	681a      	ldr	r2, [r3, #0]
    3be6:	4698      	mov	r8, r3
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    3be8:	b182      	cbz	r2, 3c0c <nrfx_gpiote_irq_handler+0x58>
        *p_masks = gpio_regs[i]->LATCH;
    3bea:	4f4b      	ldr	r7, [pc, #300]	; (3d18 <nrfx_gpiote_irq_handler+0x164>)
    3bec:	6a3b      	ldr	r3, [r7, #32]
    3bee:	9302      	str	r3, [sp, #8]
        gpio_regs[i]->LATCH = *p_masks;
    3bf0:	623b      	str	r3, [r7, #32]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    3bf2:	f04f 0901 	mov.w	r9, #1
            while (latch[i])
    3bf6:	9c02      	ldr	r4, [sp, #8]
    3bf8:	b954      	cbnz	r4, 3c10 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3bfa:	f8c8 4000 	str.w	r4, [r8]
    3bfe:	f8d8 3000 	ldr.w	r3, [r8]
        *p_masks = gpio_regs[i]->LATCH;
    3c02:	6a3b      	ldr	r3, [r7, #32]
    3c04:	9302      	str	r3, [sp, #8]
        gpio_regs[i]->LATCH = *p_masks;
    3c06:	623b      	str	r3, [r7, #32]
        if (latch[port_idx])
    3c08:	2b00      	cmp	r3, #0
    3c0a:	d1f2      	bne.n	3bf2 <nrfx_gpiote_irq_handler+0x3e>
        mask &= ~NRFX_BIT(ch);
    3c0c:	2401      	movs	r4, #1
    3c0e:	e076      	b.n	3cfe <nrfx_gpiote_irq_handler+0x14a>
                uint32_t pin = NRF_CTZ(latch[i]);
    3c10:	fa94 f4a4 	rbit	r4, r4
    3c14:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3c18:	4a40      	ldr	r2, [pc, #256]	; (3d1c <nrfx_gpiote_irq_handler+0x168>)
    3c1a:	f104 0308 	add.w	r3, r4, #8
    3c1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    3c22:	08e5      	lsrs	r5, r4, #3
    3c24:	089a      	lsrs	r2, r3, #2
    3c26:	f3c3 0b82 	ubfx	fp, r3, #2, #3
    bit = BITMASK_RELBIT_GET(bit);
    3c2a:	f004 0107 	and.w	r1, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3c2e:	ab02      	add	r3, sp, #8
    3c30:	fa09 f001 	lsl.w	r0, r9, r1
    3c34:	5d59      	ldrb	r1, [r3, r5]
    3c36:	9201      	str	r2, [sp, #4]
    3c38:	ea21 0100 	bic.w	r1, r1, r0
    3c3c:	5559      	strb	r1, [r3, r5]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3c3e:	a803      	add	r0, sp, #12
    3c40:	9403      	str	r4, [sp, #12]
    3c42:	f7ff fd61 	bl	3708 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3c46:	9903      	ldr	r1, [sp, #12]
    if (is_level(trigger))
    3c48:	9a01      	ldr	r2, [sp, #4]
    3c4a:	3180      	adds	r1, #128	; 0x80
    3c4c:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    3c50:	0753      	lsls	r3, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3c52:	46da      	mov	sl, fp
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    3c54:	f3c5 4501 	ubfx	r5, r5, #16, #2
    if (is_level(trigger))
    3c58:	d521      	bpl.n	3c9e <nrfx_gpiote_irq_handler+0xea>
        call_handler(pin, trigger);
    3c5a:	4659      	mov	r1, fp
    3c5c:	4620      	mov	r0, r4
    3c5e:	f7ff fcdb 	bl	3618 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3c62:	a803      	add	r0, sp, #12
    3c64:	9403      	str	r4, [sp, #12]
    3c66:	f7ff fd4f 	bl	3708 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3c6a:	9b03      	ldr	r3, [sp, #12]
    3c6c:	b2ed      	uxtb	r5, r5
    3c6e:	3380      	adds	r3, #128	; 0x80
    3c70:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    3c74:	f3c3 4301 	ubfx	r3, r3, #16, #2
    3c78:	429d      	cmp	r5, r3
    3c7a:	d107      	bne.n	3c8c <nrfx_gpiote_irq_handler+0xd8>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3c7c:	2100      	movs	r1, #0
    3c7e:	4620      	mov	r0, r4
    3c80:	f005 f916 	bl	8eb0 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    3c84:	4629      	mov	r1, r5
    3c86:	4620      	mov	r0, r4
    3c88:	f005 f912 	bl	8eb0 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3c8c:	a803      	add	r0, sp, #12
    3c8e:	9403      	str	r4, [sp, #12]
    3c90:	f7ff fd3a 	bl	3708 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    3c94:	9b03      	ldr	r3, [sp, #12]
    3c96:	fa09 f303 	lsl.w	r3, r9, r3
    3c9a:	6203      	str	r3, [r0, #32]
    3c9c:	e7ab      	b.n	3bf6 <nrfx_gpiote_irq_handler+0x42>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3c9e:	2d02      	cmp	r5, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    3ca0:	bf0c      	ite	eq
    3ca2:	2103      	moveq	r1, #3
    3ca4:	2102      	movne	r1, #2
    3ca6:	4620      	mov	r0, r4
    3ca8:	f005 f902 	bl	8eb0 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3cac:	f1bb 0f03 	cmp.w	fp, #3
    3cb0:	d004      	beq.n	3cbc <nrfx_gpiote_irq_handler+0x108>
    3cb2:	2d02      	cmp	r5, #2
    3cb4:	d107      	bne.n	3cc6 <nrfx_gpiote_irq_handler+0x112>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3cb6:	f1bb 0f01 	cmp.w	fp, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3cba:	d1e7      	bne.n	3c8c <nrfx_gpiote_irq_handler+0xd8>
            call_handler(pin, trigger);
    3cbc:	4651      	mov	r1, sl
    3cbe:	4620      	mov	r0, r4
    3cc0:	f7ff fcaa 	bl	3618 <call_handler>
    3cc4:	e7e2      	b.n	3c8c <nrfx_gpiote_irq_handler+0xd8>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3cc6:	2d03      	cmp	r5, #3
    3cc8:	d1e0      	bne.n	3c8c <nrfx_gpiote_irq_handler+0xd8>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3cca:	f1bb 0f02 	cmp.w	fp, #2
    3cce:	e7f4      	b.n	3cba <nrfx_gpiote_irq_handler+0x106>
        uint32_t ch = NRF_CTZ(mask);
    3cd0:	fa96 f3a6 	rbit	r3, r6
    3cd4:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    3cd8:	fa04 f203 	lsl.w	r2, r4, r3
    3cdc:	009b      	lsls	r3, r3, #2
    3cde:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3ce2:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3ce6:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    3cea:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3cee:	f3c0 2004 	ubfx	r0, r0, #8, #5
    3cf2:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    3cf6:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3cfa:	f7ff fc8d 	bl	3618 <call_handler>
    while (mask)
    3cfe:	2e00      	cmp	r6, #0
    3d00:	d1e6      	bne.n	3cd0 <nrfx_gpiote_irq_handler+0x11c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    3d02:	b005      	add	sp, #20
    3d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3d08:	5000d100 	.word	0x5000d100
    3d0c:	5000d000 	.word	0x5000d000
    3d10:	5000d120 	.word	0x5000d120
    3d14:	5000d17c 	.word	0x5000d17c
    3d18:	50842500 	.word	0x50842500
    3d1c:	20000054 	.word	0x20000054

00003d20 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3d20:	4b0e      	ldr	r3, [pc, #56]	; (3d5c <z_sys_init_run_level+0x3c>)
{
    3d22:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3d24:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3d28:	3001      	adds	r0, #1
    3d2a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    3d2e:	42a6      	cmp	r6, r4
    3d30:	d800      	bhi.n	3d34 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    3d32:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    3d34:	e9d4 3500 	ldrd	r3, r5, [r4]
    3d38:	4628      	mov	r0, r5
    3d3a:	4798      	blx	r3
		if (dev != NULL) {
    3d3c:	b165      	cbz	r5, 3d58 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    3d3e:	68eb      	ldr	r3, [r5, #12]
    3d40:	b130      	cbz	r0, 3d50 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    3d42:	2800      	cmp	r0, #0
    3d44:	bfb8      	it	lt
    3d46:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    3d48:	28ff      	cmp	r0, #255	; 0xff
    3d4a:	bfa8      	it	ge
    3d4c:	20ff      	movge	r0, #255	; 0xff
    3d4e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    3d50:	785a      	ldrb	r2, [r3, #1]
    3d52:	f042 0201 	orr.w	r2, r2, #1
    3d56:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3d58:	3408      	adds	r4, #8
    3d5a:	e7e8      	b.n	3d2e <z_sys_init_run_level+0xe>
    3d5c:	00009558 	.word	0x00009558

00003d60 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3d60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3d62:	4604      	mov	r4, r0
    3d64:	460e      	mov	r6, r1
	__asm__ volatile(
    3d66:	f04f 0320 	mov.w	r3, #32
    3d6a:	f3ef 8711 	mrs	r7, BASEPRI
    3d6e:	f383 8812 	msr	BASEPRI_MAX, r3
    3d72:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    3d76:	f001 fbed 	bl	5554 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    3d7a:	2200      	movs	r2, #0
    3d7c:	2c04      	cmp	r4, #4
    3d7e:	bf98      	it	ls
    3d80:	4b1d      	ldrls	r3, [pc, #116]	; (3df8 <z_fatal_error+0x98>)
    3d82:	4605      	mov	r5, r0
	switch (reason) {
    3d84:	bf94      	ite	ls
    3d86:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
    3d8a:	4b1c      	ldrhi	r3, [pc, #112]	; (3dfc <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    3d8c:	9200      	str	r2, [sp, #0]
    3d8e:	2145      	movs	r1, #69	; 0x45
    3d90:	4622      	mov	r2, r4
    3d92:	481b      	ldr	r0, [pc, #108]	; (3e00 <z_fatal_error+0xa0>)
    3d94:	f004 fdbf 	bl	8916 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    3d98:	b13e      	cbz	r6, 3daa <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    3d9a:	69f3      	ldr	r3, [r6, #28]
    3d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    3da0:	b11b      	cbz	r3, 3daa <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
    3da2:	2145      	movs	r1, #69	; 0x45
    3da4:	4817      	ldr	r0, [pc, #92]	; (3e04 <z_fatal_error+0xa4>)
    3da6:	f004 fdb6 	bl	8916 <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    3daa:	b135      	cbz	r5, 3dba <z_fatal_error+0x5a>
    3dac:	4628      	mov	r0, r5
    3dae:	f005 f8bb 	bl	8f28 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    3db2:	4603      	mov	r3, r0
    3db4:	b108      	cbz	r0, 3dba <z_fatal_error+0x5a>
    3db6:	7802      	ldrb	r2, [r0, #0]
    3db8:	b902      	cbnz	r2, 3dbc <z_fatal_error+0x5c>
		thread_name = "unknown";
    3dba:	4b13      	ldr	r3, [pc, #76]	; (3e08 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    3dbc:	462a      	mov	r2, r5
    3dbe:	2145      	movs	r1, #69	; 0x45
    3dc0:	4812      	ldr	r0, [pc, #72]	; (3e0c <z_fatal_error+0xac>)
    3dc2:	f004 fda8 	bl	8916 <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    3dc6:	4631      	mov	r1, r6
    3dc8:	4620      	mov	r0, r4
    3dca:	f7ff f949 	bl	3060 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    3dce:	2c04      	cmp	r4, #4
    3dd0:	d108      	bne.n	3de4 <z_fatal_error+0x84>
    3dd2:	490f      	ldr	r1, [pc, #60]	; (3e10 <z_fatal_error+0xb0>)
    3dd4:	480f      	ldr	r0, [pc, #60]	; (3e14 <z_fatal_error+0xb4>)
    3dd6:	228f      	movs	r2, #143	; 0x8f
    3dd8:	f004 fcff 	bl	87da <printk>
    3ddc:	218f      	movs	r1, #143	; 0x8f
    3dde:	480c      	ldr	r0, [pc, #48]	; (3e10 <z_fatal_error+0xb0>)
    3de0:	f004 fd86 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    3de4:	f387 8811 	msr	BASEPRI, r7
    3de8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    3dec:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    3dee:	b003      	add	sp, #12
    3df0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3df4:	f7fe b8ac 	b.w	1f50 <z_impl_k_thread_abort>
    3df8:	00009570 	.word	0x00009570
    3dfc:	0000a412 	.word	0x0000a412
    3e00:	0000a428 	.word	0x0000a428
    3e04:	0000a455 	.word	0x0000a455
    3e08:	0000a420 	.word	0x0000a420
    3e0c:	0000a47b 	.word	0x0000a47b
    3e10:	0000a498 	.word	0x0000a498
    3e14:	00009765 	.word	0x00009765

00003e18 <init_idle_thread>:
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    3e18:	2300      	movs	r3, #0
    3e1a:	2201      	movs	r2, #1
{
    3e1c:	b510      	push	{r4, lr}
    3e1e:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    3e20:	e9cd 2304 	strd	r2, r3, [sp, #16]
    3e24:	220f      	movs	r2, #15
    3e26:	9301      	str	r3, [sp, #4]
    3e28:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3e2c:	2318      	movs	r3, #24
    3e2e:	4a0b      	ldr	r2, [pc, #44]	; (3e5c <init_idle_thread+0x44>)
	struct k_thread *thread = &z_idle_threads[i];
    3e30:	4c0b      	ldr	r4, [pc, #44]	; (3e60 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3e32:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    3e36:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3e3a:	490a      	ldr	r1, [pc, #40]	; (3e64 <init_idle_thread+0x4c>)
	struct k_thread *thread = &z_idle_threads[i];
    3e3c:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
	z_setup_new_thread(thread, stack,
    3e40:	fb02 1100 	mla	r1, r2, r0, r1
    3e44:	9300      	str	r3, [sp, #0]
    3e46:	4620      	mov	r0, r4
    3e48:	4b07      	ldr	r3, [pc, #28]	; (3e68 <init_idle_thread+0x50>)
    3e4a:	f000 f98f 	bl	416c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3e4e:	7b63      	ldrb	r3, [r4, #13]
    3e50:	f023 0304 	bic.w	r3, r3, #4
    3e54:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    3e56:	b006      	add	sp, #24
    3e58:	bd10      	pop	{r4, pc}
    3e5a:	bf00      	nop
    3e5c:	20000a30 	.word	0x20000a30
    3e60:	20000190 	.word	0x20000190
    3e64:	20002610 	.word	0x20002610
    3e68:	0000435d 	.word	0x0000435d

00003e6c <bg_thread_main>:
	z_sys_post_kernel = true;
    3e6c:	2201      	movs	r2, #1
{
    3e6e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3e70:	4b09      	ldr	r3, [pc, #36]	; (3e98 <bg_thread_main+0x2c>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3e72:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    3e74:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3e76:	f7ff ff53 	bl	3d20 <z_sys_init_run_level>
	boot_banner();
    3e7a:	f001 fecb 	bl	5c14 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    3e7e:	2003      	movs	r0, #3
    3e80:	f7ff ff4e 	bl	3d20 <z_sys_init_run_level>
	z_init_static_threads();
    3e84:	f000 f9c6 	bl	4214 <z_init_static_threads>
	main();
    3e88:	f004 fc9e 	bl	87c8 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3e8c:	4a03      	ldr	r2, [pc, #12]	; (3e9c <bg_thread_main+0x30>)
    3e8e:	7b13      	ldrb	r3, [r2, #12]
    3e90:	f023 0301 	bic.w	r3, r3, #1
    3e94:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3e96:	bd08      	pop	{r3, pc}
    3e98:	20001451 	.word	0x20001451
    3e9c:	20000210 	.word	0x20000210

00003ea0 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    3ea0:	4802      	ldr	r0, [pc, #8]	; (3eac <z_bss_zero+0xc>)
    3ea2:	4a03      	ldr	r2, [pc, #12]	; (3eb0 <z_bss_zero+0x10>)
    3ea4:	2100      	movs	r1, #0
    3ea6:	1a12      	subs	r2, r2, r0
    3ea8:	f004 bddd 	b.w	8a66 <memset>
    3eac:	20000190 	.word	0x20000190
    3eb0:	20001610 	.word	0x20001610

00003eb4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    3eb4:	b580      	push	{r7, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    3eb6:	4b35      	ldr	r3, [pc, #212]	; (3f8c <z_cstart+0xd8>)
    3eb8:	b0a6      	sub	sp, #152	; 0x98
	uint32_t msp =
    3eba:	f503 6700 	add.w	r7, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3ebe:	f387 8808 	msr	MSP, r7
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    3ec2:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3ec6:	2400      	movs	r4, #0
    3ec8:	23e0      	movs	r3, #224	; 0xe0
    3eca:	4d31      	ldr	r5, [pc, #196]	; (3f90 <z_cstart+0xdc>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    3ecc:	4e31      	ldr	r6, [pc, #196]	; (3f94 <z_cstart+0xe0>)
    3ece:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    3ed2:	77ec      	strb	r4, [r5, #31]
    3ed4:	762c      	strb	r4, [r5, #24]
    3ed6:	766c      	strb	r4, [r5, #25]
    3ed8:	76ac      	strb	r4, [r5, #26]
    3eda:	f885 4020 	strb.w	r4, [r5, #32]
    3ede:	76ec      	strb	r4, [r5, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3ee0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3ee2:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 3fa8 <z_cstart+0xf4>
    3ee6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3eea:	626b      	str	r3, [r5, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
    3eec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3eee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    3ef2:	626b      	str	r3, [r5, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
    3ef4:	63ac      	str	r4, [r5, #56]	; 0x38
	/* Set NMI, Hard, and Bus Faults as Non-Secure.
	 * NMI and Bus Faults targeting the Secure state will
	 * escalate to a SecureFault or SecureHardFault.
	 */
	SCB->AIRCR =
		(SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk)))
    3ef6:	68eb      	ldr	r3, [r5, #12]
    3ef8:	b29b      	uxth	r3, r3
		| SCB_AIRCR_BFHFNMINS_Msk
		| ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos) &
    3efa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    3efe:	f443 3308 	orr.w	r3, r3, #139264	; 0x22000
	SCB->AIRCR =
    3f02:	60eb      	str	r3, [r5, #12]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3f04:	f7fd ff8a 	bl	1e1c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3f08:	f7fd fba6 	bl	1658 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3f0c:	f04f 33ff 	mov.w	r3, #4294967295
    3f10:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3f12:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3f14:	f7fe fa4c 	bl	23b0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3f18:	f7fe f8a4 	bl	2064 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    3f1c:	f240 1301 	movw	r3, #257	; 0x101
    3f20:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    3f24:	ab06      	add	r3, sp, #24
    3f26:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    3f28:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3f2c:	f004 ffcf 	bl	8ece <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3f30:	4620      	mov	r0, r4
    3f32:	f7ff fef5 	bl	3d20 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3f36:	2001      	movs	r0, #1
    3f38:	f7ff fef2 	bl	3d20 <z_sys_init_run_level>
	z_sched_init();
    3f3c:	f001 f9ba 	bl	52b4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3f40:	4b15      	ldr	r3, [pc, #84]	; (3f98 <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
    3f42:	4d16      	ldr	r5, [pc, #88]	; (3f9c <z_cstart+0xe8>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3f44:	9305      	str	r3, [sp, #20]
    3f46:	2301      	movs	r3, #1
    3f48:	4915      	ldr	r1, [pc, #84]	; (3fa0 <z_cstart+0xec>)
    3f4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    3f4e:	e9cd 4303 	strd	r4, r3, [sp, #12]
    3f52:	4628      	mov	r0, r5
    3f54:	464b      	mov	r3, r9
    3f56:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3f5a:	9400      	str	r4, [sp, #0]
	_kernel.ready_q.cache = &z_main_thread;
    3f5c:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3f5e:	f000 f905 	bl	416c <z_setup_new_thread>
    3f62:	4680      	mov	r8, r0
    3f64:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    3f66:	4628      	mov	r0, r5
    3f68:	f022 0204 	bic.w	r2, r2, #4
    3f6c:	736a      	strb	r2, [r5, #13]
    3f6e:	f000 fe99 	bl	4ca4 <z_ready_thread>
		init_idle_thread(i);
    3f72:	4620      	mov	r0, r4
    3f74:	f7ff ff50 	bl	3e18 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    3f78:	4b0a      	ldr	r3, [pc, #40]	; (3fa4 <z_cstart+0xf0>)
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3f7a:	464a      	mov	r2, r9
    3f7c:	4641      	mov	r1, r8
    3f7e:	4628      	mov	r0, r5
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    3f80:	60f3      	str	r3, [r6, #12]
		_kernel.cpus[i].id = i;
    3f82:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    3f84:	6077      	str	r7, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3f86:	f7fd fc7f 	bl	1888 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3f8a:	bf00      	nop
    3f8c:	20002750 	.word	0x20002750
    3f90:	e000ed00 	.word	0xe000ed00
    3f94:	20000a30 	.word	0x20000a30
    3f98:	0000a504 	.word	0x0000a504
    3f9c:	20000210 	.word	0x20000210
    3fa0:	20001610 	.word	0x20001610
    3fa4:	20000190 	.word	0x20000190
    3fa8:	00003e6d 	.word	0x00003e6d

00003fac <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    3fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3fb0:	4d14      	ldr	r5, [pc, #80]	; (4004 <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x8>)
    3fb2:	4c15      	ldr	r4, [pc, #84]	; (4008 <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0xc>)
    3fb4:	46a8      	mov	r8, r5
    3fb6:	4e15      	ldr	r6, [pc, #84]	; (400c <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x10>)
    3fb8:	42ac      	cmp	r4, r5
    3fba:	d908      	bls.n	3fce <init_mem_slab_module+0x22>
    3fbc:	4631      	mov	r1, r6
    3fbe:	4814      	ldr	r0, [pc, #80]	; (4010 <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x14>)
    3fc0:	223c      	movs	r2, #60	; 0x3c
    3fc2:	f004 fc0a 	bl	87da <printk>
    3fc6:	213c      	movs	r1, #60	; 0x3c
    3fc8:	4630      	mov	r0, r6
    3fca:	f004 fc91 	bl	88f0 <assert_post_action>
    3fce:	4544      	cmp	r4, r8
    3fd0:	d302      	bcc.n	3fd8 <init_mem_slab_module+0x2c>
			goto out;
		}
		z_object_init(slab);
	}

out:
    3fd2:	2000      	movs	r0, #0
	return rc;
}
    3fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    3fd8:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    3fdc:	ea42 0301 	orr.w	r3, r2, r1
    3fe0:	f013 0303 	ands.w	r3, r3, #3
    3fe4:	d10b      	bne.n	3ffe <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x2>
	for (j = 0U; j < slab->num_blocks; j++) {
    3fe6:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    3fe8:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    3fea:	4283      	cmp	r3, r0
    3fec:	d101      	bne.n	3ff2 <init_mem_slab_module+0x46>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3fee:	3420      	adds	r4, #32
    3ff0:	e7e2      	b.n	3fb8 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    3ff2:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    3ff4:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    3ff6:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
    3ff8:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
    3ffa:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    3ffc:	e7f5      	b.n	3fea <init_mem_slab_module+0x3e>
		return -EINVAL;
    3ffe:	f06f 0015 	mvn.w	r0, #21
	return rc;
    4002:	e7e7      	b.n	3fd4 <init_mem_slab_module+0x28>
    4004:	2000013c 	.word	0x2000013c
    4008:	2000013c 	.word	0x2000013c
    400c:	0000a50c 	.word	0x0000a50c
    4010:	00009765 	.word	0x00009765

00004014 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    4014:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4018:	4604      	mov	r4, r0
    401a:	460d      	mov	r5, r1
    401c:	4690      	mov	r8, r2
    401e:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    4020:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    4024:	f04f 0320 	mov.w	r3, #32
    4028:	f3ef 8711 	mrs	r7, BASEPRI
    402c:	f383 8812 	msr	BASEPRI_MAX, r3
    4030:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4034:	4630      	mov	r0, r6
    4036:	f000 f96d 	bl	4314 <z_spin_lock_valid>
    403a:	b940      	cbnz	r0, 404e <k_mem_slab_alloc+0x3a>
    403c:	491f      	ldr	r1, [pc, #124]	; (40bc <k_mem_slab_alloc+0xa8>)
    403e:	4820      	ldr	r0, [pc, #128]	; (40c0 <k_mem_slab_alloc+0xac>)
    4040:	2281      	movs	r2, #129	; 0x81
    4042:	f004 fbca 	bl	87da <printk>
    4046:	2181      	movs	r1, #129	; 0x81
    4048:	481c      	ldr	r0, [pc, #112]	; (40bc <k_mem_slab_alloc+0xa8>)
    404a:	f004 fc51 	bl	88f0 <assert_post_action>
	z_spin_lock_set_owner(l);
    404e:	4630      	mov	r0, r6
    4050:	f000 f97c 	bl	434c <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    4054:	69a3      	ldr	r3, [r4, #24]
    4056:	b1c3      	cbz	r3, 408a <k_mem_slab_alloc+0x76>
		/* take a free block */
		*mem = slab->free_list;
    4058:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    405a:	681b      	ldr	r3, [r3, #0]
    405c:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    405e:	69e3      	ldr	r3, [r4, #28]
    4060:	3301      	adds	r3, #1
    4062:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    4064:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4066:	4630      	mov	r0, r6
    4068:	f000 f962 	bl	4330 <z_spin_unlock_valid>
    406c:	b940      	cbnz	r0, 4080 <k_mem_slab_alloc+0x6c>
    406e:	4913      	ldr	r1, [pc, #76]	; (40bc <k_mem_slab_alloc+0xa8>)
    4070:	4813      	ldr	r0, [pc, #76]	; (40c0 <k_mem_slab_alloc+0xac>)
    4072:	22ac      	movs	r2, #172	; 0xac
    4074:	f004 fbb1 	bl	87da <printk>
    4078:	21ac      	movs	r1, #172	; 0xac
    407a:	4810      	ldr	r0, [pc, #64]	; (40bc <k_mem_slab_alloc+0xa8>)
    407c:	f004 fc38 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    4080:	f387 8811 	msr	BASEPRI, r7
    4084:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    4088:	e013      	b.n	40b2 <k_mem_slab_alloc+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    408a:	ea58 0209 	orrs.w	r2, r8, r9
    408e:	d103      	bne.n	4098 <k_mem_slab_alloc+0x84>
		result = -ENOMEM;
    4090:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
    4094:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    4096:	e7e6      	b.n	4066 <k_mem_slab_alloc+0x52>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    4098:	4622      	mov	r2, r4
    409a:	4639      	mov	r1, r7
    409c:	4630      	mov	r0, r6
    409e:	e9cd 8900 	strd	r8, r9, [sp]
    40a2:	f000 ff67 	bl	4f74 <z_pend_curr>
		if (result == 0) {
    40a6:	4604      	mov	r4, r0
    40a8:	b918      	cbnz	r0, 40b2 <k_mem_slab_alloc+0x9e>
			*mem = _current->base.swap_data;
    40aa:	4b06      	ldr	r3, [pc, #24]	; (40c4 <k_mem_slab_alloc+0xb0>)
    40ac:	689b      	ldr	r3, [r3, #8]
    40ae:	695b      	ldr	r3, [r3, #20]
    40b0:	602b      	str	r3, [r5, #0]
}
    40b2:	4620      	mov	r0, r4
    40b4:	b003      	add	sp, #12
    40b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    40ba:	bf00      	nop
    40bc:	0000973f 	.word	0x0000973f
    40c0:	00009765 	.word	0x00009765
    40c4:	20000a30 	.word	0x20000a30

000040c8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    40c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    40cc:	4604      	mov	r4, r0
    40ce:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    40d0:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    40d4:	f04f 0320 	mov.w	r3, #32
    40d8:	f3ef 8711 	mrs	r7, BASEPRI
    40dc:	f383 8812 	msr	BASEPRI_MAX, r3
    40e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    40e4:	4630      	mov	r0, r6
    40e6:	f000 f915 	bl	4314 <z_spin_lock_valid>
    40ea:	b940      	cbnz	r0, 40fe <k_mem_slab_free+0x36>
    40ec:	491d      	ldr	r1, [pc, #116]	; (4164 <k_mem_slab_free+0x9c>)
    40ee:	481e      	ldr	r0, [pc, #120]	; (4168 <k_mem_slab_free+0xa0>)
    40f0:	2281      	movs	r2, #129	; 0x81
    40f2:	f004 fb72 	bl	87da <printk>
    40f6:	2181      	movs	r1, #129	; 0x81
    40f8:	481a      	ldr	r0, [pc, #104]	; (4164 <k_mem_slab_free+0x9c>)
    40fa:	f004 fbf9 	bl	88f0 <assert_post_action>
	z_spin_lock_set_owner(l);
    40fe:	4630      	mov	r0, r6
    4100:	f000 f924 	bl	434c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    4104:	f8d4 8018 	ldr.w	r8, [r4, #24]
    4108:	f1b8 0f00 	cmp.w	r8, #0
    410c:	d10f      	bne.n	412e <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    410e:	4620      	mov	r0, r4
    4110:	f001 f892 	bl	5238 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    4114:	b158      	cbz	r0, 412e <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    4116:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4118:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    411c:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    411e:	f000 fdc1 	bl	4ca4 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    4122:	4639      	mov	r1, r7
    4124:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    4126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    412a:	f000 bbbd 	b.w	48a8 <z_reschedule>
	**(char ***) mem = slab->free_list;
    412e:	682b      	ldr	r3, [r5, #0]
    4130:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4132:	4630      	mov	r0, r6
    4134:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    4136:	682b      	ldr	r3, [r5, #0]
    4138:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    413a:	69e3      	ldr	r3, [r4, #28]
    413c:	3b01      	subs	r3, #1
    413e:	61e3      	str	r3, [r4, #28]
    4140:	f000 f8f6 	bl	4330 <z_spin_unlock_valid>
    4144:	b940      	cbnz	r0, 4158 <k_mem_slab_free+0x90>
    4146:	4907      	ldr	r1, [pc, #28]	; (4164 <k_mem_slab_free+0x9c>)
    4148:	4807      	ldr	r0, [pc, #28]	; (4168 <k_mem_slab_free+0xa0>)
    414a:	22ac      	movs	r2, #172	; 0xac
    414c:	f004 fb45 	bl	87da <printk>
    4150:	21ac      	movs	r1, #172	; 0xac
    4152:	4804      	ldr	r0, [pc, #16]	; (4164 <k_mem_slab_free+0x9c>)
    4154:	f004 fbcc 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    4158:	f387 8811 	msr	BASEPRI, r7
    415c:	f3bf 8f6f 	isb	sy
}
    4160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4164:	0000973f 	.word	0x0000973f
    4168:	00009765 	.word	0x00009765

0000416c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    416c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4170:	b085      	sub	sp, #20
    4172:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    4176:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    4178:	f1b9 0f0f 	cmp.w	r9, #15
{
    417c:	460f      	mov	r7, r1
    417e:	4615      	mov	r5, r2
    4180:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    4182:	d12e      	bne.n	41e2 <z_setup_new_thread+0x76>
    4184:	4b1f      	ldr	r3, [pc, #124]	; (4204 <z_setup_new_thread+0x98>)
    4186:	4598      	cmp	r8, r3
    4188:	d12f      	bne.n	41ea <z_setup_new_thread+0x7e>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    418a:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    418e:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    4192:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
    4194:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
    4196:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    4198:	2304      	movs	r3, #4
    419a:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    419c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    419e:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    41a0:	9302      	str	r3, [sp, #8]
    41a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    41a4:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    41a8:	9301      	str	r3, [sp, #4]
    41aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	stack_ptr = (char *)stack + stack_obj_size;
    41ac:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
    41ae:	e9c4 7019 	strd	r7, r0, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    41b2:	9300      	str	r3, [sp, #0]
    41b4:	462a      	mov	r2, r5
    41b6:	4643      	mov	r3, r8
    41b8:	4639      	mov	r1, r7
    41ba:	4620      	mov	r0, r4
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    41bc:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    41c0:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
    41c2:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
    41c6:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    41c8:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    41ca:	f7fd fb41 	bl	1850 <arch_new_thread>
	if (!_current) {
    41ce:	4b0e      	ldr	r3, [pc, #56]	; (4208 <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
    41d0:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    41d2:	689b      	ldr	r3, [r3, #8]
    41d4:	b103      	cbz	r3, 41d8 <z_setup_new_thread+0x6c>
	new_thread->resource_pool = _current->resource_pool;
    41d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    41d8:	4628      	mov	r0, r5
    41da:	6723      	str	r3, [r4, #112]	; 0x70
    41dc:	b005      	add	sp, #20
    41de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    41e2:	f109 0310 	add.w	r3, r9, #16
    41e6:	2b1e      	cmp	r3, #30
    41e8:	d9cf      	bls.n	418a <z_setup_new_thread+0x1e>
    41ea:	f240 12ff 	movw	r2, #511	; 0x1ff
    41ee:	4907      	ldr	r1, [pc, #28]	; (420c <z_setup_new_thread+0xa0>)
    41f0:	4807      	ldr	r0, [pc, #28]	; (4210 <z_setup_new_thread+0xa4>)
    41f2:	f004 faf2 	bl	87da <printk>
    41f6:	f240 11ff 	movw	r1, #511	; 0x1ff
    41fa:	4804      	ldr	r0, [pc, #16]	; (420c <z_setup_new_thread+0xa0>)
    41fc:	f004 fb78 	bl	88f0 <assert_post_action>
    4200:	e7c3      	b.n	418a <z_setup_new_thread+0x1e>
    4202:	bf00      	nop
    4204:	0000435d 	.word	0x0000435d
    4208:	20000a30 	.word	0x20000a30
    420c:	0000a531 	.word	0x0000a531
    4210:	00009765 	.word	0x00009765

00004214 <z_init_static_threads>:
{
    4214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    4218:	4f39      	ldr	r7, [pc, #228]	; (4300 <z_init_static_threads+0xec>)
    421a:	4d3a      	ldr	r5, [pc, #232]	; (4304 <z_init_static_threads+0xf0>)
    421c:	463e      	mov	r6, r7
    421e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 430c <z_init_static_threads+0xf8>
{
    4222:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    4224:	42bd      	cmp	r5, r7
    4226:	d90a      	bls.n	423e <z_init_static_threads+0x2a>
    4228:	4641      	mov	r1, r8
    422a:	4837      	ldr	r0, [pc, #220]	; (4308 <z_init_static_threads+0xf4>)
    422c:	f240 22cf 	movw	r2, #719	; 0x2cf
    4230:	f004 fad3 	bl	87da <printk>
    4234:	f240 21cf 	movw	r1, #719	; 0x2cf
    4238:	4640      	mov	r0, r8
    423a:	f004 fb59 	bl	88f0 <assert_post_action>
    423e:	42b5      	cmp	r5, r6
    4240:	f105 0430 	add.w	r4, r5, #48	; 0x30
    4244:	d31d      	bcc.n	4282 <z_init_static_threads+0x6e>
	k_sched_lock();
    4246:	f000 fb65 	bl	4914 <k_sched_lock>
		} else {
			return (t * to_hz + off) / from_hz;
    424a:	f240 38e7 	movw	r8, #999	; 0x3e7
    424e:	f04f 0900 	mov.w	r9, #0
	_FOREACH_STATIC_THREAD(thread_data) {
    4252:	4c2c      	ldr	r4, [pc, #176]	; (4304 <z_init_static_threads+0xf0>)
    4254:	4d2d      	ldr	r5, [pc, #180]	; (430c <z_init_static_threads+0xf8>)
    4256:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 4308 <z_init_static_threads+0xf4>
    425a:	42b4      	cmp	r4, r6
    425c:	d90a      	bls.n	4274 <z_init_static_threads+0x60>
    425e:	4629      	mov	r1, r5
    4260:	4650      	mov	r0, sl
    4262:	f240 22ee 	movw	r2, #750	; 0x2ee
    4266:	f004 fab8 	bl	87da <printk>
    426a:	f240 21ee 	movw	r1, #750	; 0x2ee
    426e:	4628      	mov	r0, r5
    4270:	f004 fb3e 	bl	88f0 <assert_post_action>
    4274:	42b4      	cmp	r4, r6
    4276:	d321      	bcc.n	42bc <z_init_static_threads+0xa8>
}
    4278:	b006      	add	sp, #24
    427a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    427e:	f000 bf7f 	b.w	5180 <k_sched_unlock>
		z_setup_new_thread(
    4282:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4286:	9305      	str	r3, [sp, #20]
    4288:	f854 3c10 	ldr.w	r3, [r4, #-16]
    428c:	9304      	str	r3, [sp, #16]
    428e:	f854 3c14 	ldr.w	r3, [r4, #-20]
    4292:	9303      	str	r3, [sp, #12]
    4294:	f854 3c18 	ldr.w	r3, [r4, #-24]
    4298:	9302      	str	r3, [sp, #8]
    429a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    429e:	9301      	str	r3, [sp, #4]
    42a0:	f854 3c20 	ldr.w	r3, [r4, #-32]
    42a4:	9300      	str	r3, [sp, #0]
    42a6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    42aa:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    42ae:	f7ff ff5d 	bl	416c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    42b2:	f854 3c30 	ldr.w	r3, [r4, #-48]
    42b6:	655d      	str	r5, [r3, #84]	; 0x54
    42b8:	4625      	mov	r5, r4
    42ba:	e7b3      	b.n	4224 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    42bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    42be:	1c5a      	adds	r2, r3, #1
    42c0:	d00f      	beq.n	42e2 <z_init_static_threads+0xce>
    42c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    42c6:	4640      	mov	r0, r8
    42c8:	4649      	mov	r1, r9
					    K_MSEC(thread_data->init_delay));
    42ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    42ce:	fbc2 0103 	smlal	r0, r1, r2, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    42d2:	4549      	cmp	r1, r9
    42d4:	bf08      	it	eq
    42d6:	4540      	cmpeq	r0, r8
			schedule_new_thread(thread_data->init_thread,
    42d8:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    42da:	d104      	bne.n	42e6 <z_init_static_threads+0xd2>
	z_sched_start(thread);
    42dc:	4638      	mov	r0, r7
    42de:	f000 fd17 	bl	4d10 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    42e2:	3430      	adds	r4, #48	; 0x30
    42e4:	e7b9      	b.n	425a <z_init_static_threads+0x46>
    42e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    42ea:	2300      	movs	r3, #0
    42ec:	f7fb ffa6 	bl	23c <__aeabi_uldivmod>
    42f0:	4602      	mov	r2, r0
    42f2:	460b      	mov	r3, r1

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    42f4:	f107 0018 	add.w	r0, r7, #24
    42f8:	4905      	ldr	r1, [pc, #20]	; (4310 <z_init_static_threads+0xfc>)
    42fa:	f001 fa2f 	bl	575c <z_add_timeout>
    42fe:	e7f0      	b.n	42e2 <z_init_static_threads+0xce>
    4300:	2000013c 	.word	0x2000013c
    4304:	2000013c 	.word	0x2000013c
    4308:	00009765 	.word	0x00009765
    430c:	0000a531 	.word	0x0000a531
    4310:	00004d95 	.word	0x00004d95

00004314 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    4314:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    4316:	b138      	cbz	r0, 4328 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    4318:	4b04      	ldr	r3, [pc, #16]	; (432c <z_spin_lock_valid+0x18>)
    431a:	f000 0003 	and.w	r0, r0, #3
    431e:	7d1b      	ldrb	r3, [r3, #20]
    4320:	1ac0      	subs	r0, r0, r3
    4322:	bf18      	it	ne
    4324:	2001      	movne	r0, #1
    4326:	4770      	bx	lr
			return false;
		}
	}
	return true;
    4328:	2001      	movs	r0, #1
}
    432a:	4770      	bx	lr
    432c:	20000a30 	.word	0x20000a30

00004330 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    4330:	4905      	ldr	r1, [pc, #20]	; (4348 <z_spin_unlock_valid+0x18>)
{
    4332:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    4334:	688a      	ldr	r2, [r1, #8]
    4336:	7d08      	ldrb	r0, [r1, #20]
    4338:	6819      	ldr	r1, [r3, #0]
    433a:	4302      	orrs	r2, r0
    433c:	2000      	movs	r0, #0
    433e:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
    4340:	bf04      	itt	eq
    4342:	6018      	streq	r0, [r3, #0]
	return true;
    4344:	2001      	moveq	r0, #1
}
    4346:	4770      	bx	lr
    4348:	20000a30 	.word	0x20000a30

0000434c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    434c:	4a02      	ldr	r2, [pc, #8]	; (4358 <z_spin_lock_set_owner+0xc>)
    434e:	7d11      	ldrb	r1, [r2, #20]
    4350:	6893      	ldr	r3, [r2, #8]
    4352:	430b      	orrs	r3, r1
    4354:	6003      	str	r3, [r0, #0]
}
    4356:	4770      	bx	lr
    4358:	20000a30 	.word	0x20000a30

0000435c <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    435c:	4c10      	ldr	r4, [pc, #64]	; (43a0 <idle+0x44>)
{
    435e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    4360:	68a2      	ldr	r2, [r4, #8]
    4362:	f992 200e 	ldrsb.w	r2, [r2, #14]
    4366:	2a00      	cmp	r2, #0
    4368:	da08      	bge.n	437c <idle+0x20>
    436a:	490e      	ldr	r1, [pc, #56]	; (43a4 <idle+0x48>)
    436c:	480e      	ldr	r0, [pc, #56]	; (43a8 <idle+0x4c>)
    436e:	2227      	movs	r2, #39	; 0x27
    4370:	f004 fa33 	bl	87da <printk>
    4374:	2127      	movs	r1, #39	; 0x27
    4376:	480b      	ldr	r0, [pc, #44]	; (43a4 <idle+0x48>)
    4378:	f004 faba 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    437c:	f04f 0220 	mov.w	r2, #32
    4380:	f3ef 8311 	mrs	r3, BASEPRI
    4384:	f382 8812 	msr	BASEPRI_MAX, r2
    4388:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    438c:	f001 fadc 	bl	5948 <z_get_next_timeout_expiry>
    4390:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    4392:	f7fc fdb9 	bl	f08 <pm_system_suspend>
    4396:	2800      	cmp	r0, #0
    4398:	d1f0      	bne.n	437c <idle+0x20>
	arch_cpu_idle();
    439a:	f7fd f963 	bl	1664 <arch_cpu_idle>
}
    439e:	e7ed      	b.n	437c <idle+0x20>
    43a0:	20000a30 	.word	0x20000a30
    43a4:	0000a554 	.word	0x0000a554
    43a8:	00009765 	.word	0x00009765

000043ac <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    43ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    43b0:	4604      	mov	r4, r0
    43b2:	4616      	mov	r6, r2
    43b4:	461f      	mov	r7, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    43b6:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    43ba:	b143      	cbz	r3, 43ce <z_impl_k_mutex_lock+0x22>
    43bc:	4962      	ldr	r1, [pc, #392]	; (4548 <z_impl_k_mutex_lock+0x19c>)
    43be:	4863      	ldr	r0, [pc, #396]	; (454c <z_impl_k_mutex_lock+0x1a0>)
    43c0:	2265      	movs	r2, #101	; 0x65
    43c2:	f004 fa0a 	bl	87da <printk>
    43c6:	2165      	movs	r1, #101	; 0x65
    43c8:	485f      	ldr	r0, [pc, #380]	; (4548 <z_impl_k_mutex_lock+0x19c>)
    43ca:	f004 fa91 	bl	88f0 <assert_post_action>
    43ce:	f04f 0320 	mov.w	r3, #32
    43d2:	f3ef 8811 	mrs	r8, BASEPRI
    43d6:	f383 8812 	msr	BASEPRI_MAX, r3
    43da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    43de:	485c      	ldr	r0, [pc, #368]	; (4550 <z_impl_k_mutex_lock+0x1a4>)
    43e0:	f7ff ff98 	bl	4314 <z_spin_lock_valid>
    43e4:	b940      	cbnz	r0, 43f8 <z_impl_k_mutex_lock+0x4c>
    43e6:	495b      	ldr	r1, [pc, #364]	; (4554 <z_impl_k_mutex_lock+0x1a8>)
    43e8:	4858      	ldr	r0, [pc, #352]	; (454c <z_impl_k_mutex_lock+0x1a0>)
    43ea:	2281      	movs	r2, #129	; 0x81
    43ec:	f004 f9f5 	bl	87da <printk>
    43f0:	2181      	movs	r1, #129	; 0x81
    43f2:	4858      	ldr	r0, [pc, #352]	; (4554 <z_impl_k_mutex_lock+0x1a8>)
    43f4:	f004 fa7c 	bl	88f0 <assert_post_action>
	z_spin_lock_set_owner(l);
    43f8:	4855      	ldr	r0, [pc, #340]	; (4550 <z_impl_k_mutex_lock+0x1a4>)
    43fa:	f7ff ffa7 	bl	434c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    43fe:	68e3      	ldr	r3, [r4, #12]
    4400:	4a55      	ldr	r2, [pc, #340]	; (4558 <z_impl_k_mutex_lock+0x1ac>)
    4402:	b1d3      	cbz	r3, 443a <z_impl_k_mutex_lock+0x8e>
    4404:	68a0      	ldr	r0, [r4, #8]
    4406:	6891      	ldr	r1, [r2, #8]
    4408:	4288      	cmp	r0, r1
    440a:	d033      	beq.n	4474 <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    440c:	ea56 0307 	orrs.w	r3, r6, r7
    4410:	d132      	bne.n	4478 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4412:	484f      	ldr	r0, [pc, #316]	; (4550 <z_impl_k_mutex_lock+0x1a4>)
    4414:	f7ff ff8c 	bl	4330 <z_spin_unlock_valid>
    4418:	b940      	cbnz	r0, 442c <z_impl_k_mutex_lock+0x80>
    441a:	494e      	ldr	r1, [pc, #312]	; (4554 <z_impl_k_mutex_lock+0x1a8>)
    441c:	484b      	ldr	r0, [pc, #300]	; (454c <z_impl_k_mutex_lock+0x1a0>)
    441e:	22ac      	movs	r2, #172	; 0xac
    4420:	f004 f9db 	bl	87da <printk>
    4424:	21ac      	movs	r1, #172	; 0xac
    4426:	484b      	ldr	r0, [pc, #300]	; (4554 <z_impl_k_mutex_lock+0x1a8>)
    4428:	f004 fa62 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    442c:	f388 8811 	msr	BASEPRI, r8
    4430:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    4434:	f06f 000f 	mvn.w	r0, #15
    4438:	e019      	b.n	446e <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
    443a:	6891      	ldr	r1, [r2, #8]
    443c:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    4440:	3301      	adds	r3, #1
    4442:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    4444:	6893      	ldr	r3, [r2, #8]
    4446:	4842      	ldr	r0, [pc, #264]	; (4550 <z_impl_k_mutex_lock+0x1a4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4448:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    444a:	60a3      	str	r3, [r4, #8]
    444c:	f7ff ff70 	bl	4330 <z_spin_unlock_valid>
    4450:	b940      	cbnz	r0, 4464 <z_impl_k_mutex_lock+0xb8>
    4452:	4940      	ldr	r1, [pc, #256]	; (4554 <z_impl_k_mutex_lock+0x1a8>)
    4454:	483d      	ldr	r0, [pc, #244]	; (454c <z_impl_k_mutex_lock+0x1a0>)
    4456:	22ac      	movs	r2, #172	; 0xac
    4458:	f004 f9bf 	bl	87da <printk>
    445c:	21ac      	movs	r1, #172	; 0xac
    445e:	483d      	ldr	r0, [pc, #244]	; (4554 <z_impl_k_mutex_lock+0x1a8>)
    4460:	f004 fa46 	bl	88f0 <assert_post_action>
    4464:	f388 8811 	msr	BASEPRI, r8
    4468:	f3bf 8f6f 	isb	sy
		return 0;
    446c:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    446e:	b002      	add	sp, #8
    4470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    4474:	6921      	ldr	r1, [r4, #16]
    4476:	e7e3      	b.n	4440 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4478:	f991 100e 	ldrsb.w	r1, [r1, #14]
    447c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    4480:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    4484:	4299      	cmp	r1, r3
    4486:	bfa8      	it	ge
    4488:	4619      	movge	r1, r3
    448a:	4291      	cmp	r1, r2
    448c:	bfb8      	it	lt
    448e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4490:	428b      	cmp	r3, r1
    4492:	dd3f      	ble.n	4514 <z_impl_k_mutex_lock+0x168>
		return z_set_prio(mutex->owner, new_prio);
    4494:	f000 fd94 	bl	4fc0 <z_set_prio>
    4498:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    449a:	4622      	mov	r2, r4
    449c:	4641      	mov	r1, r8
    449e:	e9cd 6700 	strd	r6, r7, [sp]
    44a2:	482b      	ldr	r0, [pc, #172]	; (4550 <z_impl_k_mutex_lock+0x1a4>)
    44a4:	f000 fd66 	bl	4f74 <z_pend_curr>
	if (got_mutex == 0) {
    44a8:	2800      	cmp	r0, #0
    44aa:	d0e0      	beq.n	446e <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
    44ac:	f04f 0320 	mov.w	r3, #32
    44b0:	f3ef 8611 	mrs	r6, BASEPRI
    44b4:	f383 8812 	msr	BASEPRI_MAX, r3
    44b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    44bc:	4824      	ldr	r0, [pc, #144]	; (4550 <z_impl_k_mutex_lock+0x1a4>)
    44be:	f7ff ff29 	bl	4314 <z_spin_lock_valid>
    44c2:	b940      	cbnz	r0, 44d6 <z_impl_k_mutex_lock+0x12a>
    44c4:	4923      	ldr	r1, [pc, #140]	; (4554 <z_impl_k_mutex_lock+0x1a8>)
    44c6:	4821      	ldr	r0, [pc, #132]	; (454c <z_impl_k_mutex_lock+0x1a0>)
    44c8:	2281      	movs	r2, #129	; 0x81
    44ca:	f004 f986 	bl	87da <printk>
    44ce:	2181      	movs	r1, #129	; 0x81
    44d0:	4820      	ldr	r0, [pc, #128]	; (4554 <z_impl_k_mutex_lock+0x1a8>)
    44d2:	f004 fa0d 	bl	88f0 <assert_post_action>
	z_spin_lock_set_owner(l);
    44d6:	481e      	ldr	r0, [pc, #120]	; (4550 <z_impl_k_mutex_lock+0x1a4>)
    44d8:	f7ff ff38 	bl	434c <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    44dc:	6823      	ldr	r3, [r4, #0]
    44de:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    44e0:	429c      	cmp	r4, r3
    44e2:	d00a      	beq.n	44fa <z_impl_k_mutex_lock+0x14e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    44e4:	b14b      	cbz	r3, 44fa <z_impl_k_mutex_lock+0x14e>
    44e6:	f993 300e 	ldrsb.w	r3, [r3, #14]
    44ea:	4299      	cmp	r1, r3
    44ec:	bfa8      	it	ge
    44ee:	4619      	movge	r1, r3
    44f0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    44f4:	4299      	cmp	r1, r3
    44f6:	bfb8      	it	lt
    44f8:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    44fa:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    44fc:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4500:	4299      	cmp	r1, r3
    4502:	d109      	bne.n	4518 <z_impl_k_mutex_lock+0x16c>
	if (resched) {
    4504:	b16d      	cbz	r5, 4522 <z_impl_k_mutex_lock+0x176>
		z_reschedule(&lock, key);
    4506:	4631      	mov	r1, r6
    4508:	4811      	ldr	r0, [pc, #68]	; (4550 <z_impl_k_mutex_lock+0x1a4>)
    450a:	f000 f9cd 	bl	48a8 <z_reschedule>
	return -EAGAIN;
    450e:	f06f 000a 	mvn.w	r0, #10
    4512:	e7ac      	b.n	446e <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
    4514:	2500      	movs	r5, #0
    4516:	e7c0      	b.n	449a <z_impl_k_mutex_lock+0xee>
		return z_set_prio(mutex->owner, new_prio);
    4518:	f000 fd52 	bl	4fc0 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    451c:	2800      	cmp	r0, #0
    451e:	d1f2      	bne.n	4506 <z_impl_k_mutex_lock+0x15a>
    4520:	e7f0      	b.n	4504 <z_impl_k_mutex_lock+0x158>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4522:	480b      	ldr	r0, [pc, #44]	; (4550 <z_impl_k_mutex_lock+0x1a4>)
    4524:	f7ff ff04 	bl	4330 <z_spin_unlock_valid>
    4528:	b940      	cbnz	r0, 453c <z_impl_k_mutex_lock+0x190>
    452a:	490a      	ldr	r1, [pc, #40]	; (4554 <z_impl_k_mutex_lock+0x1a8>)
    452c:	4807      	ldr	r0, [pc, #28]	; (454c <z_impl_k_mutex_lock+0x1a0>)
    452e:	22ac      	movs	r2, #172	; 0xac
    4530:	f004 f953 	bl	87da <printk>
    4534:	21ac      	movs	r1, #172	; 0xac
    4536:	4807      	ldr	r0, [pc, #28]	; (4554 <z_impl_k_mutex_lock+0x1a8>)
    4538:	f004 f9da 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    453c:	f386 8811 	msr	BASEPRI, r6
    4540:	f3bf 8f6f 	isb	sy
    4544:	e7e3      	b.n	450e <z_impl_k_mutex_lock+0x162>
    4546:	bf00      	nop
    4548:	0000a575 	.word	0x0000a575
    454c:	00009765 	.word	0x00009765
    4550:	20000a58 	.word	0x20000a58
    4554:	0000973f 	.word	0x0000973f
    4558:	20000a30 	.word	0x20000a30

0000455c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    455c:	b538      	push	{r3, r4, r5, lr}
    455e:	4604      	mov	r4, r0
    4560:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    4564:	b143      	cbz	r3, 4578 <z_impl_k_mutex_unlock+0x1c>
    4566:	4945      	ldr	r1, [pc, #276]	; (467c <z_impl_k_mutex_unlock+0x120>)
    4568:	4845      	ldr	r0, [pc, #276]	; (4680 <z_impl_k_mutex_unlock+0x124>)
    456a:	22c7      	movs	r2, #199	; 0xc7
    456c:	f004 f935 	bl	87da <printk>
    4570:	21c7      	movs	r1, #199	; 0xc7
    4572:	4842      	ldr	r0, [pc, #264]	; (467c <z_impl_k_mutex_unlock+0x120>)
    4574:	f004 f9bc 	bl	88f0 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    4578:	68a3      	ldr	r3, [r4, #8]
    457a:	2b00      	cmp	r3, #0
    457c:	d078      	beq.n	4670 <z_impl_k_mutex_unlock+0x114>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    457e:	4d41      	ldr	r5, [pc, #260]	; (4684 <z_impl_k_mutex_unlock+0x128>)
    4580:	68aa      	ldr	r2, [r5, #8]
    4582:	4293      	cmp	r3, r2
    4584:	d177      	bne.n	4676 <z_impl_k_mutex_unlock+0x11a>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    4586:	68e3      	ldr	r3, [r4, #12]
    4588:	b943      	cbnz	r3, 459c <z_impl_k_mutex_unlock+0x40>
    458a:	493c      	ldr	r1, [pc, #240]	; (467c <z_impl_k_mutex_unlock+0x120>)
    458c:	483c      	ldr	r0, [pc, #240]	; (4680 <z_impl_k_mutex_unlock+0x124>)
    458e:	22df      	movs	r2, #223	; 0xdf
    4590:	f004 f923 	bl	87da <printk>
    4594:	21df      	movs	r1, #223	; 0xdf
    4596:	4839      	ldr	r0, [pc, #228]	; (467c <z_impl_k_mutex_unlock+0x120>)
    4598:	f004 f9aa 	bl	88f0 <assert_post_action>
    459c:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    45a0:	b143      	cbz	r3, 45b4 <z_impl_k_mutex_unlock+0x58>
    45a2:	4939      	ldr	r1, [pc, #228]	; (4688 <z_impl_k_mutex_unlock+0x12c>)
    45a4:	4836      	ldr	r0, [pc, #216]	; (4680 <z_impl_k_mutex_unlock+0x124>)
    45a6:	22fd      	movs	r2, #253	; 0xfd
    45a8:	f004 f917 	bl	87da <printk>
    45ac:	21fd      	movs	r1, #253	; 0xfd
    45ae:	4836      	ldr	r0, [pc, #216]	; (4688 <z_impl_k_mutex_unlock+0x12c>)
    45b0:	f004 f99e 	bl	88f0 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    45b4:	68ab      	ldr	r3, [r5, #8]
    45b6:	7bdb      	ldrb	r3, [r3, #15]
    45b8:	2b01      	cmp	r3, #1
    45ba:	d108      	bne.n	45ce <z_impl_k_mutex_unlock+0x72>
    45bc:	4932      	ldr	r1, [pc, #200]	; (4688 <z_impl_k_mutex_unlock+0x12c>)
    45be:	4830      	ldr	r0, [pc, #192]	; (4680 <z_impl_k_mutex_unlock+0x124>)
    45c0:	22fe      	movs	r2, #254	; 0xfe
    45c2:	f004 f90a 	bl	87da <printk>
    45c6:	21fe      	movs	r1, #254	; 0xfe
    45c8:	482f      	ldr	r0, [pc, #188]	; (4688 <z_impl_k_mutex_unlock+0x12c>)
    45ca:	f004 f991 	bl	88f0 <assert_post_action>

	--_current->base.sched_locked;
    45ce:	68aa      	ldr	r2, [r5, #8]
    45d0:	7bd3      	ldrb	r3, [r2, #15]
    45d2:	3b01      	subs	r3, #1
    45d4:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    45d6:	68e3      	ldr	r3, [r4, #12]
    45d8:	2b01      	cmp	r3, #1
    45da:	d905      	bls.n	45e8 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count--;
    45dc:	3b01      	subs	r3, #1
    45de:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    45e0:	f000 fdce 	bl	5180 <k_sched_unlock>

	return 0;
    45e4:	2000      	movs	r0, #0
}
    45e6:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    45e8:	f04f 0320 	mov.w	r3, #32
    45ec:	f3ef 8511 	mrs	r5, BASEPRI
    45f0:	f383 8812 	msr	BASEPRI_MAX, r3
    45f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    45f8:	4824      	ldr	r0, [pc, #144]	; (468c <z_impl_k_mutex_unlock+0x130>)
    45fa:	f7ff fe8b 	bl	4314 <z_spin_lock_valid>
    45fe:	b940      	cbnz	r0, 4612 <z_impl_k_mutex_unlock+0xb6>
    4600:	4923      	ldr	r1, [pc, #140]	; (4690 <z_impl_k_mutex_unlock+0x134>)
    4602:	481f      	ldr	r0, [pc, #124]	; (4680 <z_impl_k_mutex_unlock+0x124>)
    4604:	2281      	movs	r2, #129	; 0x81
    4606:	f004 f8e8 	bl	87da <printk>
    460a:	2181      	movs	r1, #129	; 0x81
    460c:	4820      	ldr	r0, [pc, #128]	; (4690 <z_impl_k_mutex_unlock+0x134>)
    460e:	f004 f96f 	bl	88f0 <assert_post_action>
	z_spin_lock_set_owner(l);
    4612:	481e      	ldr	r0, [pc, #120]	; (468c <z_impl_k_mutex_unlock+0x130>)
    4614:	f7ff fe9a 	bl	434c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4618:	68a0      	ldr	r0, [r4, #8]
    461a:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    461c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4620:	4299      	cmp	r1, r3
    4622:	d001      	beq.n	4628 <z_impl_k_mutex_unlock+0xcc>
		return z_set_prio(mutex->owner, new_prio);
    4624:	f000 fccc 	bl	4fc0 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4628:	4620      	mov	r0, r4
    462a:	f000 fe05 	bl	5238 <z_unpend_first_thread>
	mutex->owner = new_owner;
    462e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    4630:	b158      	cbz	r0, 464a <z_impl_k_mutex_unlock+0xee>
		mutex->owner_orig_prio = new_owner->base.prio;
    4632:	f990 200e 	ldrsb.w	r2, [r0, #14]
    4636:	6122      	str	r2, [r4, #16]
    4638:	2200      	movs	r2, #0
    463a:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    463c:	f000 fb32 	bl	4ca4 <z_ready_thread>
		z_reschedule(&lock, key);
    4640:	4629      	mov	r1, r5
    4642:	4812      	ldr	r0, [pc, #72]	; (468c <z_impl_k_mutex_unlock+0x130>)
    4644:	f000 f930 	bl	48a8 <z_reschedule>
    4648:	e7ca      	b.n	45e0 <z_impl_k_mutex_unlock+0x84>
		mutex->lock_count = 0U;
    464a:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    464c:	480f      	ldr	r0, [pc, #60]	; (468c <z_impl_k_mutex_unlock+0x130>)
    464e:	f7ff fe6f 	bl	4330 <z_spin_unlock_valid>
    4652:	b940      	cbnz	r0, 4666 <z_impl_k_mutex_unlock+0x10a>
    4654:	490e      	ldr	r1, [pc, #56]	; (4690 <z_impl_k_mutex_unlock+0x134>)
    4656:	480a      	ldr	r0, [pc, #40]	; (4680 <z_impl_k_mutex_unlock+0x124>)
    4658:	22ac      	movs	r2, #172	; 0xac
    465a:	f004 f8be 	bl	87da <printk>
    465e:	21ac      	movs	r1, #172	; 0xac
    4660:	480b      	ldr	r0, [pc, #44]	; (4690 <z_impl_k_mutex_unlock+0x134>)
    4662:	f004 f945 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    4666:	f385 8811 	msr	BASEPRI, r5
    466a:	f3bf 8f6f 	isb	sy
    466e:	e7b7      	b.n	45e0 <z_impl_k_mutex_unlock+0x84>
		return -EINVAL;
    4670:	f06f 0015 	mvn.w	r0, #21
    4674:	e7b7      	b.n	45e6 <z_impl_k_mutex_unlock+0x8a>
		return -EPERM;
    4676:	f04f 30ff 	mov.w	r0, #4294967295
    467a:	e7b4      	b.n	45e6 <z_impl_k_mutex_unlock+0x8a>
    467c:	0000a575 	.word	0x0000a575
    4680:	00009765 	.word	0x00009765
    4684:	20000a30 	.word	0x20000a30
    4688:	0000a597 	.word	0x0000a597
    468c:	20000a58 	.word	0x20000a58
    4690:	0000973f 	.word	0x0000973f

00004694 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4694:	b538      	push	{r3, r4, r5, lr}
    4696:	4604      	mov	r4, r0
	__asm__ volatile(
    4698:	f04f 0320 	mov.w	r3, #32
    469c:	f3ef 8511 	mrs	r5, BASEPRI
    46a0:	f383 8812 	msr	BASEPRI_MAX, r3
    46a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    46a8:	4812      	ldr	r0, [pc, #72]	; (46f4 <z_impl_k_sem_give+0x60>)
    46aa:	f7ff fe33 	bl	4314 <z_spin_lock_valid>
    46ae:	b940      	cbnz	r0, 46c2 <z_impl_k_sem_give+0x2e>
    46b0:	4911      	ldr	r1, [pc, #68]	; (46f8 <z_impl_k_sem_give+0x64>)
    46b2:	4812      	ldr	r0, [pc, #72]	; (46fc <z_impl_k_sem_give+0x68>)
    46b4:	2281      	movs	r2, #129	; 0x81
    46b6:	f004 f890 	bl	87da <printk>
    46ba:	2181      	movs	r1, #129	; 0x81
    46bc:	480e      	ldr	r0, [pc, #56]	; (46f8 <z_impl_k_sem_give+0x64>)
    46be:	f004 f917 	bl	88f0 <assert_post_action>
	z_spin_lock_set_owner(l);
    46c2:	480c      	ldr	r0, [pc, #48]	; (46f4 <z_impl_k_sem_give+0x60>)
    46c4:	f7ff fe42 	bl	434c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    46c8:	4620      	mov	r0, r4
    46ca:	f000 fdb5 	bl	5238 <z_unpend_first_thread>

	if (thread != NULL) {
    46ce:	b148      	cbz	r0, 46e4 <z_impl_k_sem_give+0x50>
    46d0:	2200      	movs	r2, #0
    46d2:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    46d4:	f000 fae6 	bl	4ca4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    46d8:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    46da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    46de:	4805      	ldr	r0, [pc, #20]	; (46f4 <z_impl_k_sem_give+0x60>)
    46e0:	f000 b8e2 	b.w	48a8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    46e4:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    46e8:	429a      	cmp	r2, r3
    46ea:	bf18      	it	ne
    46ec:	3301      	addne	r3, #1
    46ee:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    46f0:	e7f2      	b.n	46d8 <z_impl_k_sem_give+0x44>
    46f2:	bf00      	nop
    46f4:	20000a5c 	.word	0x20000a5c
    46f8:	0000973f 	.word	0x0000973f
    46fc:	00009765 	.word	0x00009765

00004700 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4702:	4604      	mov	r4, r0
    4704:	4616      	mov	r6, r2
    4706:	461f      	mov	r7, r3
    4708:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    470c:	b15b      	cbz	r3, 4726 <z_impl_k_sem_take+0x26>
    470e:	ea56 0307 	orrs.w	r3, r6, r7
    4712:	d008      	beq.n	4726 <z_impl_k_sem_take+0x26>
    4714:	492b      	ldr	r1, [pc, #172]	; (47c4 <z_impl_k_sem_take+0xc4>)
    4716:	482c      	ldr	r0, [pc, #176]	; (47c8 <z_impl_k_sem_take+0xc8>)
    4718:	2279      	movs	r2, #121	; 0x79
    471a:	f004 f85e 	bl	87da <printk>
    471e:	2179      	movs	r1, #121	; 0x79
    4720:	4828      	ldr	r0, [pc, #160]	; (47c4 <z_impl_k_sem_take+0xc4>)
    4722:	f004 f8e5 	bl	88f0 <assert_post_action>
    4726:	f04f 0320 	mov.w	r3, #32
    472a:	f3ef 8511 	mrs	r5, BASEPRI
    472e:	f383 8812 	msr	BASEPRI_MAX, r3
    4732:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4736:	4825      	ldr	r0, [pc, #148]	; (47cc <z_impl_k_sem_take+0xcc>)
    4738:	f7ff fdec 	bl	4314 <z_spin_lock_valid>
    473c:	b940      	cbnz	r0, 4750 <z_impl_k_sem_take+0x50>
    473e:	4924      	ldr	r1, [pc, #144]	; (47d0 <z_impl_k_sem_take+0xd0>)
    4740:	4821      	ldr	r0, [pc, #132]	; (47c8 <z_impl_k_sem_take+0xc8>)
    4742:	2281      	movs	r2, #129	; 0x81
    4744:	f004 f849 	bl	87da <printk>
    4748:	2181      	movs	r1, #129	; 0x81
    474a:	4821      	ldr	r0, [pc, #132]	; (47d0 <z_impl_k_sem_take+0xd0>)
    474c:	f004 f8d0 	bl	88f0 <assert_post_action>
	z_spin_lock_set_owner(l);
    4750:	481e      	ldr	r0, [pc, #120]	; (47cc <z_impl_k_sem_take+0xcc>)
    4752:	f7ff fdfb 	bl	434c <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    4756:	68a3      	ldr	r3, [r4, #8]
    4758:	b1ab      	cbz	r3, 4786 <z_impl_k_sem_take+0x86>
		sem->count--;
    475a:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    475c:	481b      	ldr	r0, [pc, #108]	; (47cc <z_impl_k_sem_take+0xcc>)
    475e:	60a3      	str	r3, [r4, #8]
    4760:	f7ff fde6 	bl	4330 <z_spin_unlock_valid>
    4764:	b940      	cbnz	r0, 4778 <z_impl_k_sem_take+0x78>
    4766:	491a      	ldr	r1, [pc, #104]	; (47d0 <z_impl_k_sem_take+0xd0>)
    4768:	4817      	ldr	r0, [pc, #92]	; (47c8 <z_impl_k_sem_take+0xc8>)
    476a:	22ac      	movs	r2, #172	; 0xac
    476c:	f004 f835 	bl	87da <printk>
    4770:	21ac      	movs	r1, #172	; 0xac
    4772:	4817      	ldr	r0, [pc, #92]	; (47d0 <z_impl_k_sem_take+0xd0>)
    4774:	f004 f8bc 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    4778:	f385 8811 	msr	BASEPRI, r5
    477c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    4780:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    4782:	b003      	add	sp, #12
    4784:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    4786:	ea56 0307 	orrs.w	r3, r6, r7
    478a:	d113      	bne.n	47b4 <z_impl_k_sem_take+0xb4>
    478c:	480f      	ldr	r0, [pc, #60]	; (47cc <z_impl_k_sem_take+0xcc>)
    478e:	f7ff fdcf 	bl	4330 <z_spin_unlock_valid>
    4792:	b940      	cbnz	r0, 47a6 <z_impl_k_sem_take+0xa6>
    4794:	490e      	ldr	r1, [pc, #56]	; (47d0 <z_impl_k_sem_take+0xd0>)
    4796:	480c      	ldr	r0, [pc, #48]	; (47c8 <z_impl_k_sem_take+0xc8>)
    4798:	22ac      	movs	r2, #172	; 0xac
    479a:	f004 f81e 	bl	87da <printk>
    479e:	21ac      	movs	r1, #172	; 0xac
    47a0:	480b      	ldr	r0, [pc, #44]	; (47d0 <z_impl_k_sem_take+0xd0>)
    47a2:	f004 f8a5 	bl	88f0 <assert_post_action>
    47a6:	f385 8811 	msr	BASEPRI, r5
    47aa:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    47ae:	f06f 000f 	mvn.w	r0, #15
    47b2:	e7e6      	b.n	4782 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    47b4:	4622      	mov	r2, r4
    47b6:	4629      	mov	r1, r5
    47b8:	e9cd 6700 	strd	r6, r7, [sp]
    47bc:	4803      	ldr	r0, [pc, #12]	; (47cc <z_impl_k_sem_take+0xcc>)
    47be:	f000 fbd9 	bl	4f74 <z_pend_curr>
	return ret;
    47c2:	e7de      	b.n	4782 <z_impl_k_sem_take+0x82>
    47c4:	0000a5c2 	.word	0x0000a5c2
    47c8:	00009765 	.word	0x00009765
    47cc:	20000a5c 	.word	0x20000a5c
    47d0:	0000973f 	.word	0x0000973f

000047d4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    47d4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    47d6:	4c08      	ldr	r4, [pc, #32]	; (47f8 <z_reset_time_slice+0x24>)
    47d8:	6823      	ldr	r3, [r4, #0]
    47da:	b15b      	cbz	r3, 47f4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    47dc:	f7fe fbea 	bl	2fb4 <sys_clock_elapsed>
    47e0:	4603      	mov	r3, r0
    47e2:	6820      	ldr	r0, [r4, #0]
    47e4:	4a05      	ldr	r2, [pc, #20]	; (47fc <z_reset_time_slice+0x28>)
    47e6:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
    47e8:	2100      	movs	r1, #0
	}
}
    47ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    47ee:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    47f0:	f001 b8e0 	b.w	59b4 <z_set_timeout_expiry>
}
    47f4:	bd10      	pop	{r4, pc}
    47f6:	bf00      	nop
    47f8:	20000a6c 	.word	0x20000a6c
    47fc:	20000a30 	.word	0x20000a30

00004800 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    4800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4802:	4604      	mov	r4, r0
    4804:	460d      	mov	r5, r1
	__asm__ volatile(
    4806:	f04f 0320 	mov.w	r3, #32
    480a:	f3ef 8611 	mrs	r6, BASEPRI
    480e:	f383 8812 	msr	BASEPRI_MAX, r3
    4812:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4816:	481e      	ldr	r0, [pc, #120]	; (4890 <k_sched_time_slice_set+0x90>)
    4818:	f7ff fd7c 	bl	4314 <z_spin_lock_valid>
    481c:	b940      	cbnz	r0, 4830 <k_sched_time_slice_set+0x30>
    481e:	491d      	ldr	r1, [pc, #116]	; (4894 <k_sched_time_slice_set+0x94>)
    4820:	481d      	ldr	r0, [pc, #116]	; (4898 <k_sched_time_slice_set+0x98>)
    4822:	2281      	movs	r2, #129	; 0x81
    4824:	f003 ffd9 	bl	87da <printk>
    4828:	2181      	movs	r1, #129	; 0x81
    482a:	481a      	ldr	r0, [pc, #104]	; (4894 <k_sched_time_slice_set+0x94>)
    482c:	f004 f860 	bl	88f0 <assert_post_action>
	z_spin_lock_set_owner(l);
    4830:	4817      	ldr	r0, [pc, #92]	; (4890 <k_sched_time_slice_set+0x90>)
    4832:	f7ff fd8b 	bl	434c <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
    4836:	f44f 4700 	mov.w	r7, #32768	; 0x8000
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    483a:	2200      	movs	r2, #0
    483c:	f240 30e7 	movw	r0, #999	; 0x3e7
    4840:	2100      	movs	r1, #0
    4842:	4b16      	ldr	r3, [pc, #88]	; (489c <k_sched_time_slice_set+0x9c>)
    4844:	fbe7 0104 	umlal	r0, r1, r7, r4
    4848:	611a      	str	r2, [r3, #16]
    484a:	2300      	movs	r3, #0
    484c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4850:	f7fb fcf4 	bl	23c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    4854:	2c00      	cmp	r4, #0
    4856:	4b12      	ldr	r3, [pc, #72]	; (48a0 <k_sched_time_slice_set+0xa0>)
    4858:	dc16      	bgt.n	4888 <k_sched_time_slice_set+0x88>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    485a:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    485c:	4b11      	ldr	r3, [pc, #68]	; (48a4 <k_sched_time_slice_set+0xa4>)
    485e:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    4860:	f7ff ffb8 	bl	47d4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4864:	480a      	ldr	r0, [pc, #40]	; (4890 <k_sched_time_slice_set+0x90>)
    4866:	f7ff fd63 	bl	4330 <z_spin_unlock_valid>
    486a:	b940      	cbnz	r0, 487e <k_sched_time_slice_set+0x7e>
    486c:	4909      	ldr	r1, [pc, #36]	; (4894 <k_sched_time_slice_set+0x94>)
    486e:	480a      	ldr	r0, [pc, #40]	; (4898 <k_sched_time_slice_set+0x98>)
    4870:	22ac      	movs	r2, #172	; 0xac
    4872:	f003 ffb2 	bl	87da <printk>
    4876:	21ac      	movs	r1, #172	; 0xac
    4878:	4806      	ldr	r0, [pc, #24]	; (4894 <k_sched_time_slice_set+0x94>)
    487a:	f004 f839 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    487e:	f386 8811 	msr	BASEPRI, r6
    4882:	f3bf 8f6f 	isb	sy
	}
}
    4886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    4888:	2802      	cmp	r0, #2
    488a:	bfb8      	it	lt
    488c:	2002      	movlt	r0, #2
    488e:	e7e4      	b.n	485a <k_sched_time_slice_set+0x5a>
    4890:	20000a64 	.word	0x20000a64
    4894:	0000973f 	.word	0x0000973f
    4898:	00009765 	.word	0x00009765
    489c:	20000a30 	.word	0x20000a30
    48a0:	20000a6c 	.word	0x20000a6c
    48a4:	20000a68 	.word	0x20000a68

000048a8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    48a8:	b510      	push	{r4, lr}
    48aa:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    48ac:	460c      	mov	r4, r1
    48ae:	b9c1      	cbnz	r1, 48e2 <z_reschedule+0x3a>
    48b0:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
    48b4:	b9aa      	cbnz	r2, 48e2 <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
    48b6:	4a14      	ldr	r2, [pc, #80]	; (4908 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
    48b8:	69d1      	ldr	r1, [r2, #28]
    48ba:	6892      	ldr	r2, [r2, #8]
    48bc:	4291      	cmp	r1, r2
    48be:	d010      	beq.n	48e2 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    48c0:	f7ff fd36 	bl	4330 <z_spin_unlock_valid>
    48c4:	b940      	cbnz	r0, 48d8 <z_reschedule+0x30>
    48c6:	4911      	ldr	r1, [pc, #68]	; (490c <z_reschedule+0x64>)
    48c8:	4811      	ldr	r0, [pc, #68]	; (4910 <z_reschedule+0x68>)
    48ca:	22c3      	movs	r2, #195	; 0xc3
    48cc:	f003 ff85 	bl	87da <printk>
    48d0:	21c3      	movs	r1, #195	; 0xc3
    48d2:	480e      	ldr	r0, [pc, #56]	; (490c <z_reschedule+0x64>)
    48d4:	f004 f80c 	bl	88f0 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    48d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
    48dc:	2000      	movs	r0, #0
    48de:	f7fc bf61 	b.w	17a4 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    48e2:	4618      	mov	r0, r3
    48e4:	f7ff fd24 	bl	4330 <z_spin_unlock_valid>
    48e8:	b940      	cbnz	r0, 48fc <z_reschedule+0x54>
    48ea:	4908      	ldr	r1, [pc, #32]	; (490c <z_reschedule+0x64>)
    48ec:	4808      	ldr	r0, [pc, #32]	; (4910 <z_reschedule+0x68>)
    48ee:	22ac      	movs	r2, #172	; 0xac
    48f0:	f003 ff73 	bl	87da <printk>
    48f4:	21ac      	movs	r1, #172	; 0xac
    48f6:	4805      	ldr	r0, [pc, #20]	; (490c <z_reschedule+0x64>)
    48f8:	f003 fffa 	bl	88f0 <assert_post_action>
    48fc:	f384 8811 	msr	BASEPRI, r4
    4900:	f3bf 8f6f 	isb	sy
    4904:	bd10      	pop	{r4, pc}
    4906:	bf00      	nop
    4908:	20000a30 	.word	0x20000a30
    490c:	0000973f 	.word	0x0000973f
    4910:	00009765 	.word	0x00009765

00004914 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    4914:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4916:	f04f 0320 	mov.w	r3, #32
    491a:	f3ef 8511 	mrs	r5, BASEPRI
    491e:	f383 8812 	msr	BASEPRI_MAX, r3
    4922:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4926:	4820      	ldr	r0, [pc, #128]	; (49a8 <k_sched_lock+0x94>)
    4928:	f7ff fcf4 	bl	4314 <z_spin_lock_valid>
    492c:	b940      	cbnz	r0, 4940 <k_sched_lock+0x2c>
    492e:	491f      	ldr	r1, [pc, #124]	; (49ac <k_sched_lock+0x98>)
    4930:	481f      	ldr	r0, [pc, #124]	; (49b0 <k_sched_lock+0x9c>)
    4932:	2281      	movs	r2, #129	; 0x81
    4934:	f003 ff51 	bl	87da <printk>
    4938:	2181      	movs	r1, #129	; 0x81
    493a:	481c      	ldr	r0, [pc, #112]	; (49ac <k_sched_lock+0x98>)
    493c:	f003 ffd8 	bl	88f0 <assert_post_action>
	z_spin_lock_set_owner(l);
    4940:	4819      	ldr	r0, [pc, #100]	; (49a8 <k_sched_lock+0x94>)
    4942:	f7ff fd03 	bl	434c <z_spin_lock_set_owner>
    4946:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    494a:	b143      	cbz	r3, 495e <k_sched_lock+0x4a>
    494c:	4919      	ldr	r1, [pc, #100]	; (49b4 <k_sched_lock+0xa0>)
    494e:	4818      	ldr	r0, [pc, #96]	; (49b0 <k_sched_lock+0x9c>)
    4950:	22fd      	movs	r2, #253	; 0xfd
    4952:	f003 ff42 	bl	87da <printk>
    4956:	21fd      	movs	r1, #253	; 0xfd
    4958:	4816      	ldr	r0, [pc, #88]	; (49b4 <k_sched_lock+0xa0>)
    495a:	f003 ffc9 	bl	88f0 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    495e:	4c16      	ldr	r4, [pc, #88]	; (49b8 <k_sched_lock+0xa4>)
    4960:	68a2      	ldr	r2, [r4, #8]
    4962:	7bd2      	ldrb	r2, [r2, #15]
    4964:	2a01      	cmp	r2, #1
    4966:	d108      	bne.n	497a <k_sched_lock+0x66>
    4968:	4912      	ldr	r1, [pc, #72]	; (49b4 <k_sched_lock+0xa0>)
    496a:	4811      	ldr	r0, [pc, #68]	; (49b0 <k_sched_lock+0x9c>)
    496c:	22fe      	movs	r2, #254	; 0xfe
    496e:	f003 ff34 	bl	87da <printk>
    4972:	21fe      	movs	r1, #254	; 0xfe
    4974:	480f      	ldr	r0, [pc, #60]	; (49b4 <k_sched_lock+0xa0>)
    4976:	f003 ffbb 	bl	88f0 <assert_post_action>
	--_current->base.sched_locked;
    497a:	68a2      	ldr	r2, [r4, #8]
    497c:	7bd3      	ldrb	r3, [r2, #15]
    497e:	3b01      	subs	r3, #1
    4980:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4982:	4809      	ldr	r0, [pc, #36]	; (49a8 <k_sched_lock+0x94>)
    4984:	f7ff fcd4 	bl	4330 <z_spin_unlock_valid>
    4988:	b940      	cbnz	r0, 499c <k_sched_lock+0x88>
    498a:	4908      	ldr	r1, [pc, #32]	; (49ac <k_sched_lock+0x98>)
    498c:	4808      	ldr	r0, [pc, #32]	; (49b0 <k_sched_lock+0x9c>)
    498e:	22ac      	movs	r2, #172	; 0xac
    4990:	f003 ff23 	bl	87da <printk>
    4994:	21ac      	movs	r1, #172	; 0xac
    4996:	4805      	ldr	r0, [pc, #20]	; (49ac <k_sched_lock+0x98>)
    4998:	f003 ffaa 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    499c:	f385 8811 	msr	BASEPRI, r5
    49a0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    49a4:	bd38      	pop	{r3, r4, r5, pc}
    49a6:	bf00      	nop
    49a8:	20000a64 	.word	0x20000a64
    49ac:	0000973f 	.word	0x0000973f
    49b0:	00009765 	.word	0x00009765
    49b4:	0000a597 	.word	0x0000a597
    49b8:	20000a30 	.word	0x20000a30

000049bc <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    49bc:	4b0b      	ldr	r3, [pc, #44]	; (49ec <z_priq_dumb_remove+0x30>)
{
    49be:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    49c0:	4299      	cmp	r1, r3
{
    49c2:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    49c4:	d10a      	bne.n	49dc <z_priq_dumb_remove+0x20>
    49c6:	490a      	ldr	r1, [pc, #40]	; (49f0 <z_priq_dumb_remove+0x34>)
    49c8:	480a      	ldr	r0, [pc, #40]	; (49f4 <z_priq_dumb_remove+0x38>)
    49ca:	f240 32e7 	movw	r2, #999	; 0x3e7
    49ce:	f003 ff04 	bl	87da <printk>
    49d2:	f240 31e7 	movw	r1, #999	; 0x3e7
    49d6:	4806      	ldr	r0, [pc, #24]	; (49f0 <z_priq_dumb_remove+0x34>)
    49d8:	f003 ff8a 	bl	88f0 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    49dc:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    49e0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    49e2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    49e4:	2300      	movs	r3, #0
	node->prev = NULL;
    49e6:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    49ea:	bd10      	pop	{r4, pc}
    49ec:	20000190 	.word	0x20000190
    49f0:	0000a5e2 	.word	0x0000a5e2
    49f4:	00009765 	.word	0x00009765

000049f8 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    49f8:	6883      	ldr	r3, [r0, #8]
{
    49fa:	b510      	push	{r4, lr}
    49fc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    49fe:	b953      	cbnz	r3, 4a16 <unpend_thread_no_timeout+0x1e>
    4a00:	490a      	ldr	r1, [pc, #40]	; (4a2c <unpend_thread_no_timeout+0x34>)
    4a02:	480b      	ldr	r0, [pc, #44]	; (4a30 <unpend_thread_no_timeout+0x38>)
    4a04:	f240 2283 	movw	r2, #643	; 0x283
    4a08:	f003 fee7 	bl	87da <printk>
    4a0c:	f240 2183 	movw	r1, #643	; 0x283
    4a10:	4806      	ldr	r0, [pc, #24]	; (4a2c <unpend_thread_no_timeout+0x34>)
    4a12:	f003 ff6d 	bl	88f0 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    4a16:	4621      	mov	r1, r4
    4a18:	68a0      	ldr	r0, [r4, #8]
    4a1a:	f7ff ffcf 	bl	49bc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4a1e:	7b63      	ldrb	r3, [r4, #13]
    4a20:	f023 0302 	bic.w	r3, r3, #2
    4a24:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    4a26:	2300      	movs	r3, #0
    4a28:	60a3      	str	r3, [r4, #8]
}
    4a2a:	bd10      	pop	{r4, pc}
    4a2c:	0000a5e2 	.word	0x0000a5e2
    4a30:	00009765 	.word	0x00009765

00004a34 <update_cache>:
{
    4a34:	b538      	push	{r3, r4, r5, lr}
    4a36:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    4a38:	4812      	ldr	r0, [pc, #72]	; (4a84 <update_cache+0x50>)
    4a3a:	f004 fa9b 	bl	8f74 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4a3e:	4d12      	ldr	r5, [pc, #72]	; (4a88 <update_cache+0x54>)
    4a40:	4604      	mov	r4, r0
    4a42:	b900      	cbnz	r0, 4a46 <update_cache+0x12>
    4a44:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    4a46:	b9aa      	cbnz	r2, 4a74 <update_cache+0x40>
	__ASSERT(_current != NULL, "");
    4a48:	68ab      	ldr	r3, [r5, #8]
    4a4a:	b943      	cbnz	r3, 4a5e <update_cache+0x2a>
    4a4c:	490f      	ldr	r1, [pc, #60]	; (4a8c <update_cache+0x58>)
    4a4e:	4810      	ldr	r0, [pc, #64]	; (4a90 <update_cache+0x5c>)
    4a50:	2289      	movs	r2, #137	; 0x89
    4a52:	f003 fec2 	bl	87da <printk>
    4a56:	2189      	movs	r1, #137	; 0x89
    4a58:	480c      	ldr	r0, [pc, #48]	; (4a8c <update_cache+0x58>)
    4a5a:	f003 ff49 	bl	88f0 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    4a5e:	68ab      	ldr	r3, [r5, #8]
    4a60:	7b5a      	ldrb	r2, [r3, #13]
    4a62:	06d2      	lsls	r2, r2, #27
    4a64:	d106      	bne.n	4a74 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4a66:	69a2      	ldr	r2, [r4, #24]
    4a68:	b922      	cbnz	r2, 4a74 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
    4a6a:	89da      	ldrh	r2, [r3, #14]
    4a6c:	2a7f      	cmp	r2, #127	; 0x7f
    4a6e:	d901      	bls.n	4a74 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
    4a70:	61eb      	str	r3, [r5, #28]
}
    4a72:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    4a74:	68ab      	ldr	r3, [r5, #8]
    4a76:	42a3      	cmp	r3, r4
    4a78:	d001      	beq.n	4a7e <update_cache+0x4a>
			z_reset_time_slice();
    4a7a:	f7ff feab 	bl	47d4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    4a7e:	61ec      	str	r4, [r5, #28]
}
    4a80:	e7f7      	b.n	4a72 <update_cache+0x3e>
    4a82:	bf00      	nop
    4a84:	20000a50 	.word	0x20000a50
    4a88:	20000a30 	.word	0x20000a30
    4a8c:	0000a5e2 	.word	0x0000a5e2
    4a90:	00009765 	.word	0x00009765

00004a94 <move_thread_to_end_of_prio_q>:
{
    4a94:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    4a96:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    4a9a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    4a9c:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    4a9e:	7b43      	ldrb	r3, [r0, #13]
    4aa0:	da06      	bge.n	4ab0 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    4aa6:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4aa8:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4aaa:	481f      	ldr	r0, [pc, #124]	; (4b28 <move_thread_to_end_of_prio_q+0x94>)
    4aac:	f7ff ff86 	bl	49bc <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4ab0:	7b63      	ldrb	r3, [r4, #13]
    4ab2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4ab6:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4ab8:	4b1c      	ldr	r3, [pc, #112]	; (4b2c <move_thread_to_end_of_prio_q+0x98>)
    4aba:	429c      	cmp	r4, r3
    4abc:	d108      	bne.n	4ad0 <move_thread_to_end_of_prio_q+0x3c>
    4abe:	491c      	ldr	r1, [pc, #112]	; (4b30 <move_thread_to_end_of_prio_q+0x9c>)
    4ac0:	481c      	ldr	r0, [pc, #112]	; (4b34 <move_thread_to_end_of_prio_q+0xa0>)
    4ac2:	22ba      	movs	r2, #186	; 0xba
    4ac4:	f003 fe89 	bl	87da <printk>
    4ac8:	21ba      	movs	r1, #186	; 0xba
    4aca:	4819      	ldr	r0, [pc, #100]	; (4b30 <move_thread_to_end_of_prio_q+0x9c>)
    4acc:	f003 ff10 	bl	88f0 <assert_post_action>
	return list->head == list;
    4ad0:	4a19      	ldr	r2, [pc, #100]	; (4b38 <move_thread_to_end_of_prio_q+0xa4>)
    4ad2:	4611      	mov	r1, r2
    4ad4:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4ad8:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ada:	428b      	cmp	r3, r1
    4adc:	bf08      	it	eq
    4ade:	2300      	moveq	r3, #0
    4ae0:	2b00      	cmp	r3, #0
    4ae2:	bf38      	it	cc
    4ae4:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4ae6:	b1cb      	cbz	r3, 4b1c <move_thread_to_end_of_prio_q+0x88>
	int32_t b1 = thread_1->base.prio;
    4ae8:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4aec:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    4af0:	4286      	cmp	r6, r0
    4af2:	d00f      	beq.n	4b14 <move_thread_to_end_of_prio_q+0x80>
		return b2 - b1;
    4af4:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4af6:	2800      	cmp	r0, #0
    4af8:	dd0c      	ble.n	4b14 <move_thread_to_end_of_prio_q+0x80>
	sys_dnode_t *const prev = successor->prev;
    4afa:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    4afc:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    4b00:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    4b02:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    4b04:	6890      	ldr	r0, [r2, #8]
    4b06:	1b03      	subs	r3, r0, r4
    4b08:	4258      	negs	r0, r3
    4b0a:	4158      	adcs	r0, r3
}
    4b0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    4b10:	f7ff bf90 	b.w	4a34 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4b14:	42ab      	cmp	r3, r5
    4b16:	d001      	beq.n	4b1c <move_thread_to_end_of_prio_q+0x88>
    4b18:	681b      	ldr	r3, [r3, #0]
    4b1a:	e7e4      	b.n	4ae6 <move_thread_to_end_of_prio_q+0x52>
	node->prev = tail;
    4b1c:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
    4b20:	602c      	str	r4, [r5, #0]
	list->tail = node;
    4b22:	6254      	str	r4, [r2, #36]	; 0x24
}
    4b24:	e7ee      	b.n	4b04 <move_thread_to_end_of_prio_q+0x70>
    4b26:	bf00      	nop
    4b28:	20000a50 	.word	0x20000a50
    4b2c:	20000190 	.word	0x20000190
    4b30:	0000a5e2 	.word	0x0000a5e2
    4b34:	00009765 	.word	0x00009765
    4b38:	20000a30 	.word	0x20000a30

00004b3c <z_time_slice>:
{
    4b3c:	b570      	push	{r4, r5, r6, lr}
    4b3e:	4604      	mov	r4, r0
	__asm__ volatile(
    4b40:	f04f 0320 	mov.w	r3, #32
    4b44:	f3ef 8511 	mrs	r5, BASEPRI
    4b48:	f383 8812 	msr	BASEPRI_MAX, r3
    4b4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4b50:	4825      	ldr	r0, [pc, #148]	; (4be8 <z_time_slice+0xac>)
    4b52:	f7ff fbdf 	bl	4314 <z_spin_lock_valid>
    4b56:	b940      	cbnz	r0, 4b6a <z_time_slice+0x2e>
    4b58:	4924      	ldr	r1, [pc, #144]	; (4bec <z_time_slice+0xb0>)
    4b5a:	4825      	ldr	r0, [pc, #148]	; (4bf0 <z_time_slice+0xb4>)
    4b5c:	2281      	movs	r2, #129	; 0x81
    4b5e:	f003 fe3c 	bl	87da <printk>
    4b62:	2181      	movs	r1, #129	; 0x81
    4b64:	4821      	ldr	r0, [pc, #132]	; (4bec <z_time_slice+0xb0>)
    4b66:	f003 fec3 	bl	88f0 <assert_post_action>
	z_spin_lock_set_owner(l);
    4b6a:	481f      	ldr	r0, [pc, #124]	; (4be8 <z_time_slice+0xac>)
    4b6c:	f7ff fbee 	bl	434c <z_spin_lock_set_owner>
	if (pending_current == _current) {
    4b70:	4b20      	ldr	r3, [pc, #128]	; (4bf4 <z_time_slice+0xb8>)
    4b72:	4a21      	ldr	r2, [pc, #132]	; (4bf8 <z_time_slice+0xbc>)
    4b74:	6898      	ldr	r0, [r3, #8]
    4b76:	6811      	ldr	r1, [r2, #0]
    4b78:	4288      	cmp	r0, r1
    4b7a:	4619      	mov	r1, r3
    4b7c:	d113      	bne.n	4ba6 <z_time_slice+0x6a>
			z_reset_time_slice();
    4b7e:	f7ff fe29 	bl	47d4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4b82:	4819      	ldr	r0, [pc, #100]	; (4be8 <z_time_slice+0xac>)
    4b84:	f7ff fbd4 	bl	4330 <z_spin_unlock_valid>
    4b88:	b940      	cbnz	r0, 4b9c <z_time_slice+0x60>
    4b8a:	4918      	ldr	r1, [pc, #96]	; (4bec <z_time_slice+0xb0>)
    4b8c:	4818      	ldr	r0, [pc, #96]	; (4bf0 <z_time_slice+0xb4>)
    4b8e:	22ac      	movs	r2, #172	; 0xac
    4b90:	f003 fe23 	bl	87da <printk>
    4b94:	21ac      	movs	r1, #172	; 0xac
    4b96:	4815      	ldr	r0, [pc, #84]	; (4bec <z_time_slice+0xb0>)
    4b98:	f003 feaa 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    4b9c:	f385 8811 	msr	BASEPRI, r5
    4ba0:	f3bf 8f6f 	isb	sy
}
    4ba4:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    4ba6:	2600      	movs	r6, #0
    4ba8:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    4baa:	4a14      	ldr	r2, [pc, #80]	; (4bfc <z_time_slice+0xc0>)
    4bac:	6812      	ldr	r2, [r2, #0]
    4bae:	b1ba      	cbz	r2, 4be0 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
    4bb0:	89c2      	ldrh	r2, [r0, #14]
    4bb2:	2a7f      	cmp	r2, #127	; 0x7f
    4bb4:	d814      	bhi.n	4be0 <z_time_slice+0xa4>
		&& !z_is_thread_prevented_from_running(thread)
    4bb6:	7b42      	ldrb	r2, [r0, #13]
    4bb8:	06d2      	lsls	r2, r2, #27
    4bba:	d111      	bne.n	4be0 <z_time_slice+0xa4>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4bbc:	4a10      	ldr	r2, [pc, #64]	; (4c00 <z_time_slice+0xc4>)
    4bbe:	f990 600e 	ldrsb.w	r6, [r0, #14]
    4bc2:	6812      	ldr	r2, [r2, #0]
    4bc4:	4296      	cmp	r6, r2
    4bc6:	db0b      	blt.n	4be0 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
    4bc8:	4a0e      	ldr	r2, [pc, #56]	; (4c04 <z_time_slice+0xc8>)
    4bca:	4290      	cmp	r0, r2
    4bcc:	d008      	beq.n	4be0 <z_time_slice+0xa4>
		if (ticks >= _current_cpu->slice_ticks) {
    4bce:	691a      	ldr	r2, [r3, #16]
    4bd0:	42a2      	cmp	r2, r4
    4bd2:	dc02      	bgt.n	4bda <z_time_slice+0x9e>
			move_thread_to_end_of_prio_q(_current);
    4bd4:	f7ff ff5e 	bl	4a94 <move_thread_to_end_of_prio_q>
    4bd8:	e7d1      	b.n	4b7e <z_time_slice+0x42>
			_current_cpu->slice_ticks -= ticks;
    4bda:	1b12      	subs	r2, r2, r4
    4bdc:	611a      	str	r2, [r3, #16]
    4bde:	e7d0      	b.n	4b82 <z_time_slice+0x46>
		_current_cpu->slice_ticks = 0;
    4be0:	2300      	movs	r3, #0
    4be2:	610b      	str	r3, [r1, #16]
    4be4:	e7cd      	b.n	4b82 <z_time_slice+0x46>
    4be6:	bf00      	nop
    4be8:	20000a64 	.word	0x20000a64
    4bec:	0000973f 	.word	0x0000973f
    4bf0:	00009765 	.word	0x00009765
    4bf4:	20000a30 	.word	0x20000a30
    4bf8:	20000a60 	.word	0x20000a60
    4bfc:	20000a6c 	.word	0x20000a6c
    4c00:	20000a68 	.word	0x20000a68
    4c04:	20000190 	.word	0x20000190

00004c08 <ready_thread>:
{
    4c08:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4c0a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    4c0e:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4c10:	2a00      	cmp	r2, #0
    4c12:	7b43      	ldrb	r3, [r0, #13]
    4c14:	db3d      	blt.n	4c92 <ready_thread+0x8a>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4c16:	06da      	lsls	r2, r3, #27
    4c18:	d13b      	bne.n	4c92 <ready_thread+0x8a>
	return !sys_dnode_is_linked(&to->node);
    4c1a:	6985      	ldr	r5, [r0, #24]
    4c1c:	2d00      	cmp	r5, #0
    4c1e:	d138      	bne.n	4c92 <ready_thread+0x8a>
	thread->base.thread_state |= _THREAD_QUEUED;
    4c20:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4c24:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4c26:	4b1b      	ldr	r3, [pc, #108]	; (4c94 <ready_thread+0x8c>)
    4c28:	4298      	cmp	r0, r3
    4c2a:	d108      	bne.n	4c3e <ready_thread+0x36>
    4c2c:	491a      	ldr	r1, [pc, #104]	; (4c98 <ready_thread+0x90>)
    4c2e:	481b      	ldr	r0, [pc, #108]	; (4c9c <ready_thread+0x94>)
    4c30:	22ba      	movs	r2, #186	; 0xba
    4c32:	f003 fdd2 	bl	87da <printk>
    4c36:	21ba      	movs	r1, #186	; 0xba
    4c38:	4817      	ldr	r0, [pc, #92]	; (4c98 <ready_thread+0x90>)
    4c3a:	f003 fe59 	bl	88f0 <assert_post_action>
	return list->head == list;
    4c3e:	4918      	ldr	r1, [pc, #96]	; (4ca0 <ready_thread+0x98>)
    4c40:	460b      	mov	r3, r1
    4c42:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4c46:	4298      	cmp	r0, r3
    4c48:	bf18      	it	ne
    4c4a:	4605      	movne	r5, r0
    4c4c:	2d00      	cmp	r5, #0
    4c4e:	461a      	mov	r2, r3
    4c50:	462b      	mov	r3, r5
    4c52:	bf38      	it	cc
    4c54:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4c56:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4c58:	b1b3      	cbz	r3, 4c88 <ready_thread+0x80>
	int32_t b1 = thread_1->base.prio;
    4c5a:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4c5e:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    4c62:	4286      	cmp	r6, r0
    4c64:	d00c      	beq.n	4c80 <ready_thread+0x78>
		return b2 - b1;
    4c66:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4c68:	2800      	cmp	r0, #0
    4c6a:	dd09      	ble.n	4c80 <ready_thread+0x78>
	sys_dnode_t *const prev = successor->prev;
    4c6c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4c6e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4c72:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4c74:	605c      	str	r4, [r3, #4]
		update_cache(0);
    4c76:	2000      	movs	r0, #0
}
    4c78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    4c7c:	f7ff beda 	b.w	4a34 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4c80:	42ab      	cmp	r3, r5
    4c82:	d001      	beq.n	4c88 <ready_thread+0x80>
    4c84:	681b      	ldr	r3, [r3, #0]
    4c86:	e7e7      	b.n	4c58 <ready_thread+0x50>
	node->prev = tail;
    4c88:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    4c8c:	602c      	str	r4, [r5, #0]
	list->tail = node;
    4c8e:	624c      	str	r4, [r1, #36]	; 0x24
}
    4c90:	e7f1      	b.n	4c76 <ready_thread+0x6e>
}
    4c92:	bd70      	pop	{r4, r5, r6, pc}
    4c94:	20000190 	.word	0x20000190
    4c98:	0000a5e2 	.word	0x0000a5e2
    4c9c:	00009765 	.word	0x00009765
    4ca0:	20000a30 	.word	0x20000a30

00004ca4 <z_ready_thread>:
{
    4ca4:	b538      	push	{r3, r4, r5, lr}
    4ca6:	4604      	mov	r4, r0
	__asm__ volatile(
    4ca8:	f04f 0320 	mov.w	r3, #32
    4cac:	f3ef 8511 	mrs	r5, BASEPRI
    4cb0:	f383 8812 	msr	BASEPRI_MAX, r3
    4cb4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4cb8:	4812      	ldr	r0, [pc, #72]	; (4d04 <z_ready_thread+0x60>)
    4cba:	f7ff fb2b 	bl	4314 <z_spin_lock_valid>
    4cbe:	b940      	cbnz	r0, 4cd2 <z_ready_thread+0x2e>
    4cc0:	4911      	ldr	r1, [pc, #68]	; (4d08 <z_ready_thread+0x64>)
    4cc2:	4812      	ldr	r0, [pc, #72]	; (4d0c <z_ready_thread+0x68>)
    4cc4:	2281      	movs	r2, #129	; 0x81
    4cc6:	f003 fd88 	bl	87da <printk>
    4cca:	2181      	movs	r1, #129	; 0x81
    4ccc:	480e      	ldr	r0, [pc, #56]	; (4d08 <z_ready_thread+0x64>)
    4cce:	f003 fe0f 	bl	88f0 <assert_post_action>
	z_spin_lock_set_owner(l);
    4cd2:	480c      	ldr	r0, [pc, #48]	; (4d04 <z_ready_thread+0x60>)
    4cd4:	f7ff fb3a 	bl	434c <z_spin_lock_set_owner>
			ready_thread(thread);
    4cd8:	4620      	mov	r0, r4
    4cda:	f7ff ff95 	bl	4c08 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4cde:	4809      	ldr	r0, [pc, #36]	; (4d04 <z_ready_thread+0x60>)
    4ce0:	f7ff fb26 	bl	4330 <z_spin_unlock_valid>
    4ce4:	b940      	cbnz	r0, 4cf8 <z_ready_thread+0x54>
    4ce6:	4908      	ldr	r1, [pc, #32]	; (4d08 <z_ready_thread+0x64>)
    4ce8:	4808      	ldr	r0, [pc, #32]	; (4d0c <z_ready_thread+0x68>)
    4cea:	22ac      	movs	r2, #172	; 0xac
    4cec:	f003 fd75 	bl	87da <printk>
    4cf0:	21ac      	movs	r1, #172	; 0xac
    4cf2:	4805      	ldr	r0, [pc, #20]	; (4d08 <z_ready_thread+0x64>)
    4cf4:	f003 fdfc 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    4cf8:	f385 8811 	msr	BASEPRI, r5
    4cfc:	f3bf 8f6f 	isb	sy
}
    4d00:	bd38      	pop	{r3, r4, r5, pc}
    4d02:	bf00      	nop
    4d04:	20000a64 	.word	0x20000a64
    4d08:	0000973f 	.word	0x0000973f
    4d0c:	00009765 	.word	0x00009765

00004d10 <z_sched_start>:
{
    4d10:	b538      	push	{r3, r4, r5, lr}
    4d12:	4604      	mov	r4, r0
	__asm__ volatile(
    4d14:	f04f 0320 	mov.w	r3, #32
    4d18:	f3ef 8511 	mrs	r5, BASEPRI
    4d1c:	f383 8812 	msr	BASEPRI_MAX, r3
    4d20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4d24:	4818      	ldr	r0, [pc, #96]	; (4d88 <z_sched_start+0x78>)
    4d26:	f7ff faf5 	bl	4314 <z_spin_lock_valid>
    4d2a:	b940      	cbnz	r0, 4d3e <z_sched_start+0x2e>
    4d2c:	4917      	ldr	r1, [pc, #92]	; (4d8c <z_sched_start+0x7c>)
    4d2e:	4818      	ldr	r0, [pc, #96]	; (4d90 <z_sched_start+0x80>)
    4d30:	2281      	movs	r2, #129	; 0x81
    4d32:	f003 fd52 	bl	87da <printk>
    4d36:	2181      	movs	r1, #129	; 0x81
    4d38:	4814      	ldr	r0, [pc, #80]	; (4d8c <z_sched_start+0x7c>)
    4d3a:	f003 fdd9 	bl	88f0 <assert_post_action>
	z_spin_lock_set_owner(l);
    4d3e:	4812      	ldr	r0, [pc, #72]	; (4d88 <z_sched_start+0x78>)
    4d40:	f7ff fb04 	bl	434c <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    4d44:	7b63      	ldrb	r3, [r4, #13]
    4d46:	075a      	lsls	r2, r3, #29
    4d48:	d411      	bmi.n	4d6e <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4d4a:	480f      	ldr	r0, [pc, #60]	; (4d88 <z_sched_start+0x78>)
    4d4c:	f7ff faf0 	bl	4330 <z_spin_unlock_valid>
    4d50:	b940      	cbnz	r0, 4d64 <z_sched_start+0x54>
    4d52:	490e      	ldr	r1, [pc, #56]	; (4d8c <z_sched_start+0x7c>)
    4d54:	480e      	ldr	r0, [pc, #56]	; (4d90 <z_sched_start+0x80>)
    4d56:	22ac      	movs	r2, #172	; 0xac
    4d58:	f003 fd3f 	bl	87da <printk>
    4d5c:	21ac      	movs	r1, #172	; 0xac
    4d5e:	480b      	ldr	r0, [pc, #44]	; (4d8c <z_sched_start+0x7c>)
    4d60:	f003 fdc6 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    4d64:	f385 8811 	msr	BASEPRI, r5
    4d68:	f3bf 8f6f 	isb	sy
}
    4d6c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4d6e:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    4d72:	4620      	mov	r0, r4
    4d74:	7363      	strb	r3, [r4, #13]
    4d76:	f7ff ff47 	bl	4c08 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4d7a:	4629      	mov	r1, r5
}
    4d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    4d80:	4801      	ldr	r0, [pc, #4]	; (4d88 <z_sched_start+0x78>)
    4d82:	f7ff bd91 	b.w	48a8 <z_reschedule>
    4d86:	bf00      	nop
    4d88:	20000a64 	.word	0x20000a64
    4d8c:	0000973f 	.word	0x0000973f
    4d90:	00009765 	.word	0x00009765

00004d94 <z_thread_timeout>:
{
    4d94:	b570      	push	{r4, r5, r6, lr}
    4d96:	4604      	mov	r4, r0
	__asm__ volatile(
    4d98:	f04f 0320 	mov.w	r3, #32
    4d9c:	f3ef 8611 	mrs	r6, BASEPRI
    4da0:	f383 8812 	msr	BASEPRI_MAX, r3
    4da4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4da8:	481b      	ldr	r0, [pc, #108]	; (4e18 <z_thread_timeout+0x84>)
    4daa:	f7ff fab3 	bl	4314 <z_spin_lock_valid>
    4dae:	b940      	cbnz	r0, 4dc2 <z_thread_timeout+0x2e>
    4db0:	491a      	ldr	r1, [pc, #104]	; (4e1c <z_thread_timeout+0x88>)
    4db2:	481b      	ldr	r0, [pc, #108]	; (4e20 <z_thread_timeout+0x8c>)
    4db4:	2281      	movs	r2, #129	; 0x81
    4db6:	f003 fd10 	bl	87da <printk>
    4dba:	2181      	movs	r1, #129	; 0x81
    4dbc:	4817      	ldr	r0, [pc, #92]	; (4e1c <z_thread_timeout+0x88>)
    4dbe:	f003 fd97 	bl	88f0 <assert_post_action>
	z_spin_lock_set_owner(l);
    4dc2:	4815      	ldr	r0, [pc, #84]	; (4e18 <z_thread_timeout+0x84>)
    4dc4:	f7ff fac2 	bl	434c <z_spin_lock_set_owner>
		if (!killed) {
    4dc8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    4dcc:	f013 0f28 	tst.w	r3, #40	; 0x28
    4dd0:	d110      	bne.n	4df4 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
    4dd2:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    4dd6:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    4dda:	b113      	cbz	r3, 4de2 <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
    4ddc:	4628      	mov	r0, r5
    4dde:	f7ff fe0b 	bl	49f8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    4de2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
    4de6:	4628      	mov	r0, r5
    4de8:	f023 0314 	bic.w	r3, r3, #20
    4dec:	f804 3c0b 	strb.w	r3, [r4, #-11]
    4df0:	f7ff ff0a 	bl	4c08 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4df4:	4808      	ldr	r0, [pc, #32]	; (4e18 <z_thread_timeout+0x84>)
    4df6:	f7ff fa9b 	bl	4330 <z_spin_unlock_valid>
    4dfa:	b940      	cbnz	r0, 4e0e <z_thread_timeout+0x7a>
    4dfc:	4907      	ldr	r1, [pc, #28]	; (4e1c <z_thread_timeout+0x88>)
    4dfe:	4808      	ldr	r0, [pc, #32]	; (4e20 <z_thread_timeout+0x8c>)
    4e00:	22ac      	movs	r2, #172	; 0xac
    4e02:	f003 fcea 	bl	87da <printk>
    4e06:	21ac      	movs	r1, #172	; 0xac
    4e08:	4804      	ldr	r0, [pc, #16]	; (4e1c <z_thread_timeout+0x88>)
    4e0a:	f003 fd71 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    4e0e:	f386 8811 	msr	BASEPRI, r6
    4e12:	f3bf 8f6f 	isb	sy
}
    4e16:	bd70      	pop	{r4, r5, r6, pc}
    4e18:	20000a64 	.word	0x20000a64
    4e1c:	0000973f 	.word	0x0000973f
    4e20:	00009765 	.word	0x00009765

00004e24 <unready_thread>:
{
    4e24:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    4e26:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    4e2a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    4e2c:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    4e2e:	7b43      	ldrb	r3, [r0, #13]
    4e30:	da06      	bge.n	4e40 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    4e36:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4e38:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4e3a:	4806      	ldr	r0, [pc, #24]	; (4e54 <unready_thread+0x30>)
    4e3c:	f7ff fdbe 	bl	49bc <z_priq_dumb_remove>
	update_cache(thread == _current);
    4e40:	4b05      	ldr	r3, [pc, #20]	; (4e58 <unready_thread+0x34>)
    4e42:	6898      	ldr	r0, [r3, #8]
    4e44:	1b03      	subs	r3, r0, r4
    4e46:	4258      	negs	r0, r3
    4e48:	4158      	adcs	r0, r3
}
    4e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    4e4e:	f7ff bdf1 	b.w	4a34 <update_cache>
    4e52:	bf00      	nop
    4e54:	20000a50 	.word	0x20000a50
    4e58:	20000a30 	.word	0x20000a30

00004e5c <add_to_waitq_locked>:
{
    4e5c:	b538      	push	{r3, r4, r5, lr}
    4e5e:	4604      	mov	r4, r0
    4e60:	460d      	mov	r5, r1
	unready_thread(thread);
    4e62:	f7ff ffdf 	bl	4e24 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    4e66:	7b63      	ldrb	r3, [r4, #13]
    4e68:	f043 0302 	orr.w	r3, r3, #2
    4e6c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4e6e:	b315      	cbz	r5, 4eb6 <add_to_waitq_locked+0x5a>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4e70:	4b17      	ldr	r3, [pc, #92]	; (4ed0 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
    4e72:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4e74:	429c      	cmp	r4, r3
    4e76:	d108      	bne.n	4e8a <add_to_waitq_locked+0x2e>
    4e78:	4916      	ldr	r1, [pc, #88]	; (4ed4 <add_to_waitq_locked+0x78>)
    4e7a:	4817      	ldr	r0, [pc, #92]	; (4ed8 <add_to_waitq_locked+0x7c>)
    4e7c:	22ba      	movs	r2, #186	; 0xba
    4e7e:	f003 fcac 	bl	87da <printk>
    4e82:	21ba      	movs	r1, #186	; 0xba
    4e84:	4813      	ldr	r0, [pc, #76]	; (4ed4 <add_to_waitq_locked+0x78>)
    4e86:	f003 fd33 	bl	88f0 <assert_post_action>
	return list->head == list;
    4e8a:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4e8c:	429d      	cmp	r5, r3
    4e8e:	bf08      	it	eq
    4e90:	2300      	moveq	r3, #0
    4e92:	2b00      	cmp	r3, #0
    4e94:	bf38      	it	cc
    4e96:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4e98:	b19b      	cbz	r3, 4ec2 <add_to_waitq_locked+0x66>
	int32_t b1 = thread_1->base.prio;
    4e9a:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4e9e:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    4ea2:	4291      	cmp	r1, r2
    4ea4:	d008      	beq.n	4eb8 <add_to_waitq_locked+0x5c>
		return b2 - b1;
    4ea6:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    4ea8:	2a00      	cmp	r2, #0
    4eaa:	dd05      	ble.n	4eb8 <add_to_waitq_locked+0x5c>
	sys_dnode_t *const prev = successor->prev;
    4eac:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4eae:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4eb2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4eb4:	605c      	str	r4, [r3, #4]
}
    4eb6:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    4eb8:	686a      	ldr	r2, [r5, #4]
    4eba:	4293      	cmp	r3, r2
    4ebc:	d001      	beq.n	4ec2 <add_to_waitq_locked+0x66>
    4ebe:	681b      	ldr	r3, [r3, #0]
    4ec0:	e7ea      	b.n	4e98 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const tail = list->tail;
    4ec2:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    4ec4:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    4ec8:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4eca:	606c      	str	r4, [r5, #4]
    4ecc:	e7f3      	b.n	4eb6 <add_to_waitq_locked+0x5a>
    4ece:	bf00      	nop
    4ed0:	20000190 	.word	0x20000190
    4ed4:	0000a5e2 	.word	0x0000a5e2
    4ed8:	00009765 	.word	0x00009765

00004edc <pend>:
{
    4edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ee0:	4604      	mov	r4, r0
    4ee2:	460d      	mov	r5, r1
    4ee4:	4616      	mov	r6, r2
    4ee6:	461f      	mov	r7, r3
	__asm__ volatile(
    4ee8:	f04f 0320 	mov.w	r3, #32
    4eec:	f3ef 8811 	mrs	r8, BASEPRI
    4ef0:	f383 8812 	msr	BASEPRI_MAX, r3
    4ef4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4ef8:	481a      	ldr	r0, [pc, #104]	; (4f64 <pend+0x88>)
    4efa:	f7ff fa0b 	bl	4314 <z_spin_lock_valid>
    4efe:	b940      	cbnz	r0, 4f12 <pend+0x36>
    4f00:	4919      	ldr	r1, [pc, #100]	; (4f68 <pend+0x8c>)
    4f02:	481a      	ldr	r0, [pc, #104]	; (4f6c <pend+0x90>)
    4f04:	2281      	movs	r2, #129	; 0x81
    4f06:	f003 fc68 	bl	87da <printk>
    4f0a:	2181      	movs	r1, #129	; 0x81
    4f0c:	4816      	ldr	r0, [pc, #88]	; (4f68 <pend+0x8c>)
    4f0e:	f003 fcef 	bl	88f0 <assert_post_action>
	z_spin_lock_set_owner(l);
    4f12:	4814      	ldr	r0, [pc, #80]	; (4f64 <pend+0x88>)
    4f14:	f7ff fa1a 	bl	434c <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    4f18:	4620      	mov	r0, r4
    4f1a:	4629      	mov	r1, r5
    4f1c:	f7ff ff9e 	bl	4e5c <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4f20:	4810      	ldr	r0, [pc, #64]	; (4f64 <pend+0x88>)
    4f22:	f7ff fa05 	bl	4330 <z_spin_unlock_valid>
    4f26:	b940      	cbnz	r0, 4f3a <pend+0x5e>
    4f28:	490f      	ldr	r1, [pc, #60]	; (4f68 <pend+0x8c>)
    4f2a:	4810      	ldr	r0, [pc, #64]	; (4f6c <pend+0x90>)
    4f2c:	22ac      	movs	r2, #172	; 0xac
    4f2e:	f003 fc54 	bl	87da <printk>
    4f32:	21ac      	movs	r1, #172	; 0xac
    4f34:	480c      	ldr	r0, [pc, #48]	; (4f68 <pend+0x8c>)
    4f36:	f003 fcdb 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    4f3a:	f388 8811 	msr	BASEPRI, r8
    4f3e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4f42:	1c7b      	adds	r3, r7, #1
    4f44:	bf08      	it	eq
    4f46:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    4f4a:	d008      	beq.n	4f5e <pend+0x82>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4f4c:	4632      	mov	r2, r6
    4f4e:	463b      	mov	r3, r7
    4f50:	f104 0018 	add.w	r0, r4, #24
    4f54:	4906      	ldr	r1, [pc, #24]	; (4f70 <pend+0x94>)
}
    4f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4f5a:	f000 bbff 	b.w	575c <z_add_timeout>
    4f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f62:	bf00      	nop
    4f64:	20000a64 	.word	0x20000a64
    4f68:	0000973f 	.word	0x0000973f
    4f6c:	00009765 	.word	0x00009765
    4f70:	00004d95 	.word	0x00004d95

00004f74 <z_pend_curr>:
{
    4f74:	b538      	push	{r3, r4, r5, lr}
    4f76:	4605      	mov	r5, r0
	pending_current = _current;
    4f78:	4b0d      	ldr	r3, [pc, #52]	; (4fb0 <z_pend_curr+0x3c>)
{
    4f7a:	460c      	mov	r4, r1
	pending_current = _current;
    4f7c:	6898      	ldr	r0, [r3, #8]
    4f7e:	4b0d      	ldr	r3, [pc, #52]	; (4fb4 <z_pend_curr+0x40>)
{
    4f80:	4611      	mov	r1, r2
	pending_current = _current;
    4f82:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    4f84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    4f88:	f7ff ffa8 	bl	4edc <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4f8c:	4628      	mov	r0, r5
    4f8e:	f7ff f9cf 	bl	4330 <z_spin_unlock_valid>
    4f92:	b940      	cbnz	r0, 4fa6 <z_pend_curr+0x32>
    4f94:	4908      	ldr	r1, [pc, #32]	; (4fb8 <z_pend_curr+0x44>)
    4f96:	4809      	ldr	r0, [pc, #36]	; (4fbc <z_pend_curr+0x48>)
    4f98:	22c3      	movs	r2, #195	; 0xc3
    4f9a:	f003 fc1e 	bl	87da <printk>
    4f9e:	21c3      	movs	r1, #195	; 0xc3
    4fa0:	4805      	ldr	r0, [pc, #20]	; (4fb8 <z_pend_curr+0x44>)
    4fa2:	f003 fca5 	bl	88f0 <assert_post_action>
    4fa6:	4620      	mov	r0, r4
}
    4fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4fac:	f7fc bbfa 	b.w	17a4 <arch_swap>
    4fb0:	20000a30 	.word	0x20000a30
    4fb4:	20000a60 	.word	0x20000a60
    4fb8:	0000973f 	.word	0x0000973f
    4fbc:	00009765 	.word	0x00009765

00004fc0 <z_set_prio>:
{
    4fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4fc2:	4604      	mov	r4, r0
    4fc4:	460e      	mov	r6, r1
	__asm__ volatile(
    4fc6:	f04f 0320 	mov.w	r3, #32
    4fca:	f3ef 8711 	mrs	r7, BASEPRI
    4fce:	f383 8812 	msr	BASEPRI_MAX, r3
    4fd2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4fd6:	4837      	ldr	r0, [pc, #220]	; (50b4 <z_set_prio+0xf4>)
    4fd8:	f7ff f99c 	bl	4314 <z_spin_lock_valid>
    4fdc:	b940      	cbnz	r0, 4ff0 <z_set_prio+0x30>
    4fde:	4936      	ldr	r1, [pc, #216]	; (50b8 <z_set_prio+0xf8>)
    4fe0:	4836      	ldr	r0, [pc, #216]	; (50bc <z_set_prio+0xfc>)
    4fe2:	2281      	movs	r2, #129	; 0x81
    4fe4:	f003 fbf9 	bl	87da <printk>
    4fe8:	2181      	movs	r1, #129	; 0x81
    4fea:	4833      	ldr	r0, [pc, #204]	; (50b8 <z_set_prio+0xf8>)
    4fec:	f003 fc80 	bl	88f0 <assert_post_action>
	z_spin_lock_set_owner(l);
    4ff0:	4830      	ldr	r0, [pc, #192]	; (50b4 <z_set_prio+0xf4>)
    4ff2:	f7ff f9ab 	bl	434c <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4ff6:	7b63      	ldrb	r3, [r4, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
    4ff8:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4ffa:	06da      	lsls	r2, r3, #27
    4ffc:	d156      	bne.n	50ac <z_set_prio+0xec>
	return !sys_dnode_is_linked(&to->node);
    4ffe:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
    5000:	2d00      	cmp	r5, #0
    5002:	d153      	bne.n	50ac <z_set_prio+0xec>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5008:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    500a:	4621      	mov	r1, r4
    500c:	482c      	ldr	r0, [pc, #176]	; (50c0 <z_set_prio+0x100>)
    500e:	f7ff fcd5 	bl	49bc <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5012:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    5014:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    5016:	f063 037f 	orn	r3, r3, #127	; 0x7f
    501a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    501c:	4b29      	ldr	r3, [pc, #164]	; (50c4 <z_set_prio+0x104>)
    501e:	429c      	cmp	r4, r3
    5020:	d108      	bne.n	5034 <z_set_prio+0x74>
    5022:	4929      	ldr	r1, [pc, #164]	; (50c8 <z_set_prio+0x108>)
    5024:	4825      	ldr	r0, [pc, #148]	; (50bc <z_set_prio+0xfc>)
    5026:	22ba      	movs	r2, #186	; 0xba
    5028:	f003 fbd7 	bl	87da <printk>
    502c:	21ba      	movs	r1, #186	; 0xba
    502e:	4826      	ldr	r0, [pc, #152]	; (50c8 <z_set_prio+0x108>)
    5030:	f003 fc5e 	bl	88f0 <assert_post_action>
	return list->head == list;
    5034:	4925      	ldr	r1, [pc, #148]	; (50cc <z_set_prio+0x10c>)
    5036:	460b      	mov	r3, r1
    5038:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    503c:	4298      	cmp	r0, r3
    503e:	bf18      	it	ne
    5040:	4605      	movne	r5, r0
    5042:	2d00      	cmp	r5, #0
    5044:	461a      	mov	r2, r3
    5046:	462b      	mov	r3, r5
    5048:	bf38      	it	cc
    504a:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    504c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    504e:	b343      	cbz	r3, 50a2 <z_set_prio+0xe2>
	int32_t b1 = thread_1->base.prio;
    5050:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5054:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    5058:	4286      	cmp	r6, r0
    505a:	d01e      	beq.n	509a <z_set_prio+0xda>
		return b2 - b1;
    505c:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    505e:	2800      	cmp	r0, #0
    5060:	dd1b      	ble.n	509a <z_set_prio+0xda>
	sys_dnode_t *const prev = successor->prev;
    5062:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5064:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5068:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    506a:	605c      	str	r4, [r3, #4]
			update_cache(1);
    506c:	2001      	movs	r0, #1
    506e:	f7ff fce1 	bl	4a34 <update_cache>
    5072:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5074:	480f      	ldr	r0, [pc, #60]	; (50b4 <z_set_prio+0xf4>)
    5076:	f7ff f95b 	bl	4330 <z_spin_unlock_valid>
    507a:	b940      	cbnz	r0, 508e <z_set_prio+0xce>
    507c:	490e      	ldr	r1, [pc, #56]	; (50b8 <z_set_prio+0xf8>)
    507e:	480f      	ldr	r0, [pc, #60]	; (50bc <z_set_prio+0xfc>)
    5080:	22ac      	movs	r2, #172	; 0xac
    5082:	f003 fbaa 	bl	87da <printk>
    5086:	21ac      	movs	r1, #172	; 0xac
    5088:	480b      	ldr	r0, [pc, #44]	; (50b8 <z_set_prio+0xf8>)
    508a:	f003 fc31 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    508e:	f387 8811 	msr	BASEPRI, r7
    5092:	f3bf 8f6f 	isb	sy
}
    5096:	4620      	mov	r0, r4
    5098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    509a:	42ab      	cmp	r3, r5
    509c:	d001      	beq.n	50a2 <z_set_prio+0xe2>
    509e:	681b      	ldr	r3, [r3, #0]
    50a0:	e7d5      	b.n	504e <z_set_prio+0x8e>
	node->prev = tail;
    50a2:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    50a6:	602c      	str	r4, [r5, #0]
	list->tail = node;
    50a8:	624c      	str	r4, [r1, #36]	; 0x24
}
    50aa:	e7df      	b.n	506c <z_set_prio+0xac>
			thread->base.prio = prio;
    50ac:	73a6      	strb	r6, [r4, #14]
    50ae:	2400      	movs	r4, #0
    50b0:	e7e0      	b.n	5074 <z_set_prio+0xb4>
    50b2:	bf00      	nop
    50b4:	20000a64 	.word	0x20000a64
    50b8:	0000973f 	.word	0x0000973f
    50bc:	00009765 	.word	0x00009765
    50c0:	20000a50 	.word	0x20000a50
    50c4:	20000190 	.word	0x20000190
    50c8:	0000a5e2 	.word	0x0000a5e2
    50cc:	20000a30 	.word	0x20000a30

000050d0 <z_impl_k_thread_suspend>:
{
    50d0:	b570      	push	{r4, r5, r6, lr}
    50d2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    50d4:	3018      	adds	r0, #24
    50d6:	f000 fbfb 	bl	58d0 <z_abort_timeout>
	__asm__ volatile(
    50da:	f04f 0320 	mov.w	r3, #32
    50de:	f3ef 8611 	mrs	r6, BASEPRI
    50e2:	f383 8812 	msr	BASEPRI_MAX, r3
    50e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    50ea:	4820      	ldr	r0, [pc, #128]	; (516c <z_impl_k_thread_suspend+0x9c>)
    50ec:	f7ff f912 	bl	4314 <z_spin_lock_valid>
    50f0:	b940      	cbnz	r0, 5104 <z_impl_k_thread_suspend+0x34>
    50f2:	491f      	ldr	r1, [pc, #124]	; (5170 <z_impl_k_thread_suspend+0xa0>)
    50f4:	481f      	ldr	r0, [pc, #124]	; (5174 <z_impl_k_thread_suspend+0xa4>)
    50f6:	2281      	movs	r2, #129	; 0x81
    50f8:	f003 fb6f 	bl	87da <printk>
    50fc:	2181      	movs	r1, #129	; 0x81
    50fe:	481c      	ldr	r0, [pc, #112]	; (5170 <z_impl_k_thread_suspend+0xa0>)
    5100:	f003 fbf6 	bl	88f0 <assert_post_action>
	z_spin_lock_set_owner(l);
    5104:	4819      	ldr	r0, [pc, #100]	; (516c <z_impl_k_thread_suspend+0x9c>)
    5106:	f7ff f921 	bl	434c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    510a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    510e:	7b63      	ldrb	r3, [r4, #13]
    5110:	2a00      	cmp	r2, #0
    5112:	da06      	bge.n	5122 <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    5118:	4621      	mov	r1, r4
    511a:	4817      	ldr	r0, [pc, #92]	; (5178 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    511c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    511e:	f7ff fc4d 	bl	49bc <z_priq_dumb_remove>
		update_cache(thread == _current);
    5122:	4d16      	ldr	r5, [pc, #88]	; (517c <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5124:	7b63      	ldrb	r3, [r4, #13]
    5126:	68a8      	ldr	r0, [r5, #8]
    5128:	f043 0310 	orr.w	r3, r3, #16
    512c:	7363      	strb	r3, [r4, #13]
    512e:	1b03      	subs	r3, r0, r4
    5130:	4258      	negs	r0, r3
    5132:	4158      	adcs	r0, r3
    5134:	f7ff fc7e 	bl	4a34 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5138:	480c      	ldr	r0, [pc, #48]	; (516c <z_impl_k_thread_suspend+0x9c>)
    513a:	f7ff f8f9 	bl	4330 <z_spin_unlock_valid>
    513e:	b940      	cbnz	r0, 5152 <z_impl_k_thread_suspend+0x82>
    5140:	490b      	ldr	r1, [pc, #44]	; (5170 <z_impl_k_thread_suspend+0xa0>)
    5142:	480c      	ldr	r0, [pc, #48]	; (5174 <z_impl_k_thread_suspend+0xa4>)
    5144:	22ac      	movs	r2, #172	; 0xac
    5146:	f003 fb48 	bl	87da <printk>
    514a:	21ac      	movs	r1, #172	; 0xac
    514c:	4808      	ldr	r0, [pc, #32]	; (5170 <z_impl_k_thread_suspend+0xa0>)
    514e:	f003 fbcf 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    5152:	f386 8811 	msr	BASEPRI, r6
    5156:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    515a:	68ab      	ldr	r3, [r5, #8]
    515c:	42a3      	cmp	r3, r4
    515e:	d103      	bne.n	5168 <z_impl_k_thread_suspend+0x98>
}
    5160:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    5164:	f003 befc 	b.w	8f60 <z_reschedule_unlocked>
}
    5168:	bd70      	pop	{r4, r5, r6, pc}
    516a:	bf00      	nop
    516c:	20000a64 	.word	0x20000a64
    5170:	0000973f 	.word	0x0000973f
    5174:	00009765 	.word	0x00009765
    5178:	20000a50 	.word	0x20000a50
    517c:	20000a30 	.word	0x20000a30

00005180 <k_sched_unlock>:
{
    5180:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5182:	f04f 0320 	mov.w	r3, #32
    5186:	f3ef 8511 	mrs	r5, BASEPRI
    518a:	f383 8812 	msr	BASEPRI_MAX, r3
    518e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5192:	4824      	ldr	r0, [pc, #144]	; (5224 <k_sched_unlock+0xa4>)
    5194:	f7ff f8be 	bl	4314 <z_spin_lock_valid>
    5198:	b940      	cbnz	r0, 51ac <k_sched_unlock+0x2c>
    519a:	4923      	ldr	r1, [pc, #140]	; (5228 <k_sched_unlock+0xa8>)
    519c:	4823      	ldr	r0, [pc, #140]	; (522c <k_sched_unlock+0xac>)
    519e:	2281      	movs	r2, #129	; 0x81
    51a0:	f003 fb1b 	bl	87da <printk>
    51a4:	2181      	movs	r1, #129	; 0x81
    51a6:	4820      	ldr	r0, [pc, #128]	; (5228 <k_sched_unlock+0xa8>)
    51a8:	f003 fba2 	bl	88f0 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    51ac:	4c20      	ldr	r4, [pc, #128]	; (5230 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
    51ae:	481d      	ldr	r0, [pc, #116]	; (5224 <k_sched_unlock+0xa4>)
    51b0:	f7ff f8cc 	bl	434c <z_spin_lock_set_owner>
    51b4:	68a2      	ldr	r2, [r4, #8]
    51b6:	7bd2      	ldrb	r2, [r2, #15]
    51b8:	b952      	cbnz	r2, 51d0 <k_sched_unlock+0x50>
    51ba:	491e      	ldr	r1, [pc, #120]	; (5234 <k_sched_unlock+0xb4>)
    51bc:	481b      	ldr	r0, [pc, #108]	; (522c <k_sched_unlock+0xac>)
    51be:	f240 3285 	movw	r2, #901	; 0x385
    51c2:	f003 fb0a 	bl	87da <printk>
    51c6:	f240 3185 	movw	r1, #901	; 0x385
    51ca:	481a      	ldr	r0, [pc, #104]	; (5234 <k_sched_unlock+0xb4>)
    51cc:	f003 fb90 	bl	88f0 <assert_post_action>
    51d0:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    51d4:	b153      	cbz	r3, 51ec <k_sched_unlock+0x6c>
    51d6:	4917      	ldr	r1, [pc, #92]	; (5234 <k_sched_unlock+0xb4>)
    51d8:	4814      	ldr	r0, [pc, #80]	; (522c <k_sched_unlock+0xac>)
    51da:	f240 3286 	movw	r2, #902	; 0x386
    51de:	f003 fafc 	bl	87da <printk>
    51e2:	f240 3186 	movw	r1, #902	; 0x386
    51e6:	4813      	ldr	r0, [pc, #76]	; (5234 <k_sched_unlock+0xb4>)
    51e8:	f003 fb82 	bl	88f0 <assert_post_action>
		++_current->base.sched_locked;
    51ec:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
    51ee:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    51f0:	7bd3      	ldrb	r3, [r2, #15]
    51f2:	3301      	adds	r3, #1
    51f4:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    51f6:	f7ff fc1d 	bl	4a34 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    51fa:	480a      	ldr	r0, [pc, #40]	; (5224 <k_sched_unlock+0xa4>)
    51fc:	f7ff f898 	bl	4330 <z_spin_unlock_valid>
    5200:	b940      	cbnz	r0, 5214 <k_sched_unlock+0x94>
    5202:	4909      	ldr	r1, [pc, #36]	; (5228 <k_sched_unlock+0xa8>)
    5204:	4809      	ldr	r0, [pc, #36]	; (522c <k_sched_unlock+0xac>)
    5206:	22ac      	movs	r2, #172	; 0xac
    5208:	f003 fae7 	bl	87da <printk>
    520c:	21ac      	movs	r1, #172	; 0xac
    520e:	4806      	ldr	r0, [pc, #24]	; (5228 <k_sched_unlock+0xa8>)
    5210:	f003 fb6e 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    5214:	f385 8811 	msr	BASEPRI, r5
    5218:	f3bf 8f6f 	isb	sy
}
    521c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    5220:	f003 be9e 	b.w	8f60 <z_reschedule_unlocked>
    5224:	20000a64 	.word	0x20000a64
    5228:	0000973f 	.word	0x0000973f
    522c:	00009765 	.word	0x00009765
    5230:	20000a30 	.word	0x20000a30
    5234:	0000a5e2 	.word	0x0000a5e2

00005238 <z_unpend_first_thread>:
{
    5238:	b538      	push	{r3, r4, r5, lr}
    523a:	4604      	mov	r4, r0
	__asm__ volatile(
    523c:	f04f 0320 	mov.w	r3, #32
    5240:	f3ef 8511 	mrs	r5, BASEPRI
    5244:	f383 8812 	msr	BASEPRI_MAX, r3
    5248:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    524c:	4816      	ldr	r0, [pc, #88]	; (52a8 <z_unpend_first_thread+0x70>)
    524e:	f7ff f861 	bl	4314 <z_spin_lock_valid>
    5252:	b940      	cbnz	r0, 5266 <z_unpend_first_thread+0x2e>
    5254:	4915      	ldr	r1, [pc, #84]	; (52ac <z_unpend_first_thread+0x74>)
    5256:	4816      	ldr	r0, [pc, #88]	; (52b0 <z_unpend_first_thread+0x78>)
    5258:	2281      	movs	r2, #129	; 0x81
    525a:	f003 fabe 	bl	87da <printk>
    525e:	2181      	movs	r1, #129	; 0x81
    5260:	4812      	ldr	r0, [pc, #72]	; (52ac <z_unpend_first_thread+0x74>)
    5262:	f003 fb45 	bl	88f0 <assert_post_action>
	z_spin_lock_set_owner(l);
    5266:	4810      	ldr	r0, [pc, #64]	; (52a8 <z_unpend_first_thread+0x70>)
    5268:	f7ff f870 	bl	434c <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    526c:	4620      	mov	r0, r4
    526e:	f003 fe81 	bl	8f74 <z_priq_dumb_best>
		if (thread != NULL) {
    5272:	4604      	mov	r4, r0
    5274:	b128      	cbz	r0, 5282 <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
    5276:	f7ff fbbf 	bl	49f8 <unpend_thread_no_timeout>
    527a:	f104 0018 	add.w	r0, r4, #24
    527e:	f000 fb27 	bl	58d0 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5282:	4809      	ldr	r0, [pc, #36]	; (52a8 <z_unpend_first_thread+0x70>)
    5284:	f7ff f854 	bl	4330 <z_spin_unlock_valid>
    5288:	b940      	cbnz	r0, 529c <z_unpend_first_thread+0x64>
    528a:	4908      	ldr	r1, [pc, #32]	; (52ac <z_unpend_first_thread+0x74>)
    528c:	4808      	ldr	r0, [pc, #32]	; (52b0 <z_unpend_first_thread+0x78>)
    528e:	22ac      	movs	r2, #172	; 0xac
    5290:	f003 faa3 	bl	87da <printk>
    5294:	21ac      	movs	r1, #172	; 0xac
    5296:	4805      	ldr	r0, [pc, #20]	; (52ac <z_unpend_first_thread+0x74>)
    5298:	f003 fb2a 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    529c:	f385 8811 	msr	BASEPRI, r5
    52a0:	f3bf 8f6f 	isb	sy
}
    52a4:	4620      	mov	r0, r4
    52a6:	bd38      	pop	{r3, r4, r5, pc}
    52a8:	20000a64 	.word	0x20000a64
    52ac:	0000973f 	.word	0x0000973f
    52b0:	00009765 	.word	0x00009765

000052b4 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    52b4:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    52b6:	4b04      	ldr	r3, [pc, #16]	; (52c8 <z_sched_init+0x14>)
    52b8:	4608      	mov	r0, r1
    52ba:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    52be:	e9c3 2208 	strd	r2, r2, [r3, #32]
    52c2:	f7ff ba9d 	b.w	4800 <k_sched_time_slice_set>
    52c6:	bf00      	nop
    52c8:	20000a30 	.word	0x20000a30

000052cc <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    52cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52ce:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    52d2:	b153      	cbz	r3, 52ea <z_impl_k_yield+0x1e>
    52d4:	4939      	ldr	r1, [pc, #228]	; (53bc <z_impl_k_yield+0xf0>)
    52d6:	483a      	ldr	r0, [pc, #232]	; (53c0 <z_impl_k_yield+0xf4>)
    52d8:	f240 42dc 	movw	r2, #1244	; 0x4dc
    52dc:	f003 fa7d 	bl	87da <printk>
    52e0:	f240 41dc 	movw	r1, #1244	; 0x4dc
    52e4:	4835      	ldr	r0, [pc, #212]	; (53bc <z_impl_k_yield+0xf0>)
    52e6:	f003 fb03 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    52ea:	f04f 0320 	mov.w	r3, #32
    52ee:	f3ef 8611 	mrs	r6, BASEPRI
    52f2:	f383 8812 	msr	BASEPRI_MAX, r3
    52f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    52fa:	4832      	ldr	r0, [pc, #200]	; (53c4 <z_impl_k_yield+0xf8>)
    52fc:	f7ff f80a 	bl	4314 <z_spin_lock_valid>
    5300:	b940      	cbnz	r0, 5314 <z_impl_k_yield+0x48>
    5302:	4931      	ldr	r1, [pc, #196]	; (53c8 <z_impl_k_yield+0xfc>)
    5304:	482e      	ldr	r0, [pc, #184]	; (53c0 <z_impl_k_yield+0xf4>)
    5306:	2281      	movs	r2, #129	; 0x81
    5308:	f003 fa67 	bl	87da <printk>
    530c:	2181      	movs	r1, #129	; 0x81
    530e:	482e      	ldr	r0, [pc, #184]	; (53c8 <z_impl_k_yield+0xfc>)
    5310:	f003 faee 	bl	88f0 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    5314:	4d2d      	ldr	r5, [pc, #180]	; (53cc <z_impl_k_yield+0x100>)
	z_spin_lock_set_owner(l);
    5316:	482b      	ldr	r0, [pc, #172]	; (53c4 <z_impl_k_yield+0xf8>)
    5318:	f7ff f818 	bl	434c <z_spin_lock_set_owner>
    531c:	68a9      	ldr	r1, [r5, #8]
	_priq_run_remove(thread_runq(thread), thread);
    531e:	f105 0020 	add.w	r0, r5, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5322:	7b4b      	ldrb	r3, [r1, #13]
    5324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5328:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    532a:	f7ff fb47 	bl	49bc <z_priq_dumb_remove>
	}
	queue_thread(_current);
    532e:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    5330:	7b63      	ldrb	r3, [r4, #13]
    5332:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5336:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5338:	4b25      	ldr	r3, [pc, #148]	; (53d0 <z_impl_k_yield+0x104>)
    533a:	429c      	cmp	r4, r3
    533c:	d108      	bne.n	5350 <z_impl_k_yield+0x84>
    533e:	491f      	ldr	r1, [pc, #124]	; (53bc <z_impl_k_yield+0xf0>)
    5340:	481f      	ldr	r0, [pc, #124]	; (53c0 <z_impl_k_yield+0xf4>)
    5342:	22ba      	movs	r2, #186	; 0xba
    5344:	f003 fa49 	bl	87da <printk>
    5348:	21ba      	movs	r1, #186	; 0xba
    534a:	481c      	ldr	r0, [pc, #112]	; (53bc <z_impl_k_yield+0xf0>)
    534c:	f003 fad0 	bl	88f0 <assert_post_action>
	return list->head == list;
    5350:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5352:	4820      	ldr	r0, [pc, #128]	; (53d4 <z_impl_k_yield+0x108>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5354:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5356:	4283      	cmp	r3, r0
    5358:	bf08      	it	eq
    535a:	2300      	moveq	r3, #0
    535c:	2b00      	cmp	r3, #0
    535e:	bf38      	it	cc
    5360:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5362:	b333      	cbz	r3, 53b2 <z_impl_k_yield+0xe6>
	int32_t b1 = thread_1->base.prio;
    5364:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5368:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    536c:	4297      	cmp	r7, r2
    536e:	d01c      	beq.n	53aa <z_impl_k_yield+0xde>
		return b2 - b1;
    5370:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    5372:	2a00      	cmp	r2, #0
    5374:	dd19      	ble.n	53aa <z_impl_k_yield+0xde>
	sys_dnode_t *const prev = successor->prev;
    5376:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5378:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    537c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    537e:	605c      	str	r4, [r3, #4]
	update_cache(1);
    5380:	2001      	movs	r0, #1
    5382:	f7ff fb57 	bl	4a34 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5386:	480f      	ldr	r0, [pc, #60]	; (53c4 <z_impl_k_yield+0xf8>)
    5388:	f7fe ffd2 	bl	4330 <z_spin_unlock_valid>
    538c:	b940      	cbnz	r0, 53a0 <z_impl_k_yield+0xd4>
    538e:	490e      	ldr	r1, [pc, #56]	; (53c8 <z_impl_k_yield+0xfc>)
    5390:	480b      	ldr	r0, [pc, #44]	; (53c0 <z_impl_k_yield+0xf4>)
    5392:	22c3      	movs	r2, #195	; 0xc3
    5394:	f003 fa21 	bl	87da <printk>
    5398:	21c3      	movs	r1, #195	; 0xc3
    539a:	480b      	ldr	r0, [pc, #44]	; (53c8 <z_impl_k_yield+0xfc>)
    539c:	f003 faa8 	bl	88f0 <assert_post_action>
    53a0:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    53a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    53a6:	f7fc b9fd 	b.w	17a4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    53aa:	428b      	cmp	r3, r1
    53ac:	d001      	beq.n	53b2 <z_impl_k_yield+0xe6>
    53ae:	681b      	ldr	r3, [r3, #0]
    53b0:	e7d7      	b.n	5362 <z_impl_k_yield+0x96>
	node->prev = tail;
    53b2:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    53b6:	600c      	str	r4, [r1, #0]
	list->tail = node;
    53b8:	626c      	str	r4, [r5, #36]	; 0x24
}
    53ba:	e7e1      	b.n	5380 <z_impl_k_yield+0xb4>
    53bc:	0000a5e2 	.word	0x0000a5e2
    53c0:	00009765 	.word	0x00009765
    53c4:	20000a64 	.word	0x20000a64
    53c8:	0000973f 	.word	0x0000973f
    53cc:	20000a30 	.word	0x20000a30
    53d0:	20000190 	.word	0x20000190
    53d4:	20000a50 	.word	0x20000a50

000053d8 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    53d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    53dc:	4604      	mov	r4, r0
    53de:	460d      	mov	r5, r1
    53e0:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    53e4:	b153      	cbz	r3, 53fc <z_tick_sleep+0x24>
    53e6:	493c      	ldr	r1, [pc, #240]	; (54d8 <z_tick_sleep+0x100>)
    53e8:	483c      	ldr	r0, [pc, #240]	; (54dc <z_tick_sleep+0x104>)
    53ea:	f44f 629f 	mov.w	r2, #1272	; 0x4f8
    53ee:	f003 f9f4 	bl	87da <printk>
    53f2:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
    53f6:	4838      	ldr	r0, [pc, #224]	; (54d8 <z_tick_sleep+0x100>)
    53f8:	f003 fa7a 	bl	88f0 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    53fc:	ea54 0305 	orrs.w	r3, r4, r5
    5400:	d104      	bne.n	540c <z_tick_sleep+0x34>
	z_impl_k_yield();
    5402:	f7ff ff63 	bl	52cc <z_impl_k_yield>
		k_yield();
		return 0;
    5406:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    5408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    540c:	f06f 0301 	mvn.w	r3, #1
    5410:	1b1e      	subs	r6, r3, r4
    5412:	f04f 33ff 	mov.w	r3, #4294967295
    5416:	eb63 0705 	sbc.w	r7, r3, r5
    541a:	2e01      	cmp	r6, #1
    541c:	f177 0300 	sbcs.w	r3, r7, #0
    5420:	da56      	bge.n	54d0 <z_tick_sleep+0xf8>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    5422:	f003 fdb1 	bl	8f88 <sys_clock_tick_get_32>
    5426:	1906      	adds	r6, r0, r4
    5428:	f04f 0320 	mov.w	r3, #32
    542c:	f3ef 8811 	mrs	r8, BASEPRI
    5430:	f383 8812 	msr	BASEPRI_MAX, r3
    5434:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5438:	4829      	ldr	r0, [pc, #164]	; (54e0 <z_tick_sleep+0x108>)
    543a:	f7fe ff6b 	bl	4314 <z_spin_lock_valid>
    543e:	b940      	cbnz	r0, 5452 <z_tick_sleep+0x7a>
    5440:	4928      	ldr	r1, [pc, #160]	; (54e4 <z_tick_sleep+0x10c>)
    5442:	4826      	ldr	r0, [pc, #152]	; (54dc <z_tick_sleep+0x104>)
    5444:	2281      	movs	r2, #129	; 0x81
    5446:	f003 f9c8 	bl	87da <printk>
    544a:	2181      	movs	r1, #129	; 0x81
    544c:	4825      	ldr	r0, [pc, #148]	; (54e4 <z_tick_sleep+0x10c>)
    544e:	f003 fa4f 	bl	88f0 <assert_post_action>
	pending_current = _current;
    5452:	4f25      	ldr	r7, [pc, #148]	; (54e8 <z_tick_sleep+0x110>)
	z_spin_lock_set_owner(l);
    5454:	4822      	ldr	r0, [pc, #136]	; (54e0 <z_tick_sleep+0x108>)
    5456:	f7fe ff79 	bl	434c <z_spin_lock_set_owner>
    545a:	68b8      	ldr	r0, [r7, #8]
    545c:	4b23      	ldr	r3, [pc, #140]	; (54ec <z_tick_sleep+0x114>)
    545e:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    5460:	f7ff fce0 	bl	4e24 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    5464:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5466:	4622      	mov	r2, r4
    5468:	462b      	mov	r3, r5
    546a:	3018      	adds	r0, #24
    546c:	4920      	ldr	r1, [pc, #128]	; (54f0 <z_tick_sleep+0x118>)
    546e:	f000 f975 	bl	575c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    5472:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5474:	481a      	ldr	r0, [pc, #104]	; (54e0 <z_tick_sleep+0x108>)
    5476:	7b53      	ldrb	r3, [r2, #13]
    5478:	f043 0310 	orr.w	r3, r3, #16
    547c:	7353      	strb	r3, [r2, #13]
    547e:	f7fe ff57 	bl	4330 <z_spin_unlock_valid>
    5482:	b940      	cbnz	r0, 5496 <z_tick_sleep+0xbe>
    5484:	4917      	ldr	r1, [pc, #92]	; (54e4 <z_tick_sleep+0x10c>)
    5486:	4815      	ldr	r0, [pc, #84]	; (54dc <z_tick_sleep+0x104>)
    5488:	22c3      	movs	r2, #195	; 0xc3
    548a:	f003 f9a6 	bl	87da <printk>
    548e:	21c3      	movs	r1, #195	; 0xc3
    5490:	4814      	ldr	r0, [pc, #80]	; (54e4 <z_tick_sleep+0x10c>)
    5492:	f003 fa2d 	bl	88f0 <assert_post_action>
    5496:	4640      	mov	r0, r8
    5498:	f7fc f984 	bl	17a4 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    549c:	68bb      	ldr	r3, [r7, #8]
    549e:	7b5b      	ldrb	r3, [r3, #13]
    54a0:	06db      	lsls	r3, r3, #27
    54a2:	d50a      	bpl.n	54ba <z_tick_sleep+0xe2>
    54a4:	490c      	ldr	r1, [pc, #48]	; (54d8 <z_tick_sleep+0x100>)
    54a6:	480d      	ldr	r0, [pc, #52]	; (54dc <z_tick_sleep+0x104>)
    54a8:	f240 5219 	movw	r2, #1305	; 0x519
    54ac:	f003 f995 	bl	87da <printk>
    54b0:	f240 5119 	movw	r1, #1305	; 0x519
    54b4:	4808      	ldr	r0, [pc, #32]	; (54d8 <z_tick_sleep+0x100>)
    54b6:	f003 fa1b 	bl	88f0 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    54ba:	f003 fd65 	bl	8f88 <sys_clock_tick_get_32>
    54be:	1a30      	subs	r0, r6, r0
    54c0:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
    54c4:	2801      	cmp	r0, #1
    54c6:	f171 0300 	sbcs.w	r3, r1, #0
    54ca:	bfb8      	it	lt
    54cc:	2000      	movlt	r0, #0
    54ce:	e79b      	b.n	5408 <z_tick_sleep+0x30>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    54d0:	f06f 0601 	mvn.w	r6, #1
    54d4:	1b36      	subs	r6, r6, r4
    54d6:	e7a7      	b.n	5428 <z_tick_sleep+0x50>
    54d8:	0000a5e2 	.word	0x0000a5e2
    54dc:	00009765 	.word	0x00009765
    54e0:	20000a64 	.word	0x20000a64
    54e4:	0000973f 	.word	0x0000973f
    54e8:	20000a30 	.word	0x20000a30
    54ec:	20000a60 	.word	0x20000a60
    54f0:	00004d95 	.word	0x00004d95

000054f4 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    54f4:	b538      	push	{r3, r4, r5, lr}
    54f6:	4604      	mov	r4, r0
    54f8:	460d      	mov	r5, r1
    54fa:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    54fe:	b153      	cbz	r3, 5516 <z_impl_k_sleep+0x22>
    5500:	4911      	ldr	r1, [pc, #68]	; (5548 <z_impl_k_sleep+0x54>)
    5502:	4812      	ldr	r0, [pc, #72]	; (554c <z_impl_k_sleep+0x58>)
    5504:	f44f 62a5 	mov.w	r2, #1320	; 0x528
    5508:	f003 f967 	bl	87da <printk>
    550c:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    5510:	480d      	ldr	r0, [pc, #52]	; (5548 <z_impl_k_sleep+0x54>)
    5512:	f003 f9ed 	bl	88f0 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5516:	1c6b      	adds	r3, r5, #1
    5518:	bf08      	it	eq
    551a:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    551e:	d106      	bne.n	552e <z_impl_k_sleep+0x3a>
		k_thread_suspend(_current);
    5520:	4b0b      	ldr	r3, [pc, #44]	; (5550 <z_impl_k_sleep+0x5c>)
    5522:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    5524:	f7ff fdd4 	bl	50d0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    5528:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    552c:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    552e:	4620      	mov	r0, r4
    5530:	4629      	mov	r1, r5
    5532:	f7ff ff51 	bl	53d8 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    5536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    553a:	fb80 3403 	smull	r3, r4, r0, r3
    553e:	0bd8      	lsrs	r0, r3, #15
    5540:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
    5544:	e7f2      	b.n	552c <z_impl_k_sleep+0x38>
    5546:	bf00      	nop
    5548:	0000a5e2 	.word	0x0000a5e2
    554c:	00009765 	.word	0x00009765
    5550:	20000a30 	.word	0x20000a30

00005554 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    5554:	4b01      	ldr	r3, [pc, #4]	; (555c <z_impl_z_current_get+0x8>)
    5556:	6898      	ldr	r0, [r3, #8]
    5558:	4770      	bx	lr
    555a:	bf00      	nop
    555c:	20000a30 	.word	0x20000a30

00005560 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    5560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5564:	4604      	mov	r4, r0
    5566:	f04f 0320 	mov.w	r3, #32
    556a:	f3ef 8611 	mrs	r6, BASEPRI
    556e:	f383 8812 	msr	BASEPRI_MAX, r3
    5572:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5576:	483e      	ldr	r0, [pc, #248]	; (5670 <z_thread_abort+0x110>)
    5578:	f7fe fecc 	bl	4314 <z_spin_lock_valid>
    557c:	b940      	cbnz	r0, 5590 <z_thread_abort+0x30>
    557e:	493d      	ldr	r1, [pc, #244]	; (5674 <z_thread_abort+0x114>)
    5580:	483d      	ldr	r0, [pc, #244]	; (5678 <z_thread_abort+0x118>)
    5582:	2281      	movs	r2, #129	; 0x81
    5584:	f003 f929 	bl	87da <printk>
    5588:	2181      	movs	r1, #129	; 0x81
    558a:	483a      	ldr	r0, [pc, #232]	; (5674 <z_thread_abort+0x114>)
    558c:	f003 f9b0 	bl	88f0 <assert_post_action>
	z_spin_lock_set_owner(l);
    5590:	4837      	ldr	r0, [pc, #220]	; (5670 <z_thread_abort+0x110>)
    5592:	f7fe fedb 	bl	434c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    5596:	7b63      	ldrb	r3, [r4, #13]
    5598:	071a      	lsls	r2, r3, #28
    559a:	d512      	bpl.n	55c2 <z_thread_abort+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    559c:	4834      	ldr	r0, [pc, #208]	; (5670 <z_thread_abort+0x110>)
    559e:	f7fe fec7 	bl	4330 <z_spin_unlock_valid>
    55a2:	b940      	cbnz	r0, 55b6 <z_thread_abort+0x56>
    55a4:	4933      	ldr	r1, [pc, #204]	; (5674 <z_thread_abort+0x114>)
    55a6:	4834      	ldr	r0, [pc, #208]	; (5678 <z_thread_abort+0x118>)
    55a8:	22ac      	movs	r2, #172	; 0xac
    55aa:	f003 f916 	bl	87da <printk>
    55ae:	21ac      	movs	r1, #172	; 0xac
    55b0:	4830      	ldr	r0, [pc, #192]	; (5674 <z_thread_abort+0x114>)
    55b2:	f003 f99d 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    55b6:	f386 8811 	msr	BASEPRI, r6
    55ba:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    55be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    55c2:	f023 0220 	bic.w	r2, r3, #32
    55c6:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    55ca:	09d2      	lsrs	r2, r2, #7
    55cc:	d138      	bne.n	5640 <z_thread_abort+0xe0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    55ce:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    55d0:	68a3      	ldr	r3, [r4, #8]
    55d2:	b113      	cbz	r3, 55da <z_thread_abort+0x7a>
			unpend_thread_no_timeout(thread);
    55d4:	4620      	mov	r0, r4
    55d6:	f7ff fa0f 	bl	49f8 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    55da:	f104 0018 	add.w	r0, r4, #24
    55de:	f000 f977 	bl	58d0 <z_abort_timeout>
    55e2:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    55e6:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    55ea:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    55ec:	42bd      	cmp	r5, r7
    55ee:	d000      	beq.n	55f2 <z_thread_abort+0x92>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    55f0:	bb85      	cbnz	r5, 5654 <z_thread_abort+0xf4>
		update_cache(1);
    55f2:	2001      	movs	r0, #1
    55f4:	f7ff fa1e 	bl	4a34 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    55f8:	4b20      	ldr	r3, [pc, #128]	; (567c <z_thread_abort+0x11c>)
    55fa:	689b      	ldr	r3, [r3, #8]
    55fc:	42a3      	cmp	r3, r4
    55fe:	d1cd      	bne.n	559c <z_thread_abort+0x3c>
    5600:	f3ef 8305 	mrs	r3, IPSR
    5604:	2b00      	cmp	r3, #0
    5606:	d1c9      	bne.n	559c <z_thread_abort+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5608:	4819      	ldr	r0, [pc, #100]	; (5670 <z_thread_abort+0x110>)
    560a:	f7fe fe91 	bl	4330 <z_spin_unlock_valid>
    560e:	b940      	cbnz	r0, 5622 <z_thread_abort+0xc2>
    5610:	4918      	ldr	r1, [pc, #96]	; (5674 <z_thread_abort+0x114>)
    5612:	4819      	ldr	r0, [pc, #100]	; (5678 <z_thread_abort+0x118>)
    5614:	22c3      	movs	r2, #195	; 0xc3
    5616:	f003 f8e0 	bl	87da <printk>
    561a:	21c3      	movs	r1, #195	; 0xc3
    561c:	4815      	ldr	r0, [pc, #84]	; (5674 <z_thread_abort+0x114>)
    561e:	f003 f967 	bl	88f0 <assert_post_action>
    5622:	4630      	mov	r0, r6
    5624:	f7fc f8be 	bl	17a4 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    5628:	f240 624b 	movw	r2, #1611	; 0x64b
    562c:	4914      	ldr	r1, [pc, #80]	; (5680 <z_thread_abort+0x120>)
    562e:	4812      	ldr	r0, [pc, #72]	; (5678 <z_thread_abort+0x118>)
    5630:	f003 f8d3 	bl	87da <printk>
    5634:	f240 614b 	movw	r1, #1611	; 0x64b
    5638:	4811      	ldr	r0, [pc, #68]	; (5680 <z_thread_abort+0x120>)
    563a:	f003 f959 	bl	88f0 <assert_post_action>
    563e:	e7ad      	b.n	559c <z_thread_abort+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5640:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    5644:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    5648:	4621      	mov	r1, r4
    564a:	480e      	ldr	r0, [pc, #56]	; (5684 <z_thread_abort+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    564c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    564e:	f7ff f9b5 	bl	49bc <z_priq_dumb_remove>
}
    5652:	e7bd      	b.n	55d0 <z_thread_abort+0x70>
		unpend_thread_no_timeout(thread);
    5654:	4628      	mov	r0, r5
    5656:	f7ff f9cf 	bl	49f8 <unpend_thread_no_timeout>
    565a:	f105 0018 	add.w	r0, r5, #24
    565e:	f000 f937 	bl	58d0 <z_abort_timeout>
		ready_thread(thread);
    5662:	4628      	mov	r0, r5
    5664:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    5668:	f7ff face 	bl	4c08 <ready_thread>
    566c:	e7bd      	b.n	55ea <z_thread_abort+0x8a>
    566e:	bf00      	nop
    5670:	20000a64 	.word	0x20000a64
    5674:	0000973f 	.word	0x0000973f
    5678:	00009765 	.word	0x00009765
    567c:	20000a30 	.word	0x20000a30
    5680:	0000a5e2 	.word	0x0000a5e2
    5684:	20000a50 	.word	0x20000a50

00005688 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    5688:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    568a:	4806      	ldr	r0, [pc, #24]	; (56a4 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    568c:	4a06      	ldr	r2, [pc, #24]	; (56a8 <z_data_copy+0x20>)
    568e:	4907      	ldr	r1, [pc, #28]	; (56ac <z_data_copy+0x24>)
    5690:	1a12      	subs	r2, r2, r0
    5692:	f003 f9dd 	bl	8a50 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    5696:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    569a:	4a05      	ldr	r2, [pc, #20]	; (56b0 <z_data_copy+0x28>)
    569c:	4905      	ldr	r1, [pc, #20]	; (56b4 <z_data_copy+0x2c>)
    569e:	4806      	ldr	r0, [pc, #24]	; (56b8 <z_data_copy+0x30>)
    56a0:	f003 b9d6 	b.w	8a50 <memcpy>
    56a4:	20000000 	.word	0x20000000
    56a8:	2000018c 	.word	0x2000018c
    56ac:	0000a664 	.word	0x0000a664
    56b0:	00000000 	.word	0x00000000
    56b4:	0000a664 	.word	0x0000a664
    56b8:	20000000 	.word	0x20000000

000056bc <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    56bc:	4b03      	ldr	r3, [pc, #12]	; (56cc <elapsed+0x10>)
    56be:	681b      	ldr	r3, [r3, #0]
    56c0:	b90b      	cbnz	r3, 56c6 <elapsed+0xa>
    56c2:	f7fd bc77 	b.w	2fb4 <sys_clock_elapsed>
}
    56c6:	2000      	movs	r0, #0
    56c8:	4770      	bx	lr
    56ca:	bf00      	nop
    56cc:	20000a70 	.word	0x20000a70

000056d0 <remove_timeout>:
{
    56d0:	b530      	push	{r4, r5, lr}
    56d2:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    56d4:	b168      	cbz	r0, 56f2 <remove_timeout+0x22>
    56d6:	4a0a      	ldr	r2, [pc, #40]	; (5700 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    56d8:	6852      	ldr	r2, [r2, #4]
    56da:	4290      	cmp	r0, r2
    56dc:	d009      	beq.n	56f2 <remove_timeout+0x22>
	if (next(t) != NULL) {
    56de:	b143      	cbz	r3, 56f2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    56e0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    56e4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    56e8:	1912      	adds	r2, r2, r4
    56ea:	eb45 0101 	adc.w	r1, r5, r1
    56ee:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    56f2:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    56f4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    56f6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    56f8:	2300      	movs	r3, #0
	node->prev = NULL;
    56fa:	e9c0 3300 	strd	r3, r3, [r0]
}
    56fe:	bd30      	pop	{r4, r5, pc}
    5700:	200000b0 	.word	0x200000b0

00005704 <next_timeout>:

static int32_t next_timeout(void)
{
    5704:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    5706:	4b13      	ldr	r3, [pc, #76]	; (5754 <next_timeout+0x50>)
    5708:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    570a:	429c      	cmp	r4, r3
    570c:	bf08      	it	eq
    570e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    5710:	f7ff ffd4 	bl	56bc <elapsed>
    5714:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    5716:	b1bc      	cbz	r4, 5748 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    5718:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    571c:	1b40      	subs	r0, r0, r5
    571e:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    5722:	2801      	cmp	r0, #1
    5724:	f171 0300 	sbcs.w	r3, r1, #0
    5728:	db11      	blt.n	574e <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    572a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    572e:	2300      	movs	r3, #0
    5730:	4282      	cmp	r2, r0
    5732:	eb73 0401 	sbcs.w	r4, r3, r1
    5736:	da00      	bge.n	573a <next_timeout+0x36>
    5738:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    573a:	4b07      	ldr	r3, [pc, #28]	; (5758 <next_timeout+0x54>)
    573c:	691b      	ldr	r3, [r3, #16]
    573e:	b113      	cbz	r3, 5746 <next_timeout+0x42>
    5740:	4298      	cmp	r0, r3
    5742:	bfa8      	it	ge
    5744:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    5746:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    5748:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    574c:	e7f5      	b.n	573a <next_timeout+0x36>
    574e:	2000      	movs	r0, #0
    5750:	e7f3      	b.n	573a <next_timeout+0x36>
    5752:	bf00      	nop
    5754:	200000b0 	.word	0x200000b0
    5758:	20000a30 	.word	0x20000a30

0000575c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    575c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5760:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5762:	1c6b      	adds	r3, r5, #1
    5764:	bf08      	it	eq
    5766:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    576a:	4682      	mov	sl, r0
    576c:	468b      	mov	fp, r1
    576e:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5770:	f000 809c 	beq.w	58ac <z_add_timeout+0x150>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    5774:	6803      	ldr	r3, [r0, #0]
    5776:	b143      	cbz	r3, 578a <z_add_timeout+0x2e>
    5778:	494e      	ldr	r1, [pc, #312]	; (58b4 <z_add_timeout+0x158>)
    577a:	484f      	ldr	r0, [pc, #316]	; (58b8 <z_add_timeout+0x15c>)
    577c:	225d      	movs	r2, #93	; 0x5d
    577e:	f003 f82c 	bl	87da <printk>
    5782:	215d      	movs	r1, #93	; 0x5d
    5784:	484b      	ldr	r0, [pc, #300]	; (58b4 <z_add_timeout+0x158>)
    5786:	f003 f8b3 	bl	88f0 <assert_post_action>
	to->fn = fn;
    578a:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
    578e:	f04f 0320 	mov.w	r3, #32
    5792:	f3ef 8b11 	mrs	fp, BASEPRI
    5796:	f383 8812 	msr	BASEPRI_MAX, r3
    579a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    579e:	4847      	ldr	r0, [pc, #284]	; (58bc <z_add_timeout+0x160>)
    57a0:	f7fe fdb8 	bl	4314 <z_spin_lock_valid>
    57a4:	b940      	cbnz	r0, 57b8 <z_add_timeout+0x5c>
    57a6:	4946      	ldr	r1, [pc, #280]	; (58c0 <z_add_timeout+0x164>)
    57a8:	4843      	ldr	r0, [pc, #268]	; (58b8 <z_add_timeout+0x15c>)
    57aa:	2281      	movs	r2, #129	; 0x81
    57ac:	f003 f815 	bl	87da <printk>
    57b0:	2181      	movs	r1, #129	; 0x81
    57b2:	4843      	ldr	r0, [pc, #268]	; (58c0 <z_add_timeout+0x164>)
    57b4:	f003 f89c 	bl	88f0 <assert_post_action>
	z_spin_lock_set_owner(l);
    57b8:	4840      	ldr	r0, [pc, #256]	; (58bc <z_add_timeout+0x160>)
    57ba:	f7fe fdc7 	bl	434c <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    57be:	f06f 0301 	mvn.w	r3, #1
    57c2:	f04f 32ff 	mov.w	r2, #4294967295
    57c6:	ebb3 0804 	subs.w	r8, r3, r4
    57ca:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    57ce:	f1b8 0f00 	cmp.w	r8, #0
    57d2:	f179 0100 	sbcs.w	r1, r9, #0
    57d6:	db1c      	blt.n	5812 <z_add_timeout+0xb6>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    57d8:	483a      	ldr	r0, [pc, #232]	; (58c4 <z_add_timeout+0x168>)
    57da:	e9d0 1000 	ldrd	r1, r0, [r0]
    57de:	1a5b      	subs	r3, r3, r1
    57e0:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    57e4:	1b1e      	subs	r6, r3, r4
    57e6:	eb62 0705 	sbc.w	r7, r2, r5
    57ea:	2e01      	cmp	r6, #1
    57ec:	f177 0300 	sbcs.w	r3, r7, #0
    57f0:	bfbc      	itt	lt
    57f2:	2601      	movlt	r6, #1
    57f4:	2700      	movlt	r7, #0
    57f6:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
    57fa:	4a33      	ldr	r2, [pc, #204]	; (58c8 <z_add_timeout+0x16c>)
    57fc:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5800:	4293      	cmp	r3, r2
    5802:	d11d      	bne.n	5840 <z_add_timeout+0xe4>
	node->prev = tail;
    5804:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
    5808:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
    580c:	f8c2 a004 	str.w	sl, [r2, #4]
}
    5810:	e02c      	b.n	586c <z_add_timeout+0x110>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    5812:	f7ff ff53 	bl	56bc <elapsed>
    5816:	1c63      	adds	r3, r4, #1
    5818:	9300      	str	r3, [sp, #0]
    581a:	f145 0300 	adc.w	r3, r5, #0
    581e:	9301      	str	r3, [sp, #4]
    5820:	e9dd 2300 	ldrd	r2, r3, [sp]
    5824:	1812      	adds	r2, r2, r0
    5826:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    582a:	e9ca 2304 	strd	r2, r3, [sl, #16]
    582e:	e7e4      	b.n	57fa <z_add_timeout+0x9e>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    5830:	1be0      	subs	r0, r4, r7
    5832:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
    5836:	42b3      	cmp	r3, r6
    5838:	e9ca 0104 	strd	r0, r1, [sl, #16]
    583c:	d0e2      	beq.n	5804 <z_add_timeout+0xa8>
    583e:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    5840:	2b00      	cmp	r3, #0
    5842:	d0df      	beq.n	5804 <z_add_timeout+0xa8>
			if (t->dticks > to->dticks) {
    5844:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    5848:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    584c:	42bc      	cmp	r4, r7
    584e:	eb75 0108 	sbcs.w	r1, r5, r8
    5852:	daed      	bge.n	5830 <z_add_timeout+0xd4>
				t->dticks -= to->dticks;
    5854:	1b38      	subs	r0, r7, r4
    5856:	eb68 0105 	sbc.w	r1, r8, r5
    585a:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    585e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    5860:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
    5864:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    5868:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
    586c:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    586e:	4293      	cmp	r3, r2
    5870:	d00b      	beq.n	588a <z_add_timeout+0x12e>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5872:	459a      	cmp	sl, r3
    5874:	d109      	bne.n	588a <z_add_timeout+0x12e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    5876:	f7ff ff45 	bl	5704 <next_timeout>

			if (next_time == 0 ||
    587a:	b118      	cbz	r0, 5884 <z_add_timeout+0x128>
			    _current_cpu->slice_ticks != next_time) {
    587c:	4b13      	ldr	r3, [pc, #76]	; (58cc <z_add_timeout+0x170>)
			if (next_time == 0 ||
    587e:	691b      	ldr	r3, [r3, #16]
    5880:	4283      	cmp	r3, r0
    5882:	d002      	beq.n	588a <z_add_timeout+0x12e>
				sys_clock_set_timeout(next_time, false);
    5884:	2100      	movs	r1, #0
    5886:	f7fd fb0d 	bl	2ea4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    588a:	480c      	ldr	r0, [pc, #48]	; (58bc <z_add_timeout+0x160>)
    588c:	f7fe fd50 	bl	4330 <z_spin_unlock_valid>
    5890:	b940      	cbnz	r0, 58a4 <z_add_timeout+0x148>
    5892:	490b      	ldr	r1, [pc, #44]	; (58c0 <z_add_timeout+0x164>)
    5894:	4808      	ldr	r0, [pc, #32]	; (58b8 <z_add_timeout+0x15c>)
    5896:	22ac      	movs	r2, #172	; 0xac
    5898:	f002 ff9f 	bl	87da <printk>
    589c:	21ac      	movs	r1, #172	; 0xac
    589e:	4808      	ldr	r0, [pc, #32]	; (58c0 <z_add_timeout+0x164>)
    58a0:	f003 f826 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    58a4:	f38b 8811 	msr	BASEPRI, fp
    58a8:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    58ac:	b003      	add	sp, #12
    58ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    58b2:	bf00      	nop
    58b4:	0000a604 	.word	0x0000a604
    58b8:	00009765 	.word	0x00009765
    58bc:	20000a74 	.word	0x20000a74
    58c0:	0000973f 	.word	0x0000973f
    58c4:	20000290 	.word	0x20000290
    58c8:	200000b0 	.word	0x200000b0
    58cc:	20000a30 	.word	0x20000a30

000058d0 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    58d0:	b538      	push	{r3, r4, r5, lr}
    58d2:	4604      	mov	r4, r0
	__asm__ volatile(
    58d4:	f04f 0320 	mov.w	r3, #32
    58d8:	f3ef 8511 	mrs	r5, BASEPRI
    58dc:	f383 8812 	msr	BASEPRI_MAX, r3
    58e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    58e4:	4815      	ldr	r0, [pc, #84]	; (593c <z_abort_timeout+0x6c>)
    58e6:	f7fe fd15 	bl	4314 <z_spin_lock_valid>
    58ea:	b940      	cbnz	r0, 58fe <z_abort_timeout+0x2e>
    58ec:	4914      	ldr	r1, [pc, #80]	; (5940 <z_abort_timeout+0x70>)
    58ee:	4815      	ldr	r0, [pc, #84]	; (5944 <z_abort_timeout+0x74>)
    58f0:	2281      	movs	r2, #129	; 0x81
    58f2:	f002 ff72 	bl	87da <printk>
    58f6:	2181      	movs	r1, #129	; 0x81
    58f8:	4811      	ldr	r0, [pc, #68]	; (5940 <z_abort_timeout+0x70>)
    58fa:	f002 fff9 	bl	88f0 <assert_post_action>
	z_spin_lock_set_owner(l);
    58fe:	480f      	ldr	r0, [pc, #60]	; (593c <z_abort_timeout+0x6c>)
    5900:	f7fe fd24 	bl	434c <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    5904:	6823      	ldr	r3, [r4, #0]
    5906:	b1b3      	cbz	r3, 5936 <z_abort_timeout+0x66>
			remove_timeout(to);
    5908:	4620      	mov	r0, r4
    590a:	f7ff fee1 	bl	56d0 <remove_timeout>
			ret = 0;
    590e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5910:	480a      	ldr	r0, [pc, #40]	; (593c <z_abort_timeout+0x6c>)
    5912:	f7fe fd0d 	bl	4330 <z_spin_unlock_valid>
    5916:	b940      	cbnz	r0, 592a <z_abort_timeout+0x5a>
    5918:	4909      	ldr	r1, [pc, #36]	; (5940 <z_abort_timeout+0x70>)
    591a:	480a      	ldr	r0, [pc, #40]	; (5944 <z_abort_timeout+0x74>)
    591c:	22ac      	movs	r2, #172	; 0xac
    591e:	f002 ff5c 	bl	87da <printk>
    5922:	21ac      	movs	r1, #172	; 0xac
    5924:	4806      	ldr	r0, [pc, #24]	; (5940 <z_abort_timeout+0x70>)
    5926:	f002 ffe3 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    592a:	f385 8811 	msr	BASEPRI, r5
    592e:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    5932:	4620      	mov	r0, r4
    5934:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    5936:	f06f 0415 	mvn.w	r4, #21
    593a:	e7e9      	b.n	5910 <z_abort_timeout+0x40>
    593c:	20000a74 	.word	0x20000a74
    5940:	0000973f 	.word	0x0000973f
    5944:	00009765 	.word	0x00009765

00005948 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    5948:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    594a:	f04f 0320 	mov.w	r3, #32
    594e:	f3ef 8511 	mrs	r5, BASEPRI
    5952:	f383 8812 	msr	BASEPRI_MAX, r3
    5956:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    595a:	4813      	ldr	r0, [pc, #76]	; (59a8 <z_get_next_timeout_expiry+0x60>)
    595c:	f7fe fcda 	bl	4314 <z_spin_lock_valid>
    5960:	b940      	cbnz	r0, 5974 <z_get_next_timeout_expiry+0x2c>
    5962:	4912      	ldr	r1, [pc, #72]	; (59ac <z_get_next_timeout_expiry+0x64>)
    5964:	4812      	ldr	r0, [pc, #72]	; (59b0 <z_get_next_timeout_expiry+0x68>)
    5966:	2281      	movs	r2, #129	; 0x81
    5968:	f002 ff37 	bl	87da <printk>
    596c:	2181      	movs	r1, #129	; 0x81
    596e:	480f      	ldr	r0, [pc, #60]	; (59ac <z_get_next_timeout_expiry+0x64>)
    5970:	f002 ffbe 	bl	88f0 <assert_post_action>
	z_spin_lock_set_owner(l);
    5974:	480c      	ldr	r0, [pc, #48]	; (59a8 <z_get_next_timeout_expiry+0x60>)
    5976:	f7fe fce9 	bl	434c <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    597a:	f7ff fec3 	bl	5704 <next_timeout>
    597e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5980:	4809      	ldr	r0, [pc, #36]	; (59a8 <z_get_next_timeout_expiry+0x60>)
    5982:	f7fe fcd5 	bl	4330 <z_spin_unlock_valid>
    5986:	b940      	cbnz	r0, 599a <z_get_next_timeout_expiry+0x52>
    5988:	4908      	ldr	r1, [pc, #32]	; (59ac <z_get_next_timeout_expiry+0x64>)
    598a:	4809      	ldr	r0, [pc, #36]	; (59b0 <z_get_next_timeout_expiry+0x68>)
    598c:	22ac      	movs	r2, #172	; 0xac
    598e:	f002 ff24 	bl	87da <printk>
    5992:	21ac      	movs	r1, #172	; 0xac
    5994:	4805      	ldr	r0, [pc, #20]	; (59ac <z_get_next_timeout_expiry+0x64>)
    5996:	f002 ffab 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    599a:	f385 8811 	msr	BASEPRI, r5
    599e:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    59a2:	4620      	mov	r0, r4
    59a4:	bd38      	pop	{r3, r4, r5, pc}
    59a6:	bf00      	nop
    59a8:	20000a74 	.word	0x20000a74
    59ac:	0000973f 	.word	0x0000973f
    59b0:	00009765 	.word	0x00009765

000059b4 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    59b4:	b570      	push	{r4, r5, r6, lr}
    59b6:	4604      	mov	r4, r0
    59b8:	460d      	mov	r5, r1
	__asm__ volatile(
    59ba:	f04f 0320 	mov.w	r3, #32
    59be:	f3ef 8611 	mrs	r6, BASEPRI
    59c2:	f383 8812 	msr	BASEPRI_MAX, r3
    59c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    59ca:	4816      	ldr	r0, [pc, #88]	; (5a24 <z_set_timeout_expiry+0x70>)
    59cc:	f7fe fca2 	bl	4314 <z_spin_lock_valid>
    59d0:	b940      	cbnz	r0, 59e4 <z_set_timeout_expiry+0x30>
    59d2:	4915      	ldr	r1, [pc, #84]	; (5a28 <z_set_timeout_expiry+0x74>)
    59d4:	4815      	ldr	r0, [pc, #84]	; (5a2c <z_set_timeout_expiry+0x78>)
    59d6:	2281      	movs	r2, #129	; 0x81
    59d8:	f002 feff 	bl	87da <printk>
    59dc:	2181      	movs	r1, #129	; 0x81
    59de:	4812      	ldr	r0, [pc, #72]	; (5a28 <z_set_timeout_expiry+0x74>)
    59e0:	f002 ff86 	bl	88f0 <assert_post_action>
	z_spin_lock_set_owner(l);
    59e4:	480f      	ldr	r0, [pc, #60]	; (5a24 <z_set_timeout_expiry+0x70>)
    59e6:	f7fe fcb1 	bl	434c <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    59ea:	f7ff fe8b 	bl	5704 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    59ee:	2801      	cmp	r0, #1
    59f0:	dd05      	ble.n	59fe <z_set_timeout_expiry+0x4a>
    59f2:	42a0      	cmp	r0, r4
    59f4:	db03      	blt.n	59fe <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    59f6:	4629      	mov	r1, r5
    59f8:	4620      	mov	r0, r4
    59fa:	f7fd fa53 	bl	2ea4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    59fe:	4809      	ldr	r0, [pc, #36]	; (5a24 <z_set_timeout_expiry+0x70>)
    5a00:	f7fe fc96 	bl	4330 <z_spin_unlock_valid>
    5a04:	b940      	cbnz	r0, 5a18 <z_set_timeout_expiry+0x64>
    5a06:	4908      	ldr	r1, [pc, #32]	; (5a28 <z_set_timeout_expiry+0x74>)
    5a08:	4808      	ldr	r0, [pc, #32]	; (5a2c <z_set_timeout_expiry+0x78>)
    5a0a:	22ac      	movs	r2, #172	; 0xac
    5a0c:	f002 fee5 	bl	87da <printk>
    5a10:	21ac      	movs	r1, #172	; 0xac
    5a12:	4805      	ldr	r0, [pc, #20]	; (5a28 <z_set_timeout_expiry+0x74>)
    5a14:	f002 ff6c 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    5a18:	f386 8811 	msr	BASEPRI, r6
    5a1c:	f3bf 8f6f 	isb	sy
		}
	}
}
    5a20:	bd70      	pop	{r4, r5, r6, pc}
    5a22:	bf00      	nop
    5a24:	20000a74 	.word	0x20000a74
    5a28:	0000973f 	.word	0x0000973f
    5a2c:	00009765 	.word	0x00009765

00005a30 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    5a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5a34:	b085      	sub	sp, #20
    5a36:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    5a38:	f7ff f880 	bl	4b3c <z_time_slice>
	__asm__ volatile(
    5a3c:	f04f 0320 	mov.w	r3, #32
    5a40:	f3ef 8911 	mrs	r9, BASEPRI
    5a44:	f383 8812 	msr	BASEPRI_MAX, r3
    5a48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5a4c:	484c      	ldr	r0, [pc, #304]	; (5b80 <sys_clock_announce+0x150>)
    5a4e:	f7fe fc61 	bl	4314 <z_spin_lock_valid>
    5a52:	b940      	cbnz	r0, 5a66 <sys_clock_announce+0x36>
    5a54:	494b      	ldr	r1, [pc, #300]	; (5b84 <sys_clock_announce+0x154>)
    5a56:	484c      	ldr	r0, [pc, #304]	; (5b88 <sys_clock_announce+0x158>)
    5a58:	2281      	movs	r2, #129	; 0x81
    5a5a:	f002 febe 	bl	87da <printk>
    5a5e:	2181      	movs	r1, #129	; 0x81
    5a60:	4848      	ldr	r0, [pc, #288]	; (5b84 <sys_clock_announce+0x154>)
    5a62:	f002 ff45 	bl	88f0 <assert_post_action>
	z_spin_lock_set_owner(l);
    5a66:	4f49      	ldr	r7, [pc, #292]	; (5b8c <sys_clock_announce+0x15c>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    5a68:	4e49      	ldr	r6, [pc, #292]	; (5b90 <sys_clock_announce+0x160>)
    5a6a:	46bb      	mov	fp, r7
    5a6c:	4844      	ldr	r0, [pc, #272]	; (5b80 <sys_clock_announce+0x150>)
	return list->head == list;
    5a6e:	f8df a124 	ldr.w	sl, [pc, #292]	; 5b94 <sys_clock_announce+0x164>
    5a72:	f7fe fc6b 	bl	434c <z_spin_lock_set_owner>
    5a76:	6034      	str	r4, [r6, #0]
    5a78:	f8d6 c000 	ldr.w	ip, [r6]
    5a7c:	f8da 8000 	ldr.w	r8, [sl]
    5a80:	4662      	mov	r2, ip
    5a82:	e9d7 3400 	ldrd	r3, r4, [r7]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5a86:	45d0      	cmp	r8, sl
    5a88:	e9cd 3402 	strd	r3, r4, [sp, #8]
    5a8c:	ea4f 73e2 	mov.w	r3, r2, asr #31
    5a90:	e9cd 2300 	strd	r2, r3, [sp]
    5a94:	d011      	beq.n	5aba <sys_clock_announce+0x8a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    5a96:	f1b8 0f00 	cmp.w	r8, #0
    5a9a:	d00e      	beq.n	5aba <sys_clock_announce+0x8a>
    5a9c:	e9d8 1204 	ldrd	r1, r2, [r8, #16]
    5aa0:	e9dd 3400 	ldrd	r3, r4, [sp]
    5aa4:	428b      	cmp	r3, r1
    5aa6:	eb74 0302 	sbcs.w	r3, r4, r2
    5aaa:	da2a      	bge.n	5b02 <sys_clock_announce+0xd2>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    5aac:	9b00      	ldr	r3, [sp, #0]
    5aae:	1ac8      	subs	r0, r1, r3
    5ab0:	9b01      	ldr	r3, [sp, #4]
    5ab2:	eb62 0103 	sbc.w	r1, r2, r3
    5ab6:	e9c8 0104 	strd	r0, r1, [r8, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    5aba:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    5abc:	9b00      	ldr	r3, [sp, #0]
    5abe:	9a02      	ldr	r2, [sp, #8]
    5ac0:	9903      	ldr	r1, [sp, #12]
    5ac2:	189a      	adds	r2, r3, r2
    5ac4:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    5ac6:	6034      	str	r4, [r6, #0]
	curr_tick += announce_remaining;
    5ac8:	eb41 0303 	adc.w	r3, r1, r3
    5acc:	e9cb 2300 	strd	r2, r3, [fp]

	sys_clock_set_timeout(next_timeout(), false);
    5ad0:	f7ff fe18 	bl	5704 <next_timeout>
    5ad4:	4621      	mov	r1, r4
    5ad6:	f7fd f9e5 	bl	2ea4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5ada:	4829      	ldr	r0, [pc, #164]	; (5b80 <sys_clock_announce+0x150>)
    5adc:	f7fe fc28 	bl	4330 <z_spin_unlock_valid>
    5ae0:	b940      	cbnz	r0, 5af4 <sys_clock_announce+0xc4>
    5ae2:	4928      	ldr	r1, [pc, #160]	; (5b84 <sys_clock_announce+0x154>)
    5ae4:	4828      	ldr	r0, [pc, #160]	; (5b88 <sys_clock_announce+0x158>)
    5ae6:	22ac      	movs	r2, #172	; 0xac
    5ae8:	f002 fe77 	bl	87da <printk>
    5aec:	21ac      	movs	r1, #172	; 0xac
    5aee:	4825      	ldr	r0, [pc, #148]	; (5b84 <sys_clock_announce+0x154>)
    5af0:	f002 fefe 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    5af4:	f389 8811 	msr	BASEPRI, r9
    5af8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5afc:	b005      	add	sp, #20
    5afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
    5b02:	2200      	movs	r2, #0
		curr_tick += dt;
    5b04:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
		t->dticks = 0;
    5b08:	2300      	movs	r3, #0
		curr_tick += dt;
    5b0a:	1864      	adds	r4, r4, r1
		announce_remaining -= dt;
    5b0c:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    5b10:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
		announce_remaining -= dt;
    5b14:	6030      	str	r0, [r6, #0]
		t->dticks = 0;
    5b16:	e9c8 2304 	strd	r2, r3, [r8, #16]
		remove_timeout(t);
    5b1a:	4640      	mov	r0, r8
		curr_tick += dt;
    5b1c:	e9c7 4500 	strd	r4, r5, [r7]
		remove_timeout(t);
    5b20:	f7ff fdd6 	bl	56d0 <remove_timeout>
    5b24:	4816      	ldr	r0, [pc, #88]	; (5b80 <sys_clock_announce+0x150>)
    5b26:	f7fe fc03 	bl	4330 <z_spin_unlock_valid>
    5b2a:	b940      	cbnz	r0, 5b3e <sys_clock_announce+0x10e>
    5b2c:	4915      	ldr	r1, [pc, #84]	; (5b84 <sys_clock_announce+0x154>)
    5b2e:	4816      	ldr	r0, [pc, #88]	; (5b88 <sys_clock_announce+0x158>)
    5b30:	22ac      	movs	r2, #172	; 0xac
    5b32:	f002 fe52 	bl	87da <printk>
    5b36:	21ac      	movs	r1, #172	; 0xac
    5b38:	4812      	ldr	r0, [pc, #72]	; (5b84 <sys_clock_announce+0x154>)
    5b3a:	f002 fed9 	bl	88f0 <assert_post_action>
    5b3e:	f389 8811 	msr	BASEPRI, r9
    5b42:	f3bf 8f6f 	isb	sy
		t->fn(t);
    5b46:	4640      	mov	r0, r8
    5b48:	f8d8 3008 	ldr.w	r3, [r8, #8]
    5b4c:	4798      	blx	r3
	__asm__ volatile(
    5b4e:	f04f 0320 	mov.w	r3, #32
    5b52:	f3ef 8911 	mrs	r9, BASEPRI
    5b56:	f383 8812 	msr	BASEPRI_MAX, r3
    5b5a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5b5e:	4808      	ldr	r0, [pc, #32]	; (5b80 <sys_clock_announce+0x150>)
    5b60:	f7fe fbd8 	bl	4314 <z_spin_lock_valid>
    5b64:	b940      	cbnz	r0, 5b78 <sys_clock_announce+0x148>
    5b66:	4907      	ldr	r1, [pc, #28]	; (5b84 <sys_clock_announce+0x154>)
    5b68:	4807      	ldr	r0, [pc, #28]	; (5b88 <sys_clock_announce+0x158>)
    5b6a:	2281      	movs	r2, #129	; 0x81
    5b6c:	f002 fe35 	bl	87da <printk>
    5b70:	2181      	movs	r1, #129	; 0x81
    5b72:	4804      	ldr	r0, [pc, #16]	; (5b84 <sys_clock_announce+0x154>)
    5b74:	f002 febc 	bl	88f0 <assert_post_action>
	z_spin_lock_set_owner(l);
    5b78:	4801      	ldr	r0, [pc, #4]	; (5b80 <sys_clock_announce+0x150>)
    5b7a:	f7fe fbe7 	bl	434c <z_spin_lock_set_owner>
	return k;
    5b7e:	e77b      	b.n	5a78 <sys_clock_announce+0x48>
    5b80:	20000a74 	.word	0x20000a74
    5b84:	0000973f 	.word	0x0000973f
    5b88:	00009765 	.word	0x00009765
    5b8c:	20000290 	.word	0x20000290
    5b90:	20000a70 	.word	0x20000a70
    5b94:	200000b0 	.word	0x200000b0

00005b98 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    5b98:	b570      	push	{r4, r5, r6, lr}
    5b9a:	f04f 0320 	mov.w	r3, #32
    5b9e:	f3ef 8611 	mrs	r6, BASEPRI
    5ba2:	f383 8812 	msr	BASEPRI_MAX, r3
    5ba6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5baa:	4816      	ldr	r0, [pc, #88]	; (5c04 <sys_clock_tick_get+0x6c>)
    5bac:	f7fe fbb2 	bl	4314 <z_spin_lock_valid>
    5bb0:	b940      	cbnz	r0, 5bc4 <sys_clock_tick_get+0x2c>
    5bb2:	4915      	ldr	r1, [pc, #84]	; (5c08 <sys_clock_tick_get+0x70>)
    5bb4:	4815      	ldr	r0, [pc, #84]	; (5c0c <sys_clock_tick_get+0x74>)
    5bb6:	2281      	movs	r2, #129	; 0x81
    5bb8:	f002 fe0f 	bl	87da <printk>
    5bbc:	2181      	movs	r1, #129	; 0x81
    5bbe:	4812      	ldr	r0, [pc, #72]	; (5c08 <sys_clock_tick_get+0x70>)
    5bc0:	f002 fe96 	bl	88f0 <assert_post_action>
	z_spin_lock_set_owner(l);
    5bc4:	480f      	ldr	r0, [pc, #60]	; (5c04 <sys_clock_tick_get+0x6c>)
    5bc6:	f7fe fbc1 	bl	434c <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    5bca:	f7fd f9f3 	bl	2fb4 <sys_clock_elapsed>
    5bce:	4b10      	ldr	r3, [pc, #64]	; (5c10 <sys_clock_tick_get+0x78>)
    5bd0:	e9d3 4500 	ldrd	r4, r5, [r3]
    5bd4:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5bd6:	480b      	ldr	r0, [pc, #44]	; (5c04 <sys_clock_tick_get+0x6c>)
    5bd8:	f145 0500 	adc.w	r5, r5, #0
    5bdc:	f7fe fba8 	bl	4330 <z_spin_unlock_valid>
    5be0:	b940      	cbnz	r0, 5bf4 <sys_clock_tick_get+0x5c>
    5be2:	4909      	ldr	r1, [pc, #36]	; (5c08 <sys_clock_tick_get+0x70>)
    5be4:	4809      	ldr	r0, [pc, #36]	; (5c0c <sys_clock_tick_get+0x74>)
    5be6:	22ac      	movs	r2, #172	; 0xac
    5be8:	f002 fdf7 	bl	87da <printk>
    5bec:	21ac      	movs	r1, #172	; 0xac
    5bee:	4806      	ldr	r0, [pc, #24]	; (5c08 <sys_clock_tick_get+0x70>)
    5bf0:	f002 fe7e 	bl	88f0 <assert_post_action>
	__asm__ volatile(
    5bf4:	f386 8811 	msr	BASEPRI, r6
    5bf8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    5bfc:	4620      	mov	r0, r4
    5bfe:	4629      	mov	r1, r5
    5c00:	bd70      	pop	{r4, r5, r6, pc}
    5c02:	bf00      	nop
    5c04:	20000a74 	.word	0x20000a74
    5c08:	0000973f 	.word	0x0000973f
    5c0c:	00009765 	.word	0x00009765
    5c10:	20000290 	.word	0x20000290

00005c14 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    5c14:	4a02      	ldr	r2, [pc, #8]	; (5c20 <boot_banner+0xc>)
    5c16:	4903      	ldr	r1, [pc, #12]	; (5c24 <boot_banner+0x10>)
    5c18:	4803      	ldr	r0, [pc, #12]	; (5c28 <boot_banner+0x14>)
    5c1a:	f002 bdde 	b.w	87da <printk>
    5c1e:	bf00      	nop
    5c20:	00009788 	.word	0x00009788
    5c24:	0000a628 	.word	0x0000a628
    5c28:	0000a637 	.word	0x0000a637

00005c2c <nrf_cc3xx_platform_init>:
    5c2c:	b510      	push	{r4, lr}
    5c2e:	4c0c      	ldr	r4, [pc, #48]	; (5c60 <nrf_cc3xx_platform_init+0x34>)
    5c30:	6823      	ldr	r3, [r4, #0]
    5c32:	b113      	cbz	r3, 5c3a <nrf_cc3xx_platform_init+0xe>
    5c34:	4b0b      	ldr	r3, [pc, #44]	; (5c64 <nrf_cc3xx_platform_init+0x38>)
    5c36:	681b      	ldr	r3, [r3, #0]
    5c38:	b92b      	cbnz	r3, 5c46 <nrf_cc3xx_platform_init+0x1a>
    5c3a:	f000 fe73 	bl	6924 <CC_LibInit>
    5c3e:	b930      	cbnz	r0, 5c4e <nrf_cc3xx_platform_init+0x22>
    5c40:	2201      	movs	r2, #1
    5c42:	4b08      	ldr	r3, [pc, #32]	; (5c64 <nrf_cc3xx_platform_init+0x38>)
    5c44:	601a      	str	r2, [r3, #0]
    5c46:	2301      	movs	r3, #1
    5c48:	2000      	movs	r0, #0
    5c4a:	6023      	str	r3, [r4, #0]
    5c4c:	bd10      	pop	{r4, pc}
    5c4e:	3801      	subs	r0, #1
    5c50:	2806      	cmp	r0, #6
    5c52:	d901      	bls.n	5c58 <nrf_cc3xx_platform_init+0x2c>
    5c54:	4804      	ldr	r0, [pc, #16]	; (5c68 <nrf_cc3xx_platform_init+0x3c>)
    5c56:	bd10      	pop	{r4, pc}
    5c58:	4b04      	ldr	r3, [pc, #16]	; (5c6c <nrf_cc3xx_platform_init+0x40>)
    5c5a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5c5e:	bd10      	pop	{r4, pc}
    5c60:	20000a78 	.word	0x20000a78
    5c64:	20000a7c 	.word	0x20000a7c
    5c68:	ffff8ffe 	.word	0xffff8ffe
    5c6c:	00009584 	.word	0x00009584

00005c70 <nrf_cc3xx_platform_abort>:
    5c70:	f3bf 8f4f 	dsb	sy
    5c74:	4905      	ldr	r1, [pc, #20]	; (5c8c <nrf_cc3xx_platform_abort+0x1c>)
    5c76:	4b06      	ldr	r3, [pc, #24]	; (5c90 <nrf_cc3xx_platform_abort+0x20>)
    5c78:	68ca      	ldr	r2, [r1, #12]
    5c7a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5c7e:	4313      	orrs	r3, r2
    5c80:	60cb      	str	r3, [r1, #12]
    5c82:	f3bf 8f4f 	dsb	sy
    5c86:	bf00      	nop
    5c88:	e7fd      	b.n	5c86 <nrf_cc3xx_platform_abort+0x16>
    5c8a:	bf00      	nop
    5c8c:	e000ed00 	.word	0xe000ed00
    5c90:	05fa0004 	.word	0x05fa0004

00005c94 <CC_PalAbort>:
    5c94:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    5c98:	2100      	movs	r1, #0
    5c9a:	b430      	push	{r4, r5}
    5c9c:	4a06      	ldr	r2, [pc, #24]	; (5cb8 <CC_PalAbort+0x24>)
    5c9e:	4d07      	ldr	r5, [pc, #28]	; (5cbc <CC_PalAbort+0x28>)
    5ca0:	4c07      	ldr	r4, [pc, #28]	; (5cc0 <CC_PalAbort+0x2c>)
    5ca2:	602b      	str	r3, [r5, #0]
    5ca4:	6013      	str	r3, [r2, #0]
    5ca6:	6023      	str	r3, [r4, #0]
    5ca8:	4a06      	ldr	r2, [pc, #24]	; (5cc4 <CC_PalAbort+0x30>)
    5caa:	4c07      	ldr	r4, [pc, #28]	; (5cc8 <CC_PalAbort+0x34>)
    5cac:	60eb      	str	r3, [r5, #12]
    5cae:	6863      	ldr	r3, [r4, #4]
    5cb0:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    5cb4:	bc30      	pop	{r4, r5}
    5cb6:	4718      	bx	r3
    5cb8:	50841404 	.word	0x50841404
    5cbc:	50841400 	.word	0x50841400
    5cc0:	50841408 	.word	0x50841408
    5cc4:	50840000 	.word	0x50840000
    5cc8:	200000b8 	.word	0x200000b8

00005ccc <nrf_cc3xx_platform_set_abort>:
    5ccc:	4b02      	ldr	r3, [pc, #8]	; (5cd8 <nrf_cc3xx_platform_set_abort+0xc>)
    5cce:	e9d0 1200 	ldrd	r1, r2, [r0]
    5cd2:	e9c3 1200 	strd	r1, r2, [r3]
    5cd6:	4770      	bx	lr
    5cd8:	200000b8 	.word	0x200000b8

00005cdc <nrf_cc3xx_platform_ctr_drbg_init>:
    5cdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5ce0:	4c15      	ldr	r4, [pc, #84]	; (5d38 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
    5ce2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 5d40 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
    5ce6:	2800      	cmp	r0, #0
    5ce8:	bf18      	it	ne
    5cea:	4604      	movne	r4, r0
    5cec:	6820      	ldr	r0, [r4, #0]
    5cee:	b083      	sub	sp, #12
    5cf0:	4540      	cmp	r0, r8
    5cf2:	d01d      	beq.n	5d30 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
    5cf4:	4616      	mov	r6, r2
    5cf6:	460d      	mov	r5, r1
    5cf8:	4620      	mov	r0, r4
    5cfa:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    5cfe:	f104 0904 	add.w	r9, r4, #4
    5d02:	f000 f8d3 	bl	5eac <mbedtls_platform_zeroize>
    5d06:	f504 778c 	add.w	r7, r4, #280	; 0x118
    5d0a:	4648      	mov	r0, r9
    5d0c:	f000 fcf2 	bl	66f4 <cc_mbedtls_entropy_init>
    5d10:	4638      	mov	r0, r7
    5d12:	f000 fb1d 	bl	6350 <cc_mbedtls_ctr_drbg_init>
    5d16:	464a      	mov	r2, r9
    5d18:	4638      	mov	r0, r7
    5d1a:	462b      	mov	r3, r5
    5d1c:	4907      	ldr	r1, [pc, #28]	; (5d3c <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
    5d1e:	9600      	str	r6, [sp, #0]
    5d20:	f000 fb2c 	bl	637c <cc_mbedtls_ctr_drbg_seed>
    5d24:	b908      	cbnz	r0, 5d2a <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
    5d26:	f8c4 8000 	str.w	r8, [r4]
    5d2a:	b003      	add	sp, #12
    5d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5d30:	2000      	movs	r0, #0
    5d32:	b003      	add	sp, #12
    5d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5d38:	20001454 	.word	0x20001454
    5d3c:	00006775 	.word	0x00006775
    5d40:	5ac9bca5 	.word	0x5ac9bca5

00005d44 <nrf_cc3xx_platform_ctr_drbg_get>:
    5d44:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d46:	4c0d      	ldr	r4, [pc, #52]	; (5d7c <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
    5d48:	4e0d      	ldr	r6, [pc, #52]	; (5d80 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
    5d4a:	2800      	cmp	r0, #0
    5d4c:	bf08      	it	eq
    5d4e:	4620      	moveq	r0, r4
    5d50:	6807      	ldr	r7, [r0, #0]
    5d52:	b083      	sub	sp, #12
    5d54:	42b7      	cmp	r7, r6
    5d56:	d10e      	bne.n	5d76 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
    5d58:	2600      	movs	r6, #0
    5d5a:	461d      	mov	r5, r3
    5d5c:	f500 708c 	add.w	r0, r0, #280	; 0x118
    5d60:	4633      	mov	r3, r6
    5d62:	9600      	str	r6, [sp, #0]
    5d64:	4614      	mov	r4, r2
    5d66:	f000 fb57 	bl	6418 <cc_mbedtls_ctr_drbg_random_with_add>
    5d6a:	2800      	cmp	r0, #0
    5d6c:	bf18      	it	ne
    5d6e:	4634      	movne	r4, r6
    5d70:	602c      	str	r4, [r5, #0]
    5d72:	b003      	add	sp, #12
    5d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d76:	4803      	ldr	r0, [pc, #12]	; (5d84 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
    5d78:	e7fb      	b.n	5d72 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
    5d7a:	bf00      	nop
    5d7c:	20001454 	.word	0x20001454
    5d80:	5ac9bca5 	.word	0x5ac9bca5
    5d84:	ffff8fe8 	.word	0xffff8fe8

00005d88 <mutex_free>:
    5d88:	b510      	push	{r4, lr}
    5d8a:	4604      	mov	r4, r0
    5d8c:	b130      	cbz	r0, 5d9c <mutex_free+0x14>
    5d8e:	6863      	ldr	r3, [r4, #4]
    5d90:	06db      	lsls	r3, r3, #27
    5d92:	d502      	bpl.n	5d9a <mutex_free+0x12>
    5d94:	2300      	movs	r3, #0
    5d96:	6023      	str	r3, [r4, #0]
    5d98:	6063      	str	r3, [r4, #4]
    5d9a:	bd10      	pop	{r4, pc}
    5d9c:	4b02      	ldr	r3, [pc, #8]	; (5da8 <mutex_free+0x20>)
    5d9e:	4803      	ldr	r0, [pc, #12]	; (5dac <mutex_free+0x24>)
    5da0:	685b      	ldr	r3, [r3, #4]
    5da2:	4798      	blx	r3
    5da4:	e7f3      	b.n	5d8e <mutex_free+0x6>
    5da6:	bf00      	nop
    5da8:	200000b8 	.word	0x200000b8
    5dac:	000095a0 	.word	0x000095a0

00005db0 <mutex_unlock>:
    5db0:	b168      	cbz	r0, 5dce <mutex_unlock+0x1e>
    5db2:	6843      	ldr	r3, [r0, #4]
    5db4:	b13b      	cbz	r3, 5dc6 <mutex_unlock+0x16>
    5db6:	06db      	lsls	r3, r3, #27
    5db8:	d507      	bpl.n	5dca <mutex_unlock+0x1a>
    5dba:	f3bf 8f5f 	dmb	sy
    5dbe:	2300      	movs	r3, #0
    5dc0:	6003      	str	r3, [r0, #0]
    5dc2:	4618      	mov	r0, r3
    5dc4:	4770      	bx	lr
    5dc6:	4803      	ldr	r0, [pc, #12]	; (5dd4 <mutex_unlock+0x24>)
    5dc8:	4770      	bx	lr
    5dca:	4803      	ldr	r0, [pc, #12]	; (5dd8 <mutex_unlock+0x28>)
    5dcc:	4770      	bx	lr
    5dce:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5dd2:	4770      	bx	lr
    5dd4:	ffff8fea 	.word	0xffff8fea
    5dd8:	ffff8fe9 	.word	0xffff8fe9

00005ddc <mutex_init>:
    5ddc:	b510      	push	{r4, lr}
    5dde:	4604      	mov	r4, r0
    5de0:	b120      	cbz	r0, 5dec <mutex_init+0x10>
    5de2:	2200      	movs	r2, #0
    5de4:	2311      	movs	r3, #17
    5de6:	6022      	str	r2, [r4, #0]
    5de8:	6063      	str	r3, [r4, #4]
    5dea:	bd10      	pop	{r4, pc}
    5dec:	4801      	ldr	r0, [pc, #4]	; (5df4 <mutex_init+0x18>)
    5dee:	f7ff ff51 	bl	5c94 <CC_PalAbort>
    5df2:	e7f6      	b.n	5de2 <mutex_init+0x6>
    5df4:	000095c8 	.word	0x000095c8

00005df8 <mutex_lock>:
    5df8:	b1a0      	cbz	r0, 5e24 <mutex_lock+0x2c>
    5dfa:	6843      	ldr	r3, [r0, #4]
    5dfc:	b183      	cbz	r3, 5e20 <mutex_lock+0x28>
    5dfe:	06db      	lsls	r3, r3, #27
    5e00:	d50c      	bpl.n	5e1c <mutex_lock+0x24>
    5e02:	2201      	movs	r2, #1
    5e04:	e8d0 3fef 	ldaex	r3, [r0]
    5e08:	e8c0 2fe1 	stlex	r1, r2, [r0]
    5e0c:	2900      	cmp	r1, #0
    5e0e:	d1f9      	bne.n	5e04 <mutex_lock+0xc>
    5e10:	2b01      	cmp	r3, #1
    5e12:	d0f7      	beq.n	5e04 <mutex_lock+0xc>
    5e14:	f3bf 8f5f 	dmb	sy
    5e18:	2000      	movs	r0, #0
    5e1a:	4770      	bx	lr
    5e1c:	4803      	ldr	r0, [pc, #12]	; (5e2c <mutex_lock+0x34>)
    5e1e:	4770      	bx	lr
    5e20:	4803      	ldr	r0, [pc, #12]	; (5e30 <mutex_lock+0x38>)
    5e22:	4770      	bx	lr
    5e24:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5e28:	4770      	bx	lr
    5e2a:	bf00      	nop
    5e2c:	ffff8fe9 	.word	0xffff8fe9
    5e30:	ffff8fea 	.word	0xffff8fea

00005e34 <nrf_cc3xx_platform_set_mutexes>:
    5e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e38:	4c14      	ldr	r4, [pc, #80]	; (5e8c <nrf_cc3xx_platform_set_mutexes+0x58>)
    5e3a:	6802      	ldr	r2, [r0, #0]
    5e3c:	68c3      	ldr	r3, [r0, #12]
    5e3e:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
    5e42:	e9c4 6302 	strd	r6, r3, [r4, #8]
    5e46:	e9c4 2500 	strd	r2, r5, [r4]
    5e4a:	4b11      	ldr	r3, [pc, #68]	; (5e90 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    5e4c:	680e      	ldr	r6, [r1, #0]
    5e4e:	6848      	ldr	r0, [r1, #4]
    5e50:	4d10      	ldr	r5, [pc, #64]	; (5e94 <nrf_cc3xx_platform_set_mutexes+0x60>)
    5e52:	e9c3 6000 	strd	r6, r0, [r3]
    5e56:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
    5e5a:	6908      	ldr	r0, [r1, #16]
    5e5c:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    5e60:	e9c3 7602 	strd	r7, r6, [r3, #8]
    5e64:	6118      	str	r0, [r3, #16]
    5e66:	06cb      	lsls	r3, r1, #27
    5e68:	d50d      	bpl.n	5e86 <nrf_cc3xx_platform_set_mutexes+0x52>
    5e6a:	2300      	movs	r3, #0
    5e6c:	f505 7088 	add.w	r0, r5, #272	; 0x110
    5e70:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    5e74:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    5e78:	4790      	blx	r2
    5e7a:	6823      	ldr	r3, [r4, #0]
    5e7c:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    5e80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5e84:	4718      	bx	r3
    5e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e8a:	bf00      	nop
    5e8c:	200000c8 	.word	0x200000c8
    5e90:	200000d8 	.word	0x200000d8
    5e94:	20001454 	.word	0x20001454

00005e98 <mbedtls_zeroize_internal>:
    5e98:	b138      	cbz	r0, 5eaa <mbedtls_zeroize_internal+0x12>
    5e9a:	b131      	cbz	r1, 5eaa <mbedtls_zeroize_internal+0x12>
    5e9c:	2200      	movs	r2, #0
    5e9e:	4401      	add	r1, r0
    5ea0:	4603      	mov	r3, r0
    5ea2:	3001      	adds	r0, #1
    5ea4:	4281      	cmp	r1, r0
    5ea6:	701a      	strb	r2, [r3, #0]
    5ea8:	d1fa      	bne.n	5ea0 <mbedtls_zeroize_internal+0x8>
    5eaa:	4770      	bx	lr

00005eac <mbedtls_platform_zeroize>:
    5eac:	b138      	cbz	r0, 5ebe <mbedtls_platform_zeroize+0x12>
    5eae:	b131      	cbz	r1, 5ebe <mbedtls_platform_zeroize+0x12>
    5eb0:	2200      	movs	r2, #0
    5eb2:	4401      	add	r1, r0
    5eb4:	4603      	mov	r3, r0
    5eb6:	3001      	adds	r0, #1
    5eb8:	4288      	cmp	r0, r1
    5eba:	701a      	strb	r2, [r3, #0]
    5ebc:	d1fa      	bne.n	5eb4 <mbedtls_platform_zeroize+0x8>
    5ebe:	4770      	bx	lr

00005ec0 <block_cipher_df>:
    5ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ec4:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
    5ec8:	b0af      	sub	sp, #188	; 0xbc
    5eca:	f200 812c 	bhi.w	6126 <block_cipher_df+0x266>
    5ece:	f8df 926c 	ldr.w	r9, [pc, #620]	; 613c <block_cipher_df+0x27c>
    5ed2:	4690      	mov	r8, r2
    5ed4:	460c      	mov	r4, r1
    5ed6:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    5eda:	2100      	movs	r1, #0
    5edc:	4682      	mov	sl, r0
    5ede:	4648      	mov	r0, r9
    5ee0:	f002 fdc1 	bl	8a66 <memset>
    5ee4:	a811      	add	r0, sp, #68	; 0x44
    5ee6:	f001 f9e9 	bl	72bc <cc_mbedtls_aes_init>
    5eea:	2200      	movs	r2, #0
    5eec:	2320      	movs	r3, #32
    5eee:	4621      	mov	r1, r4
    5ef0:	f8a9 2010 	strh.w	r2, [r9, #16]
    5ef4:	fa98 f498 	rev16.w	r4, r8
    5ef8:	4642      	mov	r2, r8
    5efa:	f109 0018 	add.w	r0, r9, #24
    5efe:	f8a9 4012 	strh.w	r4, [r9, #18]
    5f02:	f889 3017 	strb.w	r3, [r9, #23]
    5f06:	f002 fda3 	bl	8a50 <memcpy>
    5f0a:	2280      	movs	r2, #128	; 0x80
    5f0c:	4b87      	ldr	r3, [pc, #540]	; (612c <block_cipher_df+0x26c>)
    5f0e:	4988      	ldr	r1, [pc, #544]	; (6130 <block_cipher_df+0x270>)
    5f10:	4c88      	ldr	r4, [pc, #544]	; (6134 <block_cipher_df+0x274>)
    5f12:	eb09 0008 	add.w	r0, r9, r8
    5f16:	e9cd 4102 	strd	r4, r1, [sp, #8]
    5f1a:	7602      	strb	r2, [r0, #24]
    5f1c:	9301      	str	r3, [sp, #4]
    5f1e:	a811      	add	r0, sp, #68	; 0x44
    5f20:	f103 330c 	add.w	r3, r3, #202116108	; 0xc0c0c0c
    5f24:	a901      	add	r1, sp, #4
    5f26:	9304      	str	r3, [sp, #16]
    5f28:	f001 f9de 	bl	72e8 <cc_mbedtls_aes_setkey_enc>
    5f2c:	4607      	mov	r7, r0
    5f2e:	2800      	cmp	r0, #0
    5f30:	f040 80d8 	bne.w	60e4 <block_cipher_df+0x224>
    5f34:	f108 0819 	add.w	r8, r8, #25
    5f38:	ae05      	add	r6, sp, #20
    5f3a:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    5f3e:	2210      	movs	r2, #16
    5f40:	2100      	movs	r1, #0
    5f42:	4630      	mov	r0, r6
    5f44:	f002 fd8f 	bl	8a66 <memset>
    5f48:	4645      	mov	r5, r8
    5f4a:	4c7b      	ldr	r4, [pc, #492]	; (6138 <block_cipher_df+0x278>)
    5f4c:	f89d 2014 	ldrb.w	r2, [sp, #20]
    5f50:	f814 3c10 	ldrb.w	r3, [r4, #-16]
    5f54:	f89d c015 	ldrb.w	ip, [sp, #21]
    5f58:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
    5f5c:	f89d 0016 	ldrb.w	r0, [sp, #22]
    5f60:	4053      	eors	r3, r2
    5f62:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
    5f66:	ea8c 0c01 	eor.w	ip, ip, r1
    5f6a:	4050      	eors	r0, r2
    5f6c:	f89d 1017 	ldrb.w	r1, [sp, #23]
    5f70:	f814 2c0d 	ldrb.w	r2, [r4, #-13]
    5f74:	f89d e018 	ldrb.w	lr, [sp, #24]
    5f78:	4051      	eors	r1, r2
    5f7a:	f814 2c0c 	ldrb.w	r2, [r4, #-12]
    5f7e:	f88d 3014 	strb.w	r3, [sp, #20]
    5f82:	ea8e 0202 	eor.w	r2, lr, r2
    5f86:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    5f8a:	f89d e019 	ldrb.w	lr, [sp, #25]
    5f8e:	f88d c015 	strb.w	ip, [sp, #21]
    5f92:	ea8e 0303 	eor.w	r3, lr, r3
    5f96:	f814 cc0a 	ldrb.w	ip, [r4, #-10]
    5f9a:	f89d e01a 	ldrb.w	lr, [sp, #26]
    5f9e:	f88d 0016 	strb.w	r0, [sp, #22]
    5fa2:	ea8e 0c0c 	eor.w	ip, lr, ip
    5fa6:	f814 0c09 	ldrb.w	r0, [r4, #-9]
    5faa:	f89d e01b 	ldrb.w	lr, [sp, #27]
    5fae:	f88d 1017 	strb.w	r1, [sp, #23]
    5fb2:	ea8e 0000 	eor.w	r0, lr, r0
    5fb6:	f814 1c08 	ldrb.w	r1, [r4, #-8]
    5fba:	f89d e01c 	ldrb.w	lr, [sp, #28]
    5fbe:	f88d 2018 	strb.w	r2, [sp, #24]
    5fc2:	ea8e 0101 	eor.w	r1, lr, r1
    5fc6:	f814 2c07 	ldrb.w	r2, [r4, #-7]
    5fca:	f89d e01d 	ldrb.w	lr, [sp, #29]
    5fce:	f88d 3019 	strb.w	r3, [sp, #25]
    5fd2:	ea8e 0202 	eor.w	r2, lr, r2
    5fd6:	f89d 301e 	ldrb.w	r3, [sp, #30]
    5fda:	f814 ec06 	ldrb.w	lr, [r4, #-6]
    5fde:	f88d c01a 	strb.w	ip, [sp, #26]
    5fe2:	ea83 030e 	eor.w	r3, r3, lr
    5fe6:	f88d 001b 	strb.w	r0, [sp, #27]
    5fea:	f88d 101c 	strb.w	r1, [sp, #28]
    5fee:	f88d 201d 	strb.w	r2, [sp, #29]
    5ff2:	f88d 301e 	strb.w	r3, [sp, #30]
    5ff6:	f89d 101f 	ldrb.w	r1, [sp, #31]
    5ffa:	f814 3c05 	ldrb.w	r3, [r4, #-5]
    5ffe:	f89d c020 	ldrb.w	ip, [sp, #32]
    6002:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
    6006:	404b      	eors	r3, r1
    6008:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    600c:	f814 1c03 	ldrb.w	r1, [r4, #-3]
    6010:	ea8c 0202 	eor.w	r2, ip, r2
    6014:	4041      	eors	r1, r0
    6016:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
    601a:	f814 0c02 	ldrb.w	r0, [r4, #-2]
    601e:	f89d e023 	ldrb.w	lr, [sp, #35]	; 0x23
    6022:	ea8c 0000 	eor.w	r0, ip, r0
    6026:	f814 cc01 	ldrb.w	ip, [r4, #-1]
    602a:	f88d 301f 	strb.w	r3, [sp, #31]
    602e:	ea8e 0c0c 	eor.w	ip, lr, ip
    6032:	f88d 2020 	strb.w	r2, [sp, #32]
    6036:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
    603a:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    603e:	4633      	mov	r3, r6
    6040:	4632      	mov	r2, r6
    6042:	2101      	movs	r1, #1
    6044:	a811      	add	r0, sp, #68	; 0x44
    6046:	f88d c023 	strb.w	ip, [sp, #35]	; 0x23
    604a:	f001 f967 	bl	731c <cc_mbedtls_aes_crypt_ecb>
    604e:	2d10      	cmp	r5, #16
    6050:	bf94      	ite	ls
    6052:	1b6d      	subls	r5, r5, r5
    6054:	3d10      	subhi	r5, #16
    6056:	2800      	cmp	r0, #0
    6058:	d163      	bne.n	6122 <block_cipher_df+0x262>
    605a:	3410      	adds	r4, #16
    605c:	2d00      	cmp	r5, #0
    605e:	f47f af75 	bne.w	5f4c <block_cipher_df+0x8c>
    6062:	eb0b 0007 	add.w	r0, fp, r7
    6066:	2210      	movs	r2, #16
    6068:	4631      	mov	r1, r6
    606a:	f002 fcf1 	bl	8a50 <memcpy>
    606e:	f899 3003 	ldrb.w	r3, [r9, #3]
    6072:	3710      	adds	r7, #16
    6074:	3301      	adds	r3, #1
    6076:	2f20      	cmp	r7, #32
    6078:	f889 3003 	strb.w	r3, [r9, #3]
    607c:	f47f af5f 	bne.w	5f3e <block_cipher_df+0x7e>
    6080:	2280      	movs	r2, #128	; 0x80
    6082:	4659      	mov	r1, fp
    6084:	a811      	add	r0, sp, #68	; 0x44
    6086:	f001 f92f 	bl	72e8 <cc_mbedtls_aes_setkey_enc>
    608a:	4607      	mov	r7, r0
    608c:	bb68      	cbnz	r0, 60ea <block_cipher_df+0x22a>
    608e:	4654      	mov	r4, sl
    6090:	f10a 0520 	add.w	r5, sl, #32
    6094:	ab0d      	add	r3, sp, #52	; 0x34
    6096:	461a      	mov	r2, r3
    6098:	2101      	movs	r1, #1
    609a:	a811      	add	r0, sp, #68	; 0x44
    609c:	f001 f93e 	bl	731c <cc_mbedtls_aes_crypt_ecb>
    60a0:	4607      	mov	r7, r0
    60a2:	bb10      	cbnz	r0, 60ea <block_cipher_df+0x22a>
    60a4:	2210      	movs	r2, #16
    60a6:	4620      	mov	r0, r4
    60a8:	a90d      	add	r1, sp, #52	; 0x34
    60aa:	4414      	add	r4, r2
    60ac:	f002 fcd0 	bl	8a50 <memcpy>
    60b0:	42ac      	cmp	r4, r5
    60b2:	d1ef      	bne.n	6094 <block_cipher_df+0x1d4>
    60b4:	a811      	add	r0, sp, #68	; 0x44
    60b6:	f001 f911 	bl	72dc <cc_mbedtls_aes_free>
    60ba:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    60be:	481f      	ldr	r0, [pc, #124]	; (613c <block_cipher_df+0x27c>)
    60c0:	f7ff fef4 	bl	5eac <mbedtls_platform_zeroize>
    60c4:	4658      	mov	r0, fp
    60c6:	2120      	movs	r1, #32
    60c8:	f7ff fef0 	bl	5eac <mbedtls_platform_zeroize>
    60cc:	a801      	add	r0, sp, #4
    60ce:	2110      	movs	r1, #16
    60d0:	f7ff feec 	bl	5eac <mbedtls_platform_zeroize>
    60d4:	4630      	mov	r0, r6
    60d6:	2110      	movs	r1, #16
    60d8:	f7ff fee8 	bl	5eac <mbedtls_platform_zeroize>
    60dc:	4638      	mov	r0, r7
    60de:	b02f      	add	sp, #188	; 0xbc
    60e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    60e4:	ae05      	add	r6, sp, #20
    60e6:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    60ea:	a811      	add	r0, sp, #68	; 0x44
    60ec:	f001 f8f6 	bl	72dc <cc_mbedtls_aes_free>
    60f0:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    60f4:	4811      	ldr	r0, [pc, #68]	; (613c <block_cipher_df+0x27c>)
    60f6:	f7ff fed9 	bl	5eac <mbedtls_platform_zeroize>
    60fa:	4658      	mov	r0, fp
    60fc:	2120      	movs	r1, #32
    60fe:	f7ff fed5 	bl	5eac <mbedtls_platform_zeroize>
    6102:	2110      	movs	r1, #16
    6104:	a801      	add	r0, sp, #4
    6106:	f7ff fed1 	bl	5eac <mbedtls_platform_zeroize>
    610a:	4630      	mov	r0, r6
    610c:	2110      	movs	r1, #16
    610e:	f7ff fecd 	bl	5eac <mbedtls_platform_zeroize>
    6112:	4650      	mov	r0, sl
    6114:	2120      	movs	r1, #32
    6116:	f7ff fec9 	bl	5eac <mbedtls_platform_zeroize>
    611a:	4638      	mov	r0, r7
    611c:	b02f      	add	sp, #188	; 0xbc
    611e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6122:	4607      	mov	r7, r0
    6124:	e7e1      	b.n	60ea <block_cipher_df+0x22a>
    6126:	f06f 0737 	mvn.w	r7, #55	; 0x37
    612a:	e7f6      	b.n	611a <block_cipher_df+0x25a>
    612c:	03020100 	.word	0x03020100
    6130:	0b0a0908 	.word	0x0b0a0908
    6134:	07060504 	.word	0x07060504
    6138:	20000aa0 	.word	0x20000aa0
    613c:	20000a90 	.word	0x20000a90

00006140 <ctr_drbg_update_internal>:
    6140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6144:	2220      	movs	r2, #32
    6146:	4604      	mov	r4, r0
    6148:	b088      	sub	sp, #32
    614a:	460d      	mov	r5, r1
    614c:	4668      	mov	r0, sp
    614e:	2100      	movs	r1, #0
    6150:	18a6      	adds	r6, r4, r2
    6152:	466f      	mov	r7, sp
    6154:	f002 fc87 	bl	8a66 <memset>
    6158:	7be2      	ldrb	r2, [r4, #15]
    615a:	3201      	adds	r2, #1
    615c:	b2d2      	uxtb	r2, r2
    615e:	73e2      	strb	r2, [r4, #15]
    6160:	2a00      	cmp	r2, #0
    6162:	d14d      	bne.n	6200 <ctr_drbg_update_internal+0xc0>
    6164:	7ba2      	ldrb	r2, [r4, #14]
    6166:	3201      	adds	r2, #1
    6168:	b2d2      	uxtb	r2, r2
    616a:	73a2      	strb	r2, [r4, #14]
    616c:	2a00      	cmp	r2, #0
    616e:	d147      	bne.n	6200 <ctr_drbg_update_internal+0xc0>
    6170:	7b63      	ldrb	r3, [r4, #13]
    6172:	3301      	adds	r3, #1
    6174:	b2db      	uxtb	r3, r3
    6176:	7363      	strb	r3, [r4, #13]
    6178:	2b00      	cmp	r3, #0
    617a:	d141      	bne.n	6200 <ctr_drbg_update_internal+0xc0>
    617c:	7b23      	ldrb	r3, [r4, #12]
    617e:	3301      	adds	r3, #1
    6180:	b2db      	uxtb	r3, r3
    6182:	7323      	strb	r3, [r4, #12]
    6184:	2b00      	cmp	r3, #0
    6186:	d13b      	bne.n	6200 <ctr_drbg_update_internal+0xc0>
    6188:	7ae3      	ldrb	r3, [r4, #11]
    618a:	3301      	adds	r3, #1
    618c:	b2db      	uxtb	r3, r3
    618e:	72e3      	strb	r3, [r4, #11]
    6190:	2b00      	cmp	r3, #0
    6192:	d135      	bne.n	6200 <ctr_drbg_update_internal+0xc0>
    6194:	7aa3      	ldrb	r3, [r4, #10]
    6196:	3301      	adds	r3, #1
    6198:	b2db      	uxtb	r3, r3
    619a:	72a3      	strb	r3, [r4, #10]
    619c:	2b00      	cmp	r3, #0
    619e:	d12f      	bne.n	6200 <ctr_drbg_update_internal+0xc0>
    61a0:	7a63      	ldrb	r3, [r4, #9]
    61a2:	3301      	adds	r3, #1
    61a4:	b2db      	uxtb	r3, r3
    61a6:	7263      	strb	r3, [r4, #9]
    61a8:	bb53      	cbnz	r3, 6200 <ctr_drbg_update_internal+0xc0>
    61aa:	7a23      	ldrb	r3, [r4, #8]
    61ac:	3301      	adds	r3, #1
    61ae:	b2db      	uxtb	r3, r3
    61b0:	7223      	strb	r3, [r4, #8]
    61b2:	bb2b      	cbnz	r3, 6200 <ctr_drbg_update_internal+0xc0>
    61b4:	79e3      	ldrb	r3, [r4, #7]
    61b6:	3301      	adds	r3, #1
    61b8:	b2db      	uxtb	r3, r3
    61ba:	71e3      	strb	r3, [r4, #7]
    61bc:	bb03      	cbnz	r3, 6200 <ctr_drbg_update_internal+0xc0>
    61be:	79a3      	ldrb	r3, [r4, #6]
    61c0:	3301      	adds	r3, #1
    61c2:	b2db      	uxtb	r3, r3
    61c4:	71a3      	strb	r3, [r4, #6]
    61c6:	b9db      	cbnz	r3, 6200 <ctr_drbg_update_internal+0xc0>
    61c8:	7963      	ldrb	r3, [r4, #5]
    61ca:	3301      	adds	r3, #1
    61cc:	b2db      	uxtb	r3, r3
    61ce:	7163      	strb	r3, [r4, #5]
    61d0:	b9b3      	cbnz	r3, 6200 <ctr_drbg_update_internal+0xc0>
    61d2:	7923      	ldrb	r3, [r4, #4]
    61d4:	3301      	adds	r3, #1
    61d6:	b2db      	uxtb	r3, r3
    61d8:	7123      	strb	r3, [r4, #4]
    61da:	b98b      	cbnz	r3, 6200 <ctr_drbg_update_internal+0xc0>
    61dc:	78e3      	ldrb	r3, [r4, #3]
    61de:	3301      	adds	r3, #1
    61e0:	b2db      	uxtb	r3, r3
    61e2:	70e3      	strb	r3, [r4, #3]
    61e4:	b963      	cbnz	r3, 6200 <ctr_drbg_update_internal+0xc0>
    61e6:	78a3      	ldrb	r3, [r4, #2]
    61e8:	3301      	adds	r3, #1
    61ea:	b2db      	uxtb	r3, r3
    61ec:	70a3      	strb	r3, [r4, #2]
    61ee:	b93b      	cbnz	r3, 6200 <ctr_drbg_update_internal+0xc0>
    61f0:	7863      	ldrb	r3, [r4, #1]
    61f2:	3301      	adds	r3, #1
    61f4:	b2db      	uxtb	r3, r3
    61f6:	7063      	strb	r3, [r4, #1]
    61f8:	b913      	cbnz	r3, 6200 <ctr_drbg_update_internal+0xc0>
    61fa:	7823      	ldrb	r3, [r4, #0]
    61fc:	3301      	adds	r3, #1
    61fe:	7023      	strb	r3, [r4, #0]
    6200:	463b      	mov	r3, r7
    6202:	4622      	mov	r2, r4
    6204:	2101      	movs	r1, #1
    6206:	4630      	mov	r0, r6
    6208:	f001 f888 	bl	731c <cc_mbedtls_aes_crypt_ecb>
    620c:	4680      	mov	r8, r0
    620e:	2800      	cmp	r0, #0
    6210:	d12a      	bne.n	6268 <ctr_drbg_update_internal+0x128>
    6212:	3710      	adds	r7, #16
    6214:	ab08      	add	r3, sp, #32
    6216:	429f      	cmp	r7, r3
    6218:	d19e      	bne.n	6158 <ctr_drbg_update_internal+0x18>
    621a:	9900      	ldr	r1, [sp, #0]
    621c:	682b      	ldr	r3, [r5, #0]
    621e:	686a      	ldr	r2, [r5, #4]
    6220:	404b      	eors	r3, r1
    6222:	9901      	ldr	r1, [sp, #4]
    6224:	4630      	mov	r0, r6
    6226:	404a      	eors	r2, r1
    6228:	68ae      	ldr	r6, [r5, #8]
    622a:	9902      	ldr	r1, [sp, #8]
    622c:	9300      	str	r3, [sp, #0]
    622e:	4071      	eors	r1, r6
    6230:	68eb      	ldr	r3, [r5, #12]
    6232:	9e03      	ldr	r6, [sp, #12]
    6234:	9201      	str	r2, [sp, #4]
    6236:	4073      	eors	r3, r6
    6238:	692a      	ldr	r2, [r5, #16]
    623a:	9e04      	ldr	r6, [sp, #16]
    623c:	9102      	str	r1, [sp, #8]
    623e:	4056      	eors	r6, r2
    6240:	9905      	ldr	r1, [sp, #20]
    6242:	696a      	ldr	r2, [r5, #20]
    6244:	9303      	str	r3, [sp, #12]
    6246:	4051      	eors	r1, r2
    6248:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
    624c:	9d06      	ldr	r5, [sp, #24]
    624e:	9105      	str	r1, [sp, #20]
    6250:	4055      	eors	r5, r2
    6252:	9a07      	ldr	r2, [sp, #28]
    6254:	4669      	mov	r1, sp
    6256:	4053      	eors	r3, r2
    6258:	2280      	movs	r2, #128	; 0x80
    625a:	e9cd 5306 	strd	r5, r3, [sp, #24]
    625e:	9604      	str	r6, [sp, #16]
    6260:	f001 f842 	bl	72e8 <cc_mbedtls_aes_setkey_enc>
    6264:	4680      	mov	r8, r0
    6266:	b138      	cbz	r0, 6278 <ctr_drbg_update_internal+0x138>
    6268:	4668      	mov	r0, sp
    626a:	2120      	movs	r1, #32
    626c:	f7ff fe1e 	bl	5eac <mbedtls_platform_zeroize>
    6270:	4640      	mov	r0, r8
    6272:	b008      	add	sp, #32
    6274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6278:	2210      	movs	r2, #16
    627a:	4620      	mov	r0, r4
    627c:	eb0d 0102 	add.w	r1, sp, r2
    6280:	f002 fbe6 	bl	8a50 <memcpy>
    6284:	e7f0      	b.n	6268 <ctr_drbg_update_internal+0x128>
    6286:	bf00      	nop

00006288 <mbedtls_ctr_drbg_reseed_internal>:
    6288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    628c:	4604      	mov	r4, r0
    628e:	6980      	ldr	r0, [r0, #24]
    6290:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
    6294:	d854      	bhi.n	6340 <mbedtls_ctr_drbg_reseed_internal+0xb8>
    6296:	461d      	mov	r5, r3
    6298:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
    629c:	42ab      	cmp	r3, r5
    629e:	d34f      	bcc.n	6340 <mbedtls_ctr_drbg_reseed_internal+0xb8>
    62a0:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
    62a4:	1a18      	subs	r0, r3, r0
    62a6:	4290      	cmp	r0, r2
    62a8:	4616      	mov	r6, r2
    62aa:	d349      	bcc.n	6340 <mbedtls_ctr_drbg_reseed_internal+0xb8>
    62ac:	f8df 909c 	ldr.w	r9, [pc, #156]	; 634c <mbedtls_ctr_drbg_reseed_internal+0xc4>
    62b0:	f44f 72c0 	mov.w	r2, #384	; 0x180
    62b4:	460f      	mov	r7, r1
    62b6:	4648      	mov	r0, r9
    62b8:	2100      	movs	r1, #0
    62ba:	f002 fbd4 	bl	8a66 <memset>
    62be:	4649      	mov	r1, r9
    62c0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    62c4:	69a2      	ldr	r2, [r4, #24]
    62c6:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    62ca:	4798      	blx	r3
    62cc:	2800      	cmp	r0, #0
    62ce:	d13a      	bne.n	6346 <mbedtls_ctr_drbg_reseed_internal+0xbe>
    62d0:	f8d4 8018 	ldr.w	r8, [r4, #24]
    62d4:	b14d      	cbz	r5, 62ea <mbedtls_ctr_drbg_reseed_internal+0x62>
    62d6:	462a      	mov	r2, r5
    62d8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    62dc:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    62e0:	eb09 0108 	add.w	r1, r9, r8
    62e4:	4798      	blx	r3
    62e6:	bb70      	cbnz	r0, 6346 <mbedtls_ctr_drbg_reseed_internal+0xbe>
    62e8:	44a8      	add	r8, r5
    62ea:	b107      	cbz	r7, 62ee <mbedtls_ctr_drbg_reseed_internal+0x66>
    62ec:	b9c6      	cbnz	r6, 6320 <mbedtls_ctr_drbg_reseed_internal+0x98>
    62ee:	4917      	ldr	r1, [pc, #92]	; (634c <mbedtls_ctr_drbg_reseed_internal+0xc4>)
    62f0:	4642      	mov	r2, r8
    62f2:	4608      	mov	r0, r1
    62f4:	f7ff fde4 	bl	5ec0 <block_cipher_df>
    62f8:	4605      	mov	r5, r0
    62fa:	b138      	cbz	r0, 630c <mbedtls_ctr_drbg_reseed_internal+0x84>
    62fc:	f44f 71c0 	mov.w	r1, #384	; 0x180
    6300:	4812      	ldr	r0, [pc, #72]	; (634c <mbedtls_ctr_drbg_reseed_internal+0xc4>)
    6302:	f7ff fdd3 	bl	5eac <mbedtls_platform_zeroize>
    6306:	4628      	mov	r0, r5
    6308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    630c:	4620      	mov	r0, r4
    630e:	490f      	ldr	r1, [pc, #60]	; (634c <mbedtls_ctr_drbg_reseed_internal+0xc4>)
    6310:	f7ff ff16 	bl	6140 <ctr_drbg_update_internal>
    6314:	4605      	mov	r5, r0
    6316:	2800      	cmp	r0, #0
    6318:	d1f0      	bne.n	62fc <mbedtls_ctr_drbg_reseed_internal+0x74>
    631a:	2301      	movs	r3, #1
    631c:	6123      	str	r3, [r4, #16]
    631e:	e7ed      	b.n	62fc <mbedtls_ctr_drbg_reseed_internal+0x74>
    6320:	4639      	mov	r1, r7
    6322:	4632      	mov	r2, r6
    6324:	eb09 0008 	add.w	r0, r9, r8
    6328:	f002 fb92 	bl	8a50 <memcpy>
    632c:	4907      	ldr	r1, [pc, #28]	; (634c <mbedtls_ctr_drbg_reseed_internal+0xc4>)
    632e:	44b0      	add	r8, r6
    6330:	4642      	mov	r2, r8
    6332:	4608      	mov	r0, r1
    6334:	f7ff fdc4 	bl	5ec0 <block_cipher_df>
    6338:	4605      	mov	r5, r0
    633a:	2800      	cmp	r0, #0
    633c:	d1de      	bne.n	62fc <mbedtls_ctr_drbg_reseed_internal+0x74>
    633e:	e7e5      	b.n	630c <mbedtls_ctr_drbg_reseed_internal+0x84>
    6340:	f06f 0537 	mvn.w	r5, #55	; 0x37
    6344:	e7df      	b.n	6306 <mbedtls_ctr_drbg_reseed_internal+0x7e>
    6346:	f06f 0533 	mvn.w	r5, #51	; 0x33
    634a:	e7dc      	b.n	6306 <mbedtls_ctr_drbg_reseed_internal+0x7e>
    634c:	20000c30 	.word	0x20000c30

00006350 <cc_mbedtls_ctr_drbg_init>:
    6350:	b510      	push	{r4, lr}
    6352:	22a4      	movs	r2, #164	; 0xa4
    6354:	2100      	movs	r1, #0
    6356:	4604      	mov	r4, r0
    6358:	f002 fb85 	bl	8a66 <memset>
    635c:	f04f 31ff 	mov.w	r1, #4294967295
    6360:	f64f 72f0 	movw	r2, #65520	; 0xfff0
    6364:	4b04      	ldr	r3, [pc, #16]	; (6378 <cc_mbedtls_ctr_drbg_init+0x28>)
    6366:	6121      	str	r1, [r4, #16]
    6368:	61e2      	str	r2, [r4, #28]
    636a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    636e:	681b      	ldr	r3, [r3, #0]
    6370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6374:	4718      	bx	r3
    6376:	bf00      	nop
    6378:	2000011c 	.word	0x2000011c

0000637c <cc_mbedtls_ctr_drbg_seed>:
    637c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6380:	4605      	mov	r5, r0
    6382:	b085      	sub	sp, #20
    6384:	460f      	mov	r7, r1
    6386:	4616      	mov	r6, r2
    6388:	4668      	mov	r0, sp
    638a:	2210      	movs	r2, #16
    638c:	2100      	movs	r1, #0
    638e:	4699      	mov	r9, r3
    6390:	f002 fb69 	bl	8a66 <memset>
    6394:	4b1e      	ldr	r3, [pc, #120]	; (6410 <cc_mbedtls_ctr_drbg_seed+0x94>)
    6396:	f105 089c 	add.w	r8, r5, #156	; 0x9c
    639a:	4640      	mov	r0, r8
    639c:	681b      	ldr	r3, [r3, #0]
    639e:	4798      	blx	r3
    63a0:	b120      	cbz	r0, 63ac <cc_mbedtls_ctr_drbg_seed+0x30>
    63a2:	4604      	mov	r4, r0
    63a4:	4620      	mov	r0, r4
    63a6:	b005      	add	sp, #20
    63a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    63ac:	f105 0420 	add.w	r4, r5, #32
    63b0:	4620      	mov	r0, r4
    63b2:	f000 ff83 	bl	72bc <cc_mbedtls_aes_init>
    63b6:	69aa      	ldr	r2, [r5, #24]
    63b8:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
    63bc:	b9ea      	cbnz	r2, 63fa <cc_mbedtls_ctr_drbg_seed+0x7e>
    63be:	2220      	movs	r2, #32
    63c0:	692e      	ldr	r6, [r5, #16]
    63c2:	61aa      	str	r2, [r5, #24]
    63c4:	2e00      	cmp	r6, #0
    63c6:	db20      	blt.n	640a <cc_mbedtls_ctr_drbg_seed+0x8e>
    63c8:	4620      	mov	r0, r4
    63ca:	4669      	mov	r1, sp
    63cc:	2280      	movs	r2, #128	; 0x80
    63ce:	f000 ff8b 	bl	72e8 <cc_mbedtls_aes_setkey_enc>
    63d2:	4604      	mov	r4, r0
    63d4:	b930      	cbnz	r0, 63e4 <cc_mbedtls_ctr_drbg_seed+0x68>
    63d6:	4633      	mov	r3, r6
    63d8:	4649      	mov	r1, r9
    63da:	4628      	mov	r0, r5
    63dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    63de:	f7ff ff53 	bl	6288 <mbedtls_ctr_drbg_reseed_internal>
    63e2:	4604      	mov	r4, r0
    63e4:	4b0b      	ldr	r3, [pc, #44]	; (6414 <cc_mbedtls_ctr_drbg_seed+0x98>)
    63e6:	4640      	mov	r0, r8
    63e8:	681b      	ldr	r3, [r3, #0]
    63ea:	4798      	blx	r3
    63ec:	2800      	cmp	r0, #0
    63ee:	bf18      	it	ne
    63f0:	4604      	movne	r4, r0
    63f2:	4620      	mov	r0, r4
    63f4:	b005      	add	sp, #20
    63f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    63fa:	692e      	ldr	r6, [r5, #16]
    63fc:	2e00      	cmp	r6, #0
    63fe:	dae3      	bge.n	63c8 <cc_mbedtls_ctr_drbg_seed+0x4c>
    6400:	2a17      	cmp	r2, #23
    6402:	d802      	bhi.n	640a <cc_mbedtls_ctr_drbg_seed+0x8e>
    6404:	1c53      	adds	r3, r2, #1
    6406:	085e      	lsrs	r6, r3, #1
    6408:	e7de      	b.n	63c8 <cc_mbedtls_ctr_drbg_seed+0x4c>
    640a:	2600      	movs	r6, #0
    640c:	e7dc      	b.n	63c8 <cc_mbedtls_ctr_drbg_seed+0x4c>
    640e:	bf00      	nop
    6410:	20000120 	.word	0x20000120
    6414:	20000124 	.word	0x20000124

00006418 <cc_mbedtls_ctr_drbg_random_with_add>:
    6418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    641c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    6420:	b08d      	sub	sp, #52	; 0x34
    6422:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
    6426:	f200 80e4 	bhi.w	65f2 <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
    642a:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
    642e:	f200 80dd 	bhi.w	65ec <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
    6432:	4604      	mov	r4, r0
    6434:	4615      	mov	r5, r2
    6436:	460e      	mov	r6, r1
    6438:	2220      	movs	r2, #32
    643a:	2100      	movs	r1, #0
    643c:	a804      	add	r0, sp, #16
    643e:	461f      	mov	r7, r3
    6440:	f002 fb11 	bl	8a66 <memset>
    6444:	4b6c      	ldr	r3, [pc, #432]	; (65f8 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
    6446:	f104 099c 	add.w	r9, r4, #156	; 0x9c
    644a:	4648      	mov	r0, r9
    644c:	681b      	ldr	r3, [r3, #0]
    644e:	4798      	blx	r3
    6450:	4683      	mov	fp, r0
    6452:	2800      	cmp	r0, #0
    6454:	f040 8093 	bne.w	657e <cc_mbedtls_ctr_drbg_random_with_add+0x166>
    6458:	6922      	ldr	r2, [r4, #16]
    645a:	69e3      	ldr	r3, [r4, #28]
    645c:	429a      	cmp	r2, r3
    645e:	f300 8092 	bgt.w	6586 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
    6462:	6963      	ldr	r3, [r4, #20]
    6464:	2b00      	cmp	r3, #0
    6466:	f040 808e 	bne.w	6586 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
    646a:	f1b8 0f00 	cmp.w	r8, #0
    646e:	f040 80a9 	bne.w	65c4 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
    6472:	f8df a188 	ldr.w	sl, [pc, #392]	; 65fc <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
    6476:	466f      	mov	r7, sp
    6478:	2d00      	cmp	r5, #0
    647a:	f000 8098 	beq.w	65ae <cc_mbedtls_ctr_drbg_random_with_add+0x196>
    647e:	466f      	mov	r7, sp
    6480:	f104 0820 	add.w	r8, r4, #32
    6484:	e00e      	b.n	64a4 <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
    6486:	2d10      	cmp	r5, #16
    6488:	46ab      	mov	fp, r5
    648a:	bf28      	it	cs
    648c:	f04f 0b10 	movcs.w	fp, #16
    6490:	4630      	mov	r0, r6
    6492:	4639      	mov	r1, r7
    6494:	465a      	mov	r2, fp
    6496:	f002 fadb 	bl	8a50 <memcpy>
    649a:	ebb5 050b 	subs.w	r5, r5, fp
    649e:	445e      	add	r6, fp
    64a0:	f000 8085 	beq.w	65ae <cc_mbedtls_ctr_drbg_random_with_add+0x196>
    64a4:	7be3      	ldrb	r3, [r4, #15]
    64a6:	3301      	adds	r3, #1
    64a8:	b2db      	uxtb	r3, r3
    64aa:	73e3      	strb	r3, [r4, #15]
    64ac:	2b00      	cmp	r3, #0
    64ae:	d14d      	bne.n	654c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    64b0:	7ba3      	ldrb	r3, [r4, #14]
    64b2:	3301      	adds	r3, #1
    64b4:	b2db      	uxtb	r3, r3
    64b6:	73a3      	strb	r3, [r4, #14]
    64b8:	2b00      	cmp	r3, #0
    64ba:	d147      	bne.n	654c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    64bc:	7b63      	ldrb	r3, [r4, #13]
    64be:	3301      	adds	r3, #1
    64c0:	b2db      	uxtb	r3, r3
    64c2:	7363      	strb	r3, [r4, #13]
    64c4:	2b00      	cmp	r3, #0
    64c6:	d141      	bne.n	654c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    64c8:	7b23      	ldrb	r3, [r4, #12]
    64ca:	3301      	adds	r3, #1
    64cc:	b2db      	uxtb	r3, r3
    64ce:	7323      	strb	r3, [r4, #12]
    64d0:	2b00      	cmp	r3, #0
    64d2:	d13b      	bne.n	654c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    64d4:	7ae3      	ldrb	r3, [r4, #11]
    64d6:	3301      	adds	r3, #1
    64d8:	b2db      	uxtb	r3, r3
    64da:	72e3      	strb	r3, [r4, #11]
    64dc:	2b00      	cmp	r3, #0
    64de:	d135      	bne.n	654c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    64e0:	7aa3      	ldrb	r3, [r4, #10]
    64e2:	3301      	adds	r3, #1
    64e4:	b2db      	uxtb	r3, r3
    64e6:	72a3      	strb	r3, [r4, #10]
    64e8:	2b00      	cmp	r3, #0
    64ea:	d12f      	bne.n	654c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    64ec:	7a63      	ldrb	r3, [r4, #9]
    64ee:	3301      	adds	r3, #1
    64f0:	b2db      	uxtb	r3, r3
    64f2:	7263      	strb	r3, [r4, #9]
    64f4:	bb53      	cbnz	r3, 654c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    64f6:	7a23      	ldrb	r3, [r4, #8]
    64f8:	3301      	adds	r3, #1
    64fa:	b2db      	uxtb	r3, r3
    64fc:	7223      	strb	r3, [r4, #8]
    64fe:	bb2b      	cbnz	r3, 654c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    6500:	79e3      	ldrb	r3, [r4, #7]
    6502:	3301      	adds	r3, #1
    6504:	b2db      	uxtb	r3, r3
    6506:	71e3      	strb	r3, [r4, #7]
    6508:	bb03      	cbnz	r3, 654c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    650a:	79a3      	ldrb	r3, [r4, #6]
    650c:	3301      	adds	r3, #1
    650e:	b2db      	uxtb	r3, r3
    6510:	71a3      	strb	r3, [r4, #6]
    6512:	b9db      	cbnz	r3, 654c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    6514:	7963      	ldrb	r3, [r4, #5]
    6516:	3301      	adds	r3, #1
    6518:	b2db      	uxtb	r3, r3
    651a:	7163      	strb	r3, [r4, #5]
    651c:	b9b3      	cbnz	r3, 654c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    651e:	7923      	ldrb	r3, [r4, #4]
    6520:	3301      	adds	r3, #1
    6522:	b2db      	uxtb	r3, r3
    6524:	7123      	strb	r3, [r4, #4]
    6526:	b98b      	cbnz	r3, 654c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    6528:	78e3      	ldrb	r3, [r4, #3]
    652a:	3301      	adds	r3, #1
    652c:	b2db      	uxtb	r3, r3
    652e:	70e3      	strb	r3, [r4, #3]
    6530:	b963      	cbnz	r3, 654c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    6532:	78a3      	ldrb	r3, [r4, #2]
    6534:	3301      	adds	r3, #1
    6536:	b2db      	uxtb	r3, r3
    6538:	70a3      	strb	r3, [r4, #2]
    653a:	b93b      	cbnz	r3, 654c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    653c:	7863      	ldrb	r3, [r4, #1]
    653e:	3301      	adds	r3, #1
    6540:	b2db      	uxtb	r3, r3
    6542:	7063      	strb	r3, [r4, #1]
    6544:	b913      	cbnz	r3, 654c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    6546:	7823      	ldrb	r3, [r4, #0]
    6548:	3301      	adds	r3, #1
    654a:	7023      	strb	r3, [r4, #0]
    654c:	463b      	mov	r3, r7
    654e:	4622      	mov	r2, r4
    6550:	2101      	movs	r1, #1
    6552:	4640      	mov	r0, r8
    6554:	f000 fee2 	bl	731c <cc_mbedtls_aes_crypt_ecb>
    6558:	4683      	mov	fp, r0
    655a:	2800      	cmp	r0, #0
    655c:	d093      	beq.n	6486 <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
    655e:	f8da 3000 	ldr.w	r3, [sl]
    6562:	4648      	mov	r0, r9
    6564:	4798      	blx	r3
    6566:	4603      	mov	r3, r0
    6568:	2120      	movs	r1, #32
    656a:	a804      	add	r0, sp, #16
    656c:	2b00      	cmp	r3, #0
    656e:	bf18      	it	ne
    6570:	469b      	movne	fp, r3
    6572:	f7ff fc9b 	bl	5eac <mbedtls_platform_zeroize>
    6576:	4638      	mov	r0, r7
    6578:	2110      	movs	r1, #16
    657a:	f7ff fc97 	bl	5eac <mbedtls_platform_zeroize>
    657e:	4658      	mov	r0, fp
    6580:	b00d      	add	sp, #52	; 0x34
    6582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6586:	4642      	mov	r2, r8
    6588:	4639      	mov	r1, r7
    658a:	2300      	movs	r3, #0
    658c:	4620      	mov	r0, r4
    658e:	f7ff fe7b 	bl	6288 <mbedtls_ctr_drbg_reseed_internal>
    6592:	f8df a068 	ldr.w	sl, [pc, #104]	; 65fc <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
    6596:	2800      	cmp	r0, #0
    6598:	f43f af6d 	beq.w	6476 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
    659c:	4648      	mov	r0, r9
    659e:	f8da 3000 	ldr.w	r3, [sl]
    65a2:	4798      	blx	r3
    65a4:	4683      	mov	fp, r0
    65a6:	2800      	cmp	r0, #0
    65a8:	f43f af65 	beq.w	6476 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
    65ac:	e7e7      	b.n	657e <cc_mbedtls_ctr_drbg_random_with_add+0x166>
    65ae:	4620      	mov	r0, r4
    65b0:	a904      	add	r1, sp, #16
    65b2:	f7ff fdc5 	bl	6140 <ctr_drbg_update_internal>
    65b6:	4683      	mov	fp, r0
    65b8:	2800      	cmp	r0, #0
    65ba:	d1d0      	bne.n	655e <cc_mbedtls_ctr_drbg_random_with_add+0x146>
    65bc:	6923      	ldr	r3, [r4, #16]
    65be:	3301      	adds	r3, #1
    65c0:	6123      	str	r3, [r4, #16]
    65c2:	e7cc      	b.n	655e <cc_mbedtls_ctr_drbg_random_with_add+0x146>
    65c4:	4642      	mov	r2, r8
    65c6:	4639      	mov	r1, r7
    65c8:	a804      	add	r0, sp, #16
    65ca:	f7ff fc79 	bl	5ec0 <block_cipher_df>
    65ce:	4683      	mov	fp, r0
    65d0:	b118      	cbz	r0, 65da <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
    65d2:	466f      	mov	r7, sp
    65d4:	f8df a024 	ldr.w	sl, [pc, #36]	; 65fc <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
    65d8:	e7c1      	b.n	655e <cc_mbedtls_ctr_drbg_random_with_add+0x146>
    65da:	4620      	mov	r0, r4
    65dc:	a904      	add	r1, sp, #16
    65de:	f7ff fdaf 	bl	6140 <ctr_drbg_update_internal>
    65e2:	4683      	mov	fp, r0
    65e4:	2800      	cmp	r0, #0
    65e6:	f43f af44 	beq.w	6472 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
    65ea:	e7f2      	b.n	65d2 <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
    65ec:	f06f 0b37 	mvn.w	fp, #55	; 0x37
    65f0:	e7c5      	b.n	657e <cc_mbedtls_ctr_drbg_random_with_add+0x166>
    65f2:	f06f 0b35 	mvn.w	fp, #53	; 0x35
    65f6:	e7c2      	b.n	657e <cc_mbedtls_ctr_drbg_random_with_add+0x166>
    65f8:	20000120 	.word	0x20000120
    65fc:	20000124 	.word	0x20000124

00006600 <entropy_update>:
    6600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6604:	2b20      	cmp	r3, #32
    6606:	461d      	mov	r5, r3
    6608:	4606      	mov	r6, r0
    660a:	4689      	mov	r9, r1
    660c:	4690      	mov	r8, r2
    660e:	b08b      	sub	sp, #44	; 0x2c
    6610:	d826      	bhi.n	6660 <entropy_update+0x60>
    6612:	b2db      	uxtb	r3, r3
    6614:	af02      	add	r7, sp, #8
    6616:	6831      	ldr	r1, [r6, #0]
    6618:	f88d 9004 	strb.w	r9, [sp, #4]
    661c:	f88d 3005 	strb.w	r3, [sp, #5]
    6620:	f106 0904 	add.w	r9, r6, #4
    6624:	b921      	cbnz	r1, 6630 <entropy_update+0x30>
    6626:	4648      	mov	r0, r9
    6628:	f000 febc 	bl	73a4 <cc_mbedtls_sha256_starts>
    662c:	4604      	mov	r4, r0
    662e:	b940      	cbnz	r0, 6642 <entropy_update+0x42>
    6630:	2301      	movs	r3, #1
    6632:	2202      	movs	r2, #2
    6634:	4648      	mov	r0, r9
    6636:	6033      	str	r3, [r6, #0]
    6638:	a901      	add	r1, sp, #4
    663a:	f000 fec7 	bl	73cc <cc_mbedtls_sha256_update>
    663e:	4604      	mov	r4, r0
    6640:	b138      	cbz	r0, 6652 <entropy_update+0x52>
    6642:	4638      	mov	r0, r7
    6644:	2120      	movs	r1, #32
    6646:	f7ff fc31 	bl	5eac <mbedtls_platform_zeroize>
    664a:	4620      	mov	r0, r4
    664c:	b00b      	add	sp, #44	; 0x2c
    664e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6652:	462a      	mov	r2, r5
    6654:	4641      	mov	r1, r8
    6656:	4648      	mov	r0, r9
    6658:	f000 feb8 	bl	73cc <cc_mbedtls_sha256_update>
    665c:	4604      	mov	r4, r0
    665e:	e7f0      	b.n	6642 <entropy_update+0x42>
    6660:	af02      	add	r7, sp, #8
    6662:	4619      	mov	r1, r3
    6664:	4610      	mov	r0, r2
    6666:	2300      	movs	r3, #0
    6668:	463a      	mov	r2, r7
    666a:	f000 ffb1 	bl	75d0 <cc_mbedtls_sha256>
    666e:	4604      	mov	r4, r0
    6670:	2800      	cmp	r0, #0
    6672:	d1e6      	bne.n	6642 <entropy_update+0x42>
    6674:	2320      	movs	r3, #32
    6676:	46b8      	mov	r8, r7
    6678:	461d      	mov	r5, r3
    667a:	e7cc      	b.n	6616 <entropy_update+0x16>

0000667c <entropy_gather_internal.part.0>:
    667c:	b5f0      	push	{r4, r5, r6, r7, lr}
    667e:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    6682:	b0a7      	sub	sp, #156	; 0x9c
    6684:	2b00      	cmp	r3, #0
    6686:	bfd8      	it	le
    6688:	ae02      	addle	r6, sp, #8
    668a:	dd2c      	ble.n	66e6 <entropy_gather_internal.part.0+0x6a>
    668c:	4605      	mov	r5, r0
    668e:	2300      	movs	r3, #0
    6690:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    6694:	ae02      	add	r6, sp, #8
    6696:	9301      	str	r3, [sp, #4]
    6698:	f1a4 0701 	sub.w	r7, r4, #1
    669c:	4631      	mov	r1, r6
    669e:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
    66a2:	2290      	movs	r2, #144	; 0x90
    66a4:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
    66a8:	ab01      	add	r3, sp, #4
    66aa:	fab7 f787 	clz	r7, r7
    66ae:	47a0      	blx	r4
    66b0:	097f      	lsrs	r7, r7, #5
    66b2:	4604      	mov	r4, r0
    66b4:	b910      	cbnz	r0, 66bc <entropy_gather_internal.part.0+0x40>
    66b6:	9b01      	ldr	r3, [sp, #4]
    66b8:	b93b      	cbnz	r3, 66ca <entropy_gather_internal.part.0+0x4e>
    66ba:	b1a7      	cbz	r7, 66e6 <entropy_gather_internal.part.0+0x6a>
    66bc:	4630      	mov	r0, r6
    66be:	2190      	movs	r1, #144	; 0x90
    66c0:	f7ff fbf4 	bl	5eac <mbedtls_platform_zeroize>
    66c4:	4620      	mov	r0, r4
    66c6:	b027      	add	sp, #156	; 0x9c
    66c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    66ca:	4601      	mov	r1, r0
    66cc:	4632      	mov	r2, r6
    66ce:	4628      	mov	r0, r5
    66d0:	f7ff ff96 	bl	6600 <entropy_update>
    66d4:	b950      	cbnz	r0, 66ec <entropy_gather_internal.part.0+0x70>
    66d6:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    66da:	9a01      	ldr	r2, [sp, #4]
    66dc:	4413      	add	r3, r2
    66de:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
    66e2:	2f00      	cmp	r7, #0
    66e4:	d1ea      	bne.n	66bc <entropy_gather_internal.part.0+0x40>
    66e6:	f06f 043c 	mvn.w	r4, #60	; 0x3c
    66ea:	e7e7      	b.n	66bc <entropy_gather_internal.part.0+0x40>
    66ec:	4604      	mov	r4, r0
    66ee:	4620      	mov	r0, r4
    66f0:	b027      	add	sp, #156	; 0x9c
    66f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000066f4 <cc_mbedtls_entropy_init>:
    66f4:	b570      	push	{r4, r5, r6, lr}
    66f6:	2500      	movs	r5, #0
    66f8:	4604      	mov	r4, r0
    66fa:	4629      	mov	r1, r5
    66fc:	2214      	movs	r2, #20
    66fe:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
    6702:	30f8      	adds	r0, #248	; 0xf8
    6704:	f002 f9af 	bl	8a66 <memset>
    6708:	4b16      	ldr	r3, [pc, #88]	; (6764 <cc_mbedtls_entropy_init+0x70>)
    670a:	f504 7686 	add.w	r6, r4, #268	; 0x10c
    670e:	681b      	ldr	r3, [r3, #0]
    6710:	4630      	mov	r0, r6
    6712:	4798      	blx	r3
    6714:	4620      	mov	r0, r4
    6716:	f840 5b04 	str.w	r5, [r0], #4
    671a:	f000 fe29 	bl	7370 <cc_mbedtls_sha256_init>
    671e:	4b12      	ldr	r3, [pc, #72]	; (6768 <cc_mbedtls_entropy_init+0x74>)
    6720:	4630      	mov	r0, r6
    6722:	681b      	ldr	r3, [r3, #0]
    6724:	4798      	blx	r3
    6726:	b9d8      	cbnz	r0, 6760 <cc_mbedtls_entropy_init+0x6c>
    6728:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    672c:	42ab      	cmp	r3, r5
    672e:	dc11      	bgt.n	6754 <cc_mbedtls_entropy_init+0x60>
    6730:	2101      	movs	r1, #1
    6732:	2520      	movs	r5, #32
    6734:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    6738:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    673c:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    6740:	480a      	ldr	r0, [pc, #40]	; (676c <cc_mbedtls_entropy_init+0x78>)
    6742:	440b      	add	r3, r1
    6744:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
    6748:	f8c2 00f8 	str.w	r0, [r2, #248]	; 0xf8
    674c:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
    6750:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
    6754:	4b06      	ldr	r3, [pc, #24]	; (6770 <cc_mbedtls_entropy_init+0x7c>)
    6756:	4630      	mov	r0, r6
    6758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    675c:	681b      	ldr	r3, [r3, #0]
    675e:	4718      	bx	r3
    6760:	bd70      	pop	{r4, r5, r6, pc}
    6762:	bf00      	nop
    6764:	2000011c 	.word	0x2000011c
    6768:	20000120 	.word	0x20000120
    676c:	000071b9 	.word	0x000071b9
    6770:	20000124 	.word	0x20000124

00006774 <cc_mbedtls_entropy_func>:
    6774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6778:	2a20      	cmp	r2, #32
    677a:	b088      	sub	sp, #32
    677c:	d878      	bhi.n	6870 <cc_mbedtls_entropy_func+0xfc>
    677e:	4b3e      	ldr	r3, [pc, #248]	; (6878 <cc_mbedtls_entropy_func+0x104>)
    6780:	f500 7986 	add.w	r9, r0, #268	; 0x10c
    6784:	4604      	mov	r4, r0
    6786:	681b      	ldr	r3, [r3, #0]
    6788:	4648      	mov	r0, r9
    678a:	4617      	mov	r7, r2
    678c:	4688      	mov	r8, r1
    678e:	4798      	blx	r3
    6790:	4605      	mov	r5, r0
    6792:	bb40      	cbnz	r0, 67e6 <cc_mbedtls_entropy_func+0x72>
    6794:	f240 1601 	movw	r6, #257	; 0x101
    6798:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    679c:	2b00      	cmp	r3, #0
    679e:	d063      	beq.n	6868 <cc_mbedtls_entropy_func+0xf4>
    67a0:	4620      	mov	r0, r4
    67a2:	f7ff ff6b 	bl	667c <entropy_gather_internal.part.0>
    67a6:	4605      	mov	r5, r0
    67a8:	2800      	cmp	r0, #0
    67aa:	d15f      	bne.n	686c <cc_mbedtls_entropy_func+0xf8>
    67ac:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    67b0:	2b00      	cmp	r3, #0
    67b2:	dd07      	ble.n	67c4 <cc_mbedtls_entropy_func+0x50>
    67b4:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
    67b8:	4290      	cmp	r0, r2
    67ba:	d303      	bcc.n	67c4 <cc_mbedtls_entropy_func+0x50>
    67bc:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    67c0:	2a01      	cmp	r2, #1
    67c2:	d014      	beq.n	67ee <cc_mbedtls_entropy_func+0x7a>
    67c4:	3e01      	subs	r6, #1
    67c6:	d1e9      	bne.n	679c <cc_mbedtls_entropy_func+0x28>
    67c8:	f06f 053b 	mvn.w	r5, #59	; 0x3b
    67cc:	466e      	mov	r6, sp
    67ce:	4630      	mov	r0, r6
    67d0:	2120      	movs	r1, #32
    67d2:	f7ff fb6b 	bl	5eac <mbedtls_platform_zeroize>
    67d6:	4b29      	ldr	r3, [pc, #164]	; (687c <cc_mbedtls_entropy_func+0x108>)
    67d8:	4648      	mov	r0, r9
    67da:	681b      	ldr	r3, [r3, #0]
    67dc:	4798      	blx	r3
    67de:	2800      	cmp	r0, #0
    67e0:	bf18      	it	ne
    67e2:	f06f 051d 	mvnne.w	r5, #29
    67e6:	4628      	mov	r0, r5
    67e8:	b008      	add	sp, #32
    67ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    67ee:	281f      	cmp	r0, #31
    67f0:	d9e8      	bls.n	67c4 <cc_mbedtls_entropy_func+0x50>
    67f2:	466e      	mov	r6, sp
    67f4:	4629      	mov	r1, r5
    67f6:	2220      	movs	r2, #32
    67f8:	4630      	mov	r0, r6
    67fa:	f104 0a04 	add.w	sl, r4, #4
    67fe:	f002 f932 	bl	8a66 <memset>
    6802:	4631      	mov	r1, r6
    6804:	4650      	mov	r0, sl
    6806:	f000 fe0b 	bl	7420 <cc_mbedtls_sha256_finish>
    680a:	4605      	mov	r5, r0
    680c:	2800      	cmp	r0, #0
    680e:	d1de      	bne.n	67ce <cc_mbedtls_entropy_func+0x5a>
    6810:	4650      	mov	r0, sl
    6812:	f000 fdc1 	bl	7398 <cc_mbedtls_sha256_free>
    6816:	4650      	mov	r0, sl
    6818:	f000 fdaa 	bl	7370 <cc_mbedtls_sha256_init>
    681c:	4629      	mov	r1, r5
    681e:	4650      	mov	r0, sl
    6820:	f000 fdc0 	bl	73a4 <cc_mbedtls_sha256_starts>
    6824:	4605      	mov	r5, r0
    6826:	2800      	cmp	r0, #0
    6828:	d1d1      	bne.n	67ce <cc_mbedtls_entropy_func+0x5a>
    682a:	4650      	mov	r0, sl
    682c:	2220      	movs	r2, #32
    682e:	4631      	mov	r1, r6
    6830:	f000 fdcc 	bl	73cc <cc_mbedtls_sha256_update>
    6834:	4605      	mov	r5, r0
    6836:	2800      	cmp	r0, #0
    6838:	d1c9      	bne.n	67ce <cc_mbedtls_entropy_func+0x5a>
    683a:	4603      	mov	r3, r0
    683c:	4632      	mov	r2, r6
    683e:	2120      	movs	r1, #32
    6840:	4630      	mov	r0, r6
    6842:	f000 fec5 	bl	75d0 <cc_mbedtls_sha256>
    6846:	4605      	mov	r5, r0
    6848:	2800      	cmp	r0, #0
    684a:	d1c0      	bne.n	67ce <cc_mbedtls_entropy_func+0x5a>
    684c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    6850:	463a      	mov	r2, r7
    6852:	2b00      	cmp	r3, #0
    6854:	bfc8      	it	gt
    6856:	2300      	movgt	r3, #0
    6858:	4640      	mov	r0, r8
    685a:	4631      	mov	r1, r6
    685c:	bfc8      	it	gt
    685e:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
    6862:	f002 f8f5 	bl	8a50 <memcpy>
    6866:	e7b2      	b.n	67ce <cc_mbedtls_entropy_func+0x5a>
    6868:	f06f 053f 	mvn.w	r5, #63	; 0x3f
    686c:	466e      	mov	r6, sp
    686e:	e7ae      	b.n	67ce <cc_mbedtls_entropy_func+0x5a>
    6870:	f06f 053b 	mvn.w	r5, #59	; 0x3b
    6874:	e7b7      	b.n	67e6 <cc_mbedtls_entropy_func+0x72>
    6876:	bf00      	nop
    6878:	20000120 	.word	0x20000120
    687c:	20000124 	.word	0x20000124

00006880 <RndStartupTest.constprop.0>:
    6880:	b530      	push	{r4, r5, lr}
    6882:	b0c3      	sub	sp, #268	; 0x10c
    6884:	22dc      	movs	r2, #220	; 0xdc
    6886:	2100      	movs	r1, #0
    6888:	a80b      	add	r0, sp, #44	; 0x2c
    688a:	f002 f8ec 	bl	8a66 <memset>
    688e:	2228      	movs	r2, #40	; 0x28
    6890:	2100      	movs	r1, #0
    6892:	a801      	add	r0, sp, #4
    6894:	f002 f8e7 	bl	8a66 <memset>
    6898:	a801      	add	r0, sp, #4
    689a:	f000 fec1 	bl	7620 <RNG_PLAT_SetUserRngParameters>
    689e:	4604      	mov	r4, r0
    68a0:	b110      	cbz	r0, 68a8 <RndStartupTest.constprop.0+0x28>
    68a2:	4620      	mov	r0, r4
    68a4:	b043      	add	sp, #268	; 0x10c
    68a6:	bd30      	pop	{r4, r5, pc}
    68a8:	4d18      	ldr	r5, [pc, #96]	; (690c <RndStartupTest.constprop.0+0x8c>)
    68aa:	f04f 31ff 	mov.w	r1, #4294967295
    68ae:	6828      	ldr	r0, [r5, #0]
    68b0:	f000 f93a 	bl	6b28 <CC_PalMutexLock>
    68b4:	4604      	mov	r4, r0
    68b6:	b9c0      	cbnz	r0, 68ea <RndStartupTest.constprop.0+0x6a>
    68b8:	2000      	movs	r0, #0
    68ba:	f000 f965 	bl	6b88 <CC_PalPowerSaveModeSelect>
    68be:	bb00      	cbnz	r0, 6902 <RndStartupTest.constprop.0+0x82>
    68c0:	4a13      	ldr	r2, [pc, #76]	; (6910 <RndStartupTest.constprop.0+0x90>)
    68c2:	a901      	add	r1, sp, #4
    68c4:	a80b      	add	r0, sp, #44	; 0x2c
    68c6:	f000 fc69 	bl	719c <LLF_RND_RunTrngStartupTest>
    68ca:	4604      	mov	r4, r0
    68cc:	2001      	movs	r0, #1
    68ce:	f000 f95b 	bl	6b88 <CC_PalPowerSaveModeSelect>
    68d2:	b990      	cbnz	r0, 68fa <RndStartupTest.constprop.0+0x7a>
    68d4:	6828      	ldr	r0, [r5, #0]
    68d6:	f000 f92f 	bl	6b38 <CC_PalMutexUnlock>
    68da:	2800      	cmp	r0, #0
    68dc:	d0e1      	beq.n	68a2 <RndStartupTest.constprop.0+0x22>
    68de:	480d      	ldr	r0, [pc, #52]	; (6914 <RndStartupTest.constprop.0+0x94>)
    68e0:	f7ff f9d8 	bl	5c94 <CC_PalAbort>
    68e4:	4620      	mov	r0, r4
    68e6:	b043      	add	sp, #268	; 0x10c
    68e8:	bd30      	pop	{r4, r5, pc}
    68ea:	480b      	ldr	r0, [pc, #44]	; (6918 <RndStartupTest.constprop.0+0x98>)
    68ec:	f7ff f9d2 	bl	5c94 <CC_PalAbort>
    68f0:	2c01      	cmp	r4, #1
    68f2:	bf08      	it	eq
    68f4:	2405      	moveq	r4, #5
    68f6:	d0ed      	beq.n	68d4 <RndStartupTest.constprop.0+0x54>
    68f8:	e7de      	b.n	68b8 <RndStartupTest.constprop.0+0x38>
    68fa:	4808      	ldr	r0, [pc, #32]	; (691c <RndStartupTest.constprop.0+0x9c>)
    68fc:	f7ff f9ca 	bl	5c94 <CC_PalAbort>
    6900:	e7e8      	b.n	68d4 <RndStartupTest.constprop.0+0x54>
    6902:	4807      	ldr	r0, [pc, #28]	; (6920 <RndStartupTest.constprop.0+0xa0>)
    6904:	f7ff f9c6 	bl	5c94 <CC_PalAbort>
    6908:	e7da      	b.n	68c0 <RndStartupTest.constprop.0+0x40>
    690a:	bf00      	nop
    690c:	20000118 	.word	0x20000118
    6910:	20000e18 	.word	0x20000e18
    6914:	00009644 	.word	0x00009644
    6918:	000095ec 	.word	0x000095ec
    691c:	00009624 	.word	0x00009624
    6920:	00009604 	.word	0x00009604

00006924 <CC_LibInit>:
    6924:	b510      	push	{r4, lr}
    6926:	b082      	sub	sp, #8
    6928:	f000 f854 	bl	69d4 <CC_HalInit>
    692c:	b128      	cbz	r0, 693a <CC_LibInit+0x16>
    692e:	f000 f8a3 	bl	6a78 <CC_PalTerminate>
    6932:	2403      	movs	r4, #3
    6934:	4620      	mov	r0, r4
    6936:	b002      	add	sp, #8
    6938:	bd10      	pop	{r4, pc}
    693a:	f000 f86f 	bl	6a1c <CC_PalInit>
    693e:	b9d0      	cbnz	r0, 6976 <CC_LibInit+0x52>
    6940:	f000 f922 	bl	6b88 <CC_PalPowerSaveModeSelect>
    6944:	b9d8      	cbnz	r0, 697e <CC_LibInit+0x5a>
    6946:	4b1e      	ldr	r3, [pc, #120]	; (69c0 <CC_LibInit+0x9c>)
    6948:	681b      	ldr	r3, [r3, #0]
    694a:	0e1b      	lsrs	r3, r3, #24
    694c:	2bf0      	cmp	r3, #240	; 0xf0
    694e:	d10a      	bne.n	6966 <CC_LibInit+0x42>
    6950:	4a1c      	ldr	r2, [pc, #112]	; (69c4 <CC_LibInit+0xa0>)
    6952:	4b1d      	ldr	r3, [pc, #116]	; (69c8 <CC_LibInit+0xa4>)
    6954:	6812      	ldr	r2, [r2, #0]
    6956:	429a      	cmp	r2, r3
    6958:	d029      	beq.n	69ae <CC_LibInit+0x8a>
    695a:	f000 f83d 	bl	69d8 <CC_HalTerminate>
    695e:	2407      	movs	r4, #7
    6960:	f000 f88a 	bl	6a78 <CC_PalTerminate>
    6964:	e7e6      	b.n	6934 <CC_LibInit+0x10>
    6966:	2406      	movs	r4, #6
    6968:	f000 f836 	bl	69d8 <CC_HalTerminate>
    696c:	f000 f884 	bl	6a78 <CC_PalTerminate>
    6970:	4620      	mov	r0, r4
    6972:	b002      	add	sp, #8
    6974:	bd10      	pop	{r4, pc}
    6976:	2404      	movs	r4, #4
    6978:	4620      	mov	r0, r4
    697a:	b002      	add	sp, #8
    697c:	bd10      	pop	{r4, pc}
    697e:	f000 f82b 	bl	69d8 <CC_HalTerminate>
    6982:	f000 f879 	bl	6a78 <CC_PalTerminate>
    6986:	f7ff ff7b 	bl	6880 <RndStartupTest.constprop.0>
    698a:	4604      	mov	r4, r0
    698c:	b958      	cbnz	r0, 69a6 <CC_LibInit+0x82>
    698e:	4602      	mov	r2, r0
    6990:	4601      	mov	r1, r0
    6992:	f7ff f9a3 	bl	5cdc <nrf_cc3xx_platform_ctr_drbg_init>
    6996:	b930      	cbnz	r0, 69a6 <CC_LibInit+0x82>
    6998:	2268      	movs	r2, #104	; 0x68
    699a:	490c      	ldr	r1, [pc, #48]	; (69cc <CC_LibInit+0xa8>)
    699c:	ab01      	add	r3, sp, #4
    699e:	f7ff f9d1 	bl	5d44 <nrf_cc3xx_platform_ctr_drbg_get>
    69a2:	2800      	cmp	r0, #0
    69a4:	d0c6      	beq.n	6934 <CC_LibInit+0x10>
    69a6:	2405      	movs	r4, #5
    69a8:	4620      	mov	r0, r4
    69aa:	b002      	add	sp, #8
    69ac:	bd10      	pop	{r4, pc}
    69ae:	2001      	movs	r0, #1
    69b0:	f000 f8ea 	bl	6b88 <CC_PalPowerSaveModeSelect>
    69b4:	2800      	cmp	r0, #0
    69b6:	d1e2      	bne.n	697e <CC_LibInit+0x5a>
    69b8:	4b05      	ldr	r3, [pc, #20]	; (69d0 <CC_LibInit+0xac>)
    69ba:	6018      	str	r0, [r3, #0]
    69bc:	e7e3      	b.n	6986 <CC_LibInit+0x62>
    69be:	bf00      	nop
    69c0:	50841928 	.word	0x50841928
    69c4:	50841a24 	.word	0x50841a24
    69c8:	20e00000 	.word	0x20e00000
    69cc:	20000db0 	.word	0x20000db0
    69d0:	50841a0c 	.word	0x50841a0c

000069d4 <CC_HalInit>:
    69d4:	2000      	movs	r0, #0
    69d6:	4770      	bx	lr

000069d8 <CC_HalTerminate>:
    69d8:	2000      	movs	r0, #0
    69da:	4770      	bx	lr

000069dc <CC_HalClearInterruptBit>:
    69dc:	0543      	lsls	r3, r0, #21
    69de:	d503      	bpl.n	69e8 <CC_HalClearInterruptBit+0xc>
    69e0:	f04f 32ff 	mov.w	r2, #4294967295
    69e4:	4b02      	ldr	r3, [pc, #8]	; (69f0 <CC_HalClearInterruptBit+0x14>)
    69e6:	601a      	str	r2, [r3, #0]
    69e8:	4b02      	ldr	r3, [pc, #8]	; (69f4 <CC_HalClearInterruptBit+0x18>)
    69ea:	6018      	str	r0, [r3, #0]
    69ec:	4770      	bx	lr
    69ee:	bf00      	nop
    69f0:	50841108 	.word	0x50841108
    69f4:	50841a08 	.word	0x50841a08

000069f8 <CC_HalMaskInterrupt>:
    69f8:	4b01      	ldr	r3, [pc, #4]	; (6a00 <CC_HalMaskInterrupt+0x8>)
    69fa:	6018      	str	r0, [r3, #0]
    69fc:	4770      	bx	lr
    69fe:	bf00      	nop
    6a00:	50841a04 	.word	0x50841a04

00006a04 <CC_HalWaitInterrupt>:
    6a04:	b108      	cbz	r0, 6a0a <CC_HalWaitInterrupt+0x6>
    6a06:	f000 b86d 	b.w	6ae4 <CC_PalWaitInterrupt>
    6a0a:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    6a0e:	4770      	bx	lr

00006a10 <CC_HalWaitInterruptRND>:
    6a10:	b108      	cbz	r0, 6a16 <CC_HalWaitInterruptRND+0x6>
    6a12:	f000 b84f 	b.w	6ab4 <CC_PalWaitInterruptRND>
    6a16:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    6a1a:	4770      	bx	lr

00006a1c <CC_PalInit>:
    6a1c:	b510      	push	{r4, lr}
    6a1e:	4811      	ldr	r0, [pc, #68]	; (6a64 <CC_PalInit+0x48>)
    6a20:	f000 f86e 	bl	6b00 <CC_PalMutexCreate>
    6a24:	b100      	cbz	r0, 6a28 <CC_PalInit+0xc>
    6a26:	bd10      	pop	{r4, pc}
    6a28:	480f      	ldr	r0, [pc, #60]	; (6a68 <CC_PalInit+0x4c>)
    6a2a:	f000 f869 	bl	6b00 <CC_PalMutexCreate>
    6a2e:	2800      	cmp	r0, #0
    6a30:	d1f9      	bne.n	6a26 <CC_PalInit+0xa>
    6a32:	4c0e      	ldr	r4, [pc, #56]	; (6a6c <CC_PalInit+0x50>)
    6a34:	4620      	mov	r0, r4
    6a36:	f000 f863 	bl	6b00 <CC_PalMutexCreate>
    6a3a:	2800      	cmp	r0, #0
    6a3c:	d1f3      	bne.n	6a26 <CC_PalInit+0xa>
    6a3e:	4b0c      	ldr	r3, [pc, #48]	; (6a70 <CC_PalInit+0x54>)
    6a40:	480c      	ldr	r0, [pc, #48]	; (6a74 <CC_PalInit+0x58>)
    6a42:	601c      	str	r4, [r3, #0]
    6a44:	f000 f85c 	bl	6b00 <CC_PalMutexCreate>
    6a48:	4601      	mov	r1, r0
    6a4a:	2800      	cmp	r0, #0
    6a4c:	d1eb      	bne.n	6a26 <CC_PalInit+0xa>
    6a4e:	f000 f82d 	bl	6aac <CC_PalDmaInit>
    6a52:	4604      	mov	r4, r0
    6a54:	b108      	cbz	r0, 6a5a <CC_PalInit+0x3e>
    6a56:	4620      	mov	r0, r4
    6a58:	bd10      	pop	{r4, pc}
    6a5a:	f000 f877 	bl	6b4c <CC_PalPowerSaveModeInit>
    6a5e:	4620      	mov	r0, r4
    6a60:	e7fa      	b.n	6a58 <CC_PalInit+0x3c>
    6a62:	bf00      	nop
    6a64:	20000114 	.word	0x20000114
    6a68:	20000108 	.word	0x20000108
    6a6c:	20000110 	.word	0x20000110
    6a70:	20000118 	.word	0x20000118
    6a74:	2000010c 	.word	0x2000010c

00006a78 <CC_PalTerminate>:
    6a78:	b508      	push	{r3, lr}
    6a7a:	4808      	ldr	r0, [pc, #32]	; (6a9c <CC_PalTerminate+0x24>)
    6a7c:	f000 f84a 	bl	6b14 <CC_PalMutexDestroy>
    6a80:	4807      	ldr	r0, [pc, #28]	; (6aa0 <CC_PalTerminate+0x28>)
    6a82:	f000 f847 	bl	6b14 <CC_PalMutexDestroy>
    6a86:	4807      	ldr	r0, [pc, #28]	; (6aa4 <CC_PalTerminate+0x2c>)
    6a88:	f000 f844 	bl	6b14 <CC_PalMutexDestroy>
    6a8c:	4806      	ldr	r0, [pc, #24]	; (6aa8 <CC_PalTerminate+0x30>)
    6a8e:	f000 f841 	bl	6b14 <CC_PalMutexDestroy>
    6a92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6a96:	f000 b80b 	b.w	6ab0 <CC_PalDmaTerminate>
    6a9a:	bf00      	nop
    6a9c:	20000114 	.word	0x20000114
    6aa0:	20000108 	.word	0x20000108
    6aa4:	20000110 	.word	0x20000110
    6aa8:	2000010c 	.word	0x2000010c

00006aac <CC_PalDmaInit>:
    6aac:	2000      	movs	r0, #0
    6aae:	4770      	bx	lr

00006ab0 <CC_PalDmaTerminate>:
    6ab0:	4770      	bx	lr
    6ab2:	bf00      	nop

00006ab4 <CC_PalWaitInterruptRND>:
    6ab4:	4602      	mov	r2, r0
    6ab6:	4807      	ldr	r0, [pc, #28]	; (6ad4 <CC_PalWaitInterruptRND+0x20>)
    6ab8:	6803      	ldr	r3, [r0, #0]
    6aba:	4213      	tst	r3, r2
    6abc:	d0fc      	beq.n	6ab8 <CC_PalWaitInterruptRND+0x4>
    6abe:	b121      	cbz	r1, 6aca <CC_PalWaitInterruptRND+0x16>
    6ac0:	4b05      	ldr	r3, [pc, #20]	; (6ad8 <CC_PalWaitInterruptRND+0x24>)
    6ac2:	4806      	ldr	r0, [pc, #24]	; (6adc <CC_PalWaitInterruptRND+0x28>)
    6ac4:	681b      	ldr	r3, [r3, #0]
    6ac6:	600b      	str	r3, [r1, #0]
    6ac8:	6003      	str	r3, [r0, #0]
    6aca:	4b05      	ldr	r3, [pc, #20]	; (6ae0 <CC_PalWaitInterruptRND+0x2c>)
    6acc:	2000      	movs	r0, #0
    6ace:	601a      	str	r2, [r3, #0]
    6ad0:	4770      	bx	lr
    6ad2:	bf00      	nop
    6ad4:	50841a00 	.word	0x50841a00
    6ad8:	50841104 	.word	0x50841104
    6adc:	50841108 	.word	0x50841108
    6ae0:	50841a08 	.word	0x50841a08

00006ae4 <CC_PalWaitInterrupt>:
    6ae4:	4602      	mov	r2, r0
    6ae6:	4904      	ldr	r1, [pc, #16]	; (6af8 <CC_PalWaitInterrupt+0x14>)
    6ae8:	680b      	ldr	r3, [r1, #0]
    6aea:	421a      	tst	r2, r3
    6aec:	d0fc      	beq.n	6ae8 <CC_PalWaitInterrupt+0x4>
    6aee:	4b03      	ldr	r3, [pc, #12]	; (6afc <CC_PalWaitInterrupt+0x18>)
    6af0:	2000      	movs	r0, #0
    6af2:	601a      	str	r2, [r3, #0]
    6af4:	4770      	bx	lr
    6af6:	bf00      	nop
    6af8:	50841a00 	.word	0x50841a00
    6afc:	50841a08 	.word	0x50841a08

00006b00 <CC_PalMutexCreate>:
    6b00:	b508      	push	{r3, lr}
    6b02:	4b03      	ldr	r3, [pc, #12]	; (6b10 <CC_PalMutexCreate+0x10>)
    6b04:	6802      	ldr	r2, [r0, #0]
    6b06:	681b      	ldr	r3, [r3, #0]
    6b08:	6810      	ldr	r0, [r2, #0]
    6b0a:	4798      	blx	r3
    6b0c:	2000      	movs	r0, #0
    6b0e:	bd08      	pop	{r3, pc}
    6b10:	200000c8 	.word	0x200000c8

00006b14 <CC_PalMutexDestroy>:
    6b14:	b508      	push	{r3, lr}
    6b16:	4b03      	ldr	r3, [pc, #12]	; (6b24 <CC_PalMutexDestroy+0x10>)
    6b18:	6802      	ldr	r2, [r0, #0]
    6b1a:	685b      	ldr	r3, [r3, #4]
    6b1c:	6810      	ldr	r0, [r2, #0]
    6b1e:	4798      	blx	r3
    6b20:	2000      	movs	r0, #0
    6b22:	bd08      	pop	{r3, pc}
    6b24:	200000c8 	.word	0x200000c8

00006b28 <CC_PalMutexLock>:
    6b28:	4b02      	ldr	r3, [pc, #8]	; (6b34 <CC_PalMutexLock+0xc>)
    6b2a:	6802      	ldr	r2, [r0, #0]
    6b2c:	689b      	ldr	r3, [r3, #8]
    6b2e:	6810      	ldr	r0, [r2, #0]
    6b30:	4718      	bx	r3
    6b32:	bf00      	nop
    6b34:	200000c8 	.word	0x200000c8

00006b38 <CC_PalMutexUnlock>:
    6b38:	b508      	push	{r3, lr}
    6b3a:	4b03      	ldr	r3, [pc, #12]	; (6b48 <CC_PalMutexUnlock+0x10>)
    6b3c:	6802      	ldr	r2, [r0, #0]
    6b3e:	68db      	ldr	r3, [r3, #12]
    6b40:	6810      	ldr	r0, [r2, #0]
    6b42:	4798      	blx	r3
    6b44:	2000      	movs	r0, #0
    6b46:	bd08      	pop	{r3, pc}
    6b48:	200000c8 	.word	0x200000c8

00006b4c <CC_PalPowerSaveModeInit>:
    6b4c:	b570      	push	{r4, r5, r6, lr}
    6b4e:	4c09      	ldr	r4, [pc, #36]	; (6b74 <CC_PalPowerSaveModeInit+0x28>)
    6b50:	4d09      	ldr	r5, [pc, #36]	; (6b78 <CC_PalPowerSaveModeInit+0x2c>)
    6b52:	6920      	ldr	r0, [r4, #16]
    6b54:	68ab      	ldr	r3, [r5, #8]
    6b56:	4798      	blx	r3
    6b58:	b118      	cbz	r0, 6b62 <CC_PalPowerSaveModeInit+0x16>
    6b5a:	4b08      	ldr	r3, [pc, #32]	; (6b7c <CC_PalPowerSaveModeInit+0x30>)
    6b5c:	4808      	ldr	r0, [pc, #32]	; (6b80 <CC_PalPowerSaveModeInit+0x34>)
    6b5e:	685b      	ldr	r3, [r3, #4]
    6b60:	4798      	blx	r3
    6b62:	2100      	movs	r1, #0
    6b64:	4a07      	ldr	r2, [pc, #28]	; (6b84 <CC_PalPowerSaveModeInit+0x38>)
    6b66:	68eb      	ldr	r3, [r5, #12]
    6b68:	6011      	str	r1, [r2, #0]
    6b6a:	6920      	ldr	r0, [r4, #16]
    6b6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6b70:	4718      	bx	r3
    6b72:	bf00      	nop
    6b74:	200000d8 	.word	0x200000d8
    6b78:	200000c8 	.word	0x200000c8
    6b7c:	200000b8 	.word	0x200000b8
    6b80:	0000965c 	.word	0x0000965c
    6b84:	20001038 	.word	0x20001038

00006b88 <CC_PalPowerSaveModeSelect>:
    6b88:	b570      	push	{r4, r5, r6, lr}
    6b8a:	4d1a      	ldr	r5, [pc, #104]	; (6bf4 <CC_PalPowerSaveModeSelect+0x6c>)
    6b8c:	4e1a      	ldr	r6, [pc, #104]	; (6bf8 <CC_PalPowerSaveModeSelect+0x70>)
    6b8e:	4604      	mov	r4, r0
    6b90:	68b2      	ldr	r2, [r6, #8]
    6b92:	6928      	ldr	r0, [r5, #16]
    6b94:	4790      	blx	r2
    6b96:	b9f0      	cbnz	r0, 6bd6 <CC_PalPowerSaveModeSelect+0x4e>
    6b98:	b15c      	cbz	r4, 6bb2 <CC_PalPowerSaveModeSelect+0x2a>
    6b9a:	4c18      	ldr	r4, [pc, #96]	; (6bfc <CC_PalPowerSaveModeSelect+0x74>)
    6b9c:	6823      	ldr	r3, [r4, #0]
    6b9e:	b1ab      	cbz	r3, 6bcc <CC_PalPowerSaveModeSelect+0x44>
    6ba0:	2b01      	cmp	r3, #1
    6ba2:	d01a      	beq.n	6bda <CC_PalPowerSaveModeSelect+0x52>
    6ba4:	3b01      	subs	r3, #1
    6ba6:	6023      	str	r3, [r4, #0]
    6ba8:	6928      	ldr	r0, [r5, #16]
    6baa:	68f3      	ldr	r3, [r6, #12]
    6bac:	4798      	blx	r3
    6bae:	2000      	movs	r0, #0
    6bb0:	bd70      	pop	{r4, r5, r6, pc}
    6bb2:	4c12      	ldr	r4, [pc, #72]	; (6bfc <CC_PalPowerSaveModeSelect+0x74>)
    6bb4:	6821      	ldr	r1, [r4, #0]
    6bb6:	b939      	cbnz	r1, 6bc8 <CC_PalPowerSaveModeSelect+0x40>
    6bb8:	2001      	movs	r0, #1
    6bba:	4b11      	ldr	r3, [pc, #68]	; (6c00 <CC_PalPowerSaveModeSelect+0x78>)
    6bbc:	4a11      	ldr	r2, [pc, #68]	; (6c04 <CC_PalPowerSaveModeSelect+0x7c>)
    6bbe:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    6bc2:	6813      	ldr	r3, [r2, #0]
    6bc4:	2b00      	cmp	r3, #0
    6bc6:	d1fc      	bne.n	6bc2 <CC_PalPowerSaveModeSelect+0x3a>
    6bc8:	3101      	adds	r1, #1
    6bca:	6021      	str	r1, [r4, #0]
    6bcc:	68f3      	ldr	r3, [r6, #12]
    6bce:	6928      	ldr	r0, [r5, #16]
    6bd0:	4798      	blx	r3
    6bd2:	2000      	movs	r0, #0
    6bd4:	bd70      	pop	{r4, r5, r6, pc}
    6bd6:	480c      	ldr	r0, [pc, #48]	; (6c08 <CC_PalPowerSaveModeSelect+0x80>)
    6bd8:	bd70      	pop	{r4, r5, r6, pc}
    6bda:	4a0a      	ldr	r2, [pc, #40]	; (6c04 <CC_PalPowerSaveModeSelect+0x7c>)
    6bdc:	6813      	ldr	r3, [r2, #0]
    6bde:	2b00      	cmp	r3, #0
    6be0:	d1fc      	bne.n	6bdc <CC_PalPowerSaveModeSelect+0x54>
    6be2:	4a07      	ldr	r2, [pc, #28]	; (6c00 <CC_PalPowerSaveModeSelect+0x78>)
    6be4:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    6be8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    6bec:	f7ff ff04 	bl	69f8 <CC_HalMaskInterrupt>
    6bf0:	6823      	ldr	r3, [r4, #0]
    6bf2:	e7d7      	b.n	6ba4 <CC_PalPowerSaveModeSelect+0x1c>
    6bf4:	200000d8 	.word	0x200000d8
    6bf8:	200000c8 	.word	0x200000c8
    6bfc:	20001038 	.word	0x20001038
    6c00:	50840000 	.word	0x50840000
    6c04:	50841910 	.word	0x50841910
    6c08:	ffff8fe9 	.word	0xffff8fe9

00006c0c <mutex_init>:
    6c0c:	4b01      	ldr	r3, [pc, #4]	; (6c14 <mutex_init+0x8>)
    6c0e:	681b      	ldr	r3, [r3, #0]
    6c10:	4718      	bx	r3
    6c12:	bf00      	nop
    6c14:	200000c8 	.word	0x200000c8

00006c18 <mutex_lock>:
    6c18:	4b01      	ldr	r3, [pc, #4]	; (6c20 <mutex_lock+0x8>)
    6c1a:	689b      	ldr	r3, [r3, #8]
    6c1c:	4718      	bx	r3
    6c1e:	bf00      	nop
    6c20:	200000c8 	.word	0x200000c8

00006c24 <mutex_unlock>:
    6c24:	4b01      	ldr	r3, [pc, #4]	; (6c2c <mutex_unlock+0x8>)
    6c26:	68db      	ldr	r3, [r3, #12]
    6c28:	4718      	bx	r3
    6c2a:	bf00      	nop
    6c2c:	200000c8 	.word	0x200000c8

00006c30 <startTrngHW>:
    6c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6c34:	2800      	cmp	r0, #0
    6c36:	d07c      	beq.n	6d32 <startTrngHW+0x102>
    6c38:	460c      	mov	r4, r1
    6c3a:	2900      	cmp	r1, #0
    6c3c:	d079      	beq.n	6d32 <startTrngHW+0x102>
    6c3e:	461d      	mov	r5, r3
    6c40:	2b00      	cmp	r3, #0
    6c42:	d076      	beq.n	6d32 <startTrngHW+0x102>
    6c44:	4606      	mov	r6, r0
    6c46:	b122      	cbz	r2, 6c52 <startTrngHW+0x22>
    6c48:	2201      	movs	r2, #1
    6c4a:	2300      	movs	r3, #0
    6c4c:	602a      	str	r2, [r5, #0]
    6c4e:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
    6c52:	682b      	ldr	r3, [r5, #0]
    6c54:	2b00      	cmp	r3, #0
    6c56:	d068      	beq.n	6d2a <startTrngHW+0xfa>
    6c58:	4629      	mov	r1, r5
    6c5a:	4620      	mov	r0, r4
    6c5c:	f000 fddc 	bl	7818 <LLF_RND_GetFastestRosc>
    6c60:	4607      	mov	r7, r0
    6c62:	2800      	cmp	r0, #0
    6c64:	d162      	bne.n	6d2c <startTrngHW+0xfc>
    6c66:	4621      	mov	r1, r4
    6c68:	6828      	ldr	r0, [r5, #0]
    6c6a:	f000 fdb7 	bl	77dc <LLF_RND_GetRoscSampleCnt>
    6c6e:	4607      	mov	r7, r0
    6c70:	2800      	cmp	r0, #0
    6c72:	d15b      	bne.n	6d2c <startTrngHW+0xfc>
    6c74:	682b      	ldr	r3, [r5, #0]
    6c76:	2b08      	cmp	r3, #8
    6c78:	d06a      	beq.n	6d50 <startTrngHW+0x120>
    6c7a:	2b04      	cmp	r3, #4
    6c7c:	d06b      	beq.n	6d56 <startTrngHW+0x126>
    6c7e:	f1a3 0802 	sub.w	r8, r3, #2
    6c82:	fab8 f888 	clz	r8, r8
    6c86:	ea4f 1858 	mov.w	r8, r8, lsr #5
    6c8a:	2301      	movs	r3, #1
    6c8c:	469c      	mov	ip, r3
    6c8e:	4a33      	ldr	r2, [pc, #204]	; (6d5c <startTrngHW+0x12c>)
    6c90:	4933      	ldr	r1, [pc, #204]	; (6d60 <startTrngHW+0x130>)
    6c92:	6013      	str	r3, [r2, #0]
    6c94:	4610      	mov	r0, r2
    6c96:	600b      	str	r3, [r1, #0]
    6c98:	3a94      	subs	r2, #148	; 0x94
    6c9a:	f8c0 c000 	str.w	ip, [r0]
    6c9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6ca0:	6013      	str	r3, [r2, #0]
    6ca2:	6811      	ldr	r1, [r2, #0]
    6ca4:	428b      	cmp	r3, r1
    6ca6:	d1f8      	bne.n	6c9a <startTrngHW+0x6a>
    6ca8:	f04f 0900 	mov.w	r9, #0
    6cac:	4b2d      	ldr	r3, [pc, #180]	; (6d64 <startTrngHW+0x134>)
    6cae:	f04f 30ff 	mov.w	r0, #4294967295
    6cb2:	f8c3 9000 	str.w	r9, [r3]
    6cb6:	f7ff fe91 	bl	69dc <CC_HalClearInterruptBit>
    6cba:	f06f 021b 	mvn.w	r2, #27
    6cbe:	4b2a      	ldr	r3, [pc, #168]	; (6d68 <startTrngHW+0x138>)
    6cc0:	4648      	mov	r0, r9
    6cc2:	601a      	str	r2, [r3, #0]
    6cc4:	f7ff fe98 	bl	69f8 <CC_HalMaskInterrupt>
    6cc8:	4a28      	ldr	r2, [pc, #160]	; (6d6c <startTrngHW+0x13c>)
    6cca:	4b29      	ldr	r3, [pc, #164]	; (6d70 <startTrngHW+0x140>)
    6ccc:	f8c2 8000 	str.w	r8, [r2]
    6cd0:	6818      	ldr	r0, [r3, #0]
    6cd2:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    6cd6:	f7ff fe8f 	bl	69f8 <CC_HalMaskInterrupt>
    6cda:	220a      	movs	r2, #10
    6cdc:	4b25      	ldr	r3, [pc, #148]	; (6d74 <startTrngHW+0x144>)
    6cde:	601a      	str	r2, [r3, #0]
    6ce0:	9a08      	ldr	r2, [sp, #32]
    6ce2:	6923      	ldr	r3, [r4, #16]
    6ce4:	2a01      	cmp	r2, #1
    6ce6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    6ce8:	d027      	beq.n	6d3a <startTrngHW+0x10a>
    6cea:	4a23      	ldr	r2, [pc, #140]	; (6d78 <startTrngHW+0x148>)
    6cec:	fba2 2303 	umull	r2, r3, r2, r3
    6cf0:	091b      	lsrs	r3, r3, #4
    6cf2:	2201      	movs	r2, #1
    6cf4:	fb03 f301 	mul.w	r3, r3, r1
    6cf8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6cfc:	491f      	ldr	r1, [pc, #124]	; (6d7c <startTrngHW+0x14c>)
    6cfe:	03db      	lsls	r3, r3, #15
    6d00:	099b      	lsrs	r3, r3, #6
    6d02:	600b      	str	r3, [r1, #0]
    6d04:	4b17      	ldr	r3, [pc, #92]	; (6d64 <startTrngHW+0x134>)
    6d06:	4638      	mov	r0, r7
    6d08:	601a      	str	r2, [r3, #0]
    6d0a:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
    6d0e:	682a      	ldr	r2, [r5, #0]
    6d10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    6d14:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    6d18:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
    6d1c:	682a      	ldr	r2, [r5, #0]
    6d1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6d22:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
    6d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6d2a:	4f15      	ldr	r7, [pc, #84]	; (6d80 <startTrngHW+0x150>)
    6d2c:	4638      	mov	r0, r7
    6d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6d32:	4f14      	ldr	r7, [pc, #80]	; (6d84 <startTrngHW+0x154>)
    6d34:	4638      	mov	r0, r7
    6d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6d3a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6d3e:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
    6d42:	3201      	adds	r2, #1
    6d44:	d002      	beq.n	6d4c <startTrngHW+0x11c>
    6d46:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
    6d4a:	e7ce      	b.n	6cea <startTrngHW+0xba>
    6d4c:	2316      	movs	r3, #22
    6d4e:	e7d0      	b.n	6cf2 <startTrngHW+0xc2>
    6d50:	f04f 0803 	mov.w	r8, #3
    6d54:	e799      	b.n	6c8a <startTrngHW+0x5a>
    6d56:	f04f 0802 	mov.w	r8, #2
    6d5a:	e796      	b.n	6c8a <startTrngHW+0x5a>
    6d5c:	508411c4 	.word	0x508411c4
    6d60:	50841140 	.word	0x50841140
    6d64:	5084112c 	.word	0x5084112c
    6d68:	50841100 	.word	0x50841100
    6d6c:	5084110c 	.word	0x5084110c
    6d70:	50841a04 	.word	0x50841a04
    6d74:	50841138 	.word	0x50841138
    6d78:	aaaaaaab 	.word	0xaaaaaaab
    6d7c:	508411d8 	.word	0x508411d8
    6d80:	00f10c31 	.word	0x00f10c31
    6d84:	00f10c35 	.word	0x00f10c35

00006d88 <LLF_RND_RepetitionCounterTest.part.0>:
    6d88:	b4f0      	push	{r4, r5, r6, r7}
    6d8a:	2400      	movs	r4, #0
    6d8c:	00c9      	lsls	r1, r1, #3
    6d8e:	4626      	mov	r6, r4
    6d90:	4627      	mov	r7, r4
    6d92:	f101 3cff 	add.w	ip, r1, #4294967295
    6d96:	e006      	b.n	6da6 <LLF_RND_RepetitionCounterTest.part.0+0x1e>
    6d98:	429f      	cmp	r7, r3
    6d9a:	d015      	beq.n	6dc8 <LLF_RND_RepetitionCounterTest.part.0+0x40>
    6d9c:	2601      	movs	r6, #1
    6d9e:	4565      	cmp	r5, ip
    6da0:	d818      	bhi.n	6dd4 <LLF_RND_RepetitionCounterTest.part.0+0x4c>
    6da2:	462c      	mov	r4, r5
    6da4:	461f      	mov	r7, r3
    6da6:	0963      	lsrs	r3, r4, #5
    6da8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6dac:	f004 011f 	and.w	r1, r4, #31
    6db0:	40cb      	lsrs	r3, r1
    6db2:	291f      	cmp	r1, #31
    6db4:	f104 0501 	add.w	r5, r4, #1
    6db8:	bf18      	it	ne
    6dba:	f003 0301 	andne.w	r3, r3, #1
    6dbe:	2c00      	cmp	r4, #0
    6dc0:	d1ea      	bne.n	6d98 <LLF_RND_RepetitionCounterTest.part.0+0x10>
    6dc2:	2601      	movs	r6, #1
    6dc4:	4635      	mov	r5, r6
    6dc6:	e7ec      	b.n	6da2 <LLF_RND_RepetitionCounterTest.part.0+0x1a>
    6dc8:	3601      	adds	r6, #1
    6dca:	4296      	cmp	r6, r2
    6dcc:	d1e7      	bne.n	6d9e <LLF_RND_RepetitionCounterTest.part.0+0x16>
    6dce:	4803      	ldr	r0, [pc, #12]	; (6ddc <LLF_RND_RepetitionCounterTest.part.0+0x54>)
    6dd0:	bcf0      	pop	{r4, r5, r6, r7}
    6dd2:	4770      	bx	lr
    6dd4:	2000      	movs	r0, #0
    6dd6:	bcf0      	pop	{r4, r5, r6, r7}
    6dd8:	4770      	bx	lr
    6dda:	bf00      	nop
    6ddc:	00f10c36 	.word	0x00f10c36

00006de0 <LLF_RND_AdaptiveProportionTest>:
    6de0:	2800      	cmp	r0, #0
    6de2:	d05f      	beq.n	6ea4 <LLF_RND_AdaptiveProportionTest+0xc4>
    6de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6de8:	1e4c      	subs	r4, r1, #1
    6dea:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
    6dee:	d226      	bcs.n	6e3e <LLF_RND_AdaptiveProportionTest+0x5e>
    6df0:	b32b      	cbz	r3, 6e3e <LLF_RND_AdaptiveProportionTest+0x5e>
    6df2:	b322      	cbz	r2, 6e3e <LLF_RND_AdaptiveProportionTest+0x5e>
    6df4:	00cc      	lsls	r4, r1, #3
    6df6:	2b01      	cmp	r3, #1
    6df8:	f104 3eff 	add.w	lr, r4, #4294967295
    6dfc:	d02f      	beq.n	6e5e <LLF_RND_AdaptiveProportionTest+0x7e>
    6dfe:	2100      	movs	r1, #0
    6e00:	468c      	mov	ip, r1
    6e02:	460f      	mov	r7, r1
    6e04:	460d      	mov	r5, r1
    6e06:	f103 38ff 	add.w	r8, r3, #4294967295
    6e0a:	094c      	lsrs	r4, r1, #5
    6e0c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    6e10:	f001 061f 	and.w	r6, r1, #31
    6e14:	40f4      	lsrs	r4, r6
    6e16:	2e1f      	cmp	r6, #31
    6e18:	bf18      	it	ne
    6e1a:	f004 0401 	andne.w	r4, r4, #1
    6e1e:	b921      	cbnz	r1, 6e2a <LLF_RND_AdaptiveProportionTest+0x4a>
    6e20:	2501      	movs	r5, #1
    6e22:	46ac      	mov	ip, r5
    6e24:	4629      	mov	r1, r5
    6e26:	4627      	mov	r7, r4
    6e28:	e7ef      	b.n	6e0a <LLF_RND_AdaptiveProportionTest+0x2a>
    6e2a:	42ab      	cmp	r3, r5
    6e2c:	d013      	beq.n	6e56 <LLF_RND_AdaptiveProportionTest+0x76>
    6e2e:	42a7      	cmp	r7, r4
    6e30:	d101      	bne.n	6e36 <LLF_RND_AdaptiveProportionTest+0x56>
    6e32:	f10c 0c01 	add.w	ip, ip, #1
    6e36:	4545      	cmp	r5, r8
    6e38:	d104      	bne.n	6e44 <LLF_RND_AdaptiveProportionTest+0x64>
    6e3a:	4562      	cmp	r2, ip
    6e3c:	d202      	bcs.n	6e44 <LLF_RND_AdaptiveProportionTest+0x64>
    6e3e:	481a      	ldr	r0, [pc, #104]	; (6ea8 <LLF_RND_AdaptiveProportionTest+0xc8>)
    6e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e44:	463c      	mov	r4, r7
    6e46:	3101      	adds	r1, #1
    6e48:	458e      	cmp	lr, r1
    6e4a:	f105 0501 	add.w	r5, r5, #1
    6e4e:	d2ea      	bcs.n	6e26 <LLF_RND_AdaptiveProportionTest+0x46>
    6e50:	2000      	movs	r0, #0
    6e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e56:	2500      	movs	r5, #0
    6e58:	f04f 0c01 	mov.w	ip, #1
    6e5c:	e7f3      	b.n	6e46 <LLF_RND_AdaptiveProportionTest+0x66>
    6e5e:	2600      	movs	r6, #0
    6e60:	46b4      	mov	ip, r6
    6e62:	4637      	mov	r7, r6
    6e64:	4631      	mov	r1, r6
    6e66:	094b      	lsrs	r3, r1, #5
    6e68:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6e6c:	f001 051f 	and.w	r5, r1, #31
    6e70:	40eb      	lsrs	r3, r5
    6e72:	2d1f      	cmp	r5, #31
    6e74:	bf18      	it	ne
    6e76:	f003 0301 	andne.w	r3, r3, #1
    6e7a:	b139      	cbz	r1, 6e8c <LLF_RND_AdaptiveProportionTest+0xac>
    6e7c:	b95f      	cbnz	r7, 6e96 <LLF_RND_AdaptiveProportionTest+0xb6>
    6e7e:	459c      	cmp	ip, r3
    6e80:	d001      	beq.n	6e86 <LLF_RND_AdaptiveProportionTest+0xa6>
    6e82:	4663      	mov	r3, ip
    6e84:	e008      	b.n	6e98 <LLF_RND_AdaptiveProportionTest+0xb8>
    6e86:	4663      	mov	r3, ip
    6e88:	3601      	adds	r6, #1
    6e8a:	e005      	b.n	6e98 <LLF_RND_AdaptiveProportionTest+0xb8>
    6e8c:	2601      	movs	r6, #1
    6e8e:	4631      	mov	r1, r6
    6e90:	469c      	mov	ip, r3
    6e92:	2701      	movs	r7, #1
    6e94:	e7e7      	b.n	6e66 <LLF_RND_AdaptiveProportionTest+0x86>
    6e96:	463e      	mov	r6, r7
    6e98:	42b2      	cmp	r2, r6
    6e9a:	d3d0      	bcc.n	6e3e <LLF_RND_AdaptiveProportionTest+0x5e>
    6e9c:	3101      	adds	r1, #1
    6e9e:	42a1      	cmp	r1, r4
    6ea0:	d1f6      	bne.n	6e90 <LLF_RND_AdaptiveProportionTest+0xb0>
    6ea2:	e7d5      	b.n	6e50 <LLF_RND_AdaptiveProportionTest+0x70>
    6ea4:	4800      	ldr	r0, [pc, #0]	; (6ea8 <LLF_RND_AdaptiveProportionTest+0xc8>)
    6ea6:	4770      	bx	lr
    6ea8:	00f10c37 	.word	0x00f10c37

00006eac <getTrngSource>:
    6eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6eb0:	b08d      	sub	sp, #52	; 0x34
    6eb2:	9e18      	ldr	r6, [sp, #96]	; 0x60
    6eb4:	4607      	mov	r7, r0
    6eb6:	460c      	mov	r4, r1
    6eb8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    6eba:	2e00      	cmp	r6, #0
    6ebc:	d14d      	bne.n	6f5a <getTrngSource+0xae>
    6ebe:	f8d1 b010 	ldr.w	fp, [r1, #16]
    6ec2:	2100      	movs	r1, #0
    6ec4:	601d      	str	r5, [r3, #0]
    6ec6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6ec8:	6019      	str	r1, [r3, #0]
    6eca:	2a00      	cmp	r2, #0
    6ecc:	f000 8123 	beq.w	7116 <getTrngSource+0x26a>
    6ed0:	4a9d      	ldr	r2, [pc, #628]	; (7148 <getTrngSource+0x29c>)
    6ed2:	4b9e      	ldr	r3, [pc, #632]	; (714c <getTrngSource+0x2a0>)
    6ed4:	6811      	ldr	r1, [r2, #0]
    6ed6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    6ed8:	681b      	ldr	r3, [r3, #0]
    6eda:	429a      	cmp	r2, r3
    6edc:	d148      	bne.n	6f70 <getTrngSource+0xc4>
    6ede:	290a      	cmp	r1, #10
    6ee0:	d146      	bne.n	6f70 <getTrngSource+0xc4>
    6ee2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    6ee6:	9304      	str	r3, [sp, #16]
    6ee8:	2304      	movs	r3, #4
    6eea:	46b8      	mov	r8, r7
    6eec:	9302      	str	r3, [sp, #8]
    6eee:	4b98      	ldr	r3, [pc, #608]	; (7150 <getTrngSource+0x2a4>)
    6ef0:	fba3 230b 	umull	r2, r3, r3, fp
    6ef4:	ea4f 0a93 	mov.w	sl, r3, lsr #2
    6ef8:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
    6efc:	f105 0208 	add.w	r2, r5, #8
    6f00:	9203      	str	r2, [sp, #12]
    6f02:	ebab 0a43 	sub.w	sl, fp, r3, lsl #1
    6f06:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6f08:	f8c3 b000 	str.w	fp, [r3]
    6f0c:	f1bb 0f00 	cmp.w	fp, #0
    6f10:	f000 80c7 	beq.w	70a2 <getTrngSource+0x1f6>
    6f14:	465d      	mov	r5, fp
    6f16:	f04f 0900 	mov.w	r9, #0
    6f1a:	9e03      	ldr	r6, [sp, #12]
    6f1c:	f000 fc8c 	bl	7838 <LLF_RND_TurnOffTrng>
    6f20:	2300      	movs	r3, #0
    6f22:	9305      	str	r3, [sp, #20]
    6f24:	f1b8 0f00 	cmp.w	r8, #0
    6f28:	f000 80e9 	beq.w	70fe <getTrngSource+0x252>
    6f2c:	2c00      	cmp	r4, #0
    6f2e:	f000 80e6 	beq.w	70fe <getTrngSource+0x252>
    6f32:	9b04      	ldr	r3, [sp, #16]
    6f34:	2b00      	cmp	r3, #0
    6f36:	f000 80e0 	beq.w	70fa <getTrngSource+0x24e>
    6f3a:	4620      	mov	r0, r4
    6f3c:	a904      	add	r1, sp, #16
    6f3e:	f000 fc6b 	bl	7818 <LLF_RND_GetFastestRosc>
    6f42:	b1b8      	cbz	r0, 6f74 <getTrngSource+0xc8>
    6f44:	4b83      	ldr	r3, [pc, #524]	; (7154 <getTrngSource+0x2a8>)
    6f46:	4298      	cmp	r0, r3
    6f48:	f040 80ab 	bne.w	70a2 <getTrngSource+0x1f6>
    6f4c:	9002      	str	r0, [sp, #8]
    6f4e:	f000 fc73 	bl	7838 <LLF_RND_TurnOffTrng>
    6f52:	9802      	ldr	r0, [sp, #8]
    6f54:	b00d      	add	sp, #52	; 0x34
    6f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f5a:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    6f5e:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
    6f62:	3001      	adds	r0, #1
    6f64:	bf0c      	ite	eq
    6f66:	f44f 7b04 	moveq.w	fp, #528	; 0x210
    6f6a:	f8d1 bc0c 	ldrne.w	fp, [r1, #3084]	; 0xc0c
    6f6e:	e7a8      	b.n	6ec2 <getTrngSource+0x16>
    6f70:	4879      	ldr	r0, [pc, #484]	; (7158 <getTrngSource+0x2ac>)
    6f72:	e7eb      	b.n	6f4c <getTrngSource+0xa0>
    6f74:	4621      	mov	r1, r4
    6f76:	9804      	ldr	r0, [sp, #16]
    6f78:	f000 fc30 	bl	77dc <LLF_RND_GetRoscSampleCnt>
    6f7c:	2800      	cmp	r0, #0
    6f7e:	d1e1      	bne.n	6f44 <getTrngSource+0x98>
    6f80:	9f04      	ldr	r7, [sp, #16]
    6f82:	2f08      	cmp	r7, #8
    6f84:	f000 80bd 	beq.w	7102 <getTrngSource+0x256>
    6f88:	2f04      	cmp	r7, #4
    6f8a:	f000 80bc 	beq.w	7106 <getTrngSource+0x25a>
    6f8e:	f1a7 0702 	sub.w	r7, r7, #2
    6f92:	fab7 f787 	clz	r7, r7
    6f96:	097f      	lsrs	r7, r7, #5
    6f98:	2301      	movs	r3, #1
    6f9a:	4619      	mov	r1, r3
    6f9c:	486f      	ldr	r0, [pc, #444]	; (715c <getTrngSource+0x2b0>)
    6f9e:	6003      	str	r3, [r0, #0]
    6fa0:	f840 3c84 	str.w	r3, [r0, #-132]
    6fa4:	4b6d      	ldr	r3, [pc, #436]	; (715c <getTrngSource+0x2b0>)
    6fa6:	4869      	ldr	r0, [pc, #420]	; (714c <getTrngSource+0x2a0>)
    6fa8:	6019      	str	r1, [r3, #0]
    6faa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6fac:	6003      	str	r3, [r0, #0]
    6fae:	6800      	ldr	r0, [r0, #0]
    6fb0:	4283      	cmp	r3, r0
    6fb2:	d1f7      	bne.n	6fa4 <getTrngSource+0xf8>
    6fb4:	2300      	movs	r3, #0
    6fb6:	4a6a      	ldr	r2, [pc, #424]	; (7160 <getTrngSource+0x2b4>)
    6fb8:	f04f 30ff 	mov.w	r0, #4294967295
    6fbc:	6013      	str	r3, [r2, #0]
    6fbe:	f7ff fd0d 	bl	69dc <CC_HalClearInterruptBit>
    6fc2:	2300      	movs	r3, #0
    6fc4:	f06f 011b 	mvn.w	r1, #27
    6fc8:	4618      	mov	r0, r3
    6fca:	4b66      	ldr	r3, [pc, #408]	; (7164 <getTrngSource+0x2b8>)
    6fcc:	6019      	str	r1, [r3, #0]
    6fce:	f7ff fd13 	bl	69f8 <CC_HalMaskInterrupt>
    6fd2:	4965      	ldr	r1, [pc, #404]	; (7168 <getTrngSource+0x2bc>)
    6fd4:	4b65      	ldr	r3, [pc, #404]	; (716c <getTrngSource+0x2c0>)
    6fd6:	600f      	str	r7, [r1, #0]
    6fd8:	6818      	ldr	r0, [r3, #0]
    6fda:	4f5d      	ldr	r7, [pc, #372]	; (7150 <getTrngSource+0x2a4>)
    6fdc:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    6fe0:	f7ff fd0a 	bl	69f8 <CC_HalMaskInterrupt>
    6fe4:	210a      	movs	r1, #10
    6fe6:	2201      	movs	r2, #1
    6fe8:	4b57      	ldr	r3, [pc, #348]	; (7148 <getTrngSource+0x29c>)
    6fea:	4861      	ldr	r0, [pc, #388]	; (7170 <getTrngSource+0x2c4>)
    6fec:	6019      	str	r1, [r3, #0]
    6fee:	6921      	ldr	r1, [r4, #16]
    6ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6ff2:	fba7 c101 	umull	ip, r1, r7, r1
    6ff6:	0909      	lsrs	r1, r1, #4
    6ff8:	fb03 f301 	mul.w	r3, r3, r1
    6ffc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7000:	03db      	lsls	r3, r3, #15
    7002:	099b      	lsrs	r3, r3, #6
    7004:	6003      	str	r3, [r0, #0]
    7006:	4b56      	ldr	r3, [pc, #344]	; (7160 <getTrngSource+0x2b4>)
    7008:	a805      	add	r0, sp, #20
    700a:	601a      	str	r2, [r3, #0]
    700c:	9904      	ldr	r1, [sp, #16]
    700e:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
    7012:	020b      	lsls	r3, r1, #8
    7014:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    7018:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    701c:	4313      	orrs	r3, r2
    701e:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
    7022:	f000 fbcb 	bl	77bc <LLF_RND_WaitRngInterrupt>
    7026:	9b05      	ldr	r3, [sp, #20]
    7028:	f003 031a 	and.w	r3, r3, #26
    702c:	4303      	orrs	r3, r0
    702e:	d138      	bne.n	70a2 <getTrngSource+0x1f6>
    7030:	4b50      	ldr	r3, [pc, #320]	; (7174 <getTrngSource+0x2c8>)
    7032:	fba7 2705 	umull	r2, r7, r7, r5
    7036:	681a      	ldr	r2, [r3, #0]
    7038:	3314      	adds	r3, #20
    703a:	9206      	str	r2, [sp, #24]
    703c:	f853 2c10 	ldr.w	r2, [r3, #-16]
    7040:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
    7044:	9207      	str	r2, [sp, #28]
    7046:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    704a:	9208      	str	r2, [sp, #32]
    704c:	f853 2c08 	ldr.w	r2, [r3, #-8]
    7050:	9209      	str	r2, [sp, #36]	; 0x24
    7052:	f853 2c04 	ldr.w	r2, [r3, #-4]
    7056:	920a      	str	r2, [sp, #40]	; 0x28
    7058:	681b      	ldr	r3, [r3, #0]
    705a:	930b      	str	r3, [sp, #44]	; 0x2c
    705c:	d102      	bne.n	7064 <getTrngSource+0x1b8>
    705e:	f1ba 0f00 	cmp.w	sl, #0
    7062:	d141      	bne.n	70e8 <getTrngSource+0x23c>
    7064:	2218      	movs	r2, #24
    7066:	4630      	mov	r0, r6
    7068:	eb0d 0102 	add.w	r1, sp, r2
    706c:	f000 fb16 	bl	769c <CC_PalMemCopyPlat>
    7070:	3d18      	subs	r5, #24
    7072:	3618      	adds	r6, #24
    7074:	f109 0901 	add.w	r9, r9, #1
    7078:	2d00      	cmp	r5, #0
    707a:	f47f af4f 	bne.w	6f1c <getTrngSource+0x70>
    707e:	f5bb 7f04 	cmp.w	fp, #528	; 0x210
    7082:	d85d      	bhi.n	7140 <getTrngSource+0x294>
    7084:	9d03      	ldr	r5, [sp, #12]
    7086:	4659      	mov	r1, fp
    7088:	4628      	mov	r0, r5
    708a:	6962      	ldr	r2, [r4, #20]
    708c:	f7ff fe7c 	bl	6d88 <LLF_RND_RepetitionCounterTest.part.0>
    7090:	2800      	cmp	r0, #0
    7092:	d04b      	beq.n	712c <getTrngSource+0x280>
    7094:	2300      	movs	r3, #0
    7096:	9a16      	ldr	r2, [sp, #88]	; 0x58
    7098:	6013      	str	r3, [r2, #0]
    709a:	4b2e      	ldr	r3, [pc, #184]	; (7154 <getTrngSource+0x2a8>)
    709c:	4298      	cmp	r0, r3
    709e:	f43f af55 	beq.w	6f4c <getTrngSource+0xa0>
    70a2:	9d04      	ldr	r5, [sp, #16]
    70a4:	2d08      	cmp	r5, #8
    70a6:	d034      	beq.n	7112 <getTrngSource+0x266>
    70a8:	2200      	movs	r2, #0
    70aa:	ab04      	add	r3, sp, #16
    70ac:	4621      	mov	r1, r4
    70ae:	4640      	mov	r0, r8
    70b0:	006d      	lsls	r5, r5, #1
    70b2:	9200      	str	r2, [sp, #0]
    70b4:	9504      	str	r5, [sp, #16]
    70b6:	f7ff fdbb 	bl	6c30 <startTrngHW>
    70ba:	4b2f      	ldr	r3, [pc, #188]	; (7178 <getTrngSource+0x2cc>)
    70bc:	4298      	cmp	r0, r3
    70be:	d024      	beq.n	710a <getTrngSource+0x25e>
    70c0:	2800      	cmp	r0, #0
    70c2:	f47f af43 	bne.w	6f4c <getTrngSource+0xa0>
    70c6:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
    70ca:	0a13      	lsrs	r3, r2, #8
    70cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    70d0:	4313      	orrs	r3, r2
    70d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    70d6:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
    70da:	9b02      	ldr	r3, [sp, #8]
    70dc:	3b01      	subs	r3, #1
    70de:	9302      	str	r3, [sp, #8]
    70e0:	f47f af11 	bne.w	6f06 <getTrngSource+0x5a>
    70e4:	2000      	movs	r0, #0
    70e6:	e731      	b.n	6f4c <getTrngSource+0xa0>
    70e8:	4630      	mov	r0, r6
    70ea:	4652      	mov	r2, sl
    70ec:	a906      	add	r1, sp, #24
    70ee:	f000 fad5 	bl	769c <CC_PalMemCopyPlat>
    70f2:	eba5 050a 	sub.w	r5, r5, sl
    70f6:	4456      	add	r6, sl
    70f8:	e7bc      	b.n	7074 <getTrngSource+0x1c8>
    70fa:	481f      	ldr	r0, [pc, #124]	; (7178 <getTrngSource+0x2cc>)
    70fc:	e722      	b.n	6f44 <getTrngSource+0x98>
    70fe:	481f      	ldr	r0, [pc, #124]	; (717c <getTrngSource+0x2d0>)
    7100:	e720      	b.n	6f44 <getTrngSource+0x98>
    7102:	2703      	movs	r7, #3
    7104:	e748      	b.n	6f98 <getTrngSource+0xec>
    7106:	2702      	movs	r7, #2
    7108:	e746      	b.n	6f98 <getTrngSource+0xec>
    710a:	6a23      	ldr	r3, [r4, #32]
    710c:	2b00      	cmp	r3, #0
    710e:	f43f af1d 	beq.w	6f4c <getTrngSource+0xa0>
    7112:	481b      	ldr	r0, [pc, #108]	; (7180 <getTrngSource+0x2d4>)
    7114:	e71a      	b.n	6f4c <getTrngSource+0xa0>
    7116:	2201      	movs	r2, #1
    7118:	4621      	mov	r1, r4
    711a:	4638      	mov	r0, r7
    711c:	9600      	str	r6, [sp, #0]
    711e:	ab04      	add	r3, sp, #16
    7120:	f7ff fd86 	bl	6c30 <startTrngHW>
    7124:	2800      	cmp	r0, #0
    7126:	f43f aedf 	beq.w	6ee8 <getTrngSource+0x3c>
    712a:	e70f      	b.n	6f4c <getTrngSource+0xa0>
    712c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    7130:	4659      	mov	r1, fp
    7132:	4628      	mov	r0, r5
    7134:	69a2      	ldr	r2, [r4, #24]
    7136:	f7ff fe53 	bl	6de0 <LLF_RND_AdaptiveProportionTest>
    713a:	2800      	cmp	r0, #0
    713c:	d1aa      	bne.n	7094 <getTrngSource+0x1e8>
    713e:	e7d1      	b.n	70e4 <getTrngSource+0x238>
    7140:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7142:	601d      	str	r5, [r3, #0]
    7144:	e7ad      	b.n	70a2 <getTrngSource+0x1f6>
    7146:	bf00      	nop
    7148:	50841138 	.word	0x50841138
    714c:	50841130 	.word	0x50841130
    7150:	aaaaaaab 	.word	0xaaaaaaab
    7154:	00f10c02 	.word	0x00f10c02
    7158:	00f10c30 	.word	0x00f10c30
    715c:	508411c4 	.word	0x508411c4
    7160:	5084112c 	.word	0x5084112c
    7164:	50841100 	.word	0x50841100
    7168:	5084110c 	.word	0x5084110c
    716c:	50841a04 	.word	0x50841a04
    7170:	508411d8 	.word	0x508411d8
    7174:	50841114 	.word	0x50841114
    7178:	00f10c31 	.word	0x00f10c31
    717c:	00f10c35 	.word	0x00f10c35
    7180:	00f10c32 	.word	0x00f10c32

00007184 <LLF_RND_GetTrngSource>:
    7184:	2300      	movs	r3, #0
    7186:	b430      	push	{r4, r5}
    7188:	e9dd 4503 	ldrd	r4, r5, [sp, #12]
    718c:	9304      	str	r3, [sp, #16]
    718e:	9b02      	ldr	r3, [sp, #8]
    7190:	e9cd 4502 	strd	r4, r5, [sp, #8]
    7194:	bc30      	pop	{r4, r5}
    7196:	f7ff be89 	b.w	6eac <getTrngSource>
    719a:	bf00      	nop

0000719c <LLF_RND_RunTrngStartupTest>:
    719c:	b510      	push	{r4, lr}
    719e:	2401      	movs	r4, #1
    71a0:	b086      	sub	sp, #24
    71a2:	ab05      	add	r3, sp, #20
    71a4:	e9cd 2401 	strd	r2, r4, [sp, #4]
    71a8:	9300      	str	r3, [sp, #0]
    71aa:	2200      	movs	r2, #0
    71ac:	ab04      	add	r3, sp, #16
    71ae:	f7ff fe7d 	bl	6eac <getTrngSource>
    71b2:	b006      	add	sp, #24
    71b4:	bd10      	pop	{r4, pc}
    71b6:	bf00      	nop

000071b8 <mbedtls_hardware_poll>:
    71b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71bc:	b088      	sub	sp, #32
    71be:	9205      	str	r2, [sp, #20]
    71c0:	2900      	cmp	r1, #0
    71c2:	d068      	beq.n	7296 <mbedtls_hardware_poll+0xde>
    71c4:	461c      	mov	r4, r3
    71c6:	2b00      	cmp	r3, #0
    71c8:	d065      	beq.n	7296 <mbedtls_hardware_poll+0xde>
    71ca:	4615      	mov	r5, r2
    71cc:	2a00      	cmp	r2, #0
    71ce:	d062      	beq.n	7296 <mbedtls_hardware_poll+0xde>
    71d0:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 72b8 <mbedtls_hardware_poll+0x100>
    71d4:	460e      	mov	r6, r1
    71d6:	f8d8 0000 	ldr.w	r0, [r8]
    71da:	f04f 31ff 	mov.w	r1, #4294967295
    71de:	f7ff fca3 	bl	6b28 <CC_PalMutexLock>
    71e2:	2800      	cmp	r0, #0
    71e4:	d14c      	bne.n	7280 <mbedtls_hardware_poll+0xc8>
    71e6:	2000      	movs	r0, #0
    71e8:	f7ff fcce 	bl	6b88 <CC_PalPowerSaveModeSelect>
    71ec:	2800      	cmp	r0, #0
    71ee:	d143      	bne.n	7278 <mbedtls_hardware_poll+0xc0>
    71f0:	482a      	ldr	r0, [pc, #168]	; (729c <mbedtls_hardware_poll+0xe4>)
    71f2:	f000 fa15 	bl	7620 <RNG_PLAT_SetUserRngParameters>
    71f6:	b1e8      	cbz	r0, 7234 <mbedtls_hardware_poll+0x7c>
    71f8:	2001      	movs	r0, #1
    71fa:	f04f 37ff 	mov.w	r7, #4294967295
    71fe:	f7ff fcc3 	bl	6b88 <CC_PalPowerSaveModeSelect>
    7202:	2800      	cmp	r0, #0
    7204:	d134      	bne.n	7270 <mbedtls_hardware_poll+0xb8>
    7206:	f44f 7108 	mov.w	r1, #544	; 0x220
    720a:	4825      	ldr	r0, [pc, #148]	; (72a0 <mbedtls_hardware_poll+0xe8>)
    720c:	f7fe fe44 	bl	5e98 <mbedtls_zeroize_internal>
    7210:	21dc      	movs	r1, #220	; 0xdc
    7212:	4824      	ldr	r0, [pc, #144]	; (72a4 <mbedtls_hardware_poll+0xec>)
    7214:	f7fe fe40 	bl	5e98 <mbedtls_zeroize_internal>
    7218:	4820      	ldr	r0, [pc, #128]	; (729c <mbedtls_hardware_poll+0xe4>)
    721a:	2128      	movs	r1, #40	; 0x28
    721c:	f7fe fe3c 	bl	5e98 <mbedtls_zeroize_internal>
    7220:	f8d8 0000 	ldr.w	r0, [r8]
    7224:	f7ff fc88 	bl	6b38 <CC_PalMutexUnlock>
    7228:	2800      	cmp	r0, #0
    722a:	d12d      	bne.n	7288 <mbedtls_hardware_poll+0xd0>
    722c:	4638      	mov	r0, r7
    722e:	b008      	add	sp, #32
    7230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7234:	491a      	ldr	r1, [pc, #104]	; (72a0 <mbedtls_hardware_poll+0xe8>)
    7236:	ab07      	add	r3, sp, #28
    7238:	4602      	mov	r2, r0
    723a:	9003      	str	r0, [sp, #12]
    723c:	9102      	str	r1, [sp, #8]
    723e:	9300      	str	r3, [sp, #0]
    7240:	4916      	ldr	r1, [pc, #88]	; (729c <mbedtls_hardware_poll+0xe4>)
    7242:	4818      	ldr	r0, [pc, #96]	; (72a4 <mbedtls_hardware_poll+0xec>)
    7244:	9401      	str	r4, [sp, #4]
    7246:	ab05      	add	r3, sp, #20
    7248:	f7ff ff9c 	bl	7184 <LLF_RND_GetTrngSource>
    724c:	2800      	cmp	r0, #0
    724e:	d1d3      	bne.n	71f8 <mbedtls_hardware_poll+0x40>
    7250:	6823      	ldr	r3, [r4, #0]
    7252:	42ab      	cmp	r3, r5
    7254:	d3d0      	bcc.n	71f8 <mbedtls_hardware_poll+0x40>
    7256:	9907      	ldr	r1, [sp, #28]
    7258:	4607      	mov	r7, r0
    725a:	462a      	mov	r2, r5
    725c:	4630      	mov	r0, r6
    725e:	3108      	adds	r1, #8
    7260:	f000 fa1c 	bl	769c <CC_PalMemCopyPlat>
    7264:	2001      	movs	r0, #1
    7266:	6025      	str	r5, [r4, #0]
    7268:	f7ff fc8e 	bl	6b88 <CC_PalPowerSaveModeSelect>
    726c:	2800      	cmp	r0, #0
    726e:	d0ca      	beq.n	7206 <mbedtls_hardware_poll+0x4e>
    7270:	480d      	ldr	r0, [pc, #52]	; (72a8 <mbedtls_hardware_poll+0xf0>)
    7272:	f7fe fd0f 	bl	5c94 <CC_PalAbort>
    7276:	e7c6      	b.n	7206 <mbedtls_hardware_poll+0x4e>
    7278:	480c      	ldr	r0, [pc, #48]	; (72ac <mbedtls_hardware_poll+0xf4>)
    727a:	f7fe fd0b 	bl	5c94 <CC_PalAbort>
    727e:	e7b7      	b.n	71f0 <mbedtls_hardware_poll+0x38>
    7280:	480b      	ldr	r0, [pc, #44]	; (72b0 <mbedtls_hardware_poll+0xf8>)
    7282:	f7fe fd07 	bl	5c94 <CC_PalAbort>
    7286:	e7ae      	b.n	71e6 <mbedtls_hardware_poll+0x2e>
    7288:	480a      	ldr	r0, [pc, #40]	; (72b4 <mbedtls_hardware_poll+0xfc>)
    728a:	f7fe fd03 	bl	5c94 <CC_PalAbort>
    728e:	4638      	mov	r0, r7
    7290:	b008      	add	sp, #32
    7292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7296:	f04f 37ff 	mov.w	r7, #4294967295
    729a:	e7c7      	b.n	722c <mbedtls_hardware_poll+0x74>
    729c:	20001338 	.word	0x20001338
    72a0:	20001118 	.word	0x20001118
    72a4:	2000103c 	.word	0x2000103c
    72a8:	00009624 	.word	0x00009624
    72ac:	00009604 	.word	0x00009604
    72b0:	000095ec 	.word	0x000095ec
    72b4:	0000967c 	.word	0x0000967c
    72b8:	20000118 	.word	0x20000118

000072bc <cc_mbedtls_aes_init>:
    72bc:	b510      	push	{r4, lr}
    72be:	4604      	mov	r4, r0
    72c0:	b130      	cbz	r0, 72d0 <cc_mbedtls_aes_init+0x14>
    72c2:	2200      	movs	r2, #0
    72c4:	2301      	movs	r3, #1
    72c6:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
    72ca:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
    72ce:	bd10      	pop	{r4, pc}
    72d0:	4801      	ldr	r0, [pc, #4]	; (72d8 <cc_mbedtls_aes_init+0x1c>)
    72d2:	f7fe fcdf 	bl	5c94 <CC_PalAbort>
    72d6:	e7f4      	b.n	72c2 <cc_mbedtls_aes_init+0x6>
    72d8:	00009694 	.word	0x00009694

000072dc <cc_mbedtls_aes_free>:
    72dc:	b118      	cbz	r0, 72e6 <cc_mbedtls_aes_free+0xa>
    72de:	2274      	movs	r2, #116	; 0x74
    72e0:	2100      	movs	r1, #0
    72e2:	f000 b9dd 	b.w	76a0 <CC_PalMemSetPlat>
    72e6:	4770      	bx	lr

000072e8 <cc_mbedtls_aes_setkey_enc>:
    72e8:	b188      	cbz	r0, 730e <cc_mbedtls_aes_setkey_enc+0x26>
    72ea:	b199      	cbz	r1, 7314 <cc_mbedtls_aes_setkey_enc+0x2c>
    72ec:	b510      	push	{r4, lr}
    72ee:	2400      	movs	r4, #0
    72f0:	2a80      	cmp	r2, #128	; 0x80
    72f2:	6384      	str	r4, [r0, #56]	; 0x38
    72f4:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    72f8:	d106      	bne.n	7308 <cc_mbedtls_aes_setkey_enc+0x20>
    72fa:	6304      	str	r4, [r0, #48]	; 0x30
    72fc:	2210      	movs	r2, #16
    72fe:	3010      	adds	r0, #16
    7300:	f000 f9cc 	bl	769c <CC_PalMemCopyPlat>
    7304:	4620      	mov	r0, r4
    7306:	bd10      	pop	{r4, pc}
    7308:	f06f 001f 	mvn.w	r0, #31
    730c:	bd10      	pop	{r4, pc}
    730e:	f06f 0021 	mvn.w	r0, #33	; 0x21
    7312:	4770      	bx	lr
    7314:	f06f 001f 	mvn.w	r0, #31
    7318:	4770      	bx	lr
    731a:	bf00      	nop

0000731c <cc_mbedtls_aes_crypt_ecb>:
    731c:	b328      	cbz	r0, 736a <cc_mbedtls_aes_crypt_ecb+0x4e>
    731e:	b322      	cbz	r2, 736a <cc_mbedtls_aes_crypt_ecb+0x4e>
    7320:	b31b      	cbz	r3, 736a <cc_mbedtls_aes_crypt_ecb+0x4e>
    7322:	2901      	cmp	r1, #1
    7324:	d821      	bhi.n	736a <cc_mbedtls_aes_crypt_ecb+0x4e>
    7326:	b570      	push	{r4, r5, r6, lr}
    7328:	4604      	mov	r4, r0
    732a:	6b81      	ldr	r1, [r0, #56]	; 0x38
    732c:	b086      	sub	sp, #24
    732e:	d017      	beq.n	7360 <cc_mbedtls_aes_crypt_ecb+0x44>
    7330:	2901      	cmp	r1, #1
    7332:	d117      	bne.n	7364 <cc_mbedtls_aes_crypt_ecb+0x48>
    7334:	2510      	movs	r5, #16
    7336:	2100      	movs	r1, #0
    7338:	eb0d 0605 	add.w	r6, sp, r5
    733c:	6361      	str	r1, [r4, #52]	; 0x34
    733e:	4610      	mov	r0, r2
    7340:	4629      	mov	r1, r5
    7342:	9500      	str	r5, [sp, #0]
    7344:	aa02      	add	r2, sp, #8
    7346:	9601      	str	r6, [sp, #4]
    7348:	f000 fa84 	bl	7854 <SetDataBuffersInfo>
    734c:	b950      	cbnz	r0, 7364 <cc_mbedtls_aes_crypt_ecb+0x48>
    734e:	462b      	mov	r3, r5
    7350:	4632      	mov	r2, r6
    7352:	4620      	mov	r0, r4
    7354:	a902      	add	r1, sp, #8
    7356:	f000 fd37 	bl	7dc8 <ProcessAesDrv>
    735a:	b918      	cbnz	r0, 7364 <cc_mbedtls_aes_crypt_ecb+0x48>
    735c:	b006      	add	sp, #24
    735e:	bd70      	pop	{r4, r5, r6, pc}
    7360:	2900      	cmp	r1, #0
    7362:	d0e7      	beq.n	7334 <cc_mbedtls_aes_crypt_ecb+0x18>
    7364:	f06f 0021 	mvn.w	r0, #33	; 0x21
    7368:	e7f8      	b.n	735c <cc_mbedtls_aes_crypt_ecb+0x40>
    736a:	f06f 0021 	mvn.w	r0, #33	; 0x21
    736e:	4770      	bx	lr

00007370 <cc_mbedtls_sha256_init>:
    7370:	b510      	push	{r4, lr}
    7372:	4604      	mov	r4, r0
    7374:	b128      	cbz	r0, 7382 <cc_mbedtls_sha256_init+0x12>
    7376:	4620      	mov	r0, r4
    7378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    737c:	21f0      	movs	r1, #240	; 0xf0
    737e:	f000 b991 	b.w	76a4 <CC_PalMemSetZeroPlat>
    7382:	4804      	ldr	r0, [pc, #16]	; (7394 <cc_mbedtls_sha256_init+0x24>)
    7384:	f7fe fc86 	bl	5c94 <CC_PalAbort>
    7388:	4620      	mov	r0, r4
    738a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    738e:	21f0      	movs	r1, #240	; 0xf0
    7390:	f000 b988 	b.w	76a4 <CC_PalMemSetZeroPlat>
    7394:	000096a8 	.word	0x000096a8

00007398 <cc_mbedtls_sha256_free>:
    7398:	b110      	cbz	r0, 73a0 <cc_mbedtls_sha256_free+0x8>
    739a:	21f0      	movs	r1, #240	; 0xf0
    739c:	f7fe bd7c 	b.w	5e98 <mbedtls_zeroize_internal>
    73a0:	4770      	bx	lr
    73a2:	bf00      	nop

000073a4 <cc_mbedtls_sha256_starts>:
    73a4:	b508      	push	{r3, lr}
    73a6:	b161      	cbz	r1, 73c2 <cc_mbedtls_sha256_starts+0x1e>
    73a8:	2901      	cmp	r1, #1
    73aa:	d107      	bne.n	73bc <cc_mbedtls_sha256_starts+0x18>
    73ac:	2102      	movs	r1, #2
    73ae:	f000 f85b 	bl	7468 <mbedtls_sha_starts_internal>
    73b2:	2800      	cmp	r0, #0
    73b4:	bf18      	it	ne
    73b6:	f06f 0036 	mvnne.w	r0, #54	; 0x36
    73ba:	bd08      	pop	{r3, pc}
    73bc:	f06f 0036 	mvn.w	r0, #54	; 0x36
    73c0:	bd08      	pop	{r3, pc}
    73c2:	2101      	movs	r1, #1
    73c4:	f000 f850 	bl	7468 <mbedtls_sha_starts_internal>
    73c8:	e7f3      	b.n	73b2 <cc_mbedtls_sha256_starts+0xe>
    73ca:	bf00      	nop

000073cc <cc_mbedtls_sha256_update>:
    73cc:	b570      	push	{r4, r5, r6, lr}
    73ce:	188e      	adds	r6, r1, r2
    73d0:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
    73d4:	460b      	mov	r3, r1
    73d6:	4614      	mov	r4, r2
    73d8:	4605      	mov	r5, r0
    73da:	b0a0      	sub	sp, #128	; 0x80
    73dc:	d801      	bhi.n	73e2 <cc_mbedtls_sha256_update+0x16>
    73de:	2a80      	cmp	r2, #128	; 0x80
    73e0:	d90c      	bls.n	73fc <cc_mbedtls_sha256_update+0x30>
    73e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    73e6:	d917      	bls.n	7418 <cc_mbedtls_sha256_update+0x4c>
    73e8:	4622      	mov	r2, r4
    73ea:	4619      	mov	r1, r3
    73ec:	4628      	mov	r0, r5
    73ee:	f000 f87d 	bl	74ec <mbedtls_sha_update_internal>
    73f2:	4604      	mov	r4, r0
    73f4:	b984      	cbnz	r4, 7418 <cc_mbedtls_sha256_update+0x4c>
    73f6:	4620      	mov	r0, r4
    73f8:	b020      	add	sp, #128	; 0x80
    73fa:	bd70      	pop	{r4, r5, r6, pc}
    73fc:	4668      	mov	r0, sp
    73fe:	f000 f94d 	bl	769c <CC_PalMemCopyPlat>
    7402:	4622      	mov	r2, r4
    7404:	4669      	mov	r1, sp
    7406:	4628      	mov	r0, r5
    7408:	f000 f870 	bl	74ec <mbedtls_sha_update_internal>
    740c:	2180      	movs	r1, #128	; 0x80
    740e:	4604      	mov	r4, r0
    7410:	4668      	mov	r0, sp
    7412:	f000 f947 	bl	76a4 <CC_PalMemSetZeroPlat>
    7416:	e7ed      	b.n	73f4 <cc_mbedtls_sha256_update+0x28>
    7418:	f06f 0436 	mvn.w	r4, #54	; 0x36
    741c:	e7eb      	b.n	73f6 <cc_mbedtls_sha256_update+0x2a>
    741e:	bf00      	nop

00007420 <cc_mbedtls_sha256_finish>:
    7420:	b570      	push	{r4, r5, r6, lr}
    7422:	b1e8      	cbz	r0, 7460 <cc_mbedtls_sha256_finish+0x40>
    7424:	460e      	mov	r6, r1
    7426:	b1d9      	cbz	r1, 7460 <cc_mbedtls_sha256_finish+0x40>
    7428:	4604      	mov	r4, r0
    742a:	f000 f831 	bl	7490 <mbedtls_sha_finish_internal>
    742e:	4605      	mov	r5, r0
    7430:	b9b0      	cbnz	r0, 7460 <cc_mbedtls_sha256_finish+0x40>
    7432:	6823      	ldr	r3, [r4, #0]
    7434:	2b01      	cmp	r3, #1
    7436:	d00b      	beq.n	7450 <cc_mbedtls_sha256_finish+0x30>
    7438:	2b02      	cmp	r3, #2
    743a:	d001      	beq.n	7440 <cc_mbedtls_sha256_finish+0x20>
    743c:	4628      	mov	r0, r5
    743e:	bd70      	pop	{r4, r5, r6, pc}
    7440:	4630      	mov	r0, r6
    7442:	221c      	movs	r2, #28
    7444:	f104 0108 	add.w	r1, r4, #8
    7448:	f000 f928 	bl	769c <CC_PalMemCopyPlat>
    744c:	4628      	mov	r0, r5
    744e:	bd70      	pop	{r4, r5, r6, pc}
    7450:	4630      	mov	r0, r6
    7452:	2220      	movs	r2, #32
    7454:	f104 0108 	add.w	r1, r4, #8
    7458:	f000 f920 	bl	769c <CC_PalMemCopyPlat>
    745c:	4628      	mov	r0, r5
    745e:	bd70      	pop	{r4, r5, r6, pc}
    7460:	f06f 0536 	mvn.w	r5, #54	; 0x36
    7464:	e7ea      	b.n	743c <cc_mbedtls_sha256_finish+0x1c>
    7466:	bf00      	nop

00007468 <mbedtls_sha_starts_internal>:
    7468:	b178      	cbz	r0, 748a <mbedtls_sha_starts_internal+0x22>
    746a:	b538      	push	{r3, r4, r5, lr}
    746c:	460d      	mov	r5, r1
    746e:	21f0      	movs	r1, #240	; 0xf0
    7470:	4604      	mov	r4, r0
    7472:	f000 f917 	bl	76a4 <CC_PalMemSetZeroPlat>
    7476:	2340      	movs	r3, #64	; 0x40
    7478:	4620      	mov	r0, r4
    747a:	6025      	str	r5, [r4, #0]
    747c:	65e3      	str	r3, [r4, #92]	; 0x5c
    747e:	f000 fa21 	bl	78c4 <InitHashDrv>
    7482:	3800      	subs	r0, #0
    7484:	bf18      	it	ne
    7486:	2001      	movne	r0, #1
    7488:	bd38      	pop	{r3, r4, r5, pc}
    748a:	2001      	movs	r0, #1
    748c:	4770      	bx	lr
    748e:	bf00      	nop

00007490 <mbedtls_sha_finish_internal>:
    7490:	b570      	push	{r4, r5, r6, lr}
    7492:	6e05      	ldr	r5, [r0, #96]	; 0x60
    7494:	b0a4      	sub	sp, #144	; 0x90
    7496:	4604      	mov	r4, r0
    7498:	ae04      	add	r6, sp, #16
    749a:	b9e5      	cbnz	r5, 74d6 <mbedtls_sha_finish_internal+0x46>
    749c:	2201      	movs	r2, #1
    749e:	2300      	movs	r3, #0
    74a0:	6062      	str	r2, [r4, #4]
    74a2:	4630      	mov	r0, r6
    74a4:	4629      	mov	r1, r5
    74a6:	e9cd 3300 	strd	r3, r3, [sp]
    74aa:	aa02      	add	r2, sp, #8
    74ac:	f000 f9d2 	bl	7854 <SetDataBuffersInfo>
    74b0:	b110      	cbz	r0, 74b8 <mbedtls_sha_finish_internal+0x28>
    74b2:	2001      	movs	r0, #1
    74b4:	b024      	add	sp, #144	; 0x90
    74b6:	bd70      	pop	{r4, r5, r6, pc}
    74b8:	462a      	mov	r2, r5
    74ba:	4620      	mov	r0, r4
    74bc:	a902      	add	r1, sp, #8
    74be:	f000 fa2b 	bl	7918 <ProcessHashDrv>
    74c2:	2800      	cmp	r0, #0
    74c4:	d1f5      	bne.n	74b2 <mbedtls_sha_finish_internal+0x22>
    74c6:	4620      	mov	r0, r4
    74c8:	f000 fb50 	bl	7b6c <FinishHashDrv>
    74cc:	2800      	cmp	r0, #0
    74ce:	d1f0      	bne.n	74b2 <mbedtls_sha_finish_internal+0x22>
    74d0:	6620      	str	r0, [r4, #96]	; 0x60
    74d2:	b024      	add	sp, #144	; 0x90
    74d4:	bd70      	pop	{r4, r5, r6, pc}
    74d6:	2d80      	cmp	r5, #128	; 0x80
    74d8:	462a      	mov	r2, r5
    74da:	4630      	mov	r0, r6
    74dc:	bf28      	it	cs
    74de:	2280      	movcs	r2, #128	; 0x80
    74e0:	f104 0164 	add.w	r1, r4, #100	; 0x64
    74e4:	f000 f8da 	bl	769c <CC_PalMemCopyPlat>
    74e8:	6e25      	ldr	r5, [r4, #96]	; 0x60
    74ea:	e7d7      	b.n	749c <mbedtls_sha_finish_internal+0xc>

000074ec <mbedtls_sha_update_internal>:
    74ec:	2800      	cmp	r0, #0
    74ee:	d055      	beq.n	759c <mbedtls_sha_update_internal+0xb0>
    74f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    74f2:	4615      	mov	r5, r2
    74f4:	b0a5      	sub	sp, #148	; 0x94
    74f6:	b1b2      	cbz	r2, 7526 <mbedtls_sha_update_internal+0x3a>
    74f8:	460e      	mov	r6, r1
    74fa:	b351      	cbz	r1, 7552 <mbedtls_sha_update_internal+0x66>
    74fc:	4604      	mov	r4, r0
    74fe:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
    7502:	1a1a      	subs	r2, r3, r0
    7504:	fbb2 f7f3 	udiv	r7, r2, r3
    7508:	fb03 2717 	mls	r7, r3, r7, r2
    750c:	42af      	cmp	r7, r5
    750e:	bf28      	it	cs
    7510:	462f      	movcs	r7, r5
    7512:	2f00      	cmp	r7, #0
    7514:	d144      	bne.n	75a0 <mbedtls_sha_update_internal+0xb4>
    7516:	4283      	cmp	r3, r0
    7518:	d008      	beq.n	752c <mbedtls_sha_update_internal+0x40>
    751a:	fbb5 f7f3 	udiv	r7, r5, r3
    751e:	fb03 f707 	mul.w	r7, r3, r7
    7522:	b9cf      	cbnz	r7, 7558 <mbedtls_sha_update_internal+0x6c>
    7524:	bb6d      	cbnz	r5, 7582 <mbedtls_sha_update_internal+0x96>
    7526:	4628      	mov	r0, r5
    7528:	b025      	add	sp, #148	; 0x94
    752a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    752c:	2b80      	cmp	r3, #128	; 0x80
    752e:	bf28      	it	cs
    7530:	2380      	movcs	r3, #128	; 0x80
    7532:	f104 0164 	add.w	r1, r4, #100	; 0x64
    7536:	461a      	mov	r2, r3
    7538:	a804      	add	r0, sp, #16
    753a:	f000 f8af 	bl	769c <CC_PalMemCopyPlat>
    753e:	2300      	movs	r3, #0
    7540:	e9cd 3300 	strd	r3, r3, [sp]
    7544:	a804      	add	r0, sp, #16
    7546:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    7548:	aa02      	add	r2, sp, #8
    754a:	f000 f983 	bl	7854 <SetDataBuffersInfo>
    754e:	2800      	cmp	r0, #0
    7550:	d033      	beq.n	75ba <mbedtls_sha_update_internal+0xce>
    7552:	2001      	movs	r0, #1
    7554:	b025      	add	sp, #148	; 0x94
    7556:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7558:	2300      	movs	r3, #0
    755a:	4639      	mov	r1, r7
    755c:	4630      	mov	r0, r6
    755e:	e9cd 3300 	strd	r3, r3, [sp]
    7562:	aa02      	add	r2, sp, #8
    7564:	f000 f976 	bl	7854 <SetDataBuffersInfo>
    7568:	2800      	cmp	r0, #0
    756a:	d1f2      	bne.n	7552 <mbedtls_sha_update_internal+0x66>
    756c:	463a      	mov	r2, r7
    756e:	4620      	mov	r0, r4
    7570:	a902      	add	r1, sp, #8
    7572:	f000 f9d1 	bl	7918 <ProcessHashDrv>
    7576:	2800      	cmp	r0, #0
    7578:	d1eb      	bne.n	7552 <mbedtls_sha_update_internal+0x66>
    757a:	1bed      	subs	r5, r5, r7
    757c:	443e      	add	r6, r7
    757e:	2d00      	cmp	r5, #0
    7580:	d0d1      	beq.n	7526 <mbedtls_sha_update_internal+0x3a>
    7582:	6e20      	ldr	r0, [r4, #96]	; 0x60
    7584:	462a      	mov	r2, r5
    7586:	3019      	adds	r0, #25
    7588:	4631      	mov	r1, r6
    758a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    758e:	f000 f885 	bl	769c <CC_PalMemCopyPlat>
    7592:	6e22      	ldr	r2, [r4, #96]	; 0x60
    7594:	2000      	movs	r0, #0
    7596:	442a      	add	r2, r5
    7598:	6622      	str	r2, [r4, #96]	; 0x60
    759a:	e7c5      	b.n	7528 <mbedtls_sha_update_internal+0x3c>
    759c:	2001      	movs	r0, #1
    759e:	4770      	bx	lr
    75a0:	f104 0364 	add.w	r3, r4, #100	; 0x64
    75a4:	4418      	add	r0, r3
    75a6:	463a      	mov	r2, r7
    75a8:	f000 f878 	bl	769c <CC_PalMemCopyPlat>
    75ac:	e9d4 3017 	ldrd	r3, r0, [r4, #92]	; 0x5c
    75b0:	4438      	add	r0, r7
    75b2:	443e      	add	r6, r7
    75b4:	1bed      	subs	r5, r5, r7
    75b6:	6620      	str	r0, [r4, #96]	; 0x60
    75b8:	e7ad      	b.n	7516 <mbedtls_sha_update_internal+0x2a>
    75ba:	4620      	mov	r0, r4
    75bc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    75be:	a902      	add	r1, sp, #8
    75c0:	f000 f9aa 	bl	7918 <ProcessHashDrv>
    75c4:	2800      	cmp	r0, #0
    75c6:	d1c4      	bne.n	7552 <mbedtls_sha_update_internal+0x66>
    75c8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    75ca:	6620      	str	r0, [r4, #96]	; 0x60
    75cc:	e7a5      	b.n	751a <mbedtls_sha_update_internal+0x2e>
    75ce:	bf00      	nop

000075d0 <cc_mbedtls_sha256>:
    75d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    75d2:	461c      	mov	r4, r3
    75d4:	4605      	mov	r5, r0
    75d6:	4811      	ldr	r0, [pc, #68]	; (761c <cc_mbedtls_sha256+0x4c>)
    75d8:	460e      	mov	r6, r1
    75da:	4617      	mov	r7, r2
    75dc:	f7ff fec8 	bl	7370 <cc_mbedtls_sha256_init>
    75e0:	4621      	mov	r1, r4
    75e2:	480e      	ldr	r0, [pc, #56]	; (761c <cc_mbedtls_sha256+0x4c>)
    75e4:	f7ff fede 	bl	73a4 <cc_mbedtls_sha256_starts>
    75e8:	4604      	mov	r4, r0
    75ea:	b120      	cbz	r0, 75f6 <cc_mbedtls_sha256+0x26>
    75ec:	480b      	ldr	r0, [pc, #44]	; (761c <cc_mbedtls_sha256+0x4c>)
    75ee:	f7ff fed3 	bl	7398 <cc_mbedtls_sha256_free>
    75f2:	4620      	mov	r0, r4
    75f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    75f6:	4632      	mov	r2, r6
    75f8:	4629      	mov	r1, r5
    75fa:	4808      	ldr	r0, [pc, #32]	; (761c <cc_mbedtls_sha256+0x4c>)
    75fc:	f7ff fee6 	bl	73cc <cc_mbedtls_sha256_update>
    7600:	4604      	mov	r4, r0
    7602:	2800      	cmp	r0, #0
    7604:	d1f2      	bne.n	75ec <cc_mbedtls_sha256+0x1c>
    7606:	4639      	mov	r1, r7
    7608:	4804      	ldr	r0, [pc, #16]	; (761c <cc_mbedtls_sha256+0x4c>)
    760a:	f7ff ff09 	bl	7420 <cc_mbedtls_sha256_finish>
    760e:	4604      	mov	r4, r0
    7610:	4802      	ldr	r0, [pc, #8]	; (761c <cc_mbedtls_sha256+0x4c>)
    7612:	f7ff fec1 	bl	7398 <cc_mbedtls_sha256_free>
    7616:	4620      	mov	r0, r4
    7618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    761a:	bf00      	nop
    761c:	20001360 	.word	0x20001360

00007620 <RNG_PLAT_SetUserRngParameters>:
    7620:	231c      	movs	r3, #28
    7622:	b530      	push	{r4, r5, lr}
    7624:	b083      	sub	sp, #12
    7626:	a901      	add	r1, sp, #4
    7628:	4604      	mov	r4, r0
    762a:	9301      	str	r3, [sp, #4]
    762c:	f000 f83e 	bl	76ac <CC_PalTrngParamGet>
    7630:	4605      	mov	r5, r0
    7632:	b938      	cbnz	r0, 7644 <RNG_PLAT_SetUserRngParameters+0x24>
    7634:	9b01      	ldr	r3, [sp, #4]
    7636:	2b1c      	cmp	r3, #28
    7638:	d007      	beq.n	764a <RNG_PLAT_SetUserRngParameters+0x2a>
    763a:	4d16      	ldr	r5, [pc, #88]	; (7694 <RNG_PLAT_SetUserRngParameters+0x74>)
    763c:	4620      	mov	r0, r4
    763e:	211c      	movs	r1, #28
    7640:	f000 f830 	bl	76a4 <CC_PalMemSetZeroPlat>
    7644:	4628      	mov	r0, r5
    7646:	b003      	add	sp, #12
    7648:	bd30      	pop	{r4, r5, pc}
    764a:	2101      	movs	r1, #1
    764c:	e9d4 3200 	ldrd	r3, r2, [r4]
    7650:	3b00      	subs	r3, #0
    7652:	bf18      	it	ne
    7654:	2301      	movne	r3, #1
    7656:	61e1      	str	r1, [r4, #28]
    7658:	b10a      	cbz	r2, 765e <RNG_PLAT_SetUserRngParameters+0x3e>
    765a:	f043 0302 	orr.w	r3, r3, #2
    765e:	68a2      	ldr	r2, [r4, #8]
    7660:	b932      	cbnz	r2, 7670 <RNG_PLAT_SetUserRngParameters+0x50>
    7662:	68e2      	ldr	r2, [r4, #12]
    7664:	b942      	cbnz	r2, 7678 <RNG_PLAT_SetUserRngParameters+0x58>
    7666:	e9c4 3208 	strd	r3, r2, [r4, #32]
    766a:	b98b      	cbnz	r3, 7690 <RNG_PLAT_SetUserRngParameters+0x70>
    766c:	4d0a      	ldr	r5, [pc, #40]	; (7698 <RNG_PLAT_SetUserRngParameters+0x78>)
    766e:	e7e5      	b.n	763c <RNG_PLAT_SetUserRngParameters+0x1c>
    7670:	68e2      	ldr	r2, [r4, #12]
    7672:	f043 0304 	orr.w	r3, r3, #4
    7676:	b13a      	cbz	r2, 7688 <RNG_PLAT_SetUserRngParameters+0x68>
    7678:	2200      	movs	r2, #0
    767a:	4628      	mov	r0, r5
    767c:	f043 0308 	orr.w	r3, r3, #8
    7680:	e9c4 3208 	strd	r3, r2, [r4, #32]
    7684:	b003      	add	sp, #12
    7686:	bd30      	pop	{r4, r5, pc}
    7688:	4615      	mov	r5, r2
    768a:	e9c4 3208 	strd	r3, r2, [r4, #32]
    768e:	e7d9      	b.n	7644 <RNG_PLAT_SetUserRngParameters+0x24>
    7690:	4615      	mov	r5, r2
    7692:	e7d7      	b.n	7644 <RNG_PLAT_SetUserRngParameters+0x24>
    7694:	00f00c37 	.word	0x00f00c37
    7698:	00f00c0e 	.word	0x00f00c0e

0000769c <CC_PalMemCopyPlat>:
    769c:	f001 b9c1 	b.w	8a22 <memmove>

000076a0 <CC_PalMemSetPlat>:
    76a0:	f001 b9e1 	b.w	8a66 <memset>

000076a4 <CC_PalMemSetZeroPlat>:
    76a4:	460a      	mov	r2, r1
    76a6:	2100      	movs	r1, #0
    76a8:	f001 b9dd 	b.w	8a66 <memset>

000076ac <CC_PalTrngParamGet>:
    76ac:	2800      	cmp	r0, #0
    76ae:	d066      	beq.n	777e <CC_PalTrngParamGet+0xd2>
    76b0:	2900      	cmp	r1, #0
    76b2:	d064      	beq.n	777e <CC_PalTrngParamGet+0xd2>
    76b4:	680b      	ldr	r3, [r1, #0]
    76b6:	2b1c      	cmp	r3, #28
    76b8:	d161      	bne.n	777e <CC_PalTrngParamGet+0xd2>
    76ba:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    76be:	4a3b      	ldr	r2, [pc, #236]	; (77ac <CC_PalTrngParamGet+0x100>)
    76c0:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
    76c4:	4291      	cmp	r1, r2
    76c6:	d05c      	beq.n	7782 <CC_PalTrngParamGet+0xd6>
    76c8:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    76cc:	3201      	adds	r2, #1
    76ce:	d058      	beq.n	7782 <CC_PalTrngParamGet+0xd6>
    76d0:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    76d4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    76d8:	6002      	str	r2, [r0, #0]
    76da:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
    76de:	4a34      	ldr	r2, [pc, #208]	; (77b0 <CC_PalTrngParamGet+0x104>)
    76e0:	4291      	cmp	r1, r2
    76e2:	d060      	beq.n	77a6 <CC_PalTrngParamGet+0xfa>
    76e4:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    76e8:	3201      	adds	r2, #1
    76ea:	d05c      	beq.n	77a6 <CC_PalTrngParamGet+0xfa>
    76ec:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    76f0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    76f4:	6042      	str	r2, [r0, #4]
    76f6:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    76fa:	f512 7f94 	cmn.w	r2, #296	; 0x128
    76fe:	d04f      	beq.n	77a0 <CC_PalTrngParamGet+0xf4>
    7700:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    7704:	3201      	adds	r2, #1
    7706:	d04b      	beq.n	77a0 <CC_PalTrngParamGet+0xf4>
    7708:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    770c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    7710:	6082      	str	r2, [r0, #8]
    7712:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
    7716:	4a27      	ldr	r2, [pc, #156]	; (77b4 <CC_PalTrngParamGet+0x108>)
    7718:	4291      	cmp	r1, r2
    771a:	d03e      	beq.n	779a <CC_PalTrngParamGet+0xee>
    771c:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    7720:	3201      	adds	r2, #1
    7722:	d03a      	beq.n	779a <CC_PalTrngParamGet+0xee>
    7724:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    7728:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    772c:	60c2      	str	r2, [r0, #12]
    772e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    7732:	3270      	adds	r2, #112	; 0x70
    7734:	d02f      	beq.n	7796 <CC_PalTrngParamGet+0xea>
    7736:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    773a:	3201      	adds	r2, #1
    773c:	d02b      	beq.n	7796 <CC_PalTrngParamGet+0xea>
    773e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    7742:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    7746:	6102      	str	r2, [r0, #16]
    7748:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    774c:	32af      	adds	r2, #175	; 0xaf
    774e:	d020      	beq.n	7792 <CC_PalTrngParamGet+0xe6>
    7750:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    7754:	3201      	adds	r2, #1
    7756:	d01c      	beq.n	7792 <CC_PalTrngParamGet+0xe6>
    7758:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    775c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    7760:	6142      	str	r2, [r0, #20]
    7762:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
    7766:	4a14      	ldr	r2, [pc, #80]	; (77b8 <CC_PalTrngParamGet+0x10c>)
    7768:	4291      	cmp	r1, r2
    776a:	d00d      	beq.n	7788 <CC_PalTrngParamGet+0xdc>
    776c:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
    7770:	3201      	adds	r2, #1
    7772:	d009      	beq.n	7788 <CC_PalTrngParamGet+0xdc>
    7774:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
    7778:	6183      	str	r3, [r0, #24]
    777a:	2000      	movs	r0, #0
    777c:	4770      	bx	lr
    777e:	2001      	movs	r0, #1
    7780:	4770      	bx	lr
    7782:	f640 02fc 	movw	r2, #2300	; 0x8fc
    7786:	e7a5      	b.n	76d4 <CC_PalTrngParamGet+0x28>
    7788:	f240 3337 	movw	r3, #823	; 0x337
    778c:	6183      	str	r3, [r0, #24]
    778e:	2000      	movs	r0, #0
    7790:	4770      	bx	lr
    7792:	2251      	movs	r2, #81	; 0x51
    7794:	e7e2      	b.n	775c <CC_PalTrngParamGet+0xb0>
    7796:	2290      	movs	r2, #144	; 0x90
    7798:	e7d3      	b.n	7742 <CC_PalTrngParamGet+0x96>
    779a:	f642 1204 	movw	r2, #10500	; 0x2904
    779e:	e7c3      	b.n	7728 <CC_PalTrngParamGet+0x7c>
    77a0:	f640 62d8 	movw	r2, #3800	; 0xed8
    77a4:	e7b2      	b.n	770c <CC_PalTrngParamGet+0x60>
    77a6:	f242 02d0 	movw	r2, #8400	; 0x20d0
    77aa:	e7a1      	b.n	76f0 <CC_PalTrngParamGet+0x44>
    77ac:	fffff8fc 	.word	0xfffff8fc
    77b0:	ffff20d0 	.word	0xffff20d0
    77b4:	ffff2904 	.word	0xffff2904
    77b8:	fffff337 	.word	0xfffff337

000077bc <LLF_RND_WaitRngInterrupt>:
    77bc:	4601      	mov	r1, r0
    77be:	b508      	push	{r3, lr}
    77c0:	f44f 6080 	mov.w	r0, #1024	; 0x400
    77c4:	f7ff f924 	bl	6a10 <CC_HalWaitInterruptRND>
    77c8:	2300      	movs	r3, #0
    77ca:	4902      	ldr	r1, [pc, #8]	; (77d4 <LLF_RND_WaitRngInterrupt+0x18>)
    77cc:	4a02      	ldr	r2, [pc, #8]	; (77d8 <LLF_RND_WaitRngInterrupt+0x1c>)
    77ce:	600b      	str	r3, [r1, #0]
    77d0:	6013      	str	r3, [r2, #0]
    77d2:	bd08      	pop	{r3, pc}
    77d4:	508411c8 	.word	0x508411c8
    77d8:	5084112c 	.word	0x5084112c

000077dc <LLF_RND_GetRoscSampleCnt>:
    77dc:	3801      	subs	r0, #1
    77de:	2807      	cmp	r0, #7
    77e0:	d805      	bhi.n	77ee <LLF_RND_GetRoscSampleCnt+0x12>
    77e2:	e8df f000 	tbb	[pc, r0]
    77e6:	0e0a      	.short	0x0e0a
    77e8:	04041204 	.word	0x04041204
    77ec:	0604      	.short	0x0604
    77ee:	4809      	ldr	r0, [pc, #36]	; (7814 <LLF_RND_GetRoscSampleCnt+0x38>)
    77f0:	4770      	bx	lr
    77f2:	68cb      	ldr	r3, [r1, #12]
    77f4:	2000      	movs	r0, #0
    77f6:	624b      	str	r3, [r1, #36]	; 0x24
    77f8:	4770      	bx	lr
    77fa:	680b      	ldr	r3, [r1, #0]
    77fc:	2000      	movs	r0, #0
    77fe:	624b      	str	r3, [r1, #36]	; 0x24
    7800:	4770      	bx	lr
    7802:	684b      	ldr	r3, [r1, #4]
    7804:	2000      	movs	r0, #0
    7806:	624b      	str	r3, [r1, #36]	; 0x24
    7808:	4770      	bx	lr
    780a:	688b      	ldr	r3, [r1, #8]
    780c:	2000      	movs	r0, #0
    780e:	624b      	str	r3, [r1, #36]	; 0x24
    7810:	4770      	bx	lr
    7812:	bf00      	nop
    7814:	00f10c31 	.word	0x00f10c31

00007818 <LLF_RND_GetFastestRosc>:
    7818:	680b      	ldr	r3, [r1, #0]
    781a:	e002      	b.n	7822 <LLF_RND_GetFastestRosc+0xa>
    781c:	2b08      	cmp	r3, #8
    781e:	600b      	str	r3, [r1, #0]
    7820:	d806      	bhi.n	7830 <LLF_RND_GetFastestRosc+0x18>
    7822:	6a02      	ldr	r2, [r0, #32]
    7824:	4213      	tst	r3, r2
    7826:	ea4f 0343 	mov.w	r3, r3, lsl #1
    782a:	d0f7      	beq.n	781c <LLF_RND_GetFastestRosc+0x4>
    782c:	2000      	movs	r0, #0
    782e:	4770      	bx	lr
    7830:	4800      	ldr	r0, [pc, #0]	; (7834 <LLF_RND_GetFastestRosc+0x1c>)
    7832:	4770      	bx	lr
    7834:	00f10c31 	.word	0x00f10c31

00007838 <LLF_RND_TurnOffTrng>:
    7838:	2300      	movs	r3, #0
    783a:	4904      	ldr	r1, [pc, #16]	; (784c <LLF_RND_TurnOffTrng+0x14>)
    783c:	4a04      	ldr	r2, [pc, #16]	; (7850 <LLF_RND_TurnOffTrng+0x18>)
    783e:	600b      	str	r3, [r1, #0]
    7840:	f44f 6080 	mov.w	r0, #1024	; 0x400
    7844:	6013      	str	r3, [r2, #0]
    7846:	f7ff b8c9 	b.w	69dc <CC_HalClearInterruptBit>
    784a:	bf00      	nop
    784c:	5084112c 	.word	0x5084112c
    7850:	508411c4 	.word	0x508411c4

00007854 <SetDataBuffersInfo>:
    7854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7858:	2600      	movs	r6, #0
    785a:	b082      	sub	sp, #8
    785c:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    7860:	f88d 6007 	strb.w	r6, [sp, #7]
    7864:	9e09      	ldr	r6, [sp, #36]	; 0x24
    7866:	d327      	bcc.n	78b8 <SetDataBuffersInfo+0x64>
    7868:	460c      	mov	r4, r1
    786a:	4404      	add	r4, r0
    786c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    7870:	4605      	mov	r5, r0
    7872:	d821      	bhi.n	78b8 <SetDataBuffersInfo+0x64>
    7874:	4617      	mov	r7, r2
    7876:	4698      	mov	r8, r3
    7878:	2201      	movs	r2, #1
    787a:	f10d 0307 	add.w	r3, sp, #7
    787e:	f000 ff9f 	bl	87c0 <CC_PalDataBufferAttrGet>
    7882:	4604      	mov	r4, r0
    7884:	b9c0      	cbnz	r0, 78b8 <SetDataBuffersInfo+0x64>
    7886:	f89d 3007 	ldrb.w	r3, [sp, #7]
    788a:	603d      	str	r5, [r7, #0]
    788c:	713b      	strb	r3, [r7, #4]
    788e:	b1ae      	cbz	r6, 78bc <SetDataBuffersInfo+0x68>
    7890:	f1b8 0f00 	cmp.w	r8, #0
    7894:	d009      	beq.n	78aa <SetDataBuffersInfo+0x56>
    7896:	4602      	mov	r2, r0
    7898:	9908      	ldr	r1, [sp, #32]
    789a:	4640      	mov	r0, r8
    789c:	f10d 0307 	add.w	r3, sp, #7
    78a0:	f000 ff8e 	bl	87c0 <CC_PalDataBufferAttrGet>
    78a4:	b940      	cbnz	r0, 78b8 <SetDataBuffersInfo+0x64>
    78a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78aa:	4620      	mov	r0, r4
    78ac:	f8c6 8000 	str.w	r8, [r6]
    78b0:	7133      	strb	r3, [r6, #4]
    78b2:	b002      	add	sp, #8
    78b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    78b8:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
    78bc:	4620      	mov	r0, r4
    78be:	b002      	add	sp, #8
    78c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000078c4 <InitHashDrv>:
    78c4:	b1e8      	cbz	r0, 7902 <InitHashDrv+0x3e>
    78c6:	b510      	push	{r4, lr}
    78c8:	6804      	ldr	r4, [r0, #0]
    78ca:	2c01      	cmp	r4, #1
    78cc:	d004      	beq.n	78d8 <InitHashDrv+0x14>
    78ce:	2c02      	cmp	r4, #2
    78d0:	d010      	beq.n	78f4 <InitHashDrv+0x30>
    78d2:	b144      	cbz	r4, 78e6 <InitHashDrv+0x22>
    78d4:	480c      	ldr	r0, [pc, #48]	; (7908 <InitHashDrv+0x44>)
    78d6:	bd10      	pop	{r4, pc}
    78d8:	2220      	movs	r2, #32
    78da:	490c      	ldr	r1, [pc, #48]	; (790c <InitHashDrv+0x48>)
    78dc:	3008      	adds	r0, #8
    78de:	f7ff fedd 	bl	769c <CC_PalMemCopyPlat>
    78e2:	2000      	movs	r0, #0
    78e4:	bd10      	pop	{r4, pc}
    78e6:	2214      	movs	r2, #20
    78e8:	4909      	ldr	r1, [pc, #36]	; (7910 <InitHashDrv+0x4c>)
    78ea:	3008      	adds	r0, #8
    78ec:	f7ff fed6 	bl	769c <CC_PalMemCopyPlat>
    78f0:	4620      	mov	r0, r4
    78f2:	bd10      	pop	{r4, pc}
    78f4:	2220      	movs	r2, #32
    78f6:	4907      	ldr	r1, [pc, #28]	; (7914 <InitHashDrv+0x50>)
    78f8:	3008      	adds	r0, #8
    78fa:	f7ff fecf 	bl	769c <CC_PalMemCopyPlat>
    78fe:	2000      	movs	r0, #0
    7900:	bd10      	pop	{r4, pc}
    7902:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
    7906:	4770      	bx	lr
    7908:	00f30001 	.word	0x00f30001
    790c:	000096ec 	.word	0x000096ec
    7910:	000096b8 	.word	0x000096b8
    7914:	000096cc 	.word	0x000096cc

00007918 <ProcessHashDrv>:
    7918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    791c:	2900      	cmp	r1, #0
    791e:	f000 80ef 	beq.w	7b00 <ProcessHashDrv+0x1e8>
    7922:	4604      	mov	r4, r0
    7924:	2800      	cmp	r0, #0
    7926:	f000 80ef 	beq.w	7b08 <ProcessHashDrv+0x1f0>
    792a:	6803      	ldr	r3, [r0, #0]
    792c:	4617      	mov	r7, r2
    792e:	460e      	mov	r6, r1
    7930:	2b00      	cmp	r3, #0
    7932:	f000 80b9 	beq.w	7aa8 <ProcessHashDrv+0x190>
    7936:	3b01      	subs	r3, #1
    7938:	2b01      	cmp	r3, #1
    793a:	f200 80cd 	bhi.w	7ad8 <ProcessHashDrv+0x1c0>
    793e:	f04f 31ff 	mov.w	r1, #4294967295
    7942:	4873      	ldr	r0, [pc, #460]	; (7b10 <ProcessHashDrv+0x1f8>)
    7944:	f04f 0802 	mov.w	r8, #2
    7948:	f7ff f8ee 	bl	6b28 <CC_PalMutexLock>
    794c:	2800      	cmp	r0, #0
    794e:	f040 80b5 	bne.w	7abc <ProcessHashDrv+0x1a4>
    7952:	2000      	movs	r0, #0
    7954:	f7ff f918 	bl	6b88 <CC_PalPowerSaveModeSelect>
    7958:	4605      	mov	r5, r0
    795a:	2800      	cmp	r0, #0
    795c:	f040 80b8 	bne.w	7ad0 <ProcessHashDrv+0x1b8>
    7960:	4a6c      	ldr	r2, [pc, #432]	; (7b14 <ProcessHashDrv+0x1fc>)
    7962:	6813      	ldr	r3, [r2, #0]
    7964:	2b00      	cmp	r3, #0
    7966:	d1fc      	bne.n	7962 <ProcessHashDrv+0x4a>
    7968:	486b      	ldr	r0, [pc, #428]	; (7b18 <ProcessHashDrv+0x200>)
    796a:	6803      	ldr	r3, [r0, #0]
    796c:	2b00      	cmp	r3, #0
    796e:	d1fc      	bne.n	796a <ProcessHashDrv+0x52>
    7970:	f04f 30ff 	mov.w	r0, #4294967295
    7974:	f7ff f832 	bl	69dc <CC_HalClearInterruptBit>
    7978:	4b68      	ldr	r3, [pc, #416]	; (7b1c <ProcessHashDrv+0x204>)
    797a:	6818      	ldr	r0, [r3, #0]
    797c:	f020 0040 	bic.w	r0, r0, #64	; 0x40
    7980:	f7ff f83a 	bl	69f8 <CC_HalMaskInterrupt>
    7984:	2301      	movs	r3, #1
    7986:	2007      	movs	r0, #7
    7988:	4a65      	ldr	r2, [pc, #404]	; (7b20 <ProcessHashDrv+0x208>)
    798a:	4966      	ldr	r1, [pc, #408]	; (7b24 <ProcessHashDrv+0x20c>)
    798c:	6013      	str	r3, [r2, #0]
    798e:	6008      	str	r0, [r1, #0]
    7990:	f842 3c54 	str.w	r3, [r2, #-84]
    7994:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    7996:	4b64      	ldr	r3, [pc, #400]	; (7b28 <ProcessHashDrv+0x210>)
    7998:	3a48      	subs	r2, #72	; 0x48
    799a:	6019      	str	r1, [r3, #0]
    799c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    799e:	6011      	str	r1, [r2, #0]
    79a0:	f843 8c0c 	str.w	r8, [r3, #-12]
    79a4:	6823      	ldr	r3, [r4, #0]
    79a6:	b163      	cbz	r3, 79c2 <ProcessHashDrv+0xaa>
    79a8:	3b01      	subs	r3, #1
    79aa:	2b01      	cmp	r3, #1
    79ac:	d818      	bhi.n	79e0 <ProcessHashDrv+0xc8>
    79ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
    79b0:	4b5e      	ldr	r3, [pc, #376]	; (7b2c <ProcessHashDrv+0x214>)
    79b2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
    79b6:	6019      	str	r1, [r3, #0]
    79b8:	6a21      	ldr	r1, [r4, #32]
    79ba:	6011      	str	r1, [r2, #0]
    79bc:	69e2      	ldr	r2, [r4, #28]
    79be:	f843 2c08 	str.w	r2, [r3, #-8]
    79c2:	69a1      	ldr	r1, [r4, #24]
    79c4:	4b5a      	ldr	r3, [pc, #360]	; (7b30 <ProcessHashDrv+0x218>)
    79c6:	4a5b      	ldr	r2, [pc, #364]	; (7b34 <ProcessHashDrv+0x21c>)
    79c8:	6019      	str	r1, [r3, #0]
    79ca:	6961      	ldr	r1, [r4, #20]
    79cc:	6011      	str	r1, [r2, #0]
    79ce:	6921      	ldr	r1, [r4, #16]
    79d0:	f843 1c08 	str.w	r1, [r3, #-8]
    79d4:	68e1      	ldr	r1, [r4, #12]
    79d6:	f842 1c08 	str.w	r1, [r2, #-8]
    79da:	68a2      	ldr	r2, [r4, #8]
    79dc:	f843 2c10 	str.w	r2, [r3, #-16]
    79e0:	4a55      	ldr	r2, [pc, #340]	; (7b38 <ProcessHashDrv+0x220>)
    79e2:	6813      	ldr	r3, [r2, #0]
    79e4:	2b00      	cmp	r3, #0
    79e6:	d1fc      	bne.n	79e2 <ProcessHashDrv+0xca>
    79e8:	2f00      	cmp	r7, #0
    79ea:	d059      	beq.n	7aa0 <ProcessHashDrv+0x188>
    79ec:	6863      	ldr	r3, [r4, #4]
    79ee:	2040      	movs	r0, #64	; 0x40
    79f0:	2b01      	cmp	r3, #1
    79f2:	bf04      	itt	eq
    79f4:	4a51      	ldreq	r2, [pc, #324]	; (7b3c <ProcessHashDrv+0x224>)
    79f6:	6013      	streq	r3, [r2, #0]
    79f8:	6831      	ldr	r1, [r6, #0]
    79fa:	4a51      	ldr	r2, [pc, #324]	; (7b40 <ProcessHashDrv+0x228>)
    79fc:	4b51      	ldr	r3, [pc, #324]	; (7b44 <ProcessHashDrv+0x22c>)
    79fe:	6011      	str	r1, [r2, #0]
    7a00:	601f      	str	r7, [r3, #0]
    7a02:	f7fe ffff 	bl	6a04 <CC_HalWaitInterrupt>
    7a06:	4605      	mov	r5, r0
    7a08:	4a4b      	ldr	r2, [pc, #300]	; (7b38 <ProcessHashDrv+0x220>)
    7a0a:	6813      	ldr	r3, [r2, #0]
    7a0c:	2b00      	cmp	r3, #0
    7a0e:	d1fc      	bne.n	7a0a <ProcessHashDrv+0xf2>
    7a10:	4a41      	ldr	r2, [pc, #260]	; (7b18 <ProcessHashDrv+0x200>)
    7a12:	6813      	ldr	r3, [r2, #0]
    7a14:	2b00      	cmp	r3, #0
    7a16:	d1fc      	bne.n	7a12 <ProcessHashDrv+0xfa>
    7a18:	6823      	ldr	r3, [r4, #0]
    7a1a:	b15b      	cbz	r3, 7a34 <ProcessHashDrv+0x11c>
    7a1c:	3b01      	subs	r3, #1
    7a1e:	2b01      	cmp	r3, #1
    7a20:	d816      	bhi.n	7a50 <ProcessHashDrv+0x138>
    7a22:	4b42      	ldr	r3, [pc, #264]	; (7b2c <ProcessHashDrv+0x214>)
    7a24:	4a48      	ldr	r2, [pc, #288]	; (7b48 <ProcessHashDrv+0x230>)
    7a26:	6819      	ldr	r1, [r3, #0]
    7a28:	3b08      	subs	r3, #8
    7a2a:	6261      	str	r1, [r4, #36]	; 0x24
    7a2c:	6812      	ldr	r2, [r2, #0]
    7a2e:	6222      	str	r2, [r4, #32]
    7a30:	681b      	ldr	r3, [r3, #0]
    7a32:	61e3      	str	r3, [r4, #28]
    7a34:	4b3e      	ldr	r3, [pc, #248]	; (7b30 <ProcessHashDrv+0x218>)
    7a36:	4a3f      	ldr	r2, [pc, #252]	; (7b34 <ProcessHashDrv+0x21c>)
    7a38:	6819      	ldr	r1, [r3, #0]
    7a3a:	3a08      	subs	r2, #8
    7a3c:	61a1      	str	r1, [r4, #24]
    7a3e:	6891      	ldr	r1, [r2, #8]
    7a40:	3b10      	subs	r3, #16
    7a42:	6161      	str	r1, [r4, #20]
    7a44:	6899      	ldr	r1, [r3, #8]
    7a46:	6121      	str	r1, [r4, #16]
    7a48:	6812      	ldr	r2, [r2, #0]
    7a4a:	60e2      	str	r2, [r4, #12]
    7a4c:	681b      	ldr	r3, [r3, #0]
    7a4e:	60a3      	str	r3, [r4, #8]
    7a50:	2101      	movs	r1, #1
    7a52:	2300      	movs	r3, #0
    7a54:	4834      	ldr	r0, [pc, #208]	; (7b28 <ProcessHashDrv+0x210>)
    7a56:	4a3d      	ldr	r2, [pc, #244]	; (7b4c <ProcessHashDrv+0x234>)
    7a58:	6800      	ldr	r0, [r0, #0]
    7a5a:	64a0      	str	r0, [r4, #72]	; 0x48
    7a5c:	6810      	ldr	r0, [r2, #0]
    7a5e:	64e0      	str	r0, [r4, #76]	; 0x4c
    7a60:	f842 1c0c 	str.w	r1, [r2, #-12]
    7a64:	4835      	ldr	r0, [pc, #212]	; (7b3c <ProcessHashDrv+0x224>)
    7a66:	493a      	ldr	r1, [pc, #232]	; (7b50 <ProcessHashDrv+0x238>)
    7a68:	6003      	str	r3, [r0, #0]
    7a6a:	f502 72a0 	add.w	r2, r2, #320	; 0x140
    7a6e:	600b      	str	r3, [r1, #0]
    7a70:	6813      	ldr	r3, [r2, #0]
    7a72:	2b00      	cmp	r3, #0
    7a74:	d1fc      	bne.n	7a70 <ProcessHashDrv+0x158>
    7a76:	4a2a      	ldr	r2, [pc, #168]	; (7b20 <ProcessHashDrv+0x208>)
    7a78:	6013      	str	r3, [r2, #0]
    7a7a:	2d00      	cmp	r5, #0
    7a7c:	d13a      	bne.n	7af4 <ProcessHashDrv+0x1dc>
    7a7e:	4b27      	ldr	r3, [pc, #156]	; (7b1c <ProcessHashDrv+0x204>)
    7a80:	6818      	ldr	r0, [r3, #0]
    7a82:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    7a86:	f7fe ffb7 	bl	69f8 <CC_HalMaskInterrupt>
    7a8a:	2001      	movs	r0, #1
    7a8c:	f7ff f87c 	bl	6b88 <CC_PalPowerSaveModeSelect>
    7a90:	bb60      	cbnz	r0, 7aec <ProcessHashDrv+0x1d4>
    7a92:	481f      	ldr	r0, [pc, #124]	; (7b10 <ProcessHashDrv+0x1f8>)
    7a94:	f7ff f850 	bl	6b38 <CC_PalMutexUnlock>
    7a98:	bb10      	cbnz	r0, 7ae0 <ProcessHashDrv+0x1c8>
    7a9a:	4628      	mov	r0, r5
    7a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7aa0:	2204      	movs	r2, #4
    7aa2:	4b2b      	ldr	r3, [pc, #172]	; (7b50 <ProcessHashDrv+0x238>)
    7aa4:	601a      	str	r2, [r3, #0]
    7aa6:	e7af      	b.n	7a08 <ProcessHashDrv+0xf0>
    7aa8:	f04f 31ff 	mov.w	r1, #4294967295
    7aac:	4818      	ldr	r0, [pc, #96]	; (7b10 <ProcessHashDrv+0x1f8>)
    7aae:	f04f 0801 	mov.w	r8, #1
    7ab2:	f7ff f839 	bl	6b28 <CC_PalMutexLock>
    7ab6:	2800      	cmp	r0, #0
    7ab8:	f43f af4b 	beq.w	7952 <ProcessHashDrv+0x3a>
    7abc:	4825      	ldr	r0, [pc, #148]	; (7b54 <ProcessHashDrv+0x23c>)
    7abe:	f7fe f8e9 	bl	5c94 <CC_PalAbort>
    7ac2:	2000      	movs	r0, #0
    7ac4:	f7ff f860 	bl	6b88 <CC_PalPowerSaveModeSelect>
    7ac8:	4605      	mov	r5, r0
    7aca:	2800      	cmp	r0, #0
    7acc:	f43f af48 	beq.w	7960 <ProcessHashDrv+0x48>
    7ad0:	4821      	ldr	r0, [pc, #132]	; (7b58 <ProcessHashDrv+0x240>)
    7ad2:	f7fe f8df 	bl	5c94 <CC_PalAbort>
    7ad6:	e743      	b.n	7960 <ProcessHashDrv+0x48>
    7ad8:	4d20      	ldr	r5, [pc, #128]	; (7b5c <ProcessHashDrv+0x244>)
    7ada:	4628      	mov	r0, r5
    7adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ae0:	481f      	ldr	r0, [pc, #124]	; (7b60 <ProcessHashDrv+0x248>)
    7ae2:	f7fe f8d7 	bl	5c94 <CC_PalAbort>
    7ae6:	4628      	mov	r0, r5
    7ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7aec:	481d      	ldr	r0, [pc, #116]	; (7b64 <ProcessHashDrv+0x24c>)
    7aee:	f7fe f8d1 	bl	5c94 <CC_PalAbort>
    7af2:	e7ce      	b.n	7a92 <ProcessHashDrv+0x17a>
    7af4:	2110      	movs	r1, #16
    7af6:	f104 0008 	add.w	r0, r4, #8
    7afa:	f7ff fdd3 	bl	76a4 <CC_PalMemSetZeroPlat>
    7afe:	e7be      	b.n	7a7e <ProcessHashDrv+0x166>
    7b00:	4d19      	ldr	r5, [pc, #100]	; (7b68 <ProcessHashDrv+0x250>)
    7b02:	4628      	mov	r0, r5
    7b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b08:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
    7b0c:	e7c5      	b.n	7a9a <ProcessHashDrv+0x182>
    7b0e:	bf00      	nop
    7b10:	20000114 	.word	0x20000114
    7b14:	5084191c 	.word	0x5084191c
    7b18:	50841c20 	.word	0x50841c20
    7b1c:	50841a04 	.word	0x50841a04
    7b20:	50841818 	.word	0x50841818
    7b24:	50841900 	.word	0x50841900
    7b28:	508417cc 	.word	0x508417cc
    7b2c:	5084165c 	.word	0x5084165c
    7b30:	50841650 	.word	0x50841650
    7b34:	5084164c 	.word	0x5084164c
    7b38:	50841910 	.word	0x50841910
    7b3c:	50841684 	.word	0x50841684
    7b40:	50841c28 	.word	0x50841c28
    7b44:	50841c2c 	.word	0x50841c2c
    7b48:	50841658 	.word	0x50841658
    7b4c:	508417d0 	.word	0x508417d0
    7b50:	508417c8 	.word	0x508417c8
    7b54:	000095ec 	.word	0x000095ec
    7b58:	00009604 	.word	0x00009604
    7b5c:	00f30001 	.word	0x00f30001
    7b60:	00009644 	.word	0x00009644
    7b64:	00009624 	.word	0x00009624
    7b68:	00f30003 	.word	0x00f30003

00007b6c <FinishHashDrv>:
    7b6c:	2800      	cmp	r0, #0
    7b6e:	d03a      	beq.n	7be6 <FinishHashDrv+0x7a>
    7b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b74:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
    7b78:	fa92 f882 	rev.w	r8, r2
    7b7c:	fa93 fe83 	rev.w	lr, r3
    7b80:	6a02      	ldr	r2, [r0, #32]
    7b82:	6a43      	ldr	r3, [r0, #36]	; 0x24
    7b84:	e9d0 4104 	ldrd	r4, r1, [r0, #16]
    7b88:	ba12      	rev	r2, r2
    7b8a:	ba24      	rev	r4, r4
    7b8c:	ba1b      	rev	r3, r3
    7b8e:	6104      	str	r4, [r0, #16]
    7b90:	6202      	str	r2, [r0, #32]
    7b92:	6a84      	ldr	r4, [r0, #40]	; 0x28
    7b94:	6b82      	ldr	r2, [r0, #56]	; 0x38
    7b96:	6243      	str	r3, [r0, #36]	; 0x24
    7b98:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    7b9a:	e9d0 6502 	ldrd	r6, r5, [r0, #8]
    7b9e:	ba09      	rev	r1, r1
    7ba0:	ba36      	rev	r6, r6
    7ba2:	ba2d      	rev	r5, r5
    7ba4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
    7ba6:	6086      	str	r6, [r0, #8]
    7ba8:	60c5      	str	r5, [r0, #12]
    7baa:	6b06      	ldr	r6, [r0, #48]	; 0x30
    7bac:	6b45      	ldr	r5, [r0, #52]	; 0x34
    7bae:	6141      	str	r1, [r0, #20]
    7bb0:	fa94 fc84 	rev.w	ip, r4
    7bb4:	ba19      	rev	r1, r3
    7bb6:	ba14      	rev	r4, r2
    7bb8:	6c43      	ldr	r3, [r0, #68]	; 0x44
    7bba:	6c02      	ldr	r2, [r0, #64]	; 0x40
    7bbc:	ba3f      	rev	r7, r7
    7bbe:	ba36      	rev	r6, r6
    7bc0:	ba2d      	rev	r5, r5
    7bc2:	ba12      	rev	r2, r2
    7bc4:	ba1b      	rev	r3, r3
    7bc6:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
    7bca:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
    7bce:	f8c0 8018 	str.w	r8, [r0, #24]
    7bd2:	f8c0 e01c 	str.w	lr, [r0, #28]
    7bd6:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
    7bda:	62c7      	str	r7, [r0, #44]	; 0x2c
    7bdc:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    7be0:	2000      	movs	r0, #0
    7be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7be6:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
    7bea:	4770      	bx	lr

00007bec <LoadAesKey>:
    7bec:	2800      	cmp	r0, #0
    7bee:	d060      	beq.n	7cb2 <LoadAesKey+0xc6>
    7bf0:	b538      	push	{r3, r4, r5, lr}
    7bf2:	4604      	mov	r4, r0
    7bf4:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
    7bf8:	2802      	cmp	r0, #2
    7bfa:	d016      	beq.n	7c2a <LoadAesKey+0x3e>
    7bfc:	2803      	cmp	r0, #3
    7bfe:	d03c      	beq.n	7c7a <LoadAesKey+0x8e>
    7c00:	2800      	cmp	r0, #0
    7c02:	d02f      	beq.n	7c64 <LoadAesKey+0x78>
    7c04:	482c      	ldr	r0, [pc, #176]	; (7cb8 <LoadAesKey+0xcc>)
    7c06:	4d2d      	ldr	r5, [pc, #180]	; (7cbc <LoadAesKey+0xd0>)
    7c08:	682a      	ldr	r2, [r5, #0]
    7c0a:	4b2d      	ldr	r3, [pc, #180]	; (7cc0 <LoadAesKey+0xd4>)
    7c0c:	6812      	ldr	r2, [r2, #0]
    7c0e:	492d      	ldr	r1, [pc, #180]	; (7cc4 <LoadAesKey+0xd8>)
    7c10:	601a      	str	r2, [r3, #0]
    7c12:	682b      	ldr	r3, [r5, #0]
    7c14:	4a2c      	ldr	r2, [pc, #176]	; (7cc8 <LoadAesKey+0xdc>)
    7c16:	685c      	ldr	r4, [r3, #4]
    7c18:	4b2c      	ldr	r3, [pc, #176]	; (7ccc <LoadAesKey+0xe0>)
    7c1a:	600c      	str	r4, [r1, #0]
    7c1c:	6829      	ldr	r1, [r5, #0]
    7c1e:	6889      	ldr	r1, [r1, #8]
    7c20:	6011      	str	r1, [r2, #0]
    7c22:	682a      	ldr	r2, [r5, #0]
    7c24:	68d2      	ldr	r2, [r2, #12]
    7c26:	601a      	str	r2, [r3, #0]
    7c28:	bd38      	pop	{r3, r4, r5, pc}
    7c2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7c2c:	6c20      	ldr	r0, [r4, #64]	; 0x40
    7c2e:	f000 fbdd 	bl	83ec <kmu_validate_slot_and_size_no_kdr>
    7c32:	4d22      	ldr	r5, [pc, #136]	; (7cbc <LoadAesKey+0xd0>)
    7c34:	2800      	cmp	r0, #0
    7c36:	d1e7      	bne.n	7c08 <LoadAesKey+0x1c>
    7c38:	682a      	ldr	r2, [r5, #0]
    7c3a:	4b21      	ldr	r3, [pc, #132]	; (7cc0 <LoadAesKey+0xd4>)
    7c3c:	6810      	ldr	r0, [r2, #0]
    7c3e:	4921      	ldr	r1, [pc, #132]	; (7cc4 <LoadAesKey+0xd8>)
    7c40:	6018      	str	r0, [r3, #0]
    7c42:	6828      	ldr	r0, [r5, #0]
    7c44:	4a20      	ldr	r2, [pc, #128]	; (7cc8 <LoadAesKey+0xdc>)
    7c46:	6840      	ldr	r0, [r0, #4]
    7c48:	6008      	str	r0, [r1, #0]
    7c4a:	6829      	ldr	r1, [r5, #0]
    7c4c:	6889      	ldr	r1, [r1, #8]
    7c4e:	6011      	str	r1, [r2, #0]
    7c50:	682a      	ldr	r2, [r5, #0]
    7c52:	68d2      	ldr	r2, [r2, #12]
    7c54:	60da      	str	r2, [r3, #12]
    7c56:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7c58:	6c20      	ldr	r0, [r4, #64]	; 0x40
    7c5a:	f000 fc3b 	bl	84d4 <kmu_load_key_aes>
    7c5e:	2800      	cmp	r0, #0
    7c60:	d025      	beq.n	7cae <LoadAesKey+0xc2>
    7c62:	e7d1      	b.n	7c08 <LoadAesKey+0x1c>
    7c64:	6921      	ldr	r1, [r4, #16]
    7c66:	4a16      	ldr	r2, [pc, #88]	; (7cc0 <LoadAesKey+0xd4>)
    7c68:	4b16      	ldr	r3, [pc, #88]	; (7cc4 <LoadAesKey+0xd8>)
    7c6a:	6011      	str	r1, [r2, #0]
    7c6c:	6961      	ldr	r1, [r4, #20]
    7c6e:	6019      	str	r1, [r3, #0]
    7c70:	69a1      	ldr	r1, [r4, #24]
    7c72:	6091      	str	r1, [r2, #8]
    7c74:	69e2      	ldr	r2, [r4, #28]
    7c76:	609a      	str	r2, [r3, #8]
    7c78:	bd38      	pop	{r3, r4, r5, pc}
    7c7a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7c7c:	6c20      	ldr	r0, [r4, #64]	; 0x40
    7c7e:	f000 fbf9 	bl	8474 <kmu_validate_kdr_slot_and_size>
    7c82:	4d0e      	ldr	r5, [pc, #56]	; (7cbc <LoadAesKey+0xd0>)
    7c84:	2800      	cmp	r0, #0
    7c86:	d1bf      	bne.n	7c08 <LoadAesKey+0x1c>
    7c88:	682a      	ldr	r2, [r5, #0]
    7c8a:	4b0d      	ldr	r3, [pc, #52]	; (7cc0 <LoadAesKey+0xd4>)
    7c8c:	6810      	ldr	r0, [r2, #0]
    7c8e:	490d      	ldr	r1, [pc, #52]	; (7cc4 <LoadAesKey+0xd8>)
    7c90:	6018      	str	r0, [r3, #0]
    7c92:	6828      	ldr	r0, [r5, #0]
    7c94:	4a0c      	ldr	r2, [pc, #48]	; (7cc8 <LoadAesKey+0xdc>)
    7c96:	6840      	ldr	r0, [r0, #4]
    7c98:	6008      	str	r0, [r1, #0]
    7c9a:	6829      	ldr	r1, [r5, #0]
    7c9c:	6889      	ldr	r1, [r1, #8]
    7c9e:	6011      	str	r1, [r2, #0]
    7ca0:	682a      	ldr	r2, [r5, #0]
    7ca2:	68d2      	ldr	r2, [r2, #12]
    7ca4:	60da      	str	r2, [r3, #12]
    7ca6:	f000 fc09 	bl	84bc <kmu_use_kdr_key>
    7caa:	2800      	cmp	r0, #0
    7cac:	d1ac      	bne.n	7c08 <LoadAesKey+0x1c>
    7cae:	2000      	movs	r0, #0
    7cb0:	bd38      	pop	{r3, r4, r5, pc}
    7cb2:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
    7cb6:	4770      	bx	lr
    7cb8:	00f10009 	.word	0x00f10009
    7cbc:	20000104 	.word	0x20000104
    7cc0:	50841400 	.word	0x50841400
    7cc4:	50841404 	.word	0x50841404
    7cc8:	50841408 	.word	0x50841408
    7ccc:	5084140c 	.word	0x5084140c

00007cd0 <InitAes.part.0>:
    7cd0:	b510      	push	{r4, lr}
    7cd2:	4604      	mov	r4, r0
    7cd4:	4a31      	ldr	r2, [pc, #196]	; (7d9c <InitAes.part.0+0xcc>)
    7cd6:	6813      	ldr	r3, [r2, #0]
    7cd8:	2b00      	cmp	r3, #0
    7cda:	d1fc      	bne.n	7cd6 <InitAes.part.0+0x6>
    7cdc:	4a30      	ldr	r2, [pc, #192]	; (7da0 <InitAes.part.0+0xd0>)
    7cde:	6813      	ldr	r3, [r2, #0]
    7ce0:	2b00      	cmp	r3, #0
    7ce2:	d1fc      	bne.n	7cde <InitAes.part.0+0xe>
    7ce4:	4a2f      	ldr	r2, [pc, #188]	; (7da4 <InitAes.part.0+0xd4>)
    7ce6:	6813      	ldr	r3, [r2, #0]
    7ce8:	2b00      	cmp	r3, #0
    7cea:	d1fc      	bne.n	7ce6 <InitAes.part.0+0x16>
    7cec:	4a2e      	ldr	r2, [pc, #184]	; (7da8 <InitAes.part.0+0xd8>)
    7cee:	6813      	ldr	r3, [r2, #0]
    7cf0:	2b00      	cmp	r3, #0
    7cf2:	d1fc      	bne.n	7cee <InitAes.part.0+0x1e>
    7cf4:	4a2d      	ldr	r2, [pc, #180]	; (7dac <InitAes.part.0+0xdc>)
    7cf6:	6813      	ldr	r3, [r2, #0]
    7cf8:	2b00      	cmp	r3, #0
    7cfa:	d1fc      	bne.n	7cf6 <InitAes.part.0+0x26>
    7cfc:	4a2c      	ldr	r2, [pc, #176]	; (7db0 <InitAes.part.0+0xe0>)
    7cfe:	6813      	ldr	r3, [r2, #0]
    7d00:	2b00      	cmp	r3, #0
    7d02:	d1fc      	bne.n	7cfe <InitAes.part.0+0x2e>
    7d04:	f04f 30ff 	mov.w	r0, #4294967295
    7d08:	f7fe fe68 	bl	69dc <CC_HalClearInterruptBit>
    7d0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7d0e:	f023 0304 	bic.w	r3, r3, #4
    7d12:	2b03      	cmp	r3, #3
    7d14:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    7d16:	d036      	beq.n	7d86 <InitAes.part.0+0xb6>
    7d18:	2b01      	cmp	r3, #1
    7d1a:	4b26      	ldr	r3, [pc, #152]	; (7db4 <InitAes.part.0+0xe4>)
    7d1c:	6818      	ldr	r0, [r3, #0]
    7d1e:	bf0c      	ite	eq
    7d20:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
    7d24:	f020 0020 	bicne.w	r0, r0, #32
    7d28:	f7fe fe66 	bl	69f8 <CC_HalMaskInterrupt>
    7d2c:	2101      	movs	r1, #1
    7d2e:	4b22      	ldr	r3, [pc, #136]	; (7db8 <InitAes.part.0+0xe8>)
    7d30:	4a1a      	ldr	r2, [pc, #104]	; (7d9c <InitAes.part.0+0xcc>)
    7d32:	6019      	str	r1, [r3, #0]
    7d34:	6813      	ldr	r3, [r2, #0]
    7d36:	2b00      	cmp	r3, #0
    7d38:	d1fc      	bne.n	7d34 <InitAes.part.0+0x64>
    7d3a:	4a19      	ldr	r2, [pc, #100]	; (7da0 <InitAes.part.0+0xd0>)
    7d3c:	6813      	ldr	r3, [r2, #0]
    7d3e:	2b00      	cmp	r3, #0
    7d40:	d1fc      	bne.n	7d3c <InitAes.part.0+0x6c>
    7d42:	491e      	ldr	r1, [pc, #120]	; (7dbc <InitAes.part.0+0xec>)
    7d44:	4a15      	ldr	r2, [pc, #84]	; (7d9c <InitAes.part.0+0xcc>)
    7d46:	600b      	str	r3, [r1, #0]
    7d48:	6813      	ldr	r3, [r2, #0]
    7d4a:	2b00      	cmp	r3, #0
    7d4c:	d1fc      	bne.n	7d48 <InitAes.part.0+0x78>
    7d4e:	4a14      	ldr	r2, [pc, #80]	; (7da0 <InitAes.part.0+0xd0>)
    7d50:	6813      	ldr	r3, [r2, #0]
    7d52:	2b00      	cmp	r3, #0
    7d54:	d1fc      	bne.n	7d50 <InitAes.part.0+0x80>
    7d56:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7d58:	f022 0104 	bic.w	r1, r2, #4
    7d5c:	2903      	cmp	r1, #3
    7d5e:	bf18      	it	ne
    7d60:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
    7d62:	ea4f 0282 	mov.w	r2, r2, lsl #2
    7d66:	bf18      	it	ne
    7d68:	f003 0301 	andne.w	r3, r3, #1
    7d6c:	4914      	ldr	r1, [pc, #80]	; (7dc0 <InitAes.part.0+0xf0>)
    7d6e:	f002 021c 	and.w	r2, r2, #28
    7d72:	4313      	orrs	r3, r2
    7d74:	600b      	str	r3, [r1, #0]
    7d76:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7d78:	2b07      	cmp	r3, #7
    7d7a:	d102      	bne.n	7d82 <InitAes.part.0+0xb2>
    7d7c:	2201      	movs	r2, #1
    7d7e:	4b11      	ldr	r3, [pc, #68]	; (7dc4 <InitAes.part.0+0xf4>)
    7d80:	601a      	str	r2, [r3, #0]
    7d82:	2000      	movs	r0, #0
    7d84:	bd10      	pop	{r4, pc}
    7d86:	2b01      	cmp	r3, #1
    7d88:	4b0a      	ldr	r3, [pc, #40]	; (7db4 <InitAes.part.0+0xe4>)
    7d8a:	6818      	ldr	r0, [r3, #0]
    7d8c:	bf0c      	ite	eq
    7d8e:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
    7d92:	f020 0010 	bicne.w	r0, r0, #16
    7d96:	f7fe fe2f 	bl	69f8 <CC_HalMaskInterrupt>
    7d9a:	e7c7      	b.n	7d2c <InitAes.part.0+0x5c>
    7d9c:	50841910 	.word	0x50841910
    7da0:	50841470 	.word	0x50841470
    7da4:	50841d20 	.word	0x50841d20
    7da8:	50841c20 	.word	0x50841c20
    7dac:	50841d38 	.word	0x50841d38
    7db0:	50841c38 	.word	0x50841c38
    7db4:	50841a04 	.word	0x50841a04
    7db8:	50841900 	.word	0x50841900
    7dbc:	508414bc 	.word	0x508414bc
    7dc0:	508414c0 	.word	0x508414c0
    7dc4:	5084147c 	.word	0x5084147c

00007dc8 <ProcessAesDrv>:
    7dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7dcc:	b087      	sub	sp, #28
    7dce:	2900      	cmp	r1, #0
    7dd0:	f000 80a5 	beq.w	7f1e <__kernel_ram_size+0xae>
    7dd4:	4616      	mov	r6, r2
    7dd6:	2a00      	cmp	r2, #0
    7dd8:	f000 80a1 	beq.w	7f1e <__kernel_ram_size+0xae>
    7ddc:	4604      	mov	r4, r0
    7dde:	2800      	cmp	r0, #0
    7de0:	f000 8141 	beq.w	8066 <CONFIG_FPROTECT_BLOCK_SIZE+0x66>
    7de4:	461f      	mov	r7, r3
    7de6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    7de8:	460d      	mov	r5, r1
    7dea:	2b00      	cmp	r3, #0
    7dec:	d150      	bne.n	7e90 <__kernel_ram_size+0x20>
    7dee:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
    7df2:	d252      	bcs.n	7e9a <__kernel_ram_size+0x2a>
    7df4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    7df8:	2b04      	cmp	r3, #4
    7dfa:	f000 810b 	beq.w	8014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
    7dfe:	f04f 0800 	mov.w	r8, #0
    7e02:	f04f 31ff 	mov.w	r1, #4294967295
    7e06:	48a9      	ldr	r0, [pc, #676]	; (80ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>)
    7e08:	f7fe fe8e 	bl	6b28 <CC_PalMutexLock>
    7e0c:	2800      	cmp	r0, #0
    7e0e:	f040 80e0 	bne.w	7fd2 <__kernel_ram_size+0x162>
    7e12:	2000      	movs	r0, #0
    7e14:	f7fe feb8 	bl	6b88 <CC_PalPowerSaveModeSelect>
    7e18:	2800      	cmp	r0, #0
    7e1a:	f040 80e3 	bne.w	7fe4 <__kernel_ram_size+0x174>
    7e1e:	2101      	movs	r1, #1
    7e20:	4ba3      	ldr	r3, [pc, #652]	; (80b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>)
    7e22:	4aa4      	ldr	r2, [pc, #656]	; (80b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>)
    7e24:	6019      	str	r1, [r3, #0]
    7e26:	6813      	ldr	r3, [r2, #0]
    7e28:	2b00      	cmp	r3, #0
    7e2a:	d1fc      	bne.n	7e26 <ProcessAesDrv+0x5e>
    7e2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7e2e:	2b03      	cmp	r3, #3
    7e30:	dc39      	bgt.n	7ea6 <__kernel_ram_size+0x36>
    7e32:	2b00      	cmp	r3, #0
    7e34:	da3a      	bge.n	7eac <__kernel_ram_size+0x3c>
    7e36:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>
    7e3a:	4a9e      	ldr	r2, [pc, #632]	; (80b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>)
    7e3c:	6813      	ldr	r3, [r2, #0]
    7e3e:	2b00      	cmp	r3, #0
    7e40:	d1fc      	bne.n	7e3c <ProcessAesDrv+0x74>
    7e42:	f1b8 0f00 	cmp.w	r8, #0
    7e46:	f040 80dc 	bne.w	8002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
    7e4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7e4c:	f023 0304 	bic.w	r3, r3, #4
    7e50:	2b03      	cmp	r3, #3
    7e52:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    7e54:	d058      	beq.n	7f08 <__kernel_ram_size+0x98>
    7e56:	2b01      	cmp	r3, #1
    7e58:	4b97      	ldr	r3, [pc, #604]	; (80b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>)
    7e5a:	6818      	ldr	r0, [r3, #0]
    7e5c:	bf0c      	ite	eq
    7e5e:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
    7e62:	f040 0020 	orrne.w	r0, r0, #32
    7e66:	f7fe fdc7 	bl	69f8 <CC_HalMaskInterrupt>
    7e6a:	2200      	movs	r2, #0
    7e6c:	4b90      	ldr	r3, [pc, #576]	; (80b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>)
    7e6e:	2001      	movs	r0, #1
    7e70:	601a      	str	r2, [r3, #0]
    7e72:	f7fe fe89 	bl	6b88 <CC_PalPowerSaveModeSelect>
    7e76:	2800      	cmp	r0, #0
    7e78:	f040 80bf 	bne.w	7ffa <__kernel_ram_size+0x18a>
    7e7c:	488b      	ldr	r0, [pc, #556]	; (80ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>)
    7e7e:	f7fe fe5b 	bl	6b38 <CC_PalMutexUnlock>
    7e82:	2800      	cmp	r0, #0
    7e84:	f040 80b2 	bne.w	7fec <__kernel_ram_size+0x17c>
    7e88:	4648      	mov	r0, r9
    7e8a:	b007      	add	sp, #28
    7e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e90:	2b01      	cmp	r3, #1
    7e92:	d1af      	bne.n	7df4 <ProcessAesDrv+0x2c>
    7e94:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
    7e98:	d3ac      	bcc.n	7df4 <ProcessAesDrv+0x2c>
    7e9a:	f8df 9268 	ldr.w	r9, [pc, #616]	; 8104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>
    7e9e:	4648      	mov	r0, r9
    7ea0:	b007      	add	sp, #28
    7ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ea6:	3b06      	subs	r3, #6
    7ea8:	2b01      	cmp	r3, #1
    7eaa:	d8c4      	bhi.n	7e36 <ProcessAesDrv+0x6e>
    7eac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7eae:	2b01      	cmp	r3, #1
    7eb0:	f200 80d6 	bhi.w	8060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>
    7eb4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    7eb6:	2b01      	cmp	r3, #1
    7eb8:	d837      	bhi.n	7f2a <__kernel_ram_size+0xba>
    7eba:	6e23      	ldr	r3, [r4, #96]	; 0x60
    7ebc:	2b01      	cmp	r3, #1
    7ebe:	f200 8134 	bhi.w	812a <CONFIG_FPROTECT_BLOCK_SIZE+0x12a>
    7ec2:	4620      	mov	r0, r4
    7ec4:	f7ff ff04 	bl	7cd0 <InitAes.part.0>
    7ec8:	4681      	mov	r9, r0
    7eca:	2800      	cmp	r0, #0
    7ecc:	d1b5      	bne.n	7e3a <ProcessAesDrv+0x72>
    7ece:	4620      	mov	r0, r4
    7ed0:	f7ff fe8c 	bl	7bec <LoadAesKey>
    7ed4:	4681      	mov	r9, r0
    7ed6:	2800      	cmp	r0, #0
    7ed8:	d1af      	bne.n	7e3a <ProcessAesDrv+0x72>
    7eda:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7edc:	2b07      	cmp	r3, #7
    7ede:	d8aa      	bhi.n	7e36 <ProcessAesDrv+0x6e>
    7ee0:	a201      	add	r2, pc, #4	; (adr r2, 7ee8 <__kernel_ram_size+0x78>)
    7ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7ee6:	bf00      	nop
    7ee8:	00007f47 	.word	0x00007f47
    7eec:	00007f31 	.word	0x00007f31
    7ef0:	000080a3 	.word	0x000080a3
    7ef4:	00007f31 	.word	0x00007f31
    7ef8:	00007e37 	.word	0x00007e37
    7efc:	00007e37 	.word	0x00007e37
    7f00:	000080a3 	.word	0x000080a3
    7f04:	00007f31 	.word	0x00007f31
    7f08:	2b01      	cmp	r3, #1
    7f0a:	4b6b      	ldr	r3, [pc, #428]	; (80b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>)
    7f0c:	6818      	ldr	r0, [r3, #0]
    7f0e:	bf0c      	ite	eq
    7f10:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
    7f14:	f040 0010 	orrne.w	r0, r0, #16
    7f18:	f7fe fd6e 	bl	69f8 <CC_HalMaskInterrupt>
    7f1c:	e7a5      	b.n	7e6a <ProcessAesDrv+0xa2>
    7f1e:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 8108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
    7f22:	4648      	mov	r0, r9
    7f24:	b007      	add	sp, #28
    7f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7f2a:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 810c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
    7f2e:	e784      	b.n	7e3a <ProcessAesDrv+0x72>
    7f30:	6821      	ldr	r1, [r4, #0]
    7f32:	4a62      	ldr	r2, [pc, #392]	; (80bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>)
    7f34:	4b62      	ldr	r3, [pc, #392]	; (80c0 <CONFIG_FPROTECT_BLOCK_SIZE+0xc0>)
    7f36:	6011      	str	r1, [r2, #0]
    7f38:	6861      	ldr	r1, [r4, #4]
    7f3a:	6019      	str	r1, [r3, #0]
    7f3c:	68a1      	ldr	r1, [r4, #8]
    7f3e:	6091      	str	r1, [r2, #8]
    7f40:	68e2      	ldr	r2, [r4, #12]
    7f42:	609a      	str	r2, [r3, #8]
    7f44:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7f46:	f023 0304 	bic.w	r3, r3, #4
    7f4a:	2b03      	cmp	r3, #3
    7f4c:	682a      	ldr	r2, [r5, #0]
    7f4e:	d009      	beq.n	7f64 <__kernel_ram_size+0xf4>
    7f50:	6e21      	ldr	r1, [r4, #96]	; 0x60
    7f52:	6833      	ldr	r3, [r6, #0]
    7f54:	2901      	cmp	r1, #1
    7f56:	bf07      	ittee	eq
    7f58:	485a      	ldreq	r0, [pc, #360]	; (80c4 <CONFIG_FPROTECT_BLOCK_SIZE+0xc4>)
    7f5a:	495b      	ldreq	r1, [pc, #364]	; (80c8 <CONFIG_FPROTECT_BLOCK_SIZE+0xc8>)
    7f5c:	485b      	ldrne	r0, [pc, #364]	; (80cc <CONFIG_FPROTECT_BLOCK_SIZE+0xcc>)
    7f5e:	495c      	ldrne	r1, [pc, #368]	; (80d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>)
    7f60:	6003      	str	r3, [r0, #0]
    7f62:	600f      	str	r7, [r1, #0]
    7f64:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    7f66:	2b01      	cmp	r3, #1
    7f68:	bf0b      	itete	eq
    7f6a:	4b5a      	ldreq	r3, [pc, #360]	; (80d4 <CONFIG_FPROTECT_BLOCK_SIZE+0xd4>)
    7f6c:	4b5a      	ldrne	r3, [pc, #360]	; (80d8 <CONFIG_FPROTECT_BLOCK_SIZE+0xd8>)
    7f6e:	495b      	ldreq	r1, [pc, #364]	; (80dc <CONFIG_FPROTECT_BLOCK_SIZE+0xdc>)
    7f70:	495b      	ldrne	r1, [pc, #364]	; (80e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>)
    7f72:	600a      	str	r2, [r1, #0]
    7f74:	601f      	str	r7, [r3, #0]
    7f76:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7f78:	f023 0304 	bic.w	r3, r3, #4
    7f7c:	2b03      	cmp	r3, #3
    7f7e:	d075      	beq.n	806c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>
    7f80:	6e23      	ldr	r3, [r4, #96]	; 0x60
    7f82:	2b01      	cmp	r3, #1
    7f84:	bf0c      	ite	eq
    7f86:	2080      	moveq	r0, #128	; 0x80
    7f88:	2020      	movne	r0, #32
    7f8a:	f7fe fd3b 	bl	6a04 <CC_HalWaitInterrupt>
    7f8e:	4681      	mov	r9, r0
    7f90:	2800      	cmp	r0, #0
    7f92:	f47f af52 	bne.w	7e3a <ProcessAesDrv+0x72>
    7f96:	4b47      	ldr	r3, [pc, #284]	; (80b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>)
    7f98:	681a      	ldr	r2, [r3, #0]
    7f9a:	2a00      	cmp	r2, #0
    7f9c:	d1fc      	bne.n	7f98 <__kernel_ram_size+0x128>
    7f9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7fa0:	4691      	mov	r9, r2
    7fa2:	3b01      	subs	r3, #1
    7fa4:	2b06      	cmp	r3, #6
    7fa6:	d811      	bhi.n	7fcc <__kernel_ram_size+0x15c>
    7fa8:	e8df f003 	tbb	[pc, r3]
    7fac:	1004bc04 	.word	0x1004bc04
    7fb0:	bc10      	.short	0xbc10
    7fb2:	04          	.byte	0x04
    7fb3:	00          	.byte	0x00
    7fb4:	4a41      	ldr	r2, [pc, #260]	; (80bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>)
    7fb6:	4b42      	ldr	r3, [pc, #264]	; (80c0 <CONFIG_FPROTECT_BLOCK_SIZE+0xc0>)
    7fb8:	6811      	ldr	r1, [r2, #0]
    7fba:	3208      	adds	r2, #8
    7fbc:	6021      	str	r1, [r4, #0]
    7fbe:	6819      	ldr	r1, [r3, #0]
    7fc0:	3308      	adds	r3, #8
    7fc2:	6061      	str	r1, [r4, #4]
    7fc4:	6812      	ldr	r2, [r2, #0]
    7fc6:	60a2      	str	r2, [r4, #8]
    7fc8:	681b      	ldr	r3, [r3, #0]
    7fca:	60e3      	str	r3, [r4, #12]
    7fcc:	2301      	movs	r3, #1
    7fce:	65a3      	str	r3, [r4, #88]	; 0x58
    7fd0:	e733      	b.n	7e3a <ProcessAesDrv+0x72>
    7fd2:	4844      	ldr	r0, [pc, #272]	; (80e4 <CONFIG_FPROTECT_BLOCK_SIZE+0xe4>)
    7fd4:	f7fd fe5e 	bl	5c94 <CC_PalAbort>
    7fd8:	2000      	movs	r0, #0
    7fda:	f7fe fdd5 	bl	6b88 <CC_PalPowerSaveModeSelect>
    7fde:	2800      	cmp	r0, #0
    7fe0:	f43f af1d 	beq.w	7e1e <ProcessAesDrv+0x56>
    7fe4:	4840      	ldr	r0, [pc, #256]	; (80e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>)
    7fe6:	f7fd fe55 	bl	5c94 <CC_PalAbort>
    7fea:	e718      	b.n	7e1e <ProcessAesDrv+0x56>
    7fec:	483f      	ldr	r0, [pc, #252]	; (80ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>)
    7fee:	f7fd fe51 	bl	5c94 <CC_PalAbort>
    7ff2:	4648      	mov	r0, r9
    7ff4:	b007      	add	sp, #28
    7ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ffa:	483d      	ldr	r0, [pc, #244]	; (80f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>)
    7ffc:	f7fd fe4a 	bl	5c94 <CC_PalAbort>
    8000:	e73c      	b.n	7e7c <__kernel_ram_size+0xc>
    8002:	2304      	movs	r3, #4
    8004:	2120      	movs	r1, #32
    8006:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    800a:	f104 0010 	add.w	r0, r4, #16
    800e:	f7ff fb49 	bl	76a4 <CC_PalMemSetZeroPlat>
    8012:	e71a      	b.n	7e4a <ProcessAesDrv+0x82>
    8014:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8016:	6c20      	ldr	r0, [r4, #64]	; 0x40
    8018:	f000 f9d2 	bl	83c0 <kmu_validate_slot_and_size>
    801c:	b9e8      	cbnz	r0, 805a <CONFIG_FPROTECT_BLOCK_SIZE+0x5a>
    801e:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>
    8022:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 8114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>
    8026:	f8d8 3000 	ldr.w	r3, [r8]
    802a:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 8118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>
    802e:	681b      	ldr	r3, [r3, #0]
    8030:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 811c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>
    8034:	f8cb 3000 	str.w	r3, [fp]
    8038:	f8d8 3000 	ldr.w	r3, [r8]
    803c:	4a2d      	ldr	r2, [pc, #180]	; (80f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>)
    803e:	685b      	ldr	r3, [r3, #4]
    8040:	f8ca 3000 	str.w	r3, [sl]
    8044:	f8d8 3000 	ldr.w	r3, [r8]
    8048:	689b      	ldr	r3, [r3, #8]
    804a:	f8c9 3000 	str.w	r3, [r9]
    804e:	f8d8 3000 	ldr.w	r3, [r8]
    8052:	68db      	ldr	r3, [r3, #12]
    8054:	6013      	str	r3, [r2, #0]
    8056:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8058:	b171      	cbz	r1, 8078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>
    805a:	f04f 0801 	mov.w	r8, #1
    805e:	e6d0      	b.n	7e02 <ProcessAesDrv+0x3a>
    8060:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    8064:	e6e9      	b.n	7e3a <ProcessAesDrv+0x72>
    8066:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
    806a:	e70d      	b.n	7e88 <__kernel_ram_size+0x18>
    806c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    806e:	2b01      	cmp	r3, #1
    8070:	bf0c      	ite	eq
    8072:	2040      	moveq	r0, #64	; 0x40
    8074:	2010      	movne	r0, #16
    8076:	e788      	b.n	7f8a <__kernel_ram_size+0x11a>
    8078:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
    807c:	9300      	str	r3, [sp, #0]
    807e:	2310      	movs	r3, #16
    8080:	f104 0010 	add.w	r0, r4, #16
    8084:	e9cd 2001 	strd	r2, r0, [sp, #4]
    8088:	9303      	str	r3, [sp, #12]
    808a:	9005      	str	r0, [sp, #20]
    808c:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
    8090:	6c20      	ldr	r0, [r4, #64]	; 0x40
    8092:	f000 fa93 	bl	85bc <kmu_derive_cmac>
    8096:	2800      	cmp	r0, #0
    8098:	d14a      	bne.n	8130 <CONFIG_FPROTECT_BLOCK_SIZE+0x130>
    809a:	2300      	movs	r3, #0
    809c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    80a0:	e7db      	b.n	805a <CONFIG_FPROTECT_BLOCK_SIZE+0x5a>
    80a2:	6821      	ldr	r1, [r4, #0]
    80a4:	4a14      	ldr	r2, [pc, #80]	; (80f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>)
    80a6:	4b15      	ldr	r3, [pc, #84]	; (80fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>)
    80a8:	e745      	b.n	7f36 <__kernel_ram_size+0xc6>
    80aa:	bf00      	nop
    80ac:	20000114 	.word	0x20000114
    80b0:	50841810 	.word	0x50841810
    80b4:	50841910 	.word	0x50841910
    80b8:	50841a04 	.word	0x50841a04
    80bc:	50841440 	.word	0x50841440
    80c0:	50841444 	.word	0x50841444
    80c4:	50841d28 	.word	0x50841d28
    80c8:	50841d2c 	.word	0x50841d2c
    80cc:	50841d30 	.word	0x50841d30
    80d0:	50841d34 	.word	0x50841d34
    80d4:	50841c2c 	.word	0x50841c2c
    80d8:	50841c34 	.word	0x50841c34
    80dc:	50841c28 	.word	0x50841c28
    80e0:	50841c30 	.word	0x50841c30
    80e4:	000095ec 	.word	0x000095ec
    80e8:	00009604 	.word	0x00009604
    80ec:	00009644 	.word	0x00009644
    80f0:	00009624 	.word	0x00009624
    80f4:	5084140c 	.word	0x5084140c
    80f8:	50841460 	.word	0x50841460
    80fc:	50841464 	.word	0x50841464
    8100:	00f10001 	.word	0x00f10001
    8104:	00f10005 	.word	0x00f10005
    8108:	00f1000b 	.word	0x00f1000b
    810c:	00f10003 	.word	0x00f10003
    8110:	20000104 	.word	0x20000104
    8114:	50841400 	.word	0x50841400
    8118:	50841404 	.word	0x50841404
    811c:	50841408 	.word	0x50841408
    8120:	00f10002 	.word	0x00f10002
    8124:	4a0f      	ldr	r2, [pc, #60]	; (8164 <CONFIG_FPROTECT_BLOCK_SIZE+0x164>)
    8126:	4b10      	ldr	r3, [pc, #64]	; (8168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>)
    8128:	e746      	b.n	7fb8 <__kernel_ram_size+0x148>
    812a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
    812e:	e684      	b.n	7e3a <ProcessAesDrv+0x72>
    8130:	f8d8 3000 	ldr.w	r3, [r8]
    8134:	9805      	ldr	r0, [sp, #20]
    8136:	681b      	ldr	r3, [r3, #0]
    8138:	4a0c      	ldr	r2, [pc, #48]	; (816c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>)
    813a:	f8cb 3000 	str.w	r3, [fp]
    813e:	f8d8 3000 	ldr.w	r3, [r8]
    8142:	2110      	movs	r1, #16
    8144:	685b      	ldr	r3, [r3, #4]
    8146:	f8ca 3000 	str.w	r3, [sl]
    814a:	f8d8 3000 	ldr.w	r3, [r8]
    814e:	689b      	ldr	r3, [r3, #8]
    8150:	f8c9 3000 	str.w	r3, [r9]
    8154:	f8d8 3000 	ldr.w	r3, [r8]
    8158:	68db      	ldr	r3, [r3, #12]
    815a:	6013      	str	r3, [r2, #0]
    815c:	f7ff faa2 	bl	76a4 <CC_PalMemSetZeroPlat>
    8160:	e79b      	b.n	809a <CONFIG_FPROTECT_BLOCK_SIZE+0x9a>
    8162:	bf00      	nop
    8164:	50841460 	.word	0x50841460
    8168:	50841464 	.word	0x50841464
    816c:	5084140c 	.word	0x5084140c
    8170:	00f10004 	.word	0x00f10004

00008174 <FinishAesDrv>:
    8174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8178:	b301      	cbz	r1, 81bc <FinishAesDrv+0x48>
    817a:	b1fa      	cbz	r2, 81bc <FinishAesDrv+0x48>
    817c:	4604      	mov	r4, r0
    817e:	2800      	cmp	r0, #0
    8180:	d07a      	beq.n	8278 <FinishAesDrv+0x104>
    8182:	461d      	mov	r5, r3
    8184:	6b43      	ldr	r3, [r0, #52]	; 0x34
    8186:	460e      	mov	r6, r1
    8188:	2b07      	cmp	r3, #7
    818a:	d01b      	beq.n	81c4 <FinishAesDrv+0x50>
    818c:	b95d      	cbnz	r5, 81a6 <FinishAesDrv+0x32>
    818e:	2b03      	cmp	r3, #3
    8190:	d110      	bne.n	81b4 <FinishAesDrv+0x40>
    8192:	6d83      	ldr	r3, [r0, #88]	; 0x58
    8194:	b973      	cbnz	r3, 81b4 <FinishAesDrv+0x40>
    8196:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
    819a:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
    819e:	2510      	movs	r5, #16
    81a0:	f100 0364 	add.w	r3, r0, #100	; 0x64
    81a4:	600b      	str	r3, [r1, #0]
    81a6:	462b      	mov	r3, r5
    81a8:	4631      	mov	r1, r6
    81aa:	4620      	mov	r0, r4
    81ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    81b0:	f7ff be0a 	b.w	7dc8 <ProcessAesDrv>
    81b4:	462f      	mov	r7, r5
    81b6:	4638      	mov	r0, r7
    81b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    81bc:	4f68      	ldr	r7, [pc, #416]	; (8360 <FinishAesDrv+0x1ec>)
    81be:	4638      	mov	r0, r7
    81c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    81c4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    81c6:	2b00      	cmp	r3, #0
    81c8:	d159      	bne.n	827e <FinishAesDrv+0x10a>
    81ca:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    81ce:	d25b      	bcs.n	8288 <FinishAesDrv+0x114>
    81d0:	b915      	cbnz	r5, 81d8 <FinishAesDrv+0x64>
    81d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
    81d4:	2b00      	cmp	r3, #0
    81d6:	d157      	bne.n	8288 <FinishAesDrv+0x114>
    81d8:	f04f 31ff 	mov.w	r1, #4294967295
    81dc:	4861      	ldr	r0, [pc, #388]	; (8364 <FinishAesDrv+0x1f0>)
    81de:	f7fe fca3 	bl	6b28 <CC_PalMutexLock>
    81e2:	2800      	cmp	r0, #0
    81e4:	f040 809a 	bne.w	831c <FinishAesDrv+0x1a8>
    81e8:	2000      	movs	r0, #0
    81ea:	f7fe fccd 	bl	6b88 <CC_PalPowerSaveModeSelect>
    81ee:	2800      	cmp	r0, #0
    81f0:	f040 8090 	bne.w	8314 <FinishAesDrv+0x1a0>
    81f4:	2101      	movs	r1, #1
    81f6:	4b5c      	ldr	r3, [pc, #368]	; (8368 <FinishAesDrv+0x1f4>)
    81f8:	4a5c      	ldr	r2, [pc, #368]	; (836c <FinishAesDrv+0x1f8>)
    81fa:	6019      	str	r1, [r3, #0]
    81fc:	6813      	ldr	r3, [r2, #0]
    81fe:	2b00      	cmp	r3, #0
    8200:	d1fc      	bne.n	81fc <FinishAesDrv+0x88>
    8202:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8204:	2b03      	cmp	r3, #3
    8206:	dd20      	ble.n	824a <FinishAesDrv+0xd6>
    8208:	3b06      	subs	r3, #6
    820a:	2b01      	cmp	r3, #1
    820c:	d81f      	bhi.n	824e <FinishAesDrv+0xda>
    820e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8210:	2b01      	cmp	r3, #1
    8212:	d83b      	bhi.n	828c <FinishAesDrv+0x118>
    8214:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    8216:	2b01      	cmp	r3, #1
    8218:	f200 8088 	bhi.w	832c <FinishAesDrv+0x1b8>
    821c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    821e:	2b01      	cmp	r3, #1
    8220:	f200 8086 	bhi.w	8330 <FinishAesDrv+0x1bc>
    8224:	4620      	mov	r0, r4
    8226:	f7ff fd53 	bl	7cd0 <InitAes.part.0>
    822a:	4607      	mov	r7, r0
    822c:	b980      	cbnz	r0, 8250 <FinishAesDrv+0xdc>
    822e:	4620      	mov	r0, r4
    8230:	f7ff fcdc 	bl	7bec <LoadAesKey>
    8234:	4607      	mov	r7, r0
    8236:	b958      	cbnz	r0, 8250 <FinishAesDrv+0xdc>
    8238:	6b63      	ldr	r3, [r4, #52]	; 0x34
    823a:	2b07      	cmp	r3, #7
    823c:	d807      	bhi.n	824e <FinishAesDrv+0xda>
    823e:	e8df f003 	tbb	[pc, r3]
    8242:	2731      	.short	0x2731
    8244:	06062755 	.word	0x06062755
    8248:	2755      	.short	0x2755
    824a:	2b00      	cmp	r3, #0
    824c:	dadf      	bge.n	820e <FinishAesDrv+0x9a>
    824e:	4f48      	ldr	r7, [pc, #288]	; (8370 <FinishAesDrv+0x1fc>)
    8250:	4a46      	ldr	r2, [pc, #280]	; (836c <FinishAesDrv+0x1f8>)
    8252:	6813      	ldr	r3, [r2, #0]
    8254:	2b00      	cmp	r3, #0
    8256:	d1fc      	bne.n	8252 <FinishAesDrv+0xde>
    8258:	4a43      	ldr	r2, [pc, #268]	; (8368 <FinishAesDrv+0x1f4>)
    825a:	2001      	movs	r0, #1
    825c:	6013      	str	r3, [r2, #0]
    825e:	f7fe fc93 	bl	6b88 <CC_PalPowerSaveModeSelect>
    8262:	2800      	cmp	r0, #0
    8264:	d15e      	bne.n	8324 <FinishAesDrv+0x1b0>
    8266:	483f      	ldr	r0, [pc, #252]	; (8364 <FinishAesDrv+0x1f0>)
    8268:	f7fe fc66 	bl	6b38 <CC_PalMutexUnlock>
    826c:	2800      	cmp	r0, #0
    826e:	d0a2      	beq.n	81b6 <FinishAesDrv+0x42>
    8270:	4840      	ldr	r0, [pc, #256]	; (8374 <FinishAesDrv+0x200>)
    8272:	f7fd fd0f 	bl	5c94 <CC_PalAbort>
    8276:	e79e      	b.n	81b6 <FinishAesDrv+0x42>
    8278:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
    827c:	e79b      	b.n	81b6 <FinishAesDrv+0x42>
    827e:	2b01      	cmp	r3, #1
    8280:	d1a6      	bne.n	81d0 <FinishAesDrv+0x5c>
    8282:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    8286:	d3a3      	bcc.n	81d0 <FinishAesDrv+0x5c>
    8288:	4f3b      	ldr	r7, [pc, #236]	; (8378 <FinishAesDrv+0x204>)
    828a:	e794      	b.n	81b6 <FinishAesDrv+0x42>
    828c:	4f3b      	ldr	r7, [pc, #236]	; (837c <FinishAesDrv+0x208>)
    828e:	e7df      	b.n	8250 <FinishAesDrv+0xdc>
    8290:	6821      	ldr	r1, [r4, #0]
    8292:	4a3b      	ldr	r2, [pc, #236]	; (8380 <FinishAesDrv+0x20c>)
    8294:	4b3b      	ldr	r3, [pc, #236]	; (8384 <FinishAesDrv+0x210>)
    8296:	6011      	str	r1, [r2, #0]
    8298:	6861      	ldr	r1, [r4, #4]
    829a:	6019      	str	r1, [r3, #0]
    829c:	68a1      	ldr	r1, [r4, #8]
    829e:	6091      	str	r1, [r2, #8]
    82a0:	68e2      	ldr	r2, [r4, #12]
    82a2:	609a      	str	r2, [r3, #8]
    82a4:	2301      	movs	r3, #1
    82a6:	4938      	ldr	r1, [pc, #224]	; (8388 <FinishAesDrv+0x214>)
    82a8:	4a38      	ldr	r2, [pc, #224]	; (838c <FinishAesDrv+0x218>)
    82aa:	600b      	str	r3, [r1, #0]
    82ac:	6015      	str	r5, [r2, #0]
    82ae:	2d00      	cmp	r5, #0
    82b0:	d140      	bne.n	8334 <FinishAesDrv+0x1c0>
    82b2:	6da2      	ldr	r2, [r4, #88]	; 0x58
    82b4:	b90a      	cbnz	r2, 82ba <FinishAesDrv+0x146>
    82b6:	4a36      	ldr	r2, [pc, #216]	; (8390 <FinishAesDrv+0x21c>)
    82b8:	6013      	str	r3, [r2, #0]
    82ba:	4b2c      	ldr	r3, [pc, #176]	; (836c <FinishAesDrv+0x1f8>)
    82bc:	681f      	ldr	r7, [r3, #0]
    82be:	2f00      	cmp	r7, #0
    82c0:	d1fc      	bne.n	82bc <FinishAesDrv+0x148>
    82c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    82c4:	3b01      	subs	r3, #1
    82c6:	2b06      	cmp	r3, #6
    82c8:	d8c2      	bhi.n	8250 <FinishAesDrv+0xdc>
    82ca:	a201      	add	r2, pc, #4	; (adr r2, 82d0 <FinishAesDrv+0x15c>)
    82cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    82d0:	000082f5 	.word	0x000082f5
    82d4:	0000830f 	.word	0x0000830f
    82d8:	000082f5 	.word	0x000082f5
    82dc:	00008251 	.word	0x00008251
    82e0:	00008251 	.word	0x00008251
    82e4:	0000830f 	.word	0x0000830f
    82e8:	000082f5 	.word	0x000082f5
    82ec:	6821      	ldr	r1, [r4, #0]
    82ee:	4a29      	ldr	r2, [pc, #164]	; (8394 <FinishAesDrv+0x220>)
    82f0:	4b29      	ldr	r3, [pc, #164]	; (8398 <FinishAesDrv+0x224>)
    82f2:	e7d0      	b.n	8296 <FinishAesDrv+0x122>
    82f4:	4a22      	ldr	r2, [pc, #136]	; (8380 <FinishAesDrv+0x20c>)
    82f6:	4b23      	ldr	r3, [pc, #140]	; (8384 <FinishAesDrv+0x210>)
    82f8:	6811      	ldr	r1, [r2, #0]
    82fa:	3208      	adds	r2, #8
    82fc:	6021      	str	r1, [r4, #0]
    82fe:	6819      	ldr	r1, [r3, #0]
    8300:	3308      	adds	r3, #8
    8302:	6061      	str	r1, [r4, #4]
    8304:	6812      	ldr	r2, [r2, #0]
    8306:	60a2      	str	r2, [r4, #8]
    8308:	681b      	ldr	r3, [r3, #0]
    830a:	60e3      	str	r3, [r4, #12]
    830c:	e7a0      	b.n	8250 <FinishAesDrv+0xdc>
    830e:	4a21      	ldr	r2, [pc, #132]	; (8394 <FinishAesDrv+0x220>)
    8310:	4b21      	ldr	r3, [pc, #132]	; (8398 <FinishAesDrv+0x224>)
    8312:	e7f1      	b.n	82f8 <FinishAesDrv+0x184>
    8314:	4821      	ldr	r0, [pc, #132]	; (839c <FinishAesDrv+0x228>)
    8316:	f7fd fcbd 	bl	5c94 <CC_PalAbort>
    831a:	e76b      	b.n	81f4 <FinishAesDrv+0x80>
    831c:	4820      	ldr	r0, [pc, #128]	; (83a0 <FinishAesDrv+0x22c>)
    831e:	f7fd fcb9 	bl	5c94 <CC_PalAbort>
    8322:	e761      	b.n	81e8 <FinishAesDrv+0x74>
    8324:	481f      	ldr	r0, [pc, #124]	; (83a4 <FinishAesDrv+0x230>)
    8326:	f7fd fcb5 	bl	5c94 <CC_PalAbort>
    832a:	e79c      	b.n	8266 <FinishAesDrv+0xf2>
    832c:	4f1e      	ldr	r7, [pc, #120]	; (83a8 <FinishAesDrv+0x234>)
    832e:	e78f      	b.n	8250 <FinishAesDrv+0xdc>
    8330:	4f1e      	ldr	r7, [pc, #120]	; (83ac <FinishAesDrv+0x238>)
    8332:	e78d      	b.n	8250 <FinishAesDrv+0xdc>
    8334:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    8336:	6833      	ldr	r3, [r6, #0]
    8338:	2a01      	cmp	r2, #1
    833a:	d00a      	beq.n	8352 <FinishAesDrv+0x1de>
    833c:	2010      	movs	r0, #16
    833e:	491c      	ldr	r1, [pc, #112]	; (83b0 <FinishAesDrv+0x23c>)
    8340:	4a1c      	ldr	r2, [pc, #112]	; (83b4 <FinishAesDrv+0x240>)
    8342:	600b      	str	r3, [r1, #0]
    8344:	6015      	str	r5, [r2, #0]
    8346:	f7fe fb5d 	bl	6a04 <CC_HalWaitInterrupt>
    834a:	4607      	mov	r7, r0
    834c:	2800      	cmp	r0, #0
    834e:	d0b4      	beq.n	82ba <FinishAesDrv+0x146>
    8350:	e77e      	b.n	8250 <FinishAesDrv+0xdc>
    8352:	4919      	ldr	r1, [pc, #100]	; (83b8 <FinishAesDrv+0x244>)
    8354:	4a19      	ldr	r2, [pc, #100]	; (83bc <FinishAesDrv+0x248>)
    8356:	600b      	str	r3, [r1, #0]
    8358:	2040      	movs	r0, #64	; 0x40
    835a:	6015      	str	r5, [r2, #0]
    835c:	e7f3      	b.n	8346 <FinishAesDrv+0x1d2>
    835e:	bf00      	nop
    8360:	00f1000b 	.word	0x00f1000b
    8364:	20000114 	.word	0x20000114
    8368:	50841810 	.word	0x50841810
    836c:	50841910 	.word	0x50841910
    8370:	00f10001 	.word	0x00f10001
    8374:	00009644 	.word	0x00009644
    8378:	00f10005 	.word	0x00f10005
    837c:	00f10002 	.word	0x00f10002
    8380:	50841440 	.word	0x50841440
    8384:	50841444 	.word	0x50841444
    8388:	5084147c 	.word	0x5084147c
    838c:	508414bc 	.word	0x508414bc
    8390:	50841524 	.word	0x50841524
    8394:	50841460 	.word	0x50841460
    8398:	50841464 	.word	0x50841464
    839c:	00009604 	.word	0x00009604
    83a0:	000095ec 	.word	0x000095ec
    83a4:	00009624 	.word	0x00009624
    83a8:	00f10003 	.word	0x00f10003
    83ac:	00f10004 	.word	0x00f10004
    83b0:	50841c30 	.word	0x50841c30
    83b4:	50841c34 	.word	0x50841c34
    83b8:	50841c28 	.word	0x50841c28
    83bc:	50841c2c 	.word	0x50841c2c

000083c0 <kmu_validate_slot_and_size>:
    83c0:	287f      	cmp	r0, #127	; 0x7f
    83c2:	d80c      	bhi.n	83de <kmu_validate_slot_and_size+0x1e>
    83c4:	b149      	cbz	r1, 83da <kmu_validate_slot_and_size+0x1a>
    83c6:	2903      	cmp	r1, #3
    83c8:	d001      	beq.n	83ce <kmu_validate_slot_and_size+0xe>
    83ca:	4806      	ldr	r0, [pc, #24]	; (83e4 <kmu_validate_slot_and_size+0x24>)
    83cc:	4770      	bx	lr
    83ce:	4906      	ldr	r1, [pc, #24]	; (83e8 <kmu_validate_slot_and_size+0x28>)
    83d0:	287f      	cmp	r0, #127	; 0x7f
    83d2:	bf0c      	ite	eq
    83d4:	4608      	moveq	r0, r1
    83d6:	2000      	movne	r0, #0
    83d8:	4770      	bx	lr
    83da:	4608      	mov	r0, r1
    83dc:	4770      	bx	lr
    83de:	4802      	ldr	r0, [pc, #8]	; (83e8 <kmu_validate_slot_and_size+0x28>)
    83e0:	4770      	bx	lr
    83e2:	bf00      	nop
    83e4:	00f70003 	.word	0x00f70003
    83e8:	00f70001 	.word	0x00f70001

000083ec <kmu_validate_slot_and_size_no_kdr>:
    83ec:	b4f0      	push	{r4, r5, r6, r7}
    83ee:	4a1c      	ldr	r2, [pc, #112]	; (8460 <kmu_validate_slot_and_size_no_kdr+0x74>)
    83f0:	00c5      	lsls	r5, r0, #3
    83f2:	1c44      	adds	r4, r0, #1
    83f4:	f505 037f 	add.w	r3, r5, #16711680	; 0xff0000
    83f8:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
    83fc:	f8c2 4500 	str.w	r4, [r2, #1280]	; 0x500
    8400:	681c      	ldr	r4, [r3, #0]
    8402:	b082      	sub	sp, #8
    8404:	f3bf 8f4f 	dsb	sy
    8408:	2300      	movs	r3, #0
    840a:	9400      	str	r4, [sp, #0]
    840c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    8410:	9e00      	ldr	r6, [sp, #0]
    8412:	4c14      	ldr	r4, [pc, #80]	; (8464 <kmu_validate_slot_and_size_no_kdr+0x78>)
    8414:	42a6      	cmp	r6, r4
    8416:	d018      	beq.n	844a <kmu_validate_slot_and_size_no_kdr+0x5e>
    8418:	b1a9      	cbz	r1, 8446 <kmu_validate_slot_and_size_no_kdr+0x5a>
    841a:	4e13      	ldr	r6, [pc, #76]	; (8468 <kmu_validate_slot_and_size_no_kdr+0x7c>)
    841c:	1c87      	adds	r7, r0, #2
    841e:	442e      	add	r6, r5
    8420:	f8c2 7500 	str.w	r7, [r2, #1280]	; 0x500
    8424:	6835      	ldr	r5, [r6, #0]
    8426:	f3bf 8f4f 	dsb	sy
    842a:	9501      	str	r5, [sp, #4]
    842c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    8430:	9a01      	ldr	r2, [sp, #4]
    8432:	42a2      	cmp	r2, r4
    8434:	d009      	beq.n	844a <kmu_validate_slot_and_size_no_kdr+0x5e>
    8436:	287f      	cmp	r0, #127	; 0x7f
    8438:	d807      	bhi.n	844a <kmu_validate_slot_and_size_no_kdr+0x5e>
    843a:	2903      	cmp	r1, #3
    843c:	d10b      	bne.n	8456 <kmu_validate_slot_and_size_no_kdr+0x6a>
    843e:	287f      	cmp	r0, #127	; 0x7f
    8440:	d003      	beq.n	844a <kmu_validate_slot_and_size_no_kdr+0x5e>
    8442:	4618      	mov	r0, r3
    8444:	e002      	b.n	844c <kmu_validate_slot_and_size_no_kdr+0x60>
    8446:	287f      	cmp	r0, #127	; 0x7f
    8448:	d903      	bls.n	8452 <kmu_validate_slot_and_size_no_kdr+0x66>
    844a:	4808      	ldr	r0, [pc, #32]	; (846c <kmu_validate_slot_and_size_no_kdr+0x80>)
    844c:	b002      	add	sp, #8
    844e:	bcf0      	pop	{r4, r5, r6, r7}
    8450:	4770      	bx	lr
    8452:	4608      	mov	r0, r1
    8454:	e7fa      	b.n	844c <kmu_validate_slot_and_size_no_kdr+0x60>
    8456:	4806      	ldr	r0, [pc, #24]	; (8470 <kmu_validate_slot_and_size_no_kdr+0x84>)
    8458:	b002      	add	sp, #8
    845a:	bcf0      	pop	{r4, r5, r6, r7}
    845c:	4770      	bx	lr
    845e:	bf00      	nop
    8460:	50039000 	.word	0x50039000
    8464:	50841a50 	.word	0x50841a50
    8468:	00ff8408 	.word	0x00ff8408
    846c:	00f70001 	.word	0x00f70001
    8470:	00f70003 	.word	0x00f70003

00008474 <kmu_validate_kdr_slot_and_size>:
    8474:	b9b9      	cbnz	r1, 84a6 <kmu_validate_kdr_slot_and_size+0x32>
    8476:	4a0d      	ldr	r2, [pc, #52]	; (84ac <kmu_validate_kdr_slot_and_size+0x38>)
    8478:	00c3      	lsls	r3, r0, #3
    847a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    847e:	3001      	adds	r0, #1
    8480:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    8484:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
    8488:	b082      	sub	sp, #8
    848a:	681b      	ldr	r3, [r3, #0]
    848c:	f3bf 8f4f 	dsb	sy
    8490:	9301      	str	r3, [sp, #4]
    8492:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    8496:	9a01      	ldr	r2, [sp, #4]
    8498:	4b05      	ldr	r3, [pc, #20]	; (84b0 <kmu_validate_kdr_slot_and_size+0x3c>)
    849a:	4806      	ldr	r0, [pc, #24]	; (84b4 <kmu_validate_kdr_slot_and_size+0x40>)
    849c:	429a      	cmp	r2, r3
    849e:	bf08      	it	eq
    84a0:	2000      	moveq	r0, #0
    84a2:	b002      	add	sp, #8
    84a4:	4770      	bx	lr
    84a6:	4804      	ldr	r0, [pc, #16]	; (84b8 <kmu_validate_kdr_slot_and_size+0x44>)
    84a8:	4770      	bx	lr
    84aa:	bf00      	nop
    84ac:	50039000 	.word	0x50039000
    84b0:	50841a50 	.word	0x50841a50
    84b4:	00f70001 	.word	0x00f70001
    84b8:	00f70003 	.word	0x00f70003

000084bc <kmu_use_kdr_key>:
    84bc:	2000      	movs	r0, #0
    84be:	2201      	movs	r2, #1
    84c0:	4902      	ldr	r1, [pc, #8]	; (84cc <kmu_use_kdr_key+0x10>)
    84c2:	4b03      	ldr	r3, [pc, #12]	; (84d0 <kmu_use_kdr_key+0x14>)
    84c4:	6008      	str	r0, [r1, #0]
    84c6:	601a      	str	r2, [r3, #0]
    84c8:	4770      	bx	lr
    84ca:	bf00      	nop
    84cc:	50841a38 	.word	0x50841a38
    84d0:	50841478 	.word	0x50841478

000084d4 <kmu_load_key_aes>:
    84d4:	b109      	cbz	r1, 84da <kmu_load_key_aes+0x6>
    84d6:	4832      	ldr	r0, [pc, #200]	; (85a0 <kmu_load_key_aes+0xcc>)
    84d8:	4770      	bx	lr
    84da:	b430      	push	{r4, r5}
    84dc:	2401      	movs	r4, #1
    84de:	4b31      	ldr	r3, [pc, #196]	; (85a4 <kmu_load_key_aes+0xd0>)
    84e0:	4a31      	ldr	r2, [pc, #196]	; (85a8 <kmu_load_key_aes+0xd4>)
    84e2:	b084      	sub	sp, #16
    84e4:	f8c2 4500 	str.w	r4, [r2, #1280]	; 0x500
    84e8:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
    84ec:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
    84f0:	00c2      	lsls	r2, r0, #3
    84f2:	9502      	str	r5, [sp, #8]
    84f4:	9d02      	ldr	r5, [sp, #8]
    84f6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    84fa:	f8d3 5100 	ldr.w	r5, [r3, #256]	; 0x100
    84fe:	4420      	add	r0, r4
    8500:	9502      	str	r5, [sp, #8]
    8502:	9d02      	ldr	r5, [sp, #8]
    8504:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    8508:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    850c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    8510:	9102      	str	r1, [sp, #8]
    8512:	9902      	ldr	r1, [sp, #8]
    8514:	f502 4204 	add.w	r2, r2, #33792	; 0x8400
    8518:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    851c:	6812      	ldr	r2, [r2, #0]
    851e:	f3bf 8f4f 	dsb	sy
    8522:	9203      	str	r2, [sp, #12]
    8524:	9903      	ldr	r1, [sp, #12]
    8526:	4a21      	ldr	r2, [pc, #132]	; (85ac <kmu_load_key_aes+0xd8>)
    8528:	4291      	cmp	r1, r2
    852a:	d132      	bne.n	8592 <kmu_load_key_aes+0xbe>
    852c:	461a      	mov	r2, r3
    852e:	601c      	str	r4, [r3, #0]
    8530:	e005      	b.n	853e <kmu_load_key_aes+0x6a>
    8532:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8536:	b9db      	cbnz	r3, 8570 <kmu_load_key_aes+0x9c>
    8538:	f89d 3007 	ldrb.w	r3, [sp, #7]
    853c:	b9c3      	cbnz	r3, 8570 <kmu_load_key_aes+0x9c>
    853e:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    8542:	3b00      	subs	r3, #0
    8544:	bf18      	it	ne
    8546:	2301      	movne	r3, #1
    8548:	f88d 3005 	strb.w	r3, [sp, #5]
    854c:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
    8550:	3b00      	subs	r3, #0
    8552:	bf18      	it	ne
    8554:	2301      	movne	r3, #1
    8556:	f88d 3006 	strb.w	r3, [sp, #6]
    855a:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    855e:	3b00      	subs	r3, #0
    8560:	bf18      	it	ne
    8562:	2301      	movne	r3, #1
    8564:	f88d 3007 	strb.w	r3, [sp, #7]
    8568:	f89d 3005 	ldrb.w	r3, [sp, #5]
    856c:	2b00      	cmp	r3, #0
    856e:	d0e0      	beq.n	8532 <kmu_load_key_aes+0x5e>
    8570:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8574:	b98b      	cbnz	r3, 859a <kmu_load_key_aes+0xc6>
    8576:	f89d 3007 	ldrb.w	r3, [sp, #7]
    857a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    857e:	b933      	cbnz	r3, 858e <kmu_load_key_aes+0xba>
    8580:	4610      	mov	r0, r2
    8582:	4b08      	ldr	r3, [pc, #32]	; (85a4 <kmu_load_key_aes+0xd0>)
    8584:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    8588:	b004      	add	sp, #16
    858a:	bc30      	pop	{r4, r5}
    858c:	4770      	bx	lr
    858e:	4808      	ldr	r0, [pc, #32]	; (85b0 <kmu_load_key_aes+0xdc>)
    8590:	e7fa      	b.n	8588 <kmu_load_key_aes+0xb4>
    8592:	4808      	ldr	r0, [pc, #32]	; (85b4 <kmu_load_key_aes+0xe0>)
    8594:	b004      	add	sp, #16
    8596:	bc30      	pop	{r4, r5}
    8598:	4770      	bx	lr
    859a:	4807      	ldr	r0, [pc, #28]	; (85b8 <kmu_load_key_aes+0xe4>)
    859c:	e7f4      	b.n	8588 <kmu_load_key_aes+0xb4>
    859e:	bf00      	nop
    85a0:	00f1000c 	.word	0x00f1000c
    85a4:	50039000 	.word	0x50039000
    85a8:	50840000 	.word	0x50840000
    85ac:	50841400 	.word	0x50841400
    85b0:	00f70002 	.word	0x00f70002
    85b4:	00f70006 	.word	0x00f70006
    85b8:	00f70001 	.word	0x00f70001

000085bc <kmu_derive_cmac>:
    85bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    85c0:	2400      	movs	r4, #0
    85c2:	b0ce      	sub	sp, #312	; 0x138
    85c4:	4605      	mov	r5, r0
    85c6:	e9dd 9658 	ldrd	r9, r6, [sp, #352]	; 0x160
    85ca:	468a      	mov	sl, r1
    85cc:	4617      	mov	r7, r2
    85ce:	4621      	mov	r1, r4
    85d0:	2274      	movs	r2, #116	; 0x74
    85d2:	a810      	add	r0, sp, #64	; 0x40
    85d4:	4698      	mov	r8, r3
    85d6:	f000 fa46 	bl	8a66 <memset>
    85da:	4621      	mov	r1, r4
    85dc:	2280      	movs	r2, #128	; 0x80
    85de:	a82e      	add	r0, sp, #184	; 0xb8
    85e0:	942d      	str	r4, [sp, #180]	; 0xb4
    85e2:	f000 fa40 	bl	8a66 <memset>
    85e6:	2384      	movs	r3, #132	; 0x84
    85e8:	f5b6 6f7f 	cmp.w	r6, #4080	; 0xff0
    85ec:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
    85f0:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
    85f4:	9306      	str	r3, [sp, #24]
    85f6:	d873      	bhi.n	86e0 <kmu_derive_cmac+0x124>
    85f8:	ab06      	add	r3, sp, #24
    85fa:	ac2d      	add	r4, sp, #180	; 0xb4
    85fc:	9301      	str	r3, [sp, #4]
    85fe:	4641      	mov	r1, r8
    8600:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
    8604:	4638      	mov	r0, r7
    8606:	9602      	str	r6, [sp, #8]
    8608:	9400      	str	r4, [sp, #0]
    860a:	f000 f87d 	bl	8708 <UtilCmacBuildDataForDerivation>
    860e:	2800      	cmp	r0, #0
    8610:	d16d      	bne.n	86ee <kmu_derive_cmac+0x132>
    8612:	2200      	movs	r2, #0
    8614:	2301      	movs	r3, #1
    8616:	2101      	movs	r1, #1
    8618:	2707      	movs	r7, #7
    861a:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
    861e:	4a36      	ldr	r2, [pc, #216]	; (86f8 <kmu_derive_cmac+0x13c>)
    8620:	00eb      	lsls	r3, r5, #3
    8622:	9520      	str	r5, [sp, #128]	; 0x80
    8624:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    8628:	440d      	add	r5, r1
    862a:	e9cd a71c 	strd	sl, r7, [sp, #112]	; 0x70
    862e:	901e      	str	r0, [sp, #120]	; 0x78
    8630:	9128      	str	r1, [sp, #160]	; 0xa0
    8632:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
    8636:	f8c2 5500 	str.w	r5, [r2, #1280]	; 0x500
    863a:	681b      	ldr	r3, [r3, #0]
    863c:	f3bf 8f4f 	dsb	sy
    8640:	9307      	str	r3, [sp, #28]
    8642:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    8646:	9a07      	ldr	r2, [sp, #28]
    8648:	4b2c      	ldr	r3, [pc, #176]	; (86fc <kmu_derive_cmac+0x140>)
    864a:	429a      	cmp	r2, r3
    864c:	d142      	bne.n	86d4 <kmu_derive_cmac+0x118>
    864e:	2203      	movs	r2, #3
    8650:	f10d 0317 	add.w	r3, sp, #23
    8654:	701a      	strb	r2, [r3, #0]
    8656:	781b      	ldrb	r3, [r3, #0]
    8658:	2110      	movs	r1, #16
    865a:	a810      	add	r0, sp, #64	; 0x40
    865c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    8660:	f7ff f820 	bl	76a4 <CC_PalMemSetZeroPlat>
    8664:	2210      	movs	r2, #16
    8666:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    866a:	9200      	str	r2, [sp, #0]
    866c:	4620      	mov	r0, r4
    866e:	9906      	ldr	r1, [sp, #24]
    8670:	ab0c      	add	r3, sp, #48	; 0x30
    8672:	aa08      	add	r2, sp, #32
    8674:	f8cd 8004 	str.w	r8, [sp, #4]
    8678:	f7ff f8ec 	bl	7854 <SetDataBuffersInfo>
    867c:	4607      	mov	r7, r0
    867e:	bb00      	cbnz	r0, 86c2 <kmu_derive_cmac+0x106>
    8680:	2401      	movs	r4, #1
    8682:	e010      	b.n	86a6 <kmu_derive_cmac+0xea>
    8684:	2e10      	cmp	r6, #16
    8686:	4635      	mov	r5, r6
    8688:	bf28      	it	cs
    868a:	2510      	movcs	r5, #16
    868c:	a910      	add	r1, sp, #64	; 0x40
    868e:	462a      	mov	r2, r5
    8690:	f7ff f804 	bl	769c <CC_PalMemCopyPlat>
    8694:	2110      	movs	r1, #16
    8696:	a810      	add	r0, sp, #64	; 0x40
    8698:	f7ff f804 	bl	76a4 <CC_PalMemSetZeroPlat>
    869c:	3401      	adds	r4, #1
    869e:	1b76      	subs	r6, r6, r5
    86a0:	442f      	add	r7, r5
    86a2:	b2e4      	uxtb	r4, r4
    86a4:	d021      	beq.n	86ea <kmu_derive_cmac+0x12e>
    86a6:	9b06      	ldr	r3, [sp, #24]
    86a8:	4642      	mov	r2, r8
    86aa:	a908      	add	r1, sp, #32
    86ac:	a810      	add	r0, sp, #64	; 0x40
    86ae:	f88d 40b4 	strb.w	r4, [sp, #180]	; 0xb4
    86b2:	f7ff fd5f 	bl	8174 <FinishAesDrv>
    86b6:	4603      	mov	r3, r0
    86b8:	eb09 0007 	add.w	r0, r9, r7
    86bc:	2b00      	cmp	r3, #0
    86be:	d0e1      	beq.n	8684 <kmu_derive_cmac+0xc8>
    86c0:	461f      	mov	r7, r3
    86c2:	a810      	add	r0, sp, #64	; 0x40
    86c4:	2274      	movs	r2, #116	; 0x74
    86c6:	2100      	movs	r1, #0
    86c8:	f7fe ffea 	bl	76a0 <CC_PalMemSetPlat>
    86cc:	4638      	mov	r0, r7
    86ce:	b04e      	add	sp, #312	; 0x138
    86d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    86d4:	2202      	movs	r2, #2
    86d6:	f10d 0317 	add.w	r3, sp, #23
    86da:	f88d 2017 	strb.w	r2, [sp, #23]
    86de:	e7ba      	b.n	8656 <kmu_derive_cmac+0x9a>
    86e0:	4f07      	ldr	r7, [pc, #28]	; (8700 <kmu_derive_cmac+0x144>)
    86e2:	4638      	mov	r0, r7
    86e4:	b04e      	add	sp, #312	; 0x138
    86e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    86ea:	4637      	mov	r7, r6
    86ec:	e7e9      	b.n	86c2 <kmu_derive_cmac+0x106>
    86ee:	4f05      	ldr	r7, [pc, #20]	; (8704 <kmu_derive_cmac+0x148>)
    86f0:	4638      	mov	r0, r7
    86f2:	b04e      	add	sp, #312	; 0x138
    86f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    86f8:	50039000 	.word	0x50039000
    86fc:	50841a50 	.word	0x50841a50
    8700:	00f1000f 	.word	0x00f1000f
    8704:	00f1000e 	.word	0x00f1000e

00008708 <UtilCmacBuildDataForDerivation>:
    8708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    870c:	2600      	movs	r6, #0
    870e:	b082      	sub	sp, #8
    8710:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    8712:	9601      	str	r6, [sp, #4]
    8714:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
    8718:	d83b      	bhi.n	8792 <UtilCmacBuildDataForDerivation+0x8a>
    871a:	00ee      	lsls	r6, r5, #3
    871c:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    8720:	461f      	mov	r7, r3
    8722:	bf34      	ite	cc
    8724:	2303      	movcc	r3, #3
    8726:	2304      	movcs	r3, #4
    8728:	1e4d      	subs	r5, r1, #1
    872a:	2d3f      	cmp	r5, #63	; 0x3f
    872c:	460c      	mov	r4, r1
    872e:	9300      	str	r3, [sp, #0]
    8730:	d82f      	bhi.n	8792 <UtilCmacBuildDataForDerivation+0x8a>
    8732:	b370      	cbz	r0, 8792 <UtilCmacBuildDataForDerivation+0x8a>
    8734:	4690      	mov	r8, r2
    8736:	b117      	cbz	r7, 873e <UtilCmacBuildDataForDerivation+0x36>
    8738:	b35a      	cbz	r2, 8792 <UtilCmacBuildDataForDerivation+0x8a>
    873a:	2f40      	cmp	r7, #64	; 0x40
    873c:	d829      	bhi.n	8792 <UtilCmacBuildDataForDerivation+0x8a>
    873e:	9a08      	ldr	r2, [sp, #32]
    8740:	b33a      	cbz	r2, 8792 <UtilCmacBuildDataForDerivation+0x8a>
    8742:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8744:	6811      	ldr	r1, [r2, #0]
    8746:	b321      	cbz	r1, 8792 <UtilCmacBuildDataForDerivation+0x8a>
    8748:	19e2      	adds	r2, r4, r7
    874a:	4413      	add	r3, r2
    874c:	4299      	cmp	r1, r3
    874e:	d320      	bcc.n	8792 <UtilCmacBuildDataForDerivation+0x8a>
    8750:	9b08      	ldr	r3, [sp, #32]
    8752:	4622      	mov	r2, r4
    8754:	4601      	mov	r1, r0
    8756:	1c58      	adds	r0, r3, #1
    8758:	f7fe ffa0 	bl	769c <CC_PalMemCopyPlat>
    875c:	2200      	movs	r2, #0
    875e:	9b08      	ldr	r3, [sp, #32]
    8760:	4423      	add	r3, r4
    8762:	705a      	strb	r2, [r3, #1]
    8764:	3402      	adds	r4, #2
    8766:	bb07      	cbnz	r7, 87aa <UtilCmacBuildDataForDerivation+0xa2>
    8768:	2eff      	cmp	r6, #255	; 0xff
    876a:	9600      	str	r6, [sp, #0]
    876c:	d915      	bls.n	879a <UtilCmacBuildDataForDerivation+0x92>
    876e:	9b08      	ldr	r3, [sp, #32]
    8770:	0235      	lsls	r5, r6, #8
    8772:	b2ad      	uxth	r5, r5
    8774:	1918      	adds	r0, r3, r4
    8776:	2202      	movs	r2, #2
    8778:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
    877c:	a901      	add	r1, sp, #4
    877e:	9501      	str	r5, [sp, #4]
    8780:	f7fe ff8c 	bl	769c <CC_PalMemCopyPlat>
    8784:	3402      	adds	r4, #2
    8786:	2000      	movs	r0, #0
    8788:	9b09      	ldr	r3, [sp, #36]	; 0x24
    878a:	601c      	str	r4, [r3, #0]
    878c:	b002      	add	sp, #8
    878e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8792:	480a      	ldr	r0, [pc, #40]	; (87bc <UtilCmacBuildDataForDerivation+0xb4>)
    8794:	b002      	add	sp, #8
    8796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    879a:	9b08      	ldr	r3, [sp, #32]
    879c:	2201      	movs	r2, #1
    879e:	1918      	adds	r0, r3, r4
    87a0:	4669      	mov	r1, sp
    87a2:	f7fe ff7b 	bl	769c <CC_PalMemCopyPlat>
    87a6:	3401      	adds	r4, #1
    87a8:	e7ed      	b.n	8786 <UtilCmacBuildDataForDerivation+0x7e>
    87aa:	9b08      	ldr	r3, [sp, #32]
    87ac:	4641      	mov	r1, r8
    87ae:	1918      	adds	r0, r3, r4
    87b0:	463a      	mov	r2, r7
    87b2:	f7fe ff73 	bl	769c <CC_PalMemCopyPlat>
    87b6:	443c      	add	r4, r7
    87b8:	e7d6      	b.n	8768 <UtilCmacBuildDataForDerivation+0x60>
    87ba:	bf00      	nop
    87bc:	80000006 	.word	0x80000006

000087c0 <CC_PalDataBufferAttrGet>:
    87c0:	2000      	movs	r0, #0
    87c2:	7018      	strb	r0, [r3, #0]
    87c4:	4770      	bx	lr
    87c6:	bf00      	nop

000087c8 <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
    87c8:	b508      	push	{r3, lr}
	spm_config();
    87ca:	f7f8 fcf5 	bl	11b8 <spm_config>
	spm_jump();
}
    87ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
    87d2:	f7f8 bc91 	b.w	10f8 <spm_jump>

000087d6 <arch_printk_char_out>:
}
    87d6:	2000      	movs	r0, #0
    87d8:	4770      	bx	lr

000087da <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    87da:	b40f      	push	{r0, r1, r2, r3}
    87dc:	b507      	push	{r0, r1, r2, lr}
    87de:	a904      	add	r1, sp, #16
    87e0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    87e4:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    87e6:	f7f7 fecb 	bl	580 <vprintk>
	}
	va_end(ap);
}
    87ea:	b003      	add	sp, #12
    87ec:	f85d eb04 	ldr.w	lr, [sp], #4
    87f0:	b004      	add	sp, #16
    87f2:	4770      	bx	lr

000087f4 <onoff_manager_init>:
	return rv;
}

int onoff_manager_init(struct onoff_manager *mgr,
		       const struct onoff_transitions *transitions)
{
    87f4:	b538      	push	{r3, r4, r5, lr}
    87f6:	460c      	mov	r4, r1
	if ((mgr == NULL)
    87f8:	4605      	mov	r5, r0
    87fa:	b158      	cbz	r0, 8814 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    87fc:	b151      	cbz	r1, 8814 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    87fe:	680b      	ldr	r3, [r1, #0]
    8800:	b143      	cbz	r3, 8814 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    8802:	684b      	ldr	r3, [r1, #4]
    8804:	b133      	cbz	r3, 8814 <onoff_manager_init+0x20>
		return -EINVAL;
	}

	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    8806:	2220      	movs	r2, #32
    8808:	2100      	movs	r1, #0
    880a:	f000 f92c 	bl	8a66 <memset>

	return 0;
    880e:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    8810:	612c      	str	r4, [r5, #16]
}
    8812:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    8814:	f06f 0015 	mvn.w	r0, #21
    8818:	e7fb      	b.n	8812 <onoff_manager_init+0x1e>

0000881a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    881a:	4604      	mov	r4, r0
    881c:	b508      	push	{r3, lr}
    881e:	4608      	mov	r0, r1
    8820:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    8822:	461a      	mov	r2, r3
    8824:	47a0      	blx	r4
	return z_impl_z_current_get();
    8826:	f7fc fe95 	bl	5554 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    882a:	f7f9 fb91 	bl	1f50 <z_impl_k_thread_abort>

0000882e <encode_uint>:
{
    882e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8832:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    8834:	78d3      	ldrb	r3, [r2, #3]
{
    8836:	4614      	mov	r4, r2
	switch (specifier) {
    8838:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    883a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    883e:	4606      	mov	r6, r0
    8840:	460f      	mov	r7, r1
    8842:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    8844:	d02d      	beq.n	88a2 <encode_uint+0x74>
    8846:	d828      	bhi.n	889a <encode_uint+0x6c>
		return 16;
    8848:	2b58      	cmp	r3, #88	; 0x58
    884a:	bf14      	ite	ne
    884c:	250a      	movne	r5, #10
    884e:	2510      	moveq	r5, #16
		unsigned int lsv = (unsigned int)(value % radix);
    8850:	46aa      	mov	sl, r5
    8852:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
    8856:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    885a:	4652      	mov	r2, sl
    885c:	465b      	mov	r3, fp
    885e:	4630      	mov	r0, r6
    8860:	4639      	mov	r1, r7
    8862:	f7f7 fceb 	bl	23c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8866:	2a09      	cmp	r2, #9
    8868:	b2d3      	uxtb	r3, r2
    886a:	d81f      	bhi.n	88ac <encode_uint+0x7e>
    886c:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    886e:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8870:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    8872:	bf08      	it	eq
    8874:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8876:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    887a:	d301      	bcc.n	8880 <encode_uint+0x52>
    887c:	45c8      	cmp	r8, r9
    887e:	d812      	bhi.n	88a6 <encode_uint+0x78>
	if (conv->flag_hash) {
    8880:	7823      	ldrb	r3, [r4, #0]
    8882:	069b      	lsls	r3, r3, #26
    8884:	d505      	bpl.n	8892 <encode_uint+0x64>
		if (radix == 8) {
    8886:	2d08      	cmp	r5, #8
    8888:	d116      	bne.n	88b8 <encode_uint+0x8a>
			conv->altform_0 = true;
    888a:	78a3      	ldrb	r3, [r4, #2]
    888c:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    8890:	70a3      	strb	r3, [r4, #2]
}
    8892:	4640      	mov	r0, r8
    8894:	b003      	add	sp, #12
    8896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    889a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    889e:	2b70      	cmp	r3, #112	; 0x70
    88a0:	e7d3      	b.n	884a <encode_uint+0x1c>
	switch (specifier) {
    88a2:	2508      	movs	r5, #8
    88a4:	e7d4      	b.n	8850 <encode_uint+0x22>
		value /= radix;
    88a6:	4606      	mov	r6, r0
    88a8:	460f      	mov	r7, r1
    88aa:	e7d6      	b.n	885a <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    88ac:	9a01      	ldr	r2, [sp, #4]
    88ae:	2a19      	cmp	r2, #25
    88b0:	bf94      	ite	ls
    88b2:	3337      	addls	r3, #55	; 0x37
    88b4:	3357      	addhi	r3, #87	; 0x57
    88b6:	e7da      	b.n	886e <encode_uint+0x40>
		} else if (radix == 16) {
    88b8:	2d10      	cmp	r5, #16
    88ba:	d1ea      	bne.n	8892 <encode_uint+0x64>
			conv->altform_0c = true;
    88bc:	78a3      	ldrb	r3, [r4, #2]
    88be:	f043 0310 	orr.w	r3, r3, #16
    88c2:	e7e5      	b.n	8890 <encode_uint+0x62>

000088c4 <outs>:
{
    88c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    88c8:	4607      	mov	r7, r0
    88ca:	4688      	mov	r8, r1
    88cc:	4615      	mov	r5, r2
    88ce:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    88d0:	4614      	mov	r4, r2
    88d2:	42b4      	cmp	r4, r6
    88d4:	eba4 0005 	sub.w	r0, r4, r5
    88d8:	d302      	bcc.n	88e0 <outs+0x1c>
    88da:	b93e      	cbnz	r6, 88ec <outs+0x28>
    88dc:	7823      	ldrb	r3, [r4, #0]
    88de:	b12b      	cbz	r3, 88ec <outs+0x28>
		int rc = out((int)*sp++, ctx);
    88e0:	4641      	mov	r1, r8
    88e2:	f814 0b01 	ldrb.w	r0, [r4], #1
    88e6:	47b8      	blx	r7
		if (rc < 0) {
    88e8:	2800      	cmp	r0, #0
    88ea:	daf2      	bge.n	88d2 <outs+0xe>
}
    88ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000088f0 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    88f0:	4040      	eors	r0, r0
    88f2:	f380 8811 	msr	BASEPRI, r0
    88f6:	f04f 0004 	mov.w	r0, #4
    88fa:	df02      	svc	2
}
    88fc:	4770      	bx	lr

000088fe <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    88fe:	4770      	bx	lr

00008900 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    8900:	b084      	sub	sp, #16
    8902:	ab04      	add	r3, sp, #16
    8904:	e903 0007 	stmdb	r3, {r0, r1, r2}
    8908:	2300      	movs	r3, #0
    890a:	f383 8811 	msr	BASEPRI, r3
    890e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    8912:	b004      	add	sp, #16
    8914:	4770      	bx	lr

00008916 <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
    8916:	b40f      	push	{r0, r1, r2, r3}
    8918:	b507      	push	{r0, r1, r2, lr}
    891a:	a904      	add	r1, sp, #16
    891c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    8920:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    8922:	f7f7 fe2d 	bl	580 <vprintk>
	va_end(ap);
}
    8926:	b003      	add	sp, #12
    8928:	f85d eb04 	ldr.w	lr, [sp], #4
    892c:	b004      	add	sp, #16
    892e:	4770      	bx	lr

00008930 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    8930:	2200      	movs	r2, #0
    8932:	e9c0 2200 	strd	r2, r2, [r0]
    8936:	6082      	str	r2, [r0, #8]
}
    8938:	4770      	bx	lr

0000893a <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    893a:	2000      	movs	r0, #0
{
    893c:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    893e:	f7f8 f9ed 	bl	d1c <sys_reboot>

00008942 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    8942:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    8944:	6800      	ldr	r0, [r0, #0]
    8946:	f7f8 be9b 	b.w	1680 <z_arm_fatal_error>

0000894a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    894a:	2100      	movs	r1, #0
    894c:	2001      	movs	r0, #1
    894e:	f7f8 be97 	b.w	1680 <z_arm_fatal_error>

00008952 <irq_target_state_set>:
 *
 * @return The resulting target state of the given IRQ
 */
irq_target_state_t irq_target_state_set(unsigned int irq,
	irq_target_state_t irq_target_state)
{
    8952:	4602      	mov	r2, r0
    8954:	b243      	sxtb	r3, r0
	uint32_t result;

	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
    8956:	4608      	mov	r0, r1
    8958:	b9c1      	cbnz	r1, 898c <irq_target_state_set+0x3a>
  if ((int32_t)(IRQn) >= 0)
    895a:	2b00      	cmp	r3, #0
    895c:	db27      	blt.n	89ae <irq_target_state_set+0x5c>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    895e:	2001      	movs	r0, #1
    8960:	095b      	lsrs	r3, r3, #5
    8962:	009b      	lsls	r3, r3, #2
    8964:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    8968:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    896c:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
    8970:	f002 021f 	and.w	r2, r2, #31
    8974:	4090      	lsls	r0, r2
    8976:	ea21 0100 	bic.w	r1, r1, r0
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    897a:	f8c3 1280 	str.w	r1, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
    897e:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
    8982:	40d0      	lsrs	r0, r2
    8984:	f000 0001 	and.w	r0, r0, #1
	} else {
		/* Set target to Non-Secure */
		result = NVIC_SetTargetState(irq);
	}

	if (result) {
    8988:	b2c0      	uxtb	r0, r0
    898a:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
    898c:	2b00      	cmp	r3, #0
    898e:	db0d      	blt.n	89ac <irq_target_state_set+0x5a>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    8990:	2101      	movs	r1, #1
    8992:	095b      	lsrs	r3, r3, #5
    8994:	009b      	lsls	r3, r3, #2
    8996:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    899a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    899e:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
    89a2:	f002 021f 	and.w	r2, r2, #31
    89a6:	4091      	lsls	r1, r2
    89a8:	4301      	orrs	r1, r0
    89aa:	e7e6      	b.n	897a <irq_target_state_set+0x28>
		return IRQ_TARGET_STATE_NON_SECURE;
	} else {
		return IRQ_TARGET_STATE_SECURE;
    89ac:	2000      	movs	r0, #0
	}
}
    89ae:	4770      	bx	lr

000089b0 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    89b0:	b508      	push	{r3, lr}
	handler();
    89b2:	f7f8 fed7 	bl	1764 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    89b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    89ba:	f7f8 bf99 	b.w	18f0 <z_arm_exc_exit>

000089be <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    89be:	6e43      	ldr	r3, [r0, #100]	; 0x64
    89c0:	f383 880b 	msr	PSPLIM, r3
}
    89c4:	4770      	bx	lr

000089c6 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    89c6:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    89ca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    89ce:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    89d0:	bf08      	it	eq
    89d2:	f06f 0015 	mvneq.w	r0, #21
    89d6:	4770      	bx	lr

000089d8 <arm_cmse_addr_is_secure>:
    89d8:	e840 f000 	tt	r0, r0
int arm_cmse_addr_is_secure(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	return addr_info.flags.secure;
}
    89dc:	f3c0 5080 	ubfx	r0, r0, #22, #1
    89e0:	4770      	bx	lr

000089e2 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    89e2:	4603      	mov	r3, r0
	size_t n = 0;
    89e4:	2000      	movs	r0, #0

	while (*s != '\0') {
    89e6:	5c1a      	ldrb	r2, [r3, r0]
    89e8:	b902      	cbnz	r2, 89ec <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    89ea:	4770      	bx	lr
		n++;
    89ec:	3001      	adds	r0, #1
    89ee:	e7fa      	b.n	89e6 <strlen+0x4>

000089f0 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    89f0:	4603      	mov	r3, r0
	size_t n = 0;
    89f2:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    89f4:	5c1a      	ldrb	r2, [r3, r0]
    89f6:	b10a      	cbz	r2, 89fc <strnlen+0xc>
    89f8:	4288      	cmp	r0, r1
    89fa:	d100      	bne.n	89fe <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    89fc:	4770      	bx	lr
		n++;
    89fe:	3001      	adds	r0, #1
    8a00:	e7f8      	b.n	89f4 <strnlen+0x4>

00008a02 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    8a02:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    8a04:	b15a      	cbz	r2, 8a1e <memcmp+0x1c>
    8a06:	3901      	subs	r1, #1
    8a08:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    8a0a:	f810 2b01 	ldrb.w	r2, [r0], #1
    8a0e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    8a12:	42a0      	cmp	r0, r4
    8a14:	d001      	beq.n	8a1a <memcmp+0x18>
    8a16:	429a      	cmp	r2, r3
    8a18:	d0f7      	beq.n	8a0a <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    8a1a:	1ad0      	subs	r0, r2, r3
}
    8a1c:	bd10      	pop	{r4, pc}
		return 0;
    8a1e:	4610      	mov	r0, r2
    8a20:	e7fc      	b.n	8a1c <memcmp+0x1a>

00008a22 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    8a22:	1a43      	subs	r3, r0, r1
    8a24:	4293      	cmp	r3, r2
{
    8a26:	b510      	push	{r4, lr}
    8a28:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    8a2c:	d308      	bcc.n	8a40 <memmove+0x1e>
	char *dest = d;
    8a2e:	4602      	mov	r2, r0
    8a30:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    8a32:	429a      	cmp	r2, r3
    8a34:	d00b      	beq.n	8a4e <memmove+0x2c>
			*dest = *src;
    8a36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    8a3a:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    8a3e:	e7f8      	b.n	8a32 <memmove+0x10>
    8a40:	440a      	add	r2, r1
			dest[n] = src[n];
    8a42:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    8a46:	428a      	cmp	r2, r1
			dest[n] = src[n];
    8a48:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    8a4c:	d1f9      	bne.n	8a42 <memmove+0x20>
		}
	}

	return d;
}
    8a4e:	bd10      	pop	{r4, pc}

00008a50 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    8a50:	b510      	push	{r4, lr}
    8a52:	1e43      	subs	r3, r0, #1
    8a54:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    8a56:	4291      	cmp	r1, r2
    8a58:	d100      	bne.n	8a5c <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    8a5a:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    8a5c:	f811 4b01 	ldrb.w	r4, [r1], #1
    8a60:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    8a64:	e7f7      	b.n	8a56 <memcpy+0x6>

00008a66 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    8a66:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    8a68:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    8a6a:	4402      	add	r2, r0
    8a6c:	4293      	cmp	r3, r2
    8a6e:	d100      	bne.n	8a72 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    8a70:	4770      	bx	lr
		*(d_byte++) = c_byte;
    8a72:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    8a76:	e7f9      	b.n	8a6c <memset+0x6>

00008a78 <_stdout_hook_default>:
}
    8a78:	f04f 30ff 	mov.w	r0, #4294967295
    8a7c:	4770      	bx	lr

00008a7e <set_starting_state>:
{
    8a7e:	b510      	push	{r4, lr}
	__asm__ volatile(
    8a80:	f04f 0320 	mov.w	r3, #32
    8a84:	f3ef 8211 	mrs	r2, BASEPRI
    8a88:	f383 8812 	msr	BASEPRI_MAX, r3
    8a8c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    8a90:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    8a92:	f003 0407 	and.w	r4, r3, #7
    8a96:	2c01      	cmp	r4, #1
    8a98:	d106      	bne.n	8aa8 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    8a9a:	6001      	str	r1, [r0, #0]
	int err = 0;
    8a9c:	2000      	movs	r0, #0
	__asm__ volatile(
    8a9e:	f382 8811 	msr	BASEPRI, r2
    8aa2:	f3bf 8f6f 	isb	sy
}
    8aa6:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    8aa8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    8aac:	428b      	cmp	r3, r1
		err = -EALREADY;
    8aae:	bf14      	ite	ne
    8ab0:	f04f 30ff 	movne.w	r0, #4294967295
    8ab4:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    8ab8:	e7f1      	b.n	8a9e <set_starting_state+0x20>

00008aba <set_on_state>:
	__asm__ volatile(
    8aba:	f04f 0320 	mov.w	r3, #32
    8abe:	f3ef 8211 	mrs	r2, BASEPRI
    8ac2:	f383 8812 	msr	BASEPRI_MAX, r3
    8ac6:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    8aca:	6803      	ldr	r3, [r0, #0]
    8acc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8ad0:	f043 0302 	orr.w	r3, r3, #2
    8ad4:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    8ad6:	f382 8811 	msr	BASEPRI, r2
    8ada:	f3bf 8f6f 	isb	sy
}
    8ade:	4770      	bx	lr

00008ae0 <onoff_started_callback>:
	return &data->mgr[type];
    8ae0:	6900      	ldr	r0, [r0, #16]
    8ae2:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    8ae4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    8ae8:	2100      	movs	r1, #0
    8aea:	4710      	bx	r2

00008aec <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    8aec:	2000      	movs	r0, #0
    8aee:	f7fa bc9b 	b.w	3428 <nrfx_clock_start>

00008af2 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    8af2:	2000      	movs	r0, #0
    8af4:	f7fa bce8 	b.w	34c8 <nrfx_clock_stop>

00008af8 <api_stop>:
	return stop(dev, subsys, CTX_API);
    8af8:	2280      	movs	r2, #128	; 0x80
    8afa:	f7f9 bce3 	b.w	24c4 <stop>

00008afe <blocking_start_callback>:
{
    8afe:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    8b00:	f7fb bdc8 	b.w	4694 <z_impl_k_sem_give>

00008b04 <api_start>:
{
    8b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
    8b08:	240c      	movs	r4, #12
    8b0a:	b2c9      	uxtb	r1, r1
    8b0c:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    8b0e:	6905      	ldr	r5, [r0, #16]
{
    8b10:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    8b12:	f104 0048 	add.w	r0, r4, #72	; 0x48
    8b16:	2180      	movs	r1, #128	; 0x80
    8b18:	4428      	add	r0, r5
{
    8b1a:	4690      	mov	r8, r2
    8b1c:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
    8b1e:	f7ff ffae 	bl	8a7e <set_starting_state>
	if (err < 0) {
    8b22:	2800      	cmp	r0, #0
    8b24:	db06      	blt.n	8b34 <api_start+0x30>
	subdata->cb = cb;
    8b26:	4425      	add	r5, r4
	subdata->user_data = user_data;
    8b28:	e9c5 8710 	strd	r8, r7, [r5, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    8b2c:	6873      	ldr	r3, [r6, #4]
    8b2e:	591b      	ldr	r3, [r3, r4]
    8b30:	4798      	blx	r3
	return 0;
    8b32:	2000      	movs	r0, #0
}
    8b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008b38 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8b38:	6843      	ldr	r3, [r0, #4]
}
    8b3a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8b3c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    8b3e:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    8b40:	600b      	str	r3, [r1, #0]
}
    8b42:	4770      	bx	lr

00008b44 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8b44:	6843      	ldr	r3, [r0, #4]
    8b46:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    8b48:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    8b4a:	4042      	eors	r2, r0
    8b4c:	400a      	ands	r2, r1
    8b4e:	4042      	eors	r2, r0
    p_reg->OUT = value;
    8b50:	605a      	str	r2, [r3, #4]
}
    8b52:	2000      	movs	r0, #0
    8b54:	4770      	bx	lr

00008b56 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8b56:	6843      	ldr	r3, [r0, #4]
}
    8b58:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8b5a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    8b5c:	6099      	str	r1, [r3, #8]
}
    8b5e:	4770      	bx	lr

00008b60 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8b60:	6843      	ldr	r3, [r0, #4]
}
    8b62:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8b64:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    8b66:	60d9      	str	r1, [r3, #12]
}
    8b68:	4770      	bx	lr

00008b6a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8b6a:	6843      	ldr	r3, [r0, #4]
}
    8b6c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8b6e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    8b70:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    8b72:	404b      	eors	r3, r1
    p_reg->OUT = value;
    8b74:	6053      	str	r3, [r2, #4]
}
    8b76:	4770      	bx	lr

00008b78 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    8b78:	6843      	ldr	r3, [r0, #4]
    8b7a:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    8b7c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    8b80:	05d1      	lsls	r1, r2, #23
    8b82:	d518      	bpl.n	8bb6 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8b84:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    8b88:	b1aa      	cbz	r2, 8bb6 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    8b8a:	f04f 0120 	mov.w	r1, #32
    8b8e:	f3ef 8211 	mrs	r2, BASEPRI
    8b92:	f381 8812 	msr	BASEPRI_MAX, r1
    8b96:	f3bf 8f6f 	isb	sy
    8b9a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    8b9e:	b131      	cbz	r1, 8bae <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8ba0:	2100      	movs	r1, #0
    8ba2:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    8ba6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8baa:	2101      	movs	r1, #1
    8bac:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    8bae:	f382 8811 	msr	BASEPRI, r2
    8bb2:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    8bb6:	6842      	ldr	r2, [r0, #4]
    8bb8:	6852      	ldr	r2, [r2, #4]
    8bba:	06d2      	lsls	r2, r2, #27
    8bbc:	d515      	bpl.n	8bea <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    8bbe:	f04f 0120 	mov.w	r1, #32
    8bc2:	f3ef 8211 	mrs	r2, BASEPRI
    8bc6:	f381 8812 	msr	BASEPRI_MAX, r1
    8bca:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8bce:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    8bd2:	b111      	cbz	r1, 8bda <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    8bd4:	2100      	movs	r1, #0
    8bd6:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    8bda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    8bde:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    8be2:	f382 8811 	msr	BASEPRI, r2
    8be6:	f3bf 8f6f 	isb	sy
}
    8bea:	4770      	bx	lr

00008bec <uarte_nrfx_config_get>:
{
    8bec:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    8bee:	6902      	ldr	r2, [r0, #16]
    8bf0:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    8bf4:	e883 0003 	stmia.w	r3, {r0, r1}
}
    8bf8:	2000      	movs	r0, #0
    8bfa:	4770      	bx	lr

00008bfc <uarte_nrfx_err_check>:
	return config->uarte_regs;
    8bfc:	6843      	ldr	r3, [r0, #4]
    8bfe:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    8c00:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    8c04:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    8c08:	4770      	bx	lr

00008c0a <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    8c0a:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    8c0c:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8c0e:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    8c12:	b940      	cbnz	r0, 8c26 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    8c14:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    8c16:	0792      	lsls	r2, r2, #30
    8c18:	d406      	bmi.n	8c28 <is_tx_ready+0x1e>
    8c1a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    8c1e:	3800      	subs	r0, #0
    8c20:	bf18      	it	ne
    8c22:	2001      	movne	r0, #1
    8c24:	4770      	bx	lr
    8c26:	2001      	movs	r0, #1
}
    8c28:	4770      	bx	lr

00008c2a <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    8c2a:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    8c2c:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    8c2e:	681b      	ldr	r3, [r3, #0]
    8c30:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    8c34:	b148      	cbz	r0, 8c4a <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8c36:	2000      	movs	r0, #0
	*c = data->rx_data;
    8c38:	7c52      	ldrb	r2, [r2, #17]
    8c3a:	700a      	strb	r2, [r1, #0]
    8c3c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    8c40:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8c44:	2201      	movs	r2, #1
    8c46:	601a      	str	r2, [r3, #0]
	return 0;
    8c48:	4770      	bx	lr
		return -1;
    8c4a:	f04f 30ff 	mov.w	r0, #4294967295
}
    8c4e:	4770      	bx	lr

00008c50 <uarte_instance_init.isra.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    8c50:	2300      	movs	r3, #0
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    8c52:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    8c56:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    8c5a:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
    8c5c:	f8d8 4000 	ldr.w	r4, [r8]
static int uarte_instance_init(const struct device *dev,
    8c60:	4606      	mov	r6, r0
    8c62:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    8c66:	6038      	str	r0, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    8c68:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    8c6a:	68eb      	ldr	r3, [r5, #12]
    8c6c:	1c59      	adds	r1, r3, #1
    8c6e:	d011      	beq.n	8c94 <uarte_instance_init.isra.0+0x44>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8c70:	a801      	add	r0, sp, #4
    8c72:	9301      	str	r3, [sp, #4]
    8c74:	f7f9 fff4 	bl	2c60 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    8c78:	2301      	movs	r3, #1
    8c7a:	9a01      	ldr	r2, [sp, #4]
    8c7c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    8c7e:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
    8c80:	68eb      	ldr	r3, [r5, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8c82:	a801      	add	r0, sp, #4
    8c84:	9301      	str	r3, [sp, #4]
    8c86:	f7f9 ffeb 	bl	2c60 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    8c8a:	2203      	movs	r2, #3
    8c8c:	9b01      	ldr	r3, [sp, #4]
    8c8e:	3380      	adds	r3, #128	; 0x80
    8c90:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    8c94:	692b      	ldr	r3, [r5, #16]
    8c96:	1c5a      	adds	r2, r3, #1
    8c98:	d010      	beq.n	8cbc <uarte_instance_init.isra.0+0x6c>
			nrf_gpio_cfg_input(cfg->rx_pin,
    8c9a:	7f2a      	ldrb	r2, [r5, #28]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8c9c:	a801      	add	r0, sp, #4
    8c9e:	2a00      	cmp	r2, #0
    8ca0:	bf14      	ite	ne
    8ca2:	f04f 0903 	movne.w	r9, #3
    8ca6:	f04f 0900 	moveq.w	r9, #0
    nrf_gpio_cfg(
    8caa:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8cac:	f7f9 ffd8 	bl	2c60 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    8cb0:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    8cb2:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    8cb6:	3380      	adds	r3, #128	; 0x80
    8cb8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    8cbc:	696b      	ldr	r3, [r5, #20]
    8cbe:	1c58      	adds	r0, r3, #1
    8cc0:	d011      	beq.n	8ce6 <uarte_instance_init.isra.0+0x96>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8cc2:	a801      	add	r0, sp, #4
    8cc4:	9301      	str	r3, [sp, #4]
    8cc6:	f7f9 ffcb 	bl	2c60 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    8cca:	2301      	movs	r3, #1
    8ccc:	9a01      	ldr	r2, [sp, #4]
    8cce:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    8cd0:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
    8cd2:	696b      	ldr	r3, [r5, #20]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8cd4:	a801      	add	r0, sp, #4
    8cd6:	9301      	str	r3, [sp, #4]
    8cd8:	f7f9 ffc2 	bl	2c60 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    8cdc:	2203      	movs	r2, #3
    8cde:	9b01      	ldr	r3, [sp, #4]
    8ce0:	3380      	adds	r3, #128	; 0x80
    8ce2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    8ce6:	69ab      	ldr	r3, [r5, #24]
    8ce8:	1c59      	adds	r1, r3, #1
    8cea:	d010      	beq.n	8d0e <uarte_instance_init.isra.0+0xbe>
			nrf_gpio_cfg_input(cfg->cts_pin,
    8cec:	7f6a      	ldrb	r2, [r5, #29]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8cee:	a801      	add	r0, sp, #4
    8cf0:	2a00      	cmp	r2, #0
    8cf2:	bf14      	ite	ne
    8cf4:	f04f 0903 	movne.w	r9, #3
    8cf8:	f04f 0900 	moveq.w	r9, #0
    nrf_gpio_cfg(
    8cfc:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8cfe:	f7f9 ffaf 	bl	2c60 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    8d02:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    8d04:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    8d08:	3380      	adds	r3, #128	; 0x80
    8d0a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    8d0e:	682b      	ldr	r3, [r5, #0]
    8d10:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    p_reg->PSEL.TXD = pseltxd;
    8d14:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    8d18:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    8d1c:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
    8d20:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    8d24:	6931      	ldr	r1, [r6, #16]
    8d26:	4630      	mov	r0, r6
    p_reg->PSEL.CTS = pselcts;
    8d28:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    8d2c:	3104      	adds	r1, #4
    8d2e:	f7f9 fee5 	bl	2afc <uarte_nrfx_configure>
	if (err) {
    8d32:	bb40      	cbnz	r0, 8d86 <uarte_instance_init.isra.0+0x136>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    8d34:	2308      	movs	r3, #8
    8d36:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    8d3a:	f898 3008 	ldrb.w	r3, [r8, #8]
    8d3e:	b95b      	cbnz	r3, 8d58 <uarte_instance_init.isra.0+0x108>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8d40:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    8d44:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    8d48:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    8d4c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    8d50:	2301      	movs	r3, #1
    8d52:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8d56:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    8d58:	f8d8 3004 	ldr.w	r3, [r8, #4]

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    8d5c:	3710      	adds	r7, #16
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    8d5e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    8d60:	bf5c      	itt	pl
    8d62:	f44f 7280 	movpl.w	r2, #256	; 0x100
    8d66:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    8d6a:	06db      	lsls	r3, r3, #27
    8d6c:	bf44      	itt	mi
    8d6e:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    8d72:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    8d76:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    8d78:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    8d7c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8d80:	2301      	movs	r3, #1
    8d82:	60a3      	str	r3, [r4, #8]
    8d84:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    8d86:	b003      	add	sp, #12
    8d88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00008d8c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    8d8c:	b510      	push	{r4, lr}
    8d8e:	4604      	mov	r4, r0
    8d90:	2200      	movs	r2, #0
    8d92:	2101      	movs	r1, #1
    8d94:	2008      	movs	r0, #8
    8d96:	f7f8 fcbf 	bl	1718 <z_arm_irq_priority_set>
    8d9a:	2008      	movs	r0, #8
    8d9c:	f7f8 fc9e 	bl	16dc <arch_irq_enable>
    8da0:	4620      	mov	r0, r4
    8da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8da6:	f7ff bf53 	b.w	8c50 <uarte_instance_init.isra.0>

00008daa <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    8daa:	b510      	push	{r4, lr}
    8dac:	4604      	mov	r4, r0
    8dae:	2200      	movs	r2, #0
    8db0:	2101      	movs	r1, #1
    8db2:	2009      	movs	r0, #9
    8db4:	f7f8 fcb0 	bl	1718 <z_arm_irq_priority_set>
    8db8:	2009      	movs	r0, #9
    8dba:	f7f8 fc8f 	bl	16dc <arch_irq_enable>
    8dbe:	4620      	mov	r0, r4
    8dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8dc4:	f7ff bf44 	b.w	8c50 <uarte_instance_init.isra.0>

00008dc8 <entropy_cc3xx_rng_init>:
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
    8dc8:	2200      	movs	r2, #0
{
    8dca:	b508      	push	{r3, lr}
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
    8dcc:	4611      	mov	r1, r2
    8dce:	4610      	mov	r0, r2
    8dd0:	f7fc ff84 	bl	5cdc <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
    8dd4:	2800      	cmp	r0, #0
			return -EINVAL;
		}
	#endif

	return 0;
}
    8dd6:	bf18      	it	ne
    8dd8:	f06f 0015 	mvnne.w	r0, #21
    8ddc:	bd08      	pop	{r3, pc}

00008dde <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
    8dde:	f7fc bf25 	b.w	5c2c <nrf_cc3xx_platform_init>

00008de2 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    8de2:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    8de4:	f7f8 fb76 	bl	14d4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    8de8:	f7f8 fc20 	bl	162c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    8dec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
    8df0:	f7fc bf1c 	b.w	5c2c <nrf_cc3xx_platform_init>

00008df4 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    8df4:	4700      	bx	r0

00008df6 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    8df6:	f000 b8cb 	b.w	8f90 <z_impl_k_busy_wait>

00008dfa <nrf_gpio_pin_present_check>:
    switch (port)
    8dfa:	0943      	lsrs	r3, r0, #5
    8dfc:	bf0c      	ite	eq
    8dfe:	f04f 33ff 	moveq.w	r3, #4294967295
    8e02:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    8e04:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8e08:	fa23 f000 	lsr.w	r0, r3, r0
}
    8e0c:	f000 0001 	and.w	r0, r0, #1
    8e10:	4770      	bx	lr

00008e12 <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    8e12:	0080      	lsls	r0, r0, #2
}
    8e14:	f500 7080 	add.w	r0, r0, #256	; 0x100
    8e18:	4770      	bx	lr

00008e1a <nrf_gpio_reconfigure>:
{
    8e1a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8e1e:	4690      	mov	r8, r2
    8e20:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    8e24:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8e26:	a801      	add	r0, sp, #4
{
    8e28:	460e      	mov	r6, r1
    8e2a:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8e2c:	f7fa fc6c 	bl	3708 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8e30:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    8e32:	f1b8 0f00 	cmp.w	r8, #0
    8e36:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    8e3a:	bf14      	ite	ne
    8e3c:	2302      	movne	r3, #2
    8e3e:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    8e40:	2e00      	cmp	r6, #0
    8e42:	bf18      	it	ne
    8e44:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    8e48:	2d00      	cmp	r5, #0
    8e4a:	bf14      	ite	ne
    8e4c:	210c      	movne	r1, #12
    8e4e:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    8e50:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    8e52:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    8e56:	bf14      	ite	ne
    8e58:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    8e5c:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    8e5e:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    8e60:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    8e64:	bf14      	ite	ne
    8e66:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    8e6a:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8e6c:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    8e70:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    8e72:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8e76:	b106      	cbz	r6, 8e7a <nrf_gpio_reconfigure+0x60>
    8e78:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    8e7a:	f1b8 0f00 	cmp.w	r8, #0
    8e7e:	d003      	beq.n	8e88 <nrf_gpio_reconfigure+0x6e>
    8e80:	f898 8000 	ldrb.w	r8, [r8]
    8e84:	ea4f 0848 	mov.w	r8, r8, lsl #1
    8e88:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    8e8a:	b10d      	cbz	r5, 8e90 <nrf_gpio_reconfigure+0x76>
    8e8c:	782d      	ldrb	r5, [r5, #0]
    8e8e:	00ad      	lsls	r5, r5, #2
    8e90:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    8e94:	b10c      	cbz	r4, 8e9a <nrf_gpio_reconfigure+0x80>
    8e96:	7822      	ldrb	r2, [r4, #0]
    8e98:	0214      	lsls	r4, r2, #8
    8e9a:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    8e9c:	b10f      	cbz	r7, 8ea2 <nrf_gpio_reconfigure+0x88>
    8e9e:	783f      	ldrb	r7, [r7, #0]
    8ea0:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8ea2:	432c      	orrs	r4, r5
    8ea4:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    8ea6:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
    8eaa:	b002      	add	sp, #8
    8eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008eb0 <nrf_gpio_cfg_sense_set>:
{
    8eb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    8eb2:	f10d 030f 	add.w	r3, sp, #15
    8eb6:	9301      	str	r3, [sp, #4]
    8eb8:	2300      	movs	r3, #0
{
    8eba:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    8ebe:	461a      	mov	r2, r3
    8ec0:	4619      	mov	r1, r3
    8ec2:	9300      	str	r3, [sp, #0]
    8ec4:	f7ff ffa9 	bl	8e1a <nrf_gpio_reconfigure>
}
    8ec8:	b005      	add	sp, #20
    8eca:	f85d fb04 	ldr.w	pc, [sp], #4

00008ece <z_device_state_init>:
}
    8ece:	4770      	bx	lr

00008ed0 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    8ed0:	b138      	cbz	r0, 8ee2 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    8ed2:	68c3      	ldr	r3, [r0, #12]
    8ed4:	8818      	ldrh	r0, [r3, #0]
    8ed6:	f3c0 0008 	ubfx	r0, r0, #0, #9
    8eda:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    8ede:	4258      	negs	r0, r3
    8ee0:	4158      	adcs	r0, r3
}
    8ee2:	4770      	bx	lr

00008ee4 <k_mem_slab_init>:
{
    8ee4:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    8ee6:	2400      	movs	r4, #0
    8ee8:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    8eea:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8eec:	ea41 0402 	orr.w	r4, r1, r2
    8ef0:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    8ef4:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    8ef8:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8efa:	d10c      	bne.n	8f16 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    8efc:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    8efe:	42a3      	cmp	r3, r4
    8f00:	d103      	bne.n	8f0a <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    8f02:	e9c0 0000 	strd	r0, r0, [r0]
}
    8f06:	2000      	movs	r0, #0
}
    8f08:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    8f0a:	6985      	ldr	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    8f0c:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    8f0e:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    8f10:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    8f12:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    8f14:	e7f3      	b.n	8efe <k_mem_slab_init+0x1a>
		return -EINVAL;
    8f16:	f06f 0015 	mvn.w	r0, #21
	return rc;
    8f1a:	e7f5      	b.n	8f08 <k_mem_slab_init+0x24>

00008f1c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8f1c:	f3ef 8005 	mrs	r0, IPSR
}
    8f20:	3800      	subs	r0, #0
    8f22:	bf18      	it	ne
    8f24:	2001      	movne	r0, #1
    8f26:	4770      	bx	lr

00008f28 <k_thread_name_get>:
}
    8f28:	2000      	movs	r0, #0
    8f2a:	4770      	bx	lr

00008f2c <z_pm_save_idle_exit>:
{
    8f2c:	b508      	push	{r3, lr}
	pm_system_resume();
    8f2e:	f7f7 ffab 	bl	e88 <pm_system_resume>
}
    8f32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    8f36:	f7fa b87b 	b.w	3030 <sys_clock_idle_exit>

00008f3a <z_impl_k_mutex_init>:
{
    8f3a:	4603      	mov	r3, r0
	mutex->owner = NULL;
    8f3c:	2000      	movs	r0, #0
    8f3e:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    8f42:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    8f46:	4770      	bx	lr

00008f48 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8f48:	4603      	mov	r3, r0
    8f4a:	b920      	cbnz	r0, 8f56 <z_reschedule_irqlock+0xe>
    8f4c:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    8f50:	b90a      	cbnz	r2, 8f56 <z_reschedule_irqlock+0xe>
    8f52:	f7f8 bc27 	b.w	17a4 <arch_swap>
    8f56:	f383 8811 	msr	BASEPRI, r3
    8f5a:	f3bf 8f6f 	isb	sy
}
    8f5e:	4770      	bx	lr

00008f60 <z_reschedule_unlocked>:
	__asm__ volatile(
    8f60:	f04f 0320 	mov.w	r3, #32
    8f64:	f3ef 8011 	mrs	r0, BASEPRI
    8f68:	f383 8812 	msr	BASEPRI_MAX, r3
    8f6c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8f70:	f7ff bfea 	b.w	8f48 <z_reschedule_irqlock>

00008f74 <z_priq_dumb_best>:
{
    8f74:	4603      	mov	r3, r0
	return list->head == list;
    8f76:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8f78:	4283      	cmp	r3, r0
    8f7a:	d003      	beq.n	8f84 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    8f7c:	2800      	cmp	r0, #0
    8f7e:	bf38      	it	cc
    8f80:	2000      	movcc	r0, #0
    8f82:	4770      	bx	lr
	struct k_thread *thread = NULL;
    8f84:	2000      	movs	r0, #0
}
    8f86:	4770      	bx	lr

00008f88 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    8f88:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    8f8a:	f7fc fe05 	bl	5b98 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    8f8e:	bd08      	pop	{r3, pc}

00008f90 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    8f90:	b108      	cbz	r0, 8f96 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    8f92:	f7f7 beef 	b.w	d74 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    8f96:	4770      	bx	lr

00008f98 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    8f98:	4770      	bx	lr
	...

00008f9c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    8f9c:	f7fa b8ca 	b.w	3134 <SystemInit>

Disassembly of section .gnu.sgstubs:

0000a800 <spm_firmware_info_nse-0x57e0>:
	...

0000ffe0 <spm_firmware_info_nse>:
    ffe0:	e97f e97f 	sg
    ffe4:	f7f1 ba32 	b.w	144c <__acle_se_spm_firmware_info_nse>

0000ffe8 <spm_request_random_number_nse>:
    ffe8:	e97f e97f 	sg
    ffec:	f7f1 ba0a 	b.w	1404 <__acle_se_spm_request_random_number_nse>

0000fff0 <spm_request_read_nse>:
    fff0:	e97f e97f 	sg
    fff4:	f7f1 b9d2 	b.w	139c <__acle_se_spm_request_read_nse>
	...
