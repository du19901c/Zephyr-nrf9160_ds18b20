
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010000 <_vector_start>:
   10000:	2000d530 	.word	0x2000d530
   10004:	00012c21 	.word	0x00012c21
   10008:	00017f0d 	.word	0x00017f0d
   1000c:	00012bd9 	.word	0x00012bd9
   10010:	00012bd9 	.word	0x00012bd9
   10014:	00012bd9 	.word	0x00012bd9
   10018:	00012bd9 	.word	0x00012bd9
   1001c:	00012bd9 	.word	0x00012bd9
	...
   1002c:	000128d1 	.word	0x000128d1
   10030:	00012bd9 	.word	0x00012bd9
   10034:	00000000 	.word	0x00000000
   10038:	00012875 	.word	0x00012875
   1003c:	00012bd9 	.word	0x00012bd9

00010040 <_irq_vector_table>:
   10040:	0001295d 0001295d 0001295d 0001295d     ])..])..])..])..
   10050:	0001295d 0001295d 0001295d 0001295d     ])..])..])..])..
   10060:	0001295d 0001295d 0001295d 0001295d     ])..])..])..])..
   10070:	0001295d 0001295d 0001295d 0001295d     ])..])..])..])..
   10080:	0001295d 0001295d 0001295d 0001295d     ])..])..])..])..
   10090:	0001295d 0001295d 0001295d 0001295d     ])..])..])..])..
   100a0:	0001295d 0001295d 0001295d 0001295d     ])..])..])..])..
   100b0:	00013fb9 0001295d 0001295d 0001295d     .?..])..])..])..
   100c0:	0001295d 0001295d 0001295d 0001295d     ])..])..])..])..
   100d0:	0001295d 0001295d 0001295d 0001295d     ])..])..])..])..
   100e0:	0001295d 0001295d 0001295d 0001295d     ])..])..])..])..
   100f0:	0001295d 0001295d 0001295d 0001295d     ])..])..])..])..
   10100:	0001295d 0001295d 0001295d 0001295d     ])..])..])..])..
   10110:	0001295d 0001295d 0001295d 0001295d     ])..])..])..])..
   10120:	0001295d 0001295d 0001295d 0001295d     ])..])..])..])..
   10130:	0001295d 0001295d 0001295d 0001295d     ])..])..])..])..
   10140:	0001295d                                ])..

00010144 <_vector_end>:
	...

00010200 <m_firmware_info>:
   10200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   10210:	00009958 00000001 00010000 00010000     X...............
   10220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0001023c <__aeabi_drsub>:
   1023c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   10240:	e002      	b.n	10248 <__adddf3>
   10242:	bf00      	nop

00010244 <__aeabi_dsub>:
   10244:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00010248 <__adddf3>:
   10248:	b530      	push	{r4, r5, lr}
   1024a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1024e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   10252:	ea94 0f05 	teq	r4, r5
   10256:	bf08      	it	eq
   10258:	ea90 0f02 	teqeq	r0, r2
   1025c:	bf1f      	itttt	ne
   1025e:	ea54 0c00 	orrsne.w	ip, r4, r0
   10262:	ea55 0c02 	orrsne.w	ip, r5, r2
   10266:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1026a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1026e:	f000 80e2 	beq.w	10436 <__adddf3+0x1ee>
   10272:	ea4f 5454 	mov.w	r4, r4, lsr #21
   10276:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1027a:	bfb8      	it	lt
   1027c:	426d      	neglt	r5, r5
   1027e:	dd0c      	ble.n	1029a <__adddf3+0x52>
   10280:	442c      	add	r4, r5
   10282:	ea80 0202 	eor.w	r2, r0, r2
   10286:	ea81 0303 	eor.w	r3, r1, r3
   1028a:	ea82 0000 	eor.w	r0, r2, r0
   1028e:	ea83 0101 	eor.w	r1, r3, r1
   10292:	ea80 0202 	eor.w	r2, r0, r2
   10296:	ea81 0303 	eor.w	r3, r1, r3
   1029a:	2d36      	cmp	r5, #54	; 0x36
   1029c:	bf88      	it	hi
   1029e:	bd30      	pophi	{r4, r5, pc}
   102a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   102a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   102a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   102ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   102b0:	d002      	beq.n	102b8 <__adddf3+0x70>
   102b2:	4240      	negs	r0, r0
   102b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   102b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   102bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   102c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   102c4:	d002      	beq.n	102cc <__adddf3+0x84>
   102c6:	4252      	negs	r2, r2
   102c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   102cc:	ea94 0f05 	teq	r4, r5
   102d0:	f000 80a7 	beq.w	10422 <__adddf3+0x1da>
   102d4:	f1a4 0401 	sub.w	r4, r4, #1
   102d8:	f1d5 0e20 	rsbs	lr, r5, #32
   102dc:	db0d      	blt.n	102fa <__adddf3+0xb2>
   102de:	fa02 fc0e 	lsl.w	ip, r2, lr
   102e2:	fa22 f205 	lsr.w	r2, r2, r5
   102e6:	1880      	adds	r0, r0, r2
   102e8:	f141 0100 	adc.w	r1, r1, #0
   102ec:	fa03 f20e 	lsl.w	r2, r3, lr
   102f0:	1880      	adds	r0, r0, r2
   102f2:	fa43 f305 	asr.w	r3, r3, r5
   102f6:	4159      	adcs	r1, r3
   102f8:	e00e      	b.n	10318 <__adddf3+0xd0>
   102fa:	f1a5 0520 	sub.w	r5, r5, #32
   102fe:	f10e 0e20 	add.w	lr, lr, #32
   10302:	2a01      	cmp	r2, #1
   10304:	fa03 fc0e 	lsl.w	ip, r3, lr
   10308:	bf28      	it	cs
   1030a:	f04c 0c02 	orrcs.w	ip, ip, #2
   1030e:	fa43 f305 	asr.w	r3, r3, r5
   10312:	18c0      	adds	r0, r0, r3
   10314:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   10318:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1031c:	d507      	bpl.n	1032e <__adddf3+0xe6>
   1031e:	f04f 0e00 	mov.w	lr, #0
   10322:	f1dc 0c00 	rsbs	ip, ip, #0
   10326:	eb7e 0000 	sbcs.w	r0, lr, r0
   1032a:	eb6e 0101 	sbc.w	r1, lr, r1
   1032e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   10332:	d31b      	bcc.n	1036c <__adddf3+0x124>
   10334:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   10338:	d30c      	bcc.n	10354 <__adddf3+0x10c>
   1033a:	0849      	lsrs	r1, r1, #1
   1033c:	ea5f 0030 	movs.w	r0, r0, rrx
   10340:	ea4f 0c3c 	mov.w	ip, ip, rrx
   10344:	f104 0401 	add.w	r4, r4, #1
   10348:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1034c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   10350:	f080 809a 	bcs.w	10488 <__adddf3+0x240>
   10354:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   10358:	bf08      	it	eq
   1035a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1035e:	f150 0000 	adcs.w	r0, r0, #0
   10362:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   10366:	ea41 0105 	orr.w	r1, r1, r5
   1036a:	bd30      	pop	{r4, r5, pc}
   1036c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   10370:	4140      	adcs	r0, r0
   10372:	eb41 0101 	adc.w	r1, r1, r1
   10376:	3c01      	subs	r4, #1
   10378:	bf28      	it	cs
   1037a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1037e:	d2e9      	bcs.n	10354 <__adddf3+0x10c>
   10380:	f091 0f00 	teq	r1, #0
   10384:	bf04      	itt	eq
   10386:	4601      	moveq	r1, r0
   10388:	2000      	moveq	r0, #0
   1038a:	fab1 f381 	clz	r3, r1
   1038e:	bf08      	it	eq
   10390:	3320      	addeq	r3, #32
   10392:	f1a3 030b 	sub.w	r3, r3, #11
   10396:	f1b3 0220 	subs.w	r2, r3, #32
   1039a:	da0c      	bge.n	103b6 <__adddf3+0x16e>
   1039c:	320c      	adds	r2, #12
   1039e:	dd08      	ble.n	103b2 <__adddf3+0x16a>
   103a0:	f102 0c14 	add.w	ip, r2, #20
   103a4:	f1c2 020c 	rsb	r2, r2, #12
   103a8:	fa01 f00c 	lsl.w	r0, r1, ip
   103ac:	fa21 f102 	lsr.w	r1, r1, r2
   103b0:	e00c      	b.n	103cc <__adddf3+0x184>
   103b2:	f102 0214 	add.w	r2, r2, #20
   103b6:	bfd8      	it	le
   103b8:	f1c2 0c20 	rsble	ip, r2, #32
   103bc:	fa01 f102 	lsl.w	r1, r1, r2
   103c0:	fa20 fc0c 	lsr.w	ip, r0, ip
   103c4:	bfdc      	itt	le
   103c6:	ea41 010c 	orrle.w	r1, r1, ip
   103ca:	4090      	lslle	r0, r2
   103cc:	1ae4      	subs	r4, r4, r3
   103ce:	bfa2      	ittt	ge
   103d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   103d4:	4329      	orrge	r1, r5
   103d6:	bd30      	popge	{r4, r5, pc}
   103d8:	ea6f 0404 	mvn.w	r4, r4
   103dc:	3c1f      	subs	r4, #31
   103de:	da1c      	bge.n	1041a <__adddf3+0x1d2>
   103e0:	340c      	adds	r4, #12
   103e2:	dc0e      	bgt.n	10402 <__adddf3+0x1ba>
   103e4:	f104 0414 	add.w	r4, r4, #20
   103e8:	f1c4 0220 	rsb	r2, r4, #32
   103ec:	fa20 f004 	lsr.w	r0, r0, r4
   103f0:	fa01 f302 	lsl.w	r3, r1, r2
   103f4:	ea40 0003 	orr.w	r0, r0, r3
   103f8:	fa21 f304 	lsr.w	r3, r1, r4
   103fc:	ea45 0103 	orr.w	r1, r5, r3
   10400:	bd30      	pop	{r4, r5, pc}
   10402:	f1c4 040c 	rsb	r4, r4, #12
   10406:	f1c4 0220 	rsb	r2, r4, #32
   1040a:	fa20 f002 	lsr.w	r0, r0, r2
   1040e:	fa01 f304 	lsl.w	r3, r1, r4
   10412:	ea40 0003 	orr.w	r0, r0, r3
   10416:	4629      	mov	r1, r5
   10418:	bd30      	pop	{r4, r5, pc}
   1041a:	fa21 f004 	lsr.w	r0, r1, r4
   1041e:	4629      	mov	r1, r5
   10420:	bd30      	pop	{r4, r5, pc}
   10422:	f094 0f00 	teq	r4, #0
   10426:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1042a:	bf06      	itte	eq
   1042c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   10430:	3401      	addeq	r4, #1
   10432:	3d01      	subne	r5, #1
   10434:	e74e      	b.n	102d4 <__adddf3+0x8c>
   10436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1043a:	bf18      	it	ne
   1043c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   10440:	d029      	beq.n	10496 <__adddf3+0x24e>
   10442:	ea94 0f05 	teq	r4, r5
   10446:	bf08      	it	eq
   10448:	ea90 0f02 	teqeq	r0, r2
   1044c:	d005      	beq.n	1045a <__adddf3+0x212>
   1044e:	ea54 0c00 	orrs.w	ip, r4, r0
   10452:	bf04      	itt	eq
   10454:	4619      	moveq	r1, r3
   10456:	4610      	moveq	r0, r2
   10458:	bd30      	pop	{r4, r5, pc}
   1045a:	ea91 0f03 	teq	r1, r3
   1045e:	bf1e      	ittt	ne
   10460:	2100      	movne	r1, #0
   10462:	2000      	movne	r0, #0
   10464:	bd30      	popne	{r4, r5, pc}
   10466:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1046a:	d105      	bne.n	10478 <__adddf3+0x230>
   1046c:	0040      	lsls	r0, r0, #1
   1046e:	4149      	adcs	r1, r1
   10470:	bf28      	it	cs
   10472:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   10476:	bd30      	pop	{r4, r5, pc}
   10478:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1047c:	bf3c      	itt	cc
   1047e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   10482:	bd30      	popcc	{r4, r5, pc}
   10484:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10488:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1048c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10490:	f04f 0000 	mov.w	r0, #0
   10494:	bd30      	pop	{r4, r5, pc}
   10496:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1049a:	bf1a      	itte	ne
   1049c:	4619      	movne	r1, r3
   1049e:	4610      	movne	r0, r2
   104a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   104a4:	bf1c      	itt	ne
   104a6:	460b      	movne	r3, r1
   104a8:	4602      	movne	r2, r0
   104aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   104ae:	bf06      	itte	eq
   104b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   104b4:	ea91 0f03 	teqeq	r1, r3
   104b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   104bc:	bd30      	pop	{r4, r5, pc}
   104be:	bf00      	nop

000104c0 <__aeabi_ui2d>:
   104c0:	f090 0f00 	teq	r0, #0
   104c4:	bf04      	itt	eq
   104c6:	2100      	moveq	r1, #0
   104c8:	4770      	bxeq	lr
   104ca:	b530      	push	{r4, r5, lr}
   104cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   104d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   104d4:	f04f 0500 	mov.w	r5, #0
   104d8:	f04f 0100 	mov.w	r1, #0
   104dc:	e750      	b.n	10380 <__adddf3+0x138>
   104de:	bf00      	nop

000104e0 <__aeabi_i2d>:
   104e0:	f090 0f00 	teq	r0, #0
   104e4:	bf04      	itt	eq
   104e6:	2100      	moveq	r1, #0
   104e8:	4770      	bxeq	lr
   104ea:	b530      	push	{r4, r5, lr}
   104ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
   104f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   104f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   104f8:	bf48      	it	mi
   104fa:	4240      	negmi	r0, r0
   104fc:	f04f 0100 	mov.w	r1, #0
   10500:	e73e      	b.n	10380 <__adddf3+0x138>
   10502:	bf00      	nop

00010504 <__aeabi_f2d>:
   10504:	0042      	lsls	r2, r0, #1
   10506:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1050a:	ea4f 0131 	mov.w	r1, r1, rrx
   1050e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   10512:	bf1f      	itttt	ne
   10514:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   10518:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1051c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   10520:	4770      	bxne	lr
   10522:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   10526:	bf08      	it	eq
   10528:	4770      	bxeq	lr
   1052a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1052e:	bf04      	itt	eq
   10530:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   10534:	4770      	bxeq	lr
   10536:	b530      	push	{r4, r5, lr}
   10538:	f44f 7460 	mov.w	r4, #896	; 0x380
   1053c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10540:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   10544:	e71c      	b.n	10380 <__adddf3+0x138>
   10546:	bf00      	nop

00010548 <__aeabi_ul2d>:
   10548:	ea50 0201 	orrs.w	r2, r0, r1
   1054c:	bf08      	it	eq
   1054e:	4770      	bxeq	lr
   10550:	b530      	push	{r4, r5, lr}
   10552:	f04f 0500 	mov.w	r5, #0
   10556:	e00a      	b.n	1056e <__aeabi_l2d+0x16>

00010558 <__aeabi_l2d>:
   10558:	ea50 0201 	orrs.w	r2, r0, r1
   1055c:	bf08      	it	eq
   1055e:	4770      	bxeq	lr
   10560:	b530      	push	{r4, r5, lr}
   10562:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   10566:	d502      	bpl.n	1056e <__aeabi_l2d+0x16>
   10568:	4240      	negs	r0, r0
   1056a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1056e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   10572:	f104 0432 	add.w	r4, r4, #50	; 0x32
   10576:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1057a:	f43f aed8 	beq.w	1032e <__adddf3+0xe6>
   1057e:	f04f 0203 	mov.w	r2, #3
   10582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   10586:	bf18      	it	ne
   10588:	3203      	addne	r2, #3
   1058a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1058e:	bf18      	it	ne
   10590:	3203      	addne	r2, #3
   10592:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   10596:	f1c2 0320 	rsb	r3, r2, #32
   1059a:	fa00 fc03 	lsl.w	ip, r0, r3
   1059e:	fa20 f002 	lsr.w	r0, r0, r2
   105a2:	fa01 fe03 	lsl.w	lr, r1, r3
   105a6:	ea40 000e 	orr.w	r0, r0, lr
   105aa:	fa21 f102 	lsr.w	r1, r1, r2
   105ae:	4414      	add	r4, r2
   105b0:	e6bd      	b.n	1032e <__adddf3+0xe6>
   105b2:	bf00      	nop

000105b4 <__aeabi_dmul>:
   105b4:	b570      	push	{r4, r5, r6, lr}
   105b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   105ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   105be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   105c2:	bf1d      	ittte	ne
   105c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   105c8:	ea94 0f0c 	teqne	r4, ip
   105cc:	ea95 0f0c 	teqne	r5, ip
   105d0:	f000 f8de 	bleq	10790 <__aeabi_dmul+0x1dc>
   105d4:	442c      	add	r4, r5
   105d6:	ea81 0603 	eor.w	r6, r1, r3
   105da:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   105de:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   105e2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   105e6:	bf18      	it	ne
   105e8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   105ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   105f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   105f4:	d038      	beq.n	10668 <__aeabi_dmul+0xb4>
   105f6:	fba0 ce02 	umull	ip, lr, r0, r2
   105fa:	f04f 0500 	mov.w	r5, #0
   105fe:	fbe1 e502 	umlal	lr, r5, r1, r2
   10602:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   10606:	fbe0 e503 	umlal	lr, r5, r0, r3
   1060a:	f04f 0600 	mov.w	r6, #0
   1060e:	fbe1 5603 	umlal	r5, r6, r1, r3
   10612:	f09c 0f00 	teq	ip, #0
   10616:	bf18      	it	ne
   10618:	f04e 0e01 	orrne.w	lr, lr, #1
   1061c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   10620:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   10624:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   10628:	d204      	bcs.n	10634 <__aeabi_dmul+0x80>
   1062a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1062e:	416d      	adcs	r5, r5
   10630:	eb46 0606 	adc.w	r6, r6, r6
   10634:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   10638:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1063c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   10640:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   10644:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   10648:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1064c:	bf88      	it	hi
   1064e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   10652:	d81e      	bhi.n	10692 <__aeabi_dmul+0xde>
   10654:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   10658:	bf08      	it	eq
   1065a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1065e:	f150 0000 	adcs.w	r0, r0, #0
   10662:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   10666:	bd70      	pop	{r4, r5, r6, pc}
   10668:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1066c:	ea46 0101 	orr.w	r1, r6, r1
   10670:	ea40 0002 	orr.w	r0, r0, r2
   10674:	ea81 0103 	eor.w	r1, r1, r3
   10678:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1067c:	bfc2      	ittt	gt
   1067e:	ebd4 050c 	rsbsgt	r5, r4, ip
   10682:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   10686:	bd70      	popgt	{r4, r5, r6, pc}
   10688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1068c:	f04f 0e00 	mov.w	lr, #0
   10690:	3c01      	subs	r4, #1
   10692:	f300 80ab 	bgt.w	107ec <__aeabi_dmul+0x238>
   10696:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1069a:	bfde      	ittt	le
   1069c:	2000      	movle	r0, #0
   1069e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   106a2:	bd70      	pople	{r4, r5, r6, pc}
   106a4:	f1c4 0400 	rsb	r4, r4, #0
   106a8:	3c20      	subs	r4, #32
   106aa:	da35      	bge.n	10718 <__aeabi_dmul+0x164>
   106ac:	340c      	adds	r4, #12
   106ae:	dc1b      	bgt.n	106e8 <__aeabi_dmul+0x134>
   106b0:	f104 0414 	add.w	r4, r4, #20
   106b4:	f1c4 0520 	rsb	r5, r4, #32
   106b8:	fa00 f305 	lsl.w	r3, r0, r5
   106bc:	fa20 f004 	lsr.w	r0, r0, r4
   106c0:	fa01 f205 	lsl.w	r2, r1, r5
   106c4:	ea40 0002 	orr.w	r0, r0, r2
   106c8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   106cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   106d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   106d4:	fa21 f604 	lsr.w	r6, r1, r4
   106d8:	eb42 0106 	adc.w	r1, r2, r6
   106dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   106e0:	bf08      	it	eq
   106e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   106e6:	bd70      	pop	{r4, r5, r6, pc}
   106e8:	f1c4 040c 	rsb	r4, r4, #12
   106ec:	f1c4 0520 	rsb	r5, r4, #32
   106f0:	fa00 f304 	lsl.w	r3, r0, r4
   106f4:	fa20 f005 	lsr.w	r0, r0, r5
   106f8:	fa01 f204 	lsl.w	r2, r1, r4
   106fc:	ea40 0002 	orr.w	r0, r0, r2
   10700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   10704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   10708:	f141 0100 	adc.w	r1, r1, #0
   1070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   10710:	bf08      	it	eq
   10712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   10716:	bd70      	pop	{r4, r5, r6, pc}
   10718:	f1c4 0520 	rsb	r5, r4, #32
   1071c:	fa00 f205 	lsl.w	r2, r0, r5
   10720:	ea4e 0e02 	orr.w	lr, lr, r2
   10724:	fa20 f304 	lsr.w	r3, r0, r4
   10728:	fa01 f205 	lsl.w	r2, r1, r5
   1072c:	ea43 0302 	orr.w	r3, r3, r2
   10730:	fa21 f004 	lsr.w	r0, r1, r4
   10734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   10738:	fa21 f204 	lsr.w	r2, r1, r4
   1073c:	ea20 0002 	bic.w	r0, r0, r2
   10740:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   10744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   10748:	bf08      	it	eq
   1074a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1074e:	bd70      	pop	{r4, r5, r6, pc}
   10750:	f094 0f00 	teq	r4, #0
   10754:	d10f      	bne.n	10776 <__aeabi_dmul+0x1c2>
   10756:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1075a:	0040      	lsls	r0, r0, #1
   1075c:	eb41 0101 	adc.w	r1, r1, r1
   10760:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10764:	bf08      	it	eq
   10766:	3c01      	subeq	r4, #1
   10768:	d0f7      	beq.n	1075a <__aeabi_dmul+0x1a6>
   1076a:	ea41 0106 	orr.w	r1, r1, r6
   1076e:	f095 0f00 	teq	r5, #0
   10772:	bf18      	it	ne
   10774:	4770      	bxne	lr
   10776:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1077a:	0052      	lsls	r2, r2, #1
   1077c:	eb43 0303 	adc.w	r3, r3, r3
   10780:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   10784:	bf08      	it	eq
   10786:	3d01      	subeq	r5, #1
   10788:	d0f7      	beq.n	1077a <__aeabi_dmul+0x1c6>
   1078a:	ea43 0306 	orr.w	r3, r3, r6
   1078e:	4770      	bx	lr
   10790:	ea94 0f0c 	teq	r4, ip
   10794:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   10798:	bf18      	it	ne
   1079a:	ea95 0f0c 	teqne	r5, ip
   1079e:	d00c      	beq.n	107ba <__aeabi_dmul+0x206>
   107a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   107a4:	bf18      	it	ne
   107a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   107aa:	d1d1      	bne.n	10750 <__aeabi_dmul+0x19c>
   107ac:	ea81 0103 	eor.w	r1, r1, r3
   107b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   107b4:	f04f 0000 	mov.w	r0, #0
   107b8:	bd70      	pop	{r4, r5, r6, pc}
   107ba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   107be:	bf06      	itte	eq
   107c0:	4610      	moveq	r0, r2
   107c2:	4619      	moveq	r1, r3
   107c4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   107c8:	d019      	beq.n	107fe <__aeabi_dmul+0x24a>
   107ca:	ea94 0f0c 	teq	r4, ip
   107ce:	d102      	bne.n	107d6 <__aeabi_dmul+0x222>
   107d0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   107d4:	d113      	bne.n	107fe <__aeabi_dmul+0x24a>
   107d6:	ea95 0f0c 	teq	r5, ip
   107da:	d105      	bne.n	107e8 <__aeabi_dmul+0x234>
   107dc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   107e0:	bf1c      	itt	ne
   107e2:	4610      	movne	r0, r2
   107e4:	4619      	movne	r1, r3
   107e6:	d10a      	bne.n	107fe <__aeabi_dmul+0x24a>
   107e8:	ea81 0103 	eor.w	r1, r1, r3
   107ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   107f0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   107f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   107f8:	f04f 0000 	mov.w	r0, #0
   107fc:	bd70      	pop	{r4, r5, r6, pc}
   107fe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   10802:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   10806:	bd70      	pop	{r4, r5, r6, pc}

00010808 <__aeabi_ddiv>:
   10808:	b570      	push	{r4, r5, r6, lr}
   1080a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1080e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   10812:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   10816:	bf1d      	ittte	ne
   10818:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1081c:	ea94 0f0c 	teqne	r4, ip
   10820:	ea95 0f0c 	teqne	r5, ip
   10824:	f000 f8a7 	bleq	10976 <__aeabi_ddiv+0x16e>
   10828:	eba4 0405 	sub.w	r4, r4, r5
   1082c:	ea81 0e03 	eor.w	lr, r1, r3
   10830:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   10834:	ea4f 3101 	mov.w	r1, r1, lsl #12
   10838:	f000 8088 	beq.w	1094c <__aeabi_ddiv+0x144>
   1083c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   10840:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   10844:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   10848:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1084c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   10850:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   10854:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   10858:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1085c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   10860:	429d      	cmp	r5, r3
   10862:	bf08      	it	eq
   10864:	4296      	cmpeq	r6, r2
   10866:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1086a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1086e:	d202      	bcs.n	10876 <__aeabi_ddiv+0x6e>
   10870:	085b      	lsrs	r3, r3, #1
   10872:	ea4f 0232 	mov.w	r2, r2, rrx
   10876:	1ab6      	subs	r6, r6, r2
   10878:	eb65 0503 	sbc.w	r5, r5, r3
   1087c:	085b      	lsrs	r3, r3, #1
   1087e:	ea4f 0232 	mov.w	r2, r2, rrx
   10882:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   10886:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1088a:	ebb6 0e02 	subs.w	lr, r6, r2
   1088e:	eb75 0e03 	sbcs.w	lr, r5, r3
   10892:	bf22      	ittt	cs
   10894:	1ab6      	subcs	r6, r6, r2
   10896:	4675      	movcs	r5, lr
   10898:	ea40 000c 	orrcs.w	r0, r0, ip
   1089c:	085b      	lsrs	r3, r3, #1
   1089e:	ea4f 0232 	mov.w	r2, r2, rrx
   108a2:	ebb6 0e02 	subs.w	lr, r6, r2
   108a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   108aa:	bf22      	ittt	cs
   108ac:	1ab6      	subcs	r6, r6, r2
   108ae:	4675      	movcs	r5, lr
   108b0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   108b4:	085b      	lsrs	r3, r3, #1
   108b6:	ea4f 0232 	mov.w	r2, r2, rrx
   108ba:	ebb6 0e02 	subs.w	lr, r6, r2
   108be:	eb75 0e03 	sbcs.w	lr, r5, r3
   108c2:	bf22      	ittt	cs
   108c4:	1ab6      	subcs	r6, r6, r2
   108c6:	4675      	movcs	r5, lr
   108c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   108cc:	085b      	lsrs	r3, r3, #1
   108ce:	ea4f 0232 	mov.w	r2, r2, rrx
   108d2:	ebb6 0e02 	subs.w	lr, r6, r2
   108d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   108da:	bf22      	ittt	cs
   108dc:	1ab6      	subcs	r6, r6, r2
   108de:	4675      	movcs	r5, lr
   108e0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   108e4:	ea55 0e06 	orrs.w	lr, r5, r6
   108e8:	d018      	beq.n	1091c <__aeabi_ddiv+0x114>
   108ea:	ea4f 1505 	mov.w	r5, r5, lsl #4
   108ee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   108f2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   108f6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   108fa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   108fe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   10902:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   10906:	d1c0      	bne.n	1088a <__aeabi_ddiv+0x82>
   10908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1090c:	d10b      	bne.n	10926 <__aeabi_ddiv+0x11e>
   1090e:	ea41 0100 	orr.w	r1, r1, r0
   10912:	f04f 0000 	mov.w	r0, #0
   10916:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1091a:	e7b6      	b.n	1088a <__aeabi_ddiv+0x82>
   1091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10920:	bf04      	itt	eq
   10922:	4301      	orreq	r1, r0
   10924:	2000      	moveq	r0, #0
   10926:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1092a:	bf88      	it	hi
   1092c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   10930:	f63f aeaf 	bhi.w	10692 <__aeabi_dmul+0xde>
   10934:	ebb5 0c03 	subs.w	ip, r5, r3
   10938:	bf04      	itt	eq
   1093a:	ebb6 0c02 	subseq.w	ip, r6, r2
   1093e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   10942:	f150 0000 	adcs.w	r0, r0, #0
   10946:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1094a:	bd70      	pop	{r4, r5, r6, pc}
   1094c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   10950:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   10954:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   10958:	bfc2      	ittt	gt
   1095a:	ebd4 050c 	rsbsgt	r5, r4, ip
   1095e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   10962:	bd70      	popgt	{r4, r5, r6, pc}
   10964:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10968:	f04f 0e00 	mov.w	lr, #0
   1096c:	3c01      	subs	r4, #1
   1096e:	e690      	b.n	10692 <__aeabi_dmul+0xde>
   10970:	ea45 0e06 	orr.w	lr, r5, r6
   10974:	e68d      	b.n	10692 <__aeabi_dmul+0xde>
   10976:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1097a:	ea94 0f0c 	teq	r4, ip
   1097e:	bf08      	it	eq
   10980:	ea95 0f0c 	teqeq	r5, ip
   10984:	f43f af3b 	beq.w	107fe <__aeabi_dmul+0x24a>
   10988:	ea94 0f0c 	teq	r4, ip
   1098c:	d10a      	bne.n	109a4 <__aeabi_ddiv+0x19c>
   1098e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   10992:	f47f af34 	bne.w	107fe <__aeabi_dmul+0x24a>
   10996:	ea95 0f0c 	teq	r5, ip
   1099a:	f47f af25 	bne.w	107e8 <__aeabi_dmul+0x234>
   1099e:	4610      	mov	r0, r2
   109a0:	4619      	mov	r1, r3
   109a2:	e72c      	b.n	107fe <__aeabi_dmul+0x24a>
   109a4:	ea95 0f0c 	teq	r5, ip
   109a8:	d106      	bne.n	109b8 <__aeabi_ddiv+0x1b0>
   109aa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   109ae:	f43f aefd 	beq.w	107ac <__aeabi_dmul+0x1f8>
   109b2:	4610      	mov	r0, r2
   109b4:	4619      	mov	r1, r3
   109b6:	e722      	b.n	107fe <__aeabi_dmul+0x24a>
   109b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   109bc:	bf18      	it	ne
   109be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   109c2:	f47f aec5 	bne.w	10750 <__aeabi_dmul+0x19c>
   109c6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   109ca:	f47f af0d 	bne.w	107e8 <__aeabi_dmul+0x234>
   109ce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   109d2:	f47f aeeb 	bne.w	107ac <__aeabi_dmul+0x1f8>
   109d6:	e712      	b.n	107fe <__aeabi_dmul+0x24a>

000109d8 <__aeabi_d2f>:
   109d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   109dc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   109e0:	bf24      	itt	cs
   109e2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   109e6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   109ea:	d90d      	bls.n	10a08 <__aeabi_d2f+0x30>
   109ec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   109f0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   109f4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   109f8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   109fc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   10a00:	bf08      	it	eq
   10a02:	f020 0001 	biceq.w	r0, r0, #1
   10a06:	4770      	bx	lr
   10a08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   10a0c:	d121      	bne.n	10a52 <__aeabi_d2f+0x7a>
   10a0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   10a12:	bfbc      	itt	lt
   10a14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   10a18:	4770      	bxlt	lr
   10a1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10a1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   10a22:	f1c2 0218 	rsb	r2, r2, #24
   10a26:	f1c2 0c20 	rsb	ip, r2, #32
   10a2a:	fa10 f30c 	lsls.w	r3, r0, ip
   10a2e:	fa20 f002 	lsr.w	r0, r0, r2
   10a32:	bf18      	it	ne
   10a34:	f040 0001 	orrne.w	r0, r0, #1
   10a38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   10a3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   10a40:	fa03 fc0c 	lsl.w	ip, r3, ip
   10a44:	ea40 000c 	orr.w	r0, r0, ip
   10a48:	fa23 f302 	lsr.w	r3, r3, r2
   10a4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   10a50:	e7cc      	b.n	109ec <__aeabi_d2f+0x14>
   10a52:	ea7f 5362 	mvns.w	r3, r2, asr #21
   10a56:	d107      	bne.n	10a68 <__aeabi_d2f+0x90>
   10a58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   10a5c:	bf1e      	ittt	ne
   10a5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   10a62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   10a66:	4770      	bxne	lr
   10a68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   10a6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   10a70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10a74:	4770      	bx	lr
   10a76:	bf00      	nop

00010a78 <__aeabi_frsub>:
   10a78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   10a7c:	e002      	b.n	10a84 <__addsf3>
   10a7e:	bf00      	nop

00010a80 <__aeabi_fsub>:
   10a80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00010a84 <__addsf3>:
   10a84:	0042      	lsls	r2, r0, #1
   10a86:	bf1f      	itttt	ne
   10a88:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   10a8c:	ea92 0f03 	teqne	r2, r3
   10a90:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   10a94:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   10a98:	d06a      	beq.n	10b70 <__addsf3+0xec>
   10a9a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   10a9e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   10aa2:	bfc1      	itttt	gt
   10aa4:	18d2      	addgt	r2, r2, r3
   10aa6:	4041      	eorgt	r1, r0
   10aa8:	4048      	eorgt	r0, r1
   10aaa:	4041      	eorgt	r1, r0
   10aac:	bfb8      	it	lt
   10aae:	425b      	neglt	r3, r3
   10ab0:	2b19      	cmp	r3, #25
   10ab2:	bf88      	it	hi
   10ab4:	4770      	bxhi	lr
   10ab6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   10aba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10abe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10ac2:	bf18      	it	ne
   10ac4:	4240      	negne	r0, r0
   10ac6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   10aca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   10ace:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   10ad2:	bf18      	it	ne
   10ad4:	4249      	negne	r1, r1
   10ad6:	ea92 0f03 	teq	r2, r3
   10ada:	d03f      	beq.n	10b5c <__addsf3+0xd8>
   10adc:	f1a2 0201 	sub.w	r2, r2, #1
   10ae0:	fa41 fc03 	asr.w	ip, r1, r3
   10ae4:	eb10 000c 	adds.w	r0, r0, ip
   10ae8:	f1c3 0320 	rsb	r3, r3, #32
   10aec:	fa01 f103 	lsl.w	r1, r1, r3
   10af0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   10af4:	d502      	bpl.n	10afc <__addsf3+0x78>
   10af6:	4249      	negs	r1, r1
   10af8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   10afc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   10b00:	d313      	bcc.n	10b2a <__addsf3+0xa6>
   10b02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   10b06:	d306      	bcc.n	10b16 <__addsf3+0x92>
   10b08:	0840      	lsrs	r0, r0, #1
   10b0a:	ea4f 0131 	mov.w	r1, r1, rrx
   10b0e:	f102 0201 	add.w	r2, r2, #1
   10b12:	2afe      	cmp	r2, #254	; 0xfe
   10b14:	d251      	bcs.n	10bba <__addsf3+0x136>
   10b16:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   10b1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   10b1e:	bf08      	it	eq
   10b20:	f020 0001 	biceq.w	r0, r0, #1
   10b24:	ea40 0003 	orr.w	r0, r0, r3
   10b28:	4770      	bx	lr
   10b2a:	0049      	lsls	r1, r1, #1
   10b2c:	eb40 0000 	adc.w	r0, r0, r0
   10b30:	3a01      	subs	r2, #1
   10b32:	bf28      	it	cs
   10b34:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   10b38:	d2ed      	bcs.n	10b16 <__addsf3+0x92>
   10b3a:	fab0 fc80 	clz	ip, r0
   10b3e:	f1ac 0c08 	sub.w	ip, ip, #8
   10b42:	ebb2 020c 	subs.w	r2, r2, ip
   10b46:	fa00 f00c 	lsl.w	r0, r0, ip
   10b4a:	bfaa      	itet	ge
   10b4c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   10b50:	4252      	neglt	r2, r2
   10b52:	4318      	orrge	r0, r3
   10b54:	bfbc      	itt	lt
   10b56:	40d0      	lsrlt	r0, r2
   10b58:	4318      	orrlt	r0, r3
   10b5a:	4770      	bx	lr
   10b5c:	f092 0f00 	teq	r2, #0
   10b60:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   10b64:	bf06      	itte	eq
   10b66:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   10b6a:	3201      	addeq	r2, #1
   10b6c:	3b01      	subne	r3, #1
   10b6e:	e7b5      	b.n	10adc <__addsf3+0x58>
   10b70:	ea4f 0341 	mov.w	r3, r1, lsl #1
   10b74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   10b78:	bf18      	it	ne
   10b7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   10b7e:	d021      	beq.n	10bc4 <__addsf3+0x140>
   10b80:	ea92 0f03 	teq	r2, r3
   10b84:	d004      	beq.n	10b90 <__addsf3+0x10c>
   10b86:	f092 0f00 	teq	r2, #0
   10b8a:	bf08      	it	eq
   10b8c:	4608      	moveq	r0, r1
   10b8e:	4770      	bx	lr
   10b90:	ea90 0f01 	teq	r0, r1
   10b94:	bf1c      	itt	ne
   10b96:	2000      	movne	r0, #0
   10b98:	4770      	bxne	lr
   10b9a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   10b9e:	d104      	bne.n	10baa <__addsf3+0x126>
   10ba0:	0040      	lsls	r0, r0, #1
   10ba2:	bf28      	it	cs
   10ba4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   10ba8:	4770      	bx	lr
   10baa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   10bae:	bf3c      	itt	cc
   10bb0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   10bb4:	4770      	bxcc	lr
   10bb6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   10bba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   10bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10bc2:	4770      	bx	lr
   10bc4:	ea7f 6222 	mvns.w	r2, r2, asr #24
   10bc8:	bf16      	itet	ne
   10bca:	4608      	movne	r0, r1
   10bcc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   10bd0:	4601      	movne	r1, r0
   10bd2:	0242      	lsls	r2, r0, #9
   10bd4:	bf06      	itte	eq
   10bd6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   10bda:	ea90 0f01 	teqeq	r0, r1
   10bde:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   10be2:	4770      	bx	lr

00010be4 <__aeabi_ui2f>:
   10be4:	f04f 0300 	mov.w	r3, #0
   10be8:	e004      	b.n	10bf4 <__aeabi_i2f+0x8>
   10bea:	bf00      	nop

00010bec <__aeabi_i2f>:
   10bec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   10bf0:	bf48      	it	mi
   10bf2:	4240      	negmi	r0, r0
   10bf4:	ea5f 0c00 	movs.w	ip, r0
   10bf8:	bf08      	it	eq
   10bfa:	4770      	bxeq	lr
   10bfc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   10c00:	4601      	mov	r1, r0
   10c02:	f04f 0000 	mov.w	r0, #0
   10c06:	e01c      	b.n	10c42 <__aeabi_l2f+0x2a>

00010c08 <__aeabi_ul2f>:
   10c08:	ea50 0201 	orrs.w	r2, r0, r1
   10c0c:	bf08      	it	eq
   10c0e:	4770      	bxeq	lr
   10c10:	f04f 0300 	mov.w	r3, #0
   10c14:	e00a      	b.n	10c2c <__aeabi_l2f+0x14>
   10c16:	bf00      	nop

00010c18 <__aeabi_l2f>:
   10c18:	ea50 0201 	orrs.w	r2, r0, r1
   10c1c:	bf08      	it	eq
   10c1e:	4770      	bxeq	lr
   10c20:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   10c24:	d502      	bpl.n	10c2c <__aeabi_l2f+0x14>
   10c26:	4240      	negs	r0, r0
   10c28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10c2c:	ea5f 0c01 	movs.w	ip, r1
   10c30:	bf02      	ittt	eq
   10c32:	4684      	moveq	ip, r0
   10c34:	4601      	moveq	r1, r0
   10c36:	2000      	moveq	r0, #0
   10c38:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   10c3c:	bf08      	it	eq
   10c3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   10c42:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   10c46:	fabc f28c 	clz	r2, ip
   10c4a:	3a08      	subs	r2, #8
   10c4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   10c50:	db10      	blt.n	10c74 <__aeabi_l2f+0x5c>
   10c52:	fa01 fc02 	lsl.w	ip, r1, r2
   10c56:	4463      	add	r3, ip
   10c58:	fa00 fc02 	lsl.w	ip, r0, r2
   10c5c:	f1c2 0220 	rsb	r2, r2, #32
   10c60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   10c64:	fa20 f202 	lsr.w	r2, r0, r2
   10c68:	eb43 0002 	adc.w	r0, r3, r2
   10c6c:	bf08      	it	eq
   10c6e:	f020 0001 	biceq.w	r0, r0, #1
   10c72:	4770      	bx	lr
   10c74:	f102 0220 	add.w	r2, r2, #32
   10c78:	fa01 fc02 	lsl.w	ip, r1, r2
   10c7c:	f1c2 0220 	rsb	r2, r2, #32
   10c80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   10c84:	fa21 f202 	lsr.w	r2, r1, r2
   10c88:	eb43 0002 	adc.w	r0, r3, r2
   10c8c:	bf08      	it	eq
   10c8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   10c92:	4770      	bx	lr

00010c94 <__aeabi_uldivmod>:
   10c94:	b953      	cbnz	r3, 10cac <__aeabi_uldivmod+0x18>
   10c96:	b94a      	cbnz	r2, 10cac <__aeabi_uldivmod+0x18>
   10c98:	2900      	cmp	r1, #0
   10c9a:	bf08      	it	eq
   10c9c:	2800      	cmpeq	r0, #0
   10c9e:	bf1c      	itt	ne
   10ca0:	f04f 31ff 	movne.w	r1, #4294967295
   10ca4:	f04f 30ff 	movne.w	r0, #4294967295
   10ca8:	f000 b970 	b.w	10f8c <__aeabi_idiv0>
   10cac:	f1ad 0c08 	sub.w	ip, sp, #8
   10cb0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   10cb4:	f000 f806 	bl	10cc4 <__udivmoddi4>
   10cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
   10cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10cc0:	b004      	add	sp, #16
   10cc2:	4770      	bx	lr

00010cc4 <__udivmoddi4>:
   10cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10cc8:	9e08      	ldr	r6, [sp, #32]
   10cca:	460d      	mov	r5, r1
   10ccc:	4604      	mov	r4, r0
   10cce:	468a      	mov	sl, r1
   10cd0:	2b00      	cmp	r3, #0
   10cd2:	d17f      	bne.n	10dd4 <__udivmoddi4+0x110>
   10cd4:	428a      	cmp	r2, r1
   10cd6:	4617      	mov	r7, r2
   10cd8:	d941      	bls.n	10d5e <__udivmoddi4+0x9a>
   10cda:	fab2 f282 	clz	r2, r2
   10cde:	b14a      	cbz	r2, 10cf4 <__udivmoddi4+0x30>
   10ce0:	f1c2 0120 	rsb	r1, r2, #32
   10ce4:	fa05 f302 	lsl.w	r3, r5, r2
   10ce8:	4097      	lsls	r7, r2
   10cea:	4094      	lsls	r4, r2
   10cec:	fa20 f101 	lsr.w	r1, r0, r1
   10cf0:	ea41 0a03 	orr.w	sl, r1, r3
   10cf4:	ea4f 4817 	mov.w	r8, r7, lsr #16
   10cf8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   10cfc:	fa1f f987 	uxth.w	r9, r7
   10d00:	fbba fef8 	udiv	lr, sl, r8
   10d04:	fb08 a31e 	mls	r3, r8, lr, sl
   10d08:	fb0e f109 	mul.w	r1, lr, r9
   10d0c:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   10d10:	4299      	cmp	r1, r3
   10d12:	d906      	bls.n	10d22 <__udivmoddi4+0x5e>
   10d14:	18fb      	adds	r3, r7, r3
   10d16:	d202      	bcs.n	10d1e <__udivmoddi4+0x5a>
   10d18:	4299      	cmp	r1, r3
   10d1a:	f200 8124 	bhi.w	10f66 <__udivmoddi4+0x2a2>
   10d1e:	f10e 3eff 	add.w	lr, lr, #4294967295
   10d22:	1a59      	subs	r1, r3, r1
   10d24:	b2a3      	uxth	r3, r4
   10d26:	fbb1 f0f8 	udiv	r0, r1, r8
   10d2a:	fb08 1110 	mls	r1, r8, r0, r1
   10d2e:	fb00 f909 	mul.w	r9, r0, r9
   10d32:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   10d36:	45a1      	cmp	r9, r4
   10d38:	d905      	bls.n	10d46 <__udivmoddi4+0x82>
   10d3a:	193c      	adds	r4, r7, r4
   10d3c:	d202      	bcs.n	10d44 <__udivmoddi4+0x80>
   10d3e:	45a1      	cmp	r9, r4
   10d40:	f200 810e 	bhi.w	10f60 <__udivmoddi4+0x29c>
   10d44:	3801      	subs	r0, #1
   10d46:	eba4 0409 	sub.w	r4, r4, r9
   10d4a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
   10d4e:	2100      	movs	r1, #0
   10d50:	b11e      	cbz	r6, 10d5a <__udivmoddi4+0x96>
   10d52:	40d4      	lsrs	r4, r2
   10d54:	2300      	movs	r3, #0
   10d56:	e9c6 4300 	strd	r4, r3, [r6]
   10d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10d5e:	b902      	cbnz	r2, 10d62 <__udivmoddi4+0x9e>
   10d60:	deff      	udf	#255	; 0xff
   10d62:	fab2 f282 	clz	r2, r2
   10d66:	2a00      	cmp	r2, #0
   10d68:	d14f      	bne.n	10e0a <__udivmoddi4+0x146>
   10d6a:	1bcb      	subs	r3, r1, r7
   10d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   10d70:	fa1f f887 	uxth.w	r8, r7
   10d74:	2101      	movs	r1, #1
   10d76:	0c25      	lsrs	r5, r4, #16
   10d78:	fbb3 fcfe 	udiv	ip, r3, lr
   10d7c:	fb0e 301c 	mls	r0, lr, ip, r3
   10d80:	462b      	mov	r3, r5
   10d82:	fb08 f90c 	mul.w	r9, r8, ip
   10d86:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   10d8a:	45a9      	cmp	r9, r5
   10d8c:	d90a      	bls.n	10da4 <__udivmoddi4+0xe0>
   10d8e:	197d      	adds	r5, r7, r5
   10d90:	bf2c      	ite	cs
   10d92:	2301      	movcs	r3, #1
   10d94:	2300      	movcc	r3, #0
   10d96:	45a9      	cmp	r9, r5
   10d98:	d902      	bls.n	10da0 <__udivmoddi4+0xdc>
   10d9a:	2b00      	cmp	r3, #0
   10d9c:	f000 80d9 	beq.w	10f52 <__udivmoddi4+0x28e>
   10da0:	f10c 3cff 	add.w	ip, ip, #4294967295
   10da4:	eba5 0509 	sub.w	r5, r5, r9
   10da8:	b2a3      	uxth	r3, r4
   10daa:	fbb5 f0fe 	udiv	r0, r5, lr
   10dae:	fb0e 5510 	mls	r5, lr, r0, r5
   10db2:	fb08 f800 	mul.w	r8, r8, r0
   10db6:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   10dba:	45a0      	cmp	r8, r4
   10dbc:	d905      	bls.n	10dca <__udivmoddi4+0x106>
   10dbe:	193c      	adds	r4, r7, r4
   10dc0:	d202      	bcs.n	10dc8 <__udivmoddi4+0x104>
   10dc2:	45a0      	cmp	r8, r4
   10dc4:	f200 80c9 	bhi.w	10f5a <__udivmoddi4+0x296>
   10dc8:	3801      	subs	r0, #1
   10dca:	eba4 0408 	sub.w	r4, r4, r8
   10dce:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   10dd2:	e7bd      	b.n	10d50 <__udivmoddi4+0x8c>
   10dd4:	428b      	cmp	r3, r1
   10dd6:	d908      	bls.n	10dea <__udivmoddi4+0x126>
   10dd8:	2e00      	cmp	r6, #0
   10dda:	f000 80b1 	beq.w	10f40 <__udivmoddi4+0x27c>
   10dde:	2100      	movs	r1, #0
   10de0:	e9c6 0500 	strd	r0, r5, [r6]
   10de4:	4608      	mov	r0, r1
   10de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10dea:	fab3 f183 	clz	r1, r3
   10dee:	2900      	cmp	r1, #0
   10df0:	d146      	bne.n	10e80 <__udivmoddi4+0x1bc>
   10df2:	42ab      	cmp	r3, r5
   10df4:	f0c0 80a7 	bcc.w	10f46 <__udivmoddi4+0x282>
   10df8:	4282      	cmp	r2, r0
   10dfa:	f240 80a4 	bls.w	10f46 <__udivmoddi4+0x282>
   10dfe:	4608      	mov	r0, r1
   10e00:	2e00      	cmp	r6, #0
   10e02:	d0aa      	beq.n	10d5a <__udivmoddi4+0x96>
   10e04:	e9c6 4a00 	strd	r4, sl, [r6]
   10e08:	e7a7      	b.n	10d5a <__udivmoddi4+0x96>
   10e0a:	f1c2 0020 	rsb	r0, r2, #32
   10e0e:	4097      	lsls	r7, r2
   10e10:	fa01 f302 	lsl.w	r3, r1, r2
   10e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   10e18:	40c1      	lsrs	r1, r0
   10e1a:	fa24 f500 	lsr.w	r5, r4, r0
   10e1e:	fa1f f887 	uxth.w	r8, r7
   10e22:	4094      	lsls	r4, r2
   10e24:	431d      	orrs	r5, r3
   10e26:	fbb1 f0fe 	udiv	r0, r1, lr
   10e2a:	0c2b      	lsrs	r3, r5, #16
   10e2c:	fb0e 1110 	mls	r1, lr, r0, r1
   10e30:	fb00 fc08 	mul.w	ip, r0, r8
   10e34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   10e38:	459c      	cmp	ip, r3
   10e3a:	d909      	bls.n	10e50 <__udivmoddi4+0x18c>
   10e3c:	18fb      	adds	r3, r7, r3
   10e3e:	bf2c      	ite	cs
   10e40:	2101      	movcs	r1, #1
   10e42:	2100      	movcc	r1, #0
   10e44:	459c      	cmp	ip, r3
   10e46:	d902      	bls.n	10e4e <__udivmoddi4+0x18a>
   10e48:	2900      	cmp	r1, #0
   10e4a:	f000 8095 	beq.w	10f78 <__udivmoddi4+0x2b4>
   10e4e:	3801      	subs	r0, #1
   10e50:	eba3 030c 	sub.w	r3, r3, ip
   10e54:	b2ad      	uxth	r5, r5
   10e56:	fbb3 f1fe 	udiv	r1, r3, lr
   10e5a:	fb0e 3311 	mls	r3, lr, r1, r3
   10e5e:	fb01 fc08 	mul.w	ip, r1, r8
   10e62:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   10e66:	45ac      	cmp	ip, r5
   10e68:	d905      	bls.n	10e76 <__udivmoddi4+0x1b2>
   10e6a:	197d      	adds	r5, r7, r5
   10e6c:	d202      	bcs.n	10e74 <__udivmoddi4+0x1b0>
   10e6e:	45ac      	cmp	ip, r5
   10e70:	f200 8089 	bhi.w	10f86 <__udivmoddi4+0x2c2>
   10e74:	3901      	subs	r1, #1
   10e76:	eba5 030c 	sub.w	r3, r5, ip
   10e7a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   10e7e:	e77a      	b.n	10d76 <__udivmoddi4+0xb2>
   10e80:	f1c1 0420 	rsb	r4, r1, #32
   10e84:	408b      	lsls	r3, r1
   10e86:	fa02 f701 	lsl.w	r7, r2, r1
   10e8a:	fa05 fc01 	lsl.w	ip, r5, r1
   10e8e:	40e2      	lsrs	r2, r4
   10e90:	fa20 f804 	lsr.w	r8, r0, r4
   10e94:	40e5      	lsrs	r5, r4
   10e96:	fa00 fe01 	lsl.w	lr, r0, r1
   10e9a:	4313      	orrs	r3, r2
   10e9c:	ea48 020c 	orr.w	r2, r8, ip
   10ea0:	ea4f 4813 	mov.w	r8, r3, lsr #16
   10ea4:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   10ea8:	fa1f f983 	uxth.w	r9, r3
   10eac:	fbb5 faf8 	udiv	sl, r5, r8
   10eb0:	fb08 551a 	mls	r5, r8, sl, r5
   10eb4:	fb0a f009 	mul.w	r0, sl, r9
   10eb8:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
   10ebc:	4560      	cmp	r0, ip
   10ebe:	d90a      	bls.n	10ed6 <__udivmoddi4+0x212>
   10ec0:	eb13 0c0c 	adds.w	ip, r3, ip
   10ec4:	bf2c      	ite	cs
   10ec6:	2501      	movcs	r5, #1
   10ec8:	2500      	movcc	r5, #0
   10eca:	4560      	cmp	r0, ip
   10ecc:	d901      	bls.n	10ed2 <__udivmoddi4+0x20e>
   10ece:	2d00      	cmp	r5, #0
   10ed0:	d055      	beq.n	10f7e <__udivmoddi4+0x2ba>
   10ed2:	f10a 3aff 	add.w	sl, sl, #4294967295
   10ed6:	ebac 0c00 	sub.w	ip, ip, r0
   10eda:	b292      	uxth	r2, r2
   10edc:	fbbc f0f8 	udiv	r0, ip, r8
   10ee0:	fb08 cc10 	mls	ip, r8, r0, ip
   10ee4:	fb00 f909 	mul.w	r9, r0, r9
   10ee8:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
   10eec:	45e1      	cmp	r9, ip
   10eee:	d905      	bls.n	10efc <__udivmoddi4+0x238>
   10ef0:	eb13 0c0c 	adds.w	ip, r3, ip
   10ef4:	d201      	bcs.n	10efa <__udivmoddi4+0x236>
   10ef6:	45e1      	cmp	r9, ip
   10ef8:	d83b      	bhi.n	10f72 <__udivmoddi4+0x2ae>
   10efa:	3801      	subs	r0, #1
   10efc:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   10f00:	ebac 0c09 	sub.w	ip, ip, r9
   10f04:	fba0 8907 	umull	r8, r9, r0, r7
   10f08:	45cc      	cmp	ip, r9
   10f0a:	4645      	mov	r5, r8
   10f0c:	464a      	mov	r2, r9
   10f0e:	d302      	bcc.n	10f16 <__udivmoddi4+0x252>
   10f10:	d106      	bne.n	10f20 <__udivmoddi4+0x25c>
   10f12:	45c6      	cmp	lr, r8
   10f14:	d204      	bcs.n	10f20 <__udivmoddi4+0x25c>
   10f16:	3801      	subs	r0, #1
   10f18:	ebb8 0507 	subs.w	r5, r8, r7
   10f1c:	eb69 0203 	sbc.w	r2, r9, r3
   10f20:	b32e      	cbz	r6, 10f6e <__udivmoddi4+0x2aa>
   10f22:	ebbe 0305 	subs.w	r3, lr, r5
   10f26:	eb6c 0c02 	sbc.w	ip, ip, r2
   10f2a:	fa23 f201 	lsr.w	r2, r3, r1
   10f2e:	fa0c f404 	lsl.w	r4, ip, r4
   10f32:	fa2c f301 	lsr.w	r3, ip, r1
   10f36:	2100      	movs	r1, #0
   10f38:	4314      	orrs	r4, r2
   10f3a:	e9c6 4300 	strd	r4, r3, [r6]
   10f3e:	e70c      	b.n	10d5a <__udivmoddi4+0x96>
   10f40:	4631      	mov	r1, r6
   10f42:	4630      	mov	r0, r6
   10f44:	e709      	b.n	10d5a <__udivmoddi4+0x96>
   10f46:	1a84      	subs	r4, r0, r2
   10f48:	eb65 0303 	sbc.w	r3, r5, r3
   10f4c:	2001      	movs	r0, #1
   10f4e:	469a      	mov	sl, r3
   10f50:	e756      	b.n	10e00 <__udivmoddi4+0x13c>
   10f52:	f1ac 0c02 	sub.w	ip, ip, #2
   10f56:	443d      	add	r5, r7
   10f58:	e724      	b.n	10da4 <__udivmoddi4+0xe0>
   10f5a:	3802      	subs	r0, #2
   10f5c:	443c      	add	r4, r7
   10f5e:	e734      	b.n	10dca <__udivmoddi4+0x106>
   10f60:	3802      	subs	r0, #2
   10f62:	443c      	add	r4, r7
   10f64:	e6ef      	b.n	10d46 <__udivmoddi4+0x82>
   10f66:	f1ae 0e02 	sub.w	lr, lr, #2
   10f6a:	443b      	add	r3, r7
   10f6c:	e6d9      	b.n	10d22 <__udivmoddi4+0x5e>
   10f6e:	4631      	mov	r1, r6
   10f70:	e6f3      	b.n	10d5a <__udivmoddi4+0x96>
   10f72:	3802      	subs	r0, #2
   10f74:	449c      	add	ip, r3
   10f76:	e7c1      	b.n	10efc <__udivmoddi4+0x238>
   10f78:	3802      	subs	r0, #2
   10f7a:	443b      	add	r3, r7
   10f7c:	e768      	b.n	10e50 <__udivmoddi4+0x18c>
   10f7e:	f1aa 0a02 	sub.w	sl, sl, #2
   10f82:	449c      	add	ip, r3
   10f84:	e7a7      	b.n	10ed6 <__udivmoddi4+0x212>
   10f86:	3902      	subs	r1, #2
   10f88:	443d      	add	r5, r7
   10f8a:	e774      	b.n	10e76 <__udivmoddi4+0x1b2>

00010f8c <__aeabi_idiv0>:
   10f8c:	4770      	bx	lr
   10f8e:	bf00      	nop

00010f90 <Init_GPIO>:
#define DQ_PIN 10
static const struct device *gpio_dev;


void Init_GPIO(){
   10f90:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   10f92:	4805      	ldr	r0, [pc, #20]	; (10fa8 <Init_GPIO+0x18>)
   10f94:	f005 fa04 	bl	163a0 <z_impl_device_get_binding>

    gpio_dev = device_get_binding("GPIO_0");
   10f98:	4b04      	ldr	r3, [pc, #16]	; (10fac <Init_GPIO+0x1c>)
   10f9a:	6018      	str	r0, [r3, #0]
    if (!gpio_dev) {
   10f9c:	b100      	cbz	r0, 10fa0 <Init_GPIO+0x10>
	    printk("Error getting GPIO_0: failed.\n");
    }

}
   10f9e:	bd08      	pop	{r3, pc}
	    printk("Error getting GPIO_0: failed.\n");
   10fa0:	4803      	ldr	r0, [pc, #12]	; (10fb0 <Init_GPIO+0x20>)
   10fa2:	f006 fb34 	bl	1760e <printk>
}
   10fa6:	e7fa      	b.n	10f9e <Init_GPIO+0xe>
   10fa8:	00019578 	.word	0x00019578
   10fac:	2000c750 	.word	0x2000c750
   10fb0:	00019580 	.word	0x00019580

00010fb4 <ds18b20_read>:


void ds18b20_read(void * data_ptr, unsigned int num_bytes){
   10fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10fb8:	b082      	sub	sp, #8
   10fba:	4682      	mov	sl, r0
   10fbc:	4689      	mov	r9, r1
  char  ch; //Current reading byte buffer
  char * data_buf = data_ptr;
  
  int i=0,u=0;
  for (i=0;i<num_bytes;i++){
   10fbe:	2700      	movs	r7, #0
   10fc0:	e053      	b.n	1106a <ds18b20_read+0xb6>
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
		value = (value != 0) ? 0 : 1;
   10fc2:	2301      	movs	r3, #1
   10fc4:	e023      	b.n	1100e <ds18b20_read+0x5a>
	const struct gpio_driver_api *api =
   10fc6:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   10fc8:	691b      	ldr	r3, [r3, #16]
   10fca:	f44f 6180 	mov.w	r1, #1024	; 0x400
   10fce:	4798      	blx	r3
   10fd0:	e024      	b.n	1101c <ds18b20_read+0x68>
      k_busy_wait(10);
      if(gpio_pin_get_raw(gpio_dev, DQ_PIN)!=0){
        ch |= 1 << u; //There is 1 on the bus
      }
      else{
        ch &= ~(1 << u); //There us 0 on the bus
   10fd2:	2301      	movs	r3, #1
   10fd4:	40a3      	lsls	r3, r4
   10fd6:	ea26 0603 	bic.w	r6, r6, r3
		arch_syscall_invoke1(*(uintptr_t *)&usec_to_wait, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
   10fda:	203c      	movs	r0, #60	; 0x3c
   10fdc:	f008 f8ee 	bl	191bc <z_impl_k_busy_wait>
    for(u=0;u<8;u++){
   10fe0:	3401      	adds	r4, #1
   10fe2:	2c07      	cmp	r4, #7
   10fe4:	dc3e      	bgt.n	11064 <ds18b20_read+0xb0>
      gpio_pin_configure(gpio_dev, DQ_PIN, GPIO_OUTPUT);
   10fe6:	4d2c      	ldr	r5, [pc, #176]	; (11098 <ds18b20_read+0xe4>)
   10fe8:	6828      	ldr	r0, [r5, #0]
	const struct gpio_driver_api *api =
   10fea:	6881      	ldr	r1, [r0, #8]
	struct gpio_driver_data *data =
   10fec:	6902      	ldr	r2, [r0, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   10fee:	6813      	ldr	r3, [r2, #0]
   10ff0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   10ff4:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   10ff6:	680b      	ldr	r3, [r1, #0]
   10ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
   10ffc:	210a      	movs	r1, #10
   10ffe:	4798      	blx	r3
      gpio_pin_set(gpio_dev, DQ_PIN, 0);
   11000:	6828      	ldr	r0, [r5, #0]
	const struct gpio_driver_data *const data =
   11002:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   11004:	681b      	ldr	r3, [r3, #0]
   11006:	f413 6f80 	tst.w	r3, #1024	; 0x400
   1100a:	d1da      	bne.n	10fc2 <ds18b20_read+0xe>
   1100c:	2300      	movs	r3, #0
	if (value != 0)	{
   1100e:	2b00      	cmp	r3, #0
   11010:	d0d9      	beq.n	10fc6 <ds18b20_read+0x12>
	const struct gpio_driver_api *api =
   11012:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   11014:	68db      	ldr	r3, [r3, #12]
   11016:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1101a:	4798      	blx	r3
   1101c:	2005      	movs	r0, #5
   1101e:	f008 f8cd 	bl	191bc <z_impl_k_busy_wait>
      gpio_pin_configure(gpio_dev, DQ_PIN, GPIO_INPUT);
   11022:	4d1d      	ldr	r5, [pc, #116]	; (11098 <ds18b20_read+0xe4>)
   11024:	6828      	ldr	r0, [r5, #0]
	const struct gpio_driver_api *api =
   11026:	6881      	ldr	r1, [r0, #8]
	struct gpio_driver_data *data =
   11028:	6902      	ldr	r2, [r0, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1102a:	6813      	ldr	r3, [r2, #0]
   1102c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   11030:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   11032:	680b      	ldr	r3, [r1, #0]
   11034:	f44f 7280 	mov.w	r2, #256	; 0x100
   11038:	210a      	movs	r1, #10
   1103a:	4798      	blx	r3
   1103c:	200a      	movs	r0, #10
   1103e:	f008 f8bd 	bl	191bc <z_impl_k_busy_wait>
      if(gpio_pin_get_raw(gpio_dev, DQ_PIN)!=0){
   11042:	6828      	ldr	r0, [r5, #0]
	const struct gpio_driver_api *api =
   11044:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
   11046:	685b      	ldr	r3, [r3, #4]
   11048:	a901      	add	r1, sp, #4
   1104a:	4798      	blx	r3
	if (ret == 0) {
   1104c:	4603      	mov	r3, r0
   1104e:	b910      	cbnz	r0, 11056 <ds18b20_read+0xa2>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   11050:	9b01      	ldr	r3, [sp, #4]
   11052:	f3c3 2380 	ubfx	r3, r3, #10, #1
   11056:	2b00      	cmp	r3, #0
   11058:	d0bb      	beq.n	10fd2 <ds18b20_read+0x1e>
        ch |= 1 << u; //There is 1 on the bus
   1105a:	2301      	movs	r3, #1
   1105c:	40a3      	lsls	r3, r4
   1105e:	431e      	orrs	r6, r3
   11060:	b2f6      	uxtb	r6, r6
   11062:	e7ba      	b.n	10fda <ds18b20_read+0x26>
      }

      //Apply "long" timer for make sure that timeslot is end
     k_busy_wait(60);
    }
    data_buf[i]=ch;
   11064:	f80a 6008 	strb.w	r6, [sl, r8]
  for (i=0;i<num_bytes;i++){
   11068:	3701      	adds	r7, #1
   1106a:	46b8      	mov	r8, r7
   1106c:	454f      	cmp	r7, r9
   1106e:	d202      	bcs.n	11076 <ds18b20_read+0xc2>
    for(u=0;u<8;u++){
   11070:	2400      	movs	r4, #0
    ch=0;
   11072:	4626      	mov	r6, r4
   11074:	e7b5      	b.n	10fe2 <ds18b20_read+0x2e>
  }
 	gpio_pin_configure(gpio_dev, DQ_PIN, GPIO_INPUT);
   11076:	4b08      	ldr	r3, [pc, #32]	; (11098 <ds18b20_read+0xe4>)
   11078:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_api *api =
   1107a:	6881      	ldr	r1, [r0, #8]
	struct gpio_driver_data *data =
   1107c:	6902      	ldr	r2, [r0, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1107e:	6813      	ldr	r3, [r2, #0]
   11080:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   11084:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   11086:	680b      	ldr	r3, [r1, #0]
   11088:	f44f 7280 	mov.w	r2, #256	; 0x100
   1108c:	210a      	movs	r1, #10
   1108e:	4798      	blx	r3
}
   11090:	b002      	add	sp, #8
   11092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11096:	bf00      	nop
   11098:	2000c750 	.word	0x2000c750

0001109c <ds18b20_write>:

/* Function to write byte*/
void ds18b20_write(void * data_ptr, unsigned int num_bytes){
   1109c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   110a0:	4680      	mov	r8, r0
   110a2:	4689      	mov	r9, r1
  char  ch; //Current reading byte buffer
  char * data_buf = data_ptr;
  
  int i=0,u=0;
  for (i=0;i<num_bytes;i++){
   110a4:	2700      	movs	r7, #0
   110a6:	e050      	b.n	1114a <ds18b20_write+0xae>
		value = (value != 0) ? 0 : 1;
   110a8:	2301      	movs	r3, #1
   110aa:	e037      	b.n	1111c <ds18b20_write+0x80>
	const struct gpio_driver_api *api =
   110ac:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   110ae:	691b      	ldr	r3, [r3, #16]
   110b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
   110b4:	4798      	blx	r3
   110b6:	2001      	movs	r0, #1
   110b8:	f008 f880 	bl	191bc <z_impl_k_busy_wait>
      //Form write slot
      gpio_pin_configure(gpio_dev, DQ_PIN, GPIO_OUTPUT);
	    gpio_pin_set(gpio_dev, DQ_PIN, 0);
      k_busy_wait(1);;
      //write 1 - pull bus to HIGH just after short timer
      if(ch&(1<<u)){
   110bc:	fa45 f304 	asr.w	r3, r5, r4
   110c0:	f013 0f01 	tst.w	r3, #1
   110c4:	d132      	bne.n	1112c <ds18b20_write+0x90>
   110c6:	203c      	movs	r0, #60	; 0x3c
   110c8:	f008 f878 	bl	191bc <z_impl_k_busy_wait>
		    gpio_pin_configure(gpio_dev, DQ_PIN, GPIO_INPUT);
      }
      //Apply "long" timer for make sure that timeslot is end
      k_busy_wait(60);
      //Release bus, if this wasn't done before
	    gpio_pin_configure(gpio_dev, DQ_PIN, GPIO_INPUT);
   110cc:	4b2a      	ldr	r3, [pc, #168]	; (11178 <ds18b20_write+0xdc>)
   110ce:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_api *api =
   110d0:	6881      	ldr	r1, [r0, #8]
	struct gpio_driver_data *data =
   110d2:	6902      	ldr	r2, [r0, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   110d4:	6813      	ldr	r3, [r2, #0]
   110d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   110da:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   110dc:	680b      	ldr	r3, [r1, #0]
   110de:	f44f 7280 	mov.w	r2, #256	; 0x100
   110e2:	210a      	movs	r1, #10
   110e4:	4798      	blx	r3
      data_buf[i]=ch;
   110e6:	7035      	strb	r5, [r6, #0]
    for(u=0;u<8;u++){
   110e8:	3401      	adds	r4, #1
   110ea:	2c07      	cmp	r4, #7
   110ec:	dc2c      	bgt.n	11148 <ds18b20_write+0xac>
      gpio_pin_configure(gpio_dev, DQ_PIN, GPIO_OUTPUT);
   110ee:	f8df a088 	ldr.w	sl, [pc, #136]	; 11178 <ds18b20_write+0xdc>
   110f2:	f8da 0000 	ldr.w	r0, [sl]
	const struct gpio_driver_api *api =
   110f6:	6881      	ldr	r1, [r0, #8]
	struct gpio_driver_data *data =
   110f8:	6902      	ldr	r2, [r0, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   110fa:	6813      	ldr	r3, [r2, #0]
   110fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   11100:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   11102:	680b      	ldr	r3, [r1, #0]
   11104:	f44f 7200 	mov.w	r2, #512	; 0x200
   11108:	210a      	movs	r1, #10
   1110a:	4798      	blx	r3
	    gpio_pin_set(gpio_dev, DQ_PIN, 0);
   1110c:	f8da 0000 	ldr.w	r0, [sl]
	const struct gpio_driver_data *const data =
   11110:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   11112:	681b      	ldr	r3, [r3, #0]
   11114:	f413 6f80 	tst.w	r3, #1024	; 0x400
   11118:	d1c6      	bne.n	110a8 <ds18b20_write+0xc>
   1111a:	2300      	movs	r3, #0
	if (value != 0)	{
   1111c:	2b00      	cmp	r3, #0
   1111e:	d0c5      	beq.n	110ac <ds18b20_write+0x10>
	const struct gpio_driver_api *api =
   11120:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   11122:	68db      	ldr	r3, [r3, #12]
   11124:	f44f 6180 	mov.w	r1, #1024	; 0x400
   11128:	4798      	blx	r3
   1112a:	e7c4      	b.n	110b6 <ds18b20_write+0x1a>
		    gpio_pin_configure(gpio_dev, DQ_PIN, GPIO_INPUT);
   1112c:	4b12      	ldr	r3, [pc, #72]	; (11178 <ds18b20_write+0xdc>)
   1112e:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_api *api =
   11130:	6881      	ldr	r1, [r0, #8]
	struct gpio_driver_data *data =
   11132:	6902      	ldr	r2, [r0, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   11134:	6813      	ldr	r3, [r2, #0]
   11136:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   1113a:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   1113c:	680b      	ldr	r3, [r1, #0]
   1113e:	f44f 7280 	mov.w	r2, #256	; 0x100
   11142:	210a      	movs	r1, #10
   11144:	4798      	blx	r3
   11146:	e7be      	b.n	110c6 <ds18b20_write+0x2a>
  for (i=0;i<num_bytes;i++){
   11148:	3701      	adds	r7, #1
   1114a:	454f      	cmp	r7, r9
   1114c:	d205      	bcs.n	1115a <ds18b20_write+0xbe>
    ch=data_buf[i];
   1114e:	eb08 0607 	add.w	r6, r8, r7
   11152:	f818 5007 	ldrb.w	r5, [r8, r7]
    for(u=0;u<8;u++){
   11156:	2400      	movs	r4, #0
   11158:	e7c7      	b.n	110ea <ds18b20_write+0x4e>
    }
  }
  gpio_pin_configure(gpio_dev, DQ_PIN, GPIO_INPUT);
   1115a:	4b07      	ldr	r3, [pc, #28]	; (11178 <ds18b20_write+0xdc>)
   1115c:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_api *api =
   1115e:	6881      	ldr	r1, [r0, #8]
	struct gpio_driver_data *data =
   11160:	6902      	ldr	r2, [r0, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   11162:	6813      	ldr	r3, [r2, #0]
   11164:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   11168:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   1116a:	680b      	ldr	r3, [r1, #0]
   1116c:	f44f 7280 	mov.w	r2, #256	; 0x100
   11170:	210a      	movs	r1, #10
   11172:	4798      	blx	r3
}
   11174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11178:	2000c750 	.word	0x2000c750

0001117c <ds18b20_reset_and_check>:


//Perform reset of the bus, and then wait for the presence pulse
bool ds18b20_reset_and_check(void){
   1117c:	b510      	push	{r4, lr}
   1117e:	b082      	sub	sp, #8
  int res=0;
  //Form reset pulse
  
  gpio_pin_configure(gpio_dev, DQ_PIN, GPIO_OUTPUT);
   11180:	4c24      	ldr	r4, [pc, #144]	; (11214 <ds18b20_reset_and_check+0x98>)
   11182:	6820      	ldr	r0, [r4, #0]
	const struct gpio_driver_api *api =
   11184:	6881      	ldr	r1, [r0, #8]
	struct gpio_driver_data *data =
   11186:	6902      	ldr	r2, [r0, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   11188:	6813      	ldr	r3, [r2, #0]
   1118a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   1118e:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   11190:	680b      	ldr	r3, [r1, #0]
   11192:	f44f 7200 	mov.w	r2, #512	; 0x200
   11196:	210a      	movs	r1, #10
   11198:	4798      	blx	r3
  gpio_pin_set(gpio_dev, DQ_PIN, 0);
   1119a:	6820      	ldr	r0, [r4, #0]
	const struct gpio_driver_data *const data =
   1119c:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1119e:	681b      	ldr	r3, [r3, #0]
   111a0:	f413 6f80 	tst.w	r3, #1024	; 0x400
   111a4:	d128      	bne.n	111f8 <ds18b20_reset_and_check+0x7c>
   111a6:	2300      	movs	r3, #0
	if (value != 0)	{
   111a8:	b343      	cbz	r3, 111fc <ds18b20_reset_and_check+0x80>
	const struct gpio_driver_api *api =
   111aa:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   111ac:	68db      	ldr	r3, [r3, #12]
   111ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
   111b2:	4798      	blx	r3
   111b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   111b8:	f008 f800 	bl	191bc <z_impl_k_busy_wait>
  k_busy_wait(500);
  //Release bus and wait 15-60MS
  gpio_pin_configure(gpio_dev, DQ_PIN, GPIO_INPUT);
   111bc:	4c15      	ldr	r4, [pc, #84]	; (11214 <ds18b20_reset_and_check+0x98>)
   111be:	6820      	ldr	r0, [r4, #0]
	const struct gpio_driver_api *api =
   111c0:	6881      	ldr	r1, [r0, #8]
	struct gpio_driver_data *data =
   111c2:	6902      	ldr	r2, [r0, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   111c4:	6813      	ldr	r3, [r2, #0]
   111c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   111ca:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   111cc:	680b      	ldr	r3, [r1, #0]
   111ce:	f44f 7280 	mov.w	r2, #256	; 0x100
   111d2:	210a      	movs	r1, #10
   111d4:	4798      	blx	r3
   111d6:	203c      	movs	r0, #60	; 0x3c
   111d8:	f007 fff0 	bl	191bc <z_impl_k_busy_wait>
  k_busy_wait(60);

  //Read from bus
  res=gpio_pin_get_raw(gpio_dev, DQ_PIN);
   111dc:	6820      	ldr	r0, [r4, #0]
	const struct gpio_driver_api *api =
   111de:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
   111e0:	685b      	ldr	r3, [r3, #4]
   111e2:	a901      	add	r1, sp, #4
   111e4:	4798      	blx	r3
	if (ret == 0) {
   111e6:	4603      	mov	r3, r0
   111e8:	b910      	cbnz	r0, 111f0 <ds18b20_reset_and_check+0x74>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   111ea:	9b01      	ldr	r3, [sp, #4]
   111ec:	f3c3 2380 	ubfx	r3, r3, #10, #1
  if(res==0){
   111f0:	b153      	cbz	r3, 11208 <ds18b20_reset_and_check+0x8c>
    k_busy_wait(500);
    return true;
  }
  return false;
   111f2:	2000      	movs	r0, #0
}
   111f4:	b002      	add	sp, #8
   111f6:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
   111f8:	2301      	movs	r3, #1
   111fa:	e7d5      	b.n	111a8 <ds18b20_reset_and_check+0x2c>
	const struct gpio_driver_api *api =
   111fc:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   111fe:	691b      	ldr	r3, [r3, #16]
   11200:	f44f 6180 	mov.w	r1, #1024	; 0x400
   11204:	4798      	blx	r3
   11206:	e7d5      	b.n	111b4 <ds18b20_reset_and_check+0x38>
   11208:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   1120c:	f007 ffd6 	bl	191bc <z_impl_k_busy_wait>
    return true;
   11210:	2001      	movs	r0, #1
   11212:	e7ef      	b.n	111f4 <ds18b20_reset_and_check+0x78>
   11214:	2000c750 	.word	0x2000c750

00011218 <ds18b20_read_temp>:


float ds18b20_read_temp(void){
   11218:	b510      	push	{r4, lr}
   1121a:	b084      	sub	sp, #16
   char buf[16];
    double temp;
        //int i;
     int16_t raw_temp=0;

    ds18b20_reset_and_check();
   1121c:	f7ff ffae 	bl	1117c <ds18b20_reset_and_check>

//Read ROM
    buf[0]=0x33;
   11220:	2433      	movs	r4, #51	; 0x33
   11222:	f88d 4000 	strb.w	r4, [sp]
    ds18b20_write(&buf,1);
   11226:	2101      	movs	r1, #1
   11228:	4668      	mov	r0, sp
   1122a:	f7ff ff37 	bl	1109c <ds18b20_write>

//Read the results
    
    ds18b20_read(&buf,8);
   1122e:	2108      	movs	r1, #8
   11230:	4668      	mov	r0, sp
   11232:	f7ff febf 	bl	10fb4 <ds18b20_read>
    memset(&buf,0,16);
   11236:	2210      	movs	r2, #16
   11238:	2100      	movs	r1, #0
   1123a:	4668      	mov	r0, sp
   1123c:	f006 ff56 	bl	180ec <memset>

    //Send convert TX cmd
    buf[0]=0x44; //Convert temp
   11240:	2344      	movs	r3, #68	; 0x44
   11242:	f88d 3000 	strb.w	r3, [sp]
    ds18b20_write(&buf,1);
   11246:	2101      	movs	r1, #1
   11248:	4668      	mov	r0, sp
   1124a:	f7ff ff27 	bl	1109c <ds18b20_write>
   1124e:	4819      	ldr	r0, [pc, #100]	; (112b4 <ds18b20_read_temp+0x9c>)
   11250:	f007 ffb4 	bl	191bc <z_impl_k_busy_wait>
    k_busy_wait(1000000);//Wait for finishing of the conversion

    ds18b20_reset_and_check();
   11254:	f7ff ff92 	bl	1117c <ds18b20_reset_and_check>
    buf[0]=0x33; //Read ROM
   11258:	f88d 4000 	strb.w	r4, [sp]
    ds18b20_write(&buf,1);
   1125c:	2101      	movs	r1, #1
   1125e:	4668      	mov	r0, sp
   11260:	f7ff ff1c 	bl	1109c <ds18b20_write>
    //Read the results
    ds18b20_read(&buf,8);
   11264:	2108      	movs	r1, #8
   11266:	4668      	mov	r0, sp
   11268:	f7ff fea4 	bl	10fb4 <ds18b20_read>
    memset(&buf,0,16);
   1126c:	2210      	movs	r2, #16
   1126e:	2100      	movs	r1, #0
   11270:	4668      	mov	r0, sp
   11272:	f006 ff3b 	bl	180ec <memset>
    buf[0]=0xBE;  //Read scratchpad
   11276:	23be      	movs	r3, #190	; 0xbe
   11278:	f88d 3000 	strb.w	r3, [sp]
    ds18b20_write(&buf,1);
   1127c:	2101      	movs	r1, #1
   1127e:	4668      	mov	r0, sp
   11280:	f7ff ff0c 	bl	1109c <ds18b20_write>
    //Read the results
    ds18b20_read(&buf,12);
   11284:	210c      	movs	r1, #12
   11286:	4668      	mov	r0, sp
   11288:	f7ff fe94 	bl	10fb4 <ds18b20_read>
    raw_temp = (buf[1] << 8) | buf[0];
   1128c:	f89d 3001 	ldrb.w	r3, [sp, #1]
   11290:	021b      	lsls	r3, r3, #8
   11292:	b21b      	sxth	r3, r3
   11294:	f89d 0000 	ldrb.w	r0, [sp]

    //memcpy(&f,&buf,8);
    temp = (float)raw_temp / 16.0;
   11298:	4318      	orrs	r0, r3
   1129a:	f7ff fca7 	bl	10bec <__aeabi_i2f>
   1129e:	f7ff f931 	bl	10504 <__aeabi_f2d>
   112a2:	2200      	movs	r2, #0
   112a4:	4b04      	ldr	r3, [pc, #16]	; (112b8 <ds18b20_read_temp+0xa0>)
   112a6:	f7ff f985 	bl	105b4 <__aeabi_dmul>
    return(temp);
   112aa:	f7ff fb95 	bl	109d8 <__aeabi_d2f>
}
   112ae:	b004      	add	sp, #16
   112b0:	bd10      	pop	{r4, pc}
   112b2:	bf00      	nop
   112b4:	000f4240 	.word	0x000f4240
   112b8:	3fb00000 	.word	0x3fb00000

000112bc <main>:

#include "ds18b20.h"



void main(void){
   112bc:	b508      	push	{r3, lr}

	printk("DS18b20 sensor test program started on %s-ns\n", CONFIG_BOARD);
   112be:	4927      	ldr	r1, [pc, #156]	; (1135c <main+0xa0>)
   112c0:	4827      	ldr	r0, [pc, #156]	; (11360 <main+0xa4>)
   112c2:	f006 f9a4 	bl	1760e <printk>
	//k_msleep(5000);

	Init_GPIO();
   112c6:	f7ff fe63 	bl	10f90 <Init_GPIO>
  gpio_pin_configure(gpio_dev, 11, GPIO_OUTPUT);
   112ca:	4b26      	ldr	r3, [pc, #152]	; (11364 <main+0xa8>)
   112cc:	6818      	ldr	r0, [r3, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   112ce:	f44f 7200 	mov.w	r2, #512	; 0x200
   112d2:	210b      	movs	r1, #11
   112d4:	f006 f938 	bl	17548 <z_impl_gpio_pin_configure>
   112d8:	e013      	b.n	11302 <main+0x46>
		value = (value != 0) ? 0 : 1;
   112da:	2300      	movs	r3, #0
   112dc:	e022      	b.n	11324 <main+0x68>
	const struct gpio_driver_api *api =
   112de:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   112e0:	691b      	ldr	r3, [r3, #16]
   112e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
   112e6:	4798      	blx	r3
   112e8:	e023      	b.n	11332 <main+0x76>
		value = (value != 0) ? 0 : 1;
   112ea:	2301      	movs	r3, #1
   112ec:	e02e      	b.n	1134c <main+0x90>
	const struct gpio_driver_api *api =
   112ee:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   112f0:	68db      	ldr	r3, [r3, #12]
   112f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
   112f6:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
   112f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   112fc:	2100      	movs	r1, #0
   112fe:	f005 ff2d 	bl	1715c <z_impl_k_sleep>
	
	while(true){
		printf("read temp: %0.8f \r\n", ds18b20_read_temp());
   11302:	f7ff ff89 	bl	11218 <ds18b20_read_temp>
   11306:	f7ff f8fd 	bl	10504 <__aeabi_f2d>
   1130a:	4602      	mov	r2, r0
   1130c:	460b      	mov	r3, r1
   1130e:	4816      	ldr	r0, [pc, #88]	; (11368 <main+0xac>)
   11310:	f001 fe72 	bl	12ff8 <printf>
    
		gpio_pin_set(gpio_dev, 11, 1);
   11314:	4b13      	ldr	r3, [pc, #76]	; (11364 <main+0xa8>)
   11316:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
   11318:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1131a:	681b      	ldr	r3, [r3, #0]
   1131c:	f413 6f00 	tst.w	r3, #2048	; 0x800
   11320:	d1db      	bne.n	112da <main+0x1e>
   11322:	2301      	movs	r3, #1
	if (value != 0)	{
   11324:	2b00      	cmp	r3, #0
   11326:	d0da      	beq.n	112de <main+0x22>
	const struct gpio_driver_api *api =
   11328:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   1132a:	68db      	ldr	r3, [r3, #12]
   1132c:	f44f 6100 	mov.w	r1, #2048	; 0x800
   11330:	4798      	blx	r3
   11332:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   11336:	2100      	movs	r1, #0
   11338:	f005 ff10 	bl	1715c <z_impl_k_sleep>
		k_msleep(500);
		gpio_pin_set(gpio_dev, 11, 0);
   1133c:	4b09      	ldr	r3, [pc, #36]	; (11364 <main+0xa8>)
   1133e:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
   11340:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   11342:	681b      	ldr	r3, [r3, #0]
   11344:	f413 6f00 	tst.w	r3, #2048	; 0x800
   11348:	d1cf      	bne.n	112ea <main+0x2e>
   1134a:	2300      	movs	r3, #0
	if (value != 0)	{
   1134c:	2b00      	cmp	r3, #0
   1134e:	d1ce      	bne.n	112ee <main+0x32>
	const struct gpio_driver_api *api =
   11350:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   11352:	691b      	ldr	r3, [r3, #16]
   11354:	f44f 6100 	mov.w	r1, #2048	; 0x800
   11358:	4798      	blx	r3
   1135a:	e7cd      	b.n	112f8 <main+0x3c>
   1135c:	000195a0 	.word	0x000195a0
   11360:	000195b4 	.word	0x000195b4
   11364:	2000c750 	.word	0x2000c750
   11368:	000195e4 	.word	0x000195e4

0001136c <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
   1136c:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
   1136e:	680b      	ldr	r3, [r1, #0]
   11370:	3301      	adds	r3, #1
   11372:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   11374:	4b01      	ldr	r3, [pc, #4]	; (1137c <char_out+0x10>)
   11376:	681b      	ldr	r3, [r3, #0]
   11378:	4798      	blx	r3
}
   1137a:	bd08      	pop	{r3, pc}
   1137c:	2000c500 	.word	0x2000c500

00011380 <__printk_hook_install>:
	_char_out = fn;
   11380:	4b01      	ldr	r3, [pc, #4]	; (11388 <__printk_hook_install+0x8>)
   11382:	6018      	str	r0, [r3, #0]
}
   11384:	4770      	bx	lr
   11386:	bf00      	nop
   11388:	2000c500 	.word	0x2000c500

0001138c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   1138c:	b500      	push	{lr}
   1138e:	b083      	sub	sp, #12
   11390:	4602      	mov	r2, r0
   11392:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   11394:	2100      	movs	r1, #0
   11396:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   11398:	a901      	add	r1, sp, #4
   1139a:	4803      	ldr	r0, [pc, #12]	; (113a8 <vprintk+0x1c>)
   1139c:	f000 fada 	bl	11954 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   113a0:	b003      	add	sp, #12
   113a2:	f85d fb04 	ldr.w	pc, [sp], #4
   113a6:	bf00      	nop
   113a8:	0001136d 	.word	0x0001136d

000113ac <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   113ac:	b510      	push	{r4, lr}
   113ae:	b084      	sub	sp, #16
   113b0:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   113b2:	9001      	str	r0, [sp, #4]
   113b4:	9102      	str	r1, [sp, #8]
   113b6:	2100      	movs	r1, #0
   113b8:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
   113ba:	a901      	add	r1, sp, #4
   113bc:	4805      	ldr	r0, [pc, #20]	; (113d4 <vsnprintk+0x28>)
   113be:	f000 fac9 	bl	11954 <cbvprintf>

	if (ctx.count < ctx.max) {
   113c2:	9b03      	ldr	r3, [sp, #12]
   113c4:	9a02      	ldr	r2, [sp, #8]
   113c6:	4293      	cmp	r3, r2
   113c8:	da01      	bge.n	113ce <vsnprintk+0x22>
		str[ctx.count] = '\0';
   113ca:	2200      	movs	r2, #0
   113cc:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
   113ce:	9803      	ldr	r0, [sp, #12]
   113d0:	b004      	add	sp, #16
   113d2:	bd10      	pop	{r4, pc}
   113d4:	000175df 	.word	0x000175df

000113d8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   113d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   113dc:	b083      	sub	sp, #12
   113de:	4604      	mov	r4, r0
   113e0:	4608      	mov	r0, r1
   113e2:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   113e4:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   113e6:	f013 0f08 	tst.w	r3, #8
   113ea:	d105      	bne.n	113f8 <process_event+0x20>
   113ec:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   113f0:	2300      	movs	r3, #0
   113f2:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   113f4:	9301      	str	r3, [sp, #4]
}
   113f6:	e069      	b.n	114cc <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
   113f8:	2901      	cmp	r1, #1
   113fa:	d009      	beq.n	11410 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   113fc:	f043 0320 	orr.w	r3, r3, #32
   11400:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   11402:	f385 8811 	msr	BASEPRI, r5
   11406:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   1140a:	b003      	add	sp, #12
   1140c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   11410:	f043 0310 	orr.w	r3, r3, #16
   11414:	8323      	strh	r3, [r4, #24]
   11416:	e7f4      	b.n	11402 <process_event+0x2a>
			evt = process_recheck(mgr);
   11418:	4620      	mov	r0, r4
   1141a:	f006 f93b 	bl	17694 <process_recheck>
   1141e:	e057      	b.n	114d0 <process_event+0xf8>
			res = mgr->last_res;
   11420:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
   11424:	464a      	mov	r2, r9
   11426:	4669      	mov	r1, sp
   11428:	4620      	mov	r0, r4
   1142a:	f006 f94c 	bl	176c6 <process_complete>
		onoff_transition_fn transit = NULL;
   1142e:	2700      	movs	r7, #0
   11430:	e05a      	b.n	114e8 <process_event+0x110>
			transit = mgr->transitions->start;
   11432:	6923      	ldr	r3, [r4, #16]
   11434:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
   11436:	2106      	movs	r1, #6
   11438:	4620      	mov	r0, r4
   1143a:	f006 f904 	bl	17646 <set_state>
		res = 0;
   1143e:	f04f 0900 	mov.w	r9, #0
   11442:	e051      	b.n	114e8 <process_event+0x110>
			transit = mgr->transitions->stop;
   11444:	6923      	ldr	r3, [r4, #16]
   11446:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
   11448:	2104      	movs	r1, #4
   1144a:	4620      	mov	r0, r4
   1144c:	f006 f8fb 	bl	17646 <set_state>
		res = 0;
   11450:	f04f 0900 	mov.w	r9, #0
   11454:	e048      	b.n	114e8 <process_event+0x110>
			transit = mgr->transitions->reset;
   11456:	6923      	ldr	r3, [r4, #16]
   11458:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
   1145a:	2105      	movs	r1, #5
   1145c:	4620      	mov	r0, r4
   1145e:	f006 f8f2 	bl	17646 <set_state>
		res = 0;
   11462:	f04f 0900 	mov.w	r9, #0
   11466:	e03f      	b.n	114e8 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
   11468:	2200      	movs	r2, #0
   1146a:	e046      	b.n	114fa <process_event+0x122>
   1146c:	2200      	movs	r2, #0
   1146e:	e044      	b.n	114fa <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   11470:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   11474:	8323      	strh	r3, [r4, #24]
   11476:	f385 8811 	msr	BASEPRI, r5
   1147a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   1147e:	2900      	cmp	r1, #0
   11480:	d144      	bne.n	1150c <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   11482:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   11484:	b12b      	cbz	r3, 11492 <process_event+0xba>
				notify_all(mgr, &clients, state, res);
   11486:	464b      	mov	r3, r9
   11488:	4642      	mov	r2, r8
   1148a:	4669      	mov	r1, sp
   1148c:	4620      	mov	r0, r4
   1148e:	f006 f990 	bl	177b2 <notify_all>
			if (transit != NULL) {
   11492:	b117      	cbz	r7, 1149a <process_event+0xc2>
				transit(mgr, transition_complete);
   11494:	4925      	ldr	r1, [pc, #148]	; (1152c <process_event+0x154>)
   11496:	4620      	mov	r0, r4
   11498:	47b8      	blx	r7
	__asm__ volatile(
   1149a:	f04f 0320 	mov.w	r3, #32
   1149e:	f3ef 8511 	mrs	r5, BASEPRI
   114a2:	f383 8812 	msr	BASEPRI_MAX, r3
   114a6:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   114aa:	8b23      	ldrh	r3, [r4, #24]
   114ac:	f023 0308 	bic.w	r3, r3, #8
   114b0:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   114b2:	8b23      	ldrh	r3, [r4, #24]
   114b4:	f013 0f10 	tst.w	r3, #16
   114b8:	d02e      	beq.n	11518 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   114ba:	f023 0310 	bic.w	r3, r3, #16
   114be:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   114c0:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   114c2:	8b26      	ldrh	r6, [r4, #24]
   114c4:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
   114c8:	2800      	cmp	r0, #0
   114ca:	d09a      	beq.n	11402 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
   114cc:	2802      	cmp	r0, #2
   114ce:	d0a3      	beq.n	11418 <process_event+0x40>
		if (evt == EVT_NOP) {
   114d0:	2800      	cmp	r0, #0
   114d2:	d096      	beq.n	11402 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
   114d4:	2801      	cmp	r0, #1
   114d6:	d0a3      	beq.n	11420 <process_event+0x48>
		} else if (evt == EVT_START) {
   114d8:	2803      	cmp	r0, #3
   114da:	d0aa      	beq.n	11432 <process_event+0x5a>
		} else if (evt == EVT_STOP) {
   114dc:	2804      	cmp	r0, #4
   114de:	d0b1      	beq.n	11444 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
   114e0:	2805      	cmp	r0, #5
   114e2:	d0b8      	beq.n	11456 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
   114e4:	2700      	movs	r7, #0
		res = 0;
   114e6:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   114e8:	8b23      	ldrh	r3, [r4, #24]
   114ea:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   114ee:	45b0      	cmp	r8, r6
   114f0:	d0ba      	beq.n	11468 <process_event+0x90>
   114f2:	68a2      	ldr	r2, [r4, #8]
   114f4:	2a00      	cmp	r2, #0
   114f6:	d0b9      	beq.n	1146c <process_event+0x94>
   114f8:	2201      	movs	r2, #1
		if (do_monitors
   114fa:	4611      	mov	r1, r2
   114fc:	2a00      	cmp	r2, #0
   114fe:	d1b7      	bne.n	11470 <process_event+0x98>
   11500:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   11502:	2a00      	cmp	r2, #0
   11504:	d1b4      	bne.n	11470 <process_event+0x98>
		    || (transit != NULL)) {
   11506:	2f00      	cmp	r7, #0
   11508:	d1b2      	bne.n	11470 <process_event+0x98>
   1150a:	e7d2      	b.n	114b2 <process_event+0xda>
				notify_monitors(mgr, state, res);
   1150c:	464a      	mov	r2, r9
   1150e:	4641      	mov	r1, r8
   11510:	4620      	mov	r0, r4
   11512:	f006 f8a0 	bl	17656 <notify_monitors>
   11516:	e7b4      	b.n	11482 <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   11518:	f013 0f20 	tst.w	r3, #32
   1151c:	d004      	beq.n	11528 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1151e:	f023 0320 	bic.w	r3, r3, #32
   11522:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
   11524:	2002      	movs	r0, #2
   11526:	e7cc      	b.n	114c2 <process_event+0xea>
		evt = EVT_NOP;
   11528:	2000      	movs	r0, #0
   1152a:	e7ca      	b.n	114c2 <process_event+0xea>
   1152c:	000177e1 	.word	0x000177e1

00011530 <encode_float>:
			  struct conversion *conv,
			  int precision,
			  char *sign,
			  char *bps,
			  const char **bpe)
{
   11530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11534:	b089      	sub	sp, #36	; 0x24
   11536:	4692      	mov	sl, r2
   11538:	461d      	mov	r5, r3
	char *buf = bps;

	/* Prepend the sign: '-' if negative, flags control
	 * non-negative behavior.
	 */
	if ((u.u64 & SIGN_MASK) != 0U) {
   1153a:	2800      	cmp	r0, #0
   1153c:	f171 0300 	sbcs.w	r3, r1, #0
   11540:	db08      	blt.n	11554 <encode_float+0x24>
		*sign = '-';
	} else if (conv->flag_plus) {
   11542:	f89a 3000 	ldrb.w	r3, [sl]
   11546:	f013 0f08 	tst.w	r3, #8
   1154a:	d014      	beq.n	11576 <encode_float+0x46>
		*sign = '+';
   1154c:	232b      	movs	r3, #43	; 0x2b
   1154e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11550:	7013      	strb	r3, [r2, #0]
   11552:	e002      	b.n	1155a <encode_float+0x2a>
		*sign = '-';
   11554:	232d      	movs	r3, #45	; 0x2d
   11556:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11558:	7013      	strb	r3, [r2, #0]
	}

	/* Extract the non-negative offset exponent and fraction.  Record
	 * whether the value is subnormal.
	 */
	char c = conv->specifier;
   1155a:	f89a b003 	ldrb.w	fp, [sl, #3]
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   1155e:	f3c1 540a 	ubfx	r4, r1, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   11562:	4602      	mov	r2, r0
   11564:	f3c1 0313 	ubfx	r3, r1, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
   11568:	b964      	cbnz	r4, 11584 <encode_float+0x54>
   1156a:	ea52 0103 	orrs.w	r1, r2, r3
   1156e:	d130      	bne.n	115d2 <encode_float+0xa2>
   11570:	f04f 0e00 	mov.w	lr, #0
   11574:	e008      	b.n	11588 <encode_float+0x58>
	} else if (conv->flag_space) {
   11576:	f013 0f10 	tst.w	r3, #16
   1157a:	d0ee      	beq.n	1155a <encode_float+0x2a>
		*sign = ' ';
   1157c:	2320      	movs	r3, #32
   1157e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11580:	7013      	strb	r3, [r2, #0]
   11582:	e7ea      	b.n	1155a <encode_float+0x2a>
	bool is_subnormal = (expo == 0) && (fract != 0);
   11584:	f04f 0e00 	mov.w	lr, #0

	/* Exponent of all-ones signals infinity or NaN, which are
	 * text constants regardless of specifier.
	 */
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   11588:	f240 71ff 	movw	r1, #2047	; 0x7ff
   1158c:	428c      	cmp	r4, r1
   1158e:	d023      	beq.n	115d8 <encode_float+0xa8>
		*bpe = buf;
		return bps;
	}

	/* The case of an F specifier is no longer relevant. */
	if (c == 'F') {
   11590:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
   11594:	d05c      	beq.n	11650 <encode_float+0x120>

	/* Remainder of code operates on a 64-bit fraction, so shift up (and
	 * discard garbage from the exponent where the implicit 1 would be
	 * stored).
	 */
	fract <<= EXPONENT_BITS;
   11596:	ea4f 2cc3 	mov.w	ip, r3, lsl #11
   1159a:	ea4c 5c52 	orr.w	ip, ip, r2, lsr #21
   1159e:	02d2      	lsls	r2, r2, #11
	fract &= ~SIGN_MASK;
   115a0:	f02c 4c00 	bic.w	ip, ip, #2147483648	; 0x80000000
   115a4:	9206      	str	r2, [sp, #24]
   115a6:	f8cd c01c 	str.w	ip, [sp, #28]

	/* Non-zero values need normalization. */
	if ((expo | fract) != 0) {
   115aa:	ea44 0002 	orr.w	r0, r4, r2
   115ae:	17e3      	asrs	r3, r4, #31
   115b0:	ea43 010c 	orr.w	r1, r3, ip
   115b4:	ea50 0301 	orrs.w	r3, r0, r1
   115b8:	d008      	beq.n	115cc <encode_float+0x9c>
		if (is_subnormal) {
   115ba:	f1be 0f00 	cmp.w	lr, #0
   115be:	d14b      	bne.n	11658 <encode_float+0x128>
		}
		/* Adjust the offset exponent to be signed rather than offset,
		 * and set the implicit 1 bit in the (shifted) 53-bit
		 * fraction.
		 */
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   115c0:	f2a4 34fe 	subw	r4, r4, #1022	; 0x3fe
		fract |= BIT_63;
   115c4:	9b07      	ldr	r3, [sp, #28]
   115c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   115ca:	9307      	str	r3, [sp, #28]
		c = 'f';
   115cc:	f04f 0800 	mov.w	r8, #0
   115d0:	e05d      	b.n	1168e <encode_float+0x15e>
	bool is_subnormal = (expo == 0) && (fract != 0);
   115d2:	f04f 0e01 	mov.w	lr, #1
   115d6:	e7d7      	b.n	11588 <encode_float+0x58>
		if (fract == 0) {
   115d8:	4313      	orrs	r3, r2
   115da:	d120      	bne.n	1161e <encode_float+0xee>
extern "C" {
#endif

static inline int isupper(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   115dc:	f1ab 0b41 	sub.w	fp, fp, #65	; 0x41
			if (isupper((int)c)) {
   115e0:	f1bb 0f19 	cmp.w	fp, #25
   115e4:	d811      	bhi.n	1160a <encode_float+0xda>
				*buf++ = 'I';
   115e6:	2349      	movs	r3, #73	; 0x49
   115e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   115ea:	7013      	strb	r3, [r2, #0]
				*buf++ = 'N';
   115ec:	234e      	movs	r3, #78	; 0x4e
   115ee:	7053      	strb	r3, [r2, #1]
				*buf++ = 'F';
   115f0:	3203      	adds	r2, #3
   115f2:	2346      	movs	r3, #70	; 0x46
   115f4:	9913      	ldr	r1, [sp, #76]	; 0x4c
   115f6:	708b      	strb	r3, [r1, #2]
		conv->flag_zero = false;
   115f8:	f89a 3000 	ldrb.w	r3, [sl]
   115fc:	f36f 1386 	bfc	r3, #6, #1
   11600:	f88a 3000 	strb.w	r3, [sl]
		*bpe = buf;
   11604:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11606:	601a      	str	r2, [r3, #0]
		return bps;
   11608:	e18d      	b.n	11926 <encode_float+0x3f6>
				*buf++ = 'i';
   1160a:	2369      	movs	r3, #105	; 0x69
   1160c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1160e:	7013      	strb	r3, [r2, #0]
				*buf++ = 'n';
   11610:	236e      	movs	r3, #110	; 0x6e
   11612:	7053      	strb	r3, [r2, #1]
				*buf++ = 'f';
   11614:	3203      	adds	r2, #3
   11616:	2366      	movs	r3, #102	; 0x66
   11618:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1161a:	708b      	strb	r3, [r1, #2]
   1161c:	e7ec      	b.n	115f8 <encode_float+0xc8>
   1161e:	f1ab 0b41 	sub.w	fp, fp, #65	; 0x41
			if (isupper((int)c)) {
   11622:	f1bb 0f19 	cmp.w	fp, #25
   11626:	d809      	bhi.n	1163c <encode_float+0x10c>
				*buf++ = 'N';
   11628:	234e      	movs	r3, #78	; 0x4e
   1162a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1162c:	7013      	strb	r3, [r2, #0]
				*buf++ = 'A';
   1162e:	2241      	movs	r2, #65	; 0x41
   11630:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11632:	704a      	strb	r2, [r1, #1]
				*buf++ = 'N';
   11634:	460a      	mov	r2, r1
   11636:	3203      	adds	r2, #3
   11638:	708b      	strb	r3, [r1, #2]
   1163a:	e7dd      	b.n	115f8 <encode_float+0xc8>
				*buf++ = 'n';
   1163c:	236e      	movs	r3, #110	; 0x6e
   1163e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11640:	7013      	strb	r3, [r2, #0]
				*buf++ = 'a';
   11642:	2261      	movs	r2, #97	; 0x61
   11644:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11646:	704a      	strb	r2, [r1, #1]
				*buf++ = 'n';
   11648:	460a      	mov	r2, r1
   1164a:	3203      	adds	r2, #3
   1164c:	708b      	strb	r3, [r1, #2]
   1164e:	e7d3      	b.n	115f8 <encode_float+0xc8>
		c = 'f';
   11650:	f04f 0b66 	mov.w	fp, #102	; 0x66
   11654:	e79f      	b.n	11596 <encode_float+0x66>
				expo--;
   11656:	3c01      	subs	r4, #1
			while (((fract <<= 1) & BIT_63) == 0) {
   11658:	9b06      	ldr	r3, [sp, #24]
   1165a:	9a07      	ldr	r2, [sp, #28]
   1165c:	eb13 0803 	adds.w	r8, r3, r3
   11660:	eb42 0902 	adc.w	r9, r2, r2
   11664:	e9cd 8906 	strd	r8, r9, [sp, #24]
   11668:	f1b8 0f00 	cmp.w	r8, #0
   1166c:	f179 0300 	sbcs.w	r3, r9, #0
   11670:	daf1      	bge.n	11656 <encode_float+0x126>
   11672:	e7a5      	b.n	115c0 <encode_float+0x90>
			fract >>= 1;
			expo++;
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));

		/* Perform fract * 5 * 2 / 10 */
		fract *= 5U;
   11674:	ea4f 0c82 	mov.w	ip, r2, lsl #2
   11678:	0098      	lsls	r0, r3, #2
   1167a:	ea4c 7493 	orr.w	r4, ip, r3, lsr #30
   1167e:	18c3      	adds	r3, r0, r3
   11680:	eb44 0202 	adc.w	r2, r4, r2
   11684:	9306      	str	r3, [sp, #24]
   11686:	9207      	str	r2, [sp, #28]
		expo++;
   11688:	1c8c      	adds	r4, r1, #2
		decexp--;
   1168a:	f108 38ff 	add.w	r8, r8, #4294967295
	while (expo < -2) {
   1168e:	f114 0f02 	cmn.w	r4, #2
   11692:	da26      	bge.n	116e2 <encode_float+0x1b2>
			fract >>= 1;
   11694:	9907      	ldr	r1, [sp, #28]
   11696:	9b06      	ldr	r3, [sp, #24]
   11698:	085b      	lsrs	r3, r3, #1
   1169a:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
   1169e:	084a      	lsrs	r2, r1, #1
   116a0:	9306      	str	r3, [sp, #24]
   116a2:	9207      	str	r2, [sp, #28]
			expo++;
   116a4:	4621      	mov	r1, r4
   116a6:	3401      	adds	r4, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   116a8:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
   116ac:	d2f2      	bcs.n	11694 <encode_float+0x164>
   116ae:	e7e1      	b.n	11674 <encode_float+0x144>
		/*
		 * Perform fract / 5 / 2 * 10.
		 * The +2 is there to do round the result of the division
		 * by 5 not to lose too much precision in extreme cases.
		 */
		fract += 2;
   116b0:	9b06      	ldr	r3, [sp, #24]
   116b2:	3302      	adds	r3, #2
   116b4:	9a07      	ldr	r2, [sp, #28]
   116b6:	f142 0200 	adc.w	r2, r2, #0
   116ba:	9306      	str	r3, [sp, #24]
   116bc:	9207      	str	r2, [sp, #28]
		_ldiv5(&fract);
   116be:	a806      	add	r0, sp, #24
   116c0:	f006 fb1a 	bl	17cf8 <_ldiv5>
		expo--;
   116c4:	3c01      	subs	r4, #1
		decexp++;
   116c6:	f108 0801 	add.w	r8, r8, #1

		/* Bring back our fractional number to full scale */
		do {
			fract <<= 1;
   116ca:	9b06      	ldr	r3, [sp, #24]
   116cc:	9a07      	ldr	r2, [sp, #28]
   116ce:	18de      	adds	r6, r3, r3
   116d0:	eb42 0702 	adc.w	r7, r2, r2
   116d4:	e9cd 6706 	strd	r6, r7, [sp, #24]
			expo--;
   116d8:	3c01      	subs	r4, #1
		} while (!(fract & BIT_63));
   116da:	2e00      	cmp	r6, #0
   116dc:	f177 0300 	sbcs.w	r3, r7, #0
   116e0:	daf3      	bge.n	116ca <encode_float+0x19a>
	while (expo > 0) {
   116e2:	2c00      	cmp	r4, #0
   116e4:	dce4      	bgt.n	116b0 <encode_float+0x180>
	/*
	 * The binary fractional point is located somewhere above bit 63.
	 * Move it between bits 59 and 60 to give 4 bits of room to the
	 * integer part.
	 */
	fract >>= (4 - expo);
   116e6:	f1c4 0104 	rsb	r1, r4, #4
   116ea:	9a07      	ldr	r2, [sp, #28]
   116ec:	341c      	adds	r4, #28
   116ee:	f1a1 0020 	sub.w	r0, r1, #32
   116f2:	9b06      	ldr	r3, [sp, #24]
   116f4:	40cb      	lsrs	r3, r1
   116f6:	fa02 f404 	lsl.w	r4, r2, r4
   116fa:	4323      	orrs	r3, r4
   116fc:	fa22 f000 	lsr.w	r0, r2, r0
   11700:	4303      	orrs	r3, r0
   11702:	40ca      	lsrs	r2, r1
   11704:	9306      	str	r3, [sp, #24]
   11706:	9207      	str	r2, [sp, #28]

	if ((c == 'g') || (c == 'G')) {
   11708:	f1bb 0f67 	cmp.w	fp, #103	; 0x67
   1170c:	d012      	beq.n	11734 <encode_float+0x204>
   1170e:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   11712:	d00f      	beq.n	11734 <encode_float+0x204>
	bool prune_zero = false;
   11714:	2700      	movs	r7, #0
			prune_zero = true;
		}
	}

	int decimals;
	if (c == 'f') {
   11716:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   1171a:	d029      	beq.n	11770 <encode_float+0x240>
		decimals = precision + decexp;
		if (decimals < 0) {
			decimals = 0;
		}
	} else {
		decimals = precision + 1;
   1171c:	1c6c      	adds	r4, r5, #1
	}

	int digit_count = 16;
   1171e:	2310      	movs	r3, #16
   11720:	9305      	str	r3, [sp, #20]

	if (decimals > 16) {
   11722:	429c      	cmp	r4, r3
   11724:	dd00      	ble.n	11728 <encode_float+0x1f8>
		decimals = 16;
   11726:	461c      	mov	r4, r3
	}

	/* Round the value to the last digit being printed. */
	uint64_t round = BIT64(59); /* 0.5 */
   11728:	2200      	movs	r2, #0
   1172a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1172e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	while (decimals--) {
   11732:	e028      	b.n	11786 <encode_float+0x256>
		if (decexp < (-4 + 1) || decexp > precision) {
   11734:	f118 0f03 	cmn.w	r8, #3
   11738:	db01      	blt.n	1173e <encode_float+0x20e>
   1173a:	45a8      	cmp	r8, r5
   1173c:	dd11      	ble.n	11762 <encode_float+0x232>
			c += 'e' - 'g';  /* e or E */
   1173e:	f1ab 0b02 	sub.w	fp, fp, #2
   11742:	fa5f fb8b 	uxtb.w	fp, fp
			if (precision > 0) {
   11746:	2d00      	cmp	r5, #0
   11748:	dd00      	ble.n	1174c <encode_float+0x21c>
				precision--;
   1174a:	3d01      	subs	r5, #1
		if (!conv->flag_hash && (precision > 0)) {
   1174c:	f89a 3000 	ldrb.w	r3, [sl]
   11750:	f3c3 1740 	ubfx	r7, r3, #5, #1
   11754:	f013 0f20 	tst.w	r3, #32
   11758:	d108      	bne.n	1176c <encode_float+0x23c>
   1175a:	2d00      	cmp	r5, #0
   1175c:	dddb      	ble.n	11716 <encode_float+0x1e6>
			prune_zero = true;
   1175e:	2701      	movs	r7, #1
   11760:	e7d9      	b.n	11716 <encode_float+0x1e6>
			precision -= decexp;
   11762:	eba5 0508 	sub.w	r5, r5, r8
			c = 'f';
   11766:	f04f 0b66 	mov.w	fp, #102	; 0x66
   1176a:	e7ef      	b.n	1174c <encode_float+0x21c>
	bool prune_zero = false;
   1176c:	2700      	movs	r7, #0
   1176e:	e7d2      	b.n	11716 <encode_float+0x1e6>
		if (decimals < 0) {
   11770:	eb18 0405 	adds.w	r4, r8, r5
   11774:	d5d3      	bpl.n	1171e <encode_float+0x1ee>
	int digit_count = 16;
   11776:	2310      	movs	r3, #16
   11778:	9305      	str	r3, [sp, #20]
			decimals = 0;
   1177a:	2400      	movs	r4, #0
   1177c:	e7d4      	b.n	11728 <encode_float+0x1f8>
		_ldiv10(&round);
   1177e:	a802      	add	r0, sp, #8
   11780:	f006 fad8 	bl	17d34 <_ldiv10>
	while (decimals--) {
   11784:	4634      	mov	r4, r6
   11786:	1e66      	subs	r6, r4, #1
   11788:	2c00      	cmp	r4, #0
   1178a:	d1f8      	bne.n	1177e <encode_float+0x24e>
	}
	fract += round;
   1178c:	9b06      	ldr	r3, [sp, #24]
   1178e:	9a02      	ldr	r2, [sp, #8]
   11790:	189b      	adds	r3, r3, r2
   11792:	9300      	str	r3, [sp, #0]
   11794:	9a07      	ldr	r2, [sp, #28]
   11796:	9b03      	ldr	r3, [sp, #12]
   11798:	eb42 0303 	adc.w	r3, r2, r3
   1179c:	9301      	str	r3, [sp, #4]
   1179e:	e9dd 2300 	ldrd	r2, r3, [sp]
   117a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
	/* Make sure rounding didn't make fract >= 1.0 */
	if (fract >= BIT64(60)) {
   117a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   117aa:	bf08      	it	eq
   117ac:	2a00      	cmpeq	r2, #0
   117ae:	d207      	bcs.n	117c0 <encode_float+0x290>
		_ldiv10(&fract);
		decexp++;
	}

	if (c == 'f') {
   117b0:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   117b4:	d145      	bne.n	11842 <encode_float+0x312>
		if (decexp > 0) {
   117b6:	f1b8 0f00 	cmp.w	r8, #0
   117ba:	dd3d      	ble.n	11838 <encode_float+0x308>
	char *buf = bps;
   117bc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   117be:	e00d      	b.n	117dc <encode_float+0x2ac>
		_ldiv10(&fract);
   117c0:	a806      	add	r0, sp, #24
   117c2:	f006 fab7 	bl	17d34 <_ldiv10>
		decexp++;
   117c6:	f108 0801 	add.w	r8, r8, #1
   117ca:	e7f1      	b.n	117b0 <encode_float+0x280>
			/* Emit the digits above the decimal point. */
			while (decexp > 0 && digit_count > 0) {
				*buf++ = _get_digit(&fract, &digit_count);
   117cc:	a905      	add	r1, sp, #20
   117ce:	a806      	add	r0, sp, #24
   117d0:	f006 fabc 	bl	17d4c <_get_digit>
   117d4:	f806 0b01 	strb.w	r0, [r6], #1
				decexp--;
   117d8:	f108 38ff 	add.w	r8, r8, #4294967295
			while (decexp > 0 && digit_count > 0) {
   117dc:	f1b8 0f00 	cmp.w	r8, #0
   117e0:	dd02      	ble.n	117e8 <encode_float+0x2b8>
   117e2:	9b05      	ldr	r3, [sp, #20]
   117e4:	2b00      	cmp	r3, #0
   117e6:	dcf1      	bgt.n	117cc <encode_float+0x29c>
			}

			conv->pad0_value = decexp;
   117e8:	f8ca 8004 	str.w	r8, [sl, #4]

			decexp = 0;
   117ec:	46a0      	mov	r8, r4
		}

		/* Emit the decimal point only if required by the alternative
		 * format, or if more digits are to follow.
		 */
		if (conv->flag_hash || (precision > 0)) {
   117ee:	f89a 3000 	ldrb.w	r3, [sl]
   117f2:	f013 0f20 	tst.w	r3, #32
   117f6:	d101      	bne.n	117fc <encode_float+0x2cc>
   117f8:	2d00      	cmp	r5, #0
   117fa:	dd02      	ble.n	11802 <encode_float+0x2d2>
			*buf++ = '.';
   117fc:	232e      	movs	r3, #46	; 0x2e
   117fe:	f806 3b01 	strb.w	r3, [r6], #1
		}

		if (decexp < 0 && precision > 0) {
   11802:	f1b8 0f00 	cmp.w	r8, #0
   11806:	da3b      	bge.n	11880 <encode_float+0x350>
   11808:	2d00      	cmp	r5, #0
   1180a:	dd39      	ble.n	11880 <encode_float+0x350>
			conv->pad0_value = -decexp;
   1180c:	f1c8 0300 	rsb	r3, r8, #0
   11810:	f8ca 3004 	str.w	r3, [sl, #4]
			if (conv->pad0_value > precision) {
   11814:	429d      	cmp	r5, r3
   11816:	da01      	bge.n	1181c <encode_float+0x2ec>
				conv->pad0_value = precision;
   11818:	f8ca 5004 	str.w	r5, [sl, #4]
			}

			precision -= conv->pad0_value;
   1181c:	f8da 3004 	ldr.w	r3, [sl, #4]
   11820:	1aed      	subs	r5, r5, r3
			conv->pad_postdp = (conv->pad0_value > 0);
   11822:	2b00      	cmp	r3, #0
   11824:	bfd4      	ite	le
   11826:	2300      	movle	r3, #0
   11828:	2301      	movgt	r3, #1
   1182a:	f89a 2002 	ldrb.w	r2, [sl, #2]
   1182e:	f363 1245 	bfi	r2, r3, #5, #1
   11832:	f88a 2002 	strb.w	r2, [sl, #2]
   11836:	e023      	b.n	11880 <encode_float+0x350>
			*buf++ = '0';
   11838:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   1183a:	2330      	movs	r3, #48	; 0x30
   1183c:	f806 3b01 	strb.w	r3, [r6], #1
   11840:	e7d5      	b.n	117ee <encode_float+0x2be>
		}
	} else { /* e or E */
		/* Emit the one digit before the decimal.  If it's not zero,
		 * this is significant so reduce the base-10 exponent.
		 */
		*buf = _get_digit(&fract, &digit_count);
   11842:	a905      	add	r1, sp, #20
   11844:	a806      	add	r0, sp, #24
   11846:	f006 fa81 	bl	17d4c <_get_digit>
   1184a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   1184c:	f806 0b01 	strb.w	r0, [r6], #1
		if (*buf++ != '0') {
   11850:	2830      	cmp	r0, #48	; 0x30
   11852:	d001      	beq.n	11858 <encode_float+0x328>
			decexp--;
   11854:	f108 38ff 	add.w	r8, r8, #4294967295
		}

		/* Emit the decimal point only if required by the alternative
		 * format, or if more digits are to follow.
		 */
		if (conv->flag_hash || (precision > 0)) {
   11858:	f89a 3000 	ldrb.w	r3, [sl]
   1185c:	f013 0f20 	tst.w	r3, #32
   11860:	d101      	bne.n	11866 <encode_float+0x336>
   11862:	2d00      	cmp	r5, #0
   11864:	dd0c      	ble.n	11880 <encode_float+0x350>
			*buf++ = '.';
   11866:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11868:	1c9e      	adds	r6, r3, #2
   1186a:	232e      	movs	r3, #46	; 0x2e
   1186c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1186e:	7053      	strb	r3, [r2, #1]
   11870:	e006      	b.n	11880 <encode_float+0x350>
		}
	}

	while (precision > 0 && digit_count > 0) {
		*buf++ = _get_digit(&fract, &digit_count);
   11872:	a905      	add	r1, sp, #20
   11874:	a806      	add	r0, sp, #24
   11876:	f006 fa69 	bl	17d4c <_get_digit>
   1187a:	f806 0b01 	strb.w	r0, [r6], #1
		precision--;
   1187e:	3d01      	subs	r5, #1
	while (precision > 0 && digit_count > 0) {
   11880:	2d00      	cmp	r5, #0
   11882:	dd02      	ble.n	1188a <encode_float+0x35a>
   11884:	9b05      	ldr	r3, [sp, #20]
   11886:	2b00      	cmp	r3, #0
   11888:	dcf3      	bgt.n	11872 <encode_float+0x342>
	}

	conv->pad0_pre_exp = precision;
   1188a:	f8ca 5008 	str.w	r5, [sl, #8]

	if (prune_zero) {
   1188e:	b157      	cbz	r7, 118a6 <encode_float+0x376>
		conv->pad0_pre_exp = 0;
   11890:	2300      	movs	r3, #0
   11892:	f8ca 3008 	str.w	r3, [sl, #8]
		while (*--buf == '0') {
   11896:	4633      	mov	r3, r6
   11898:	461e      	mov	r6, r3
   1189a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1189e:	2a30      	cmp	r2, #48	; 0x30
   118a0:	d0fa      	beq.n	11898 <encode_float+0x368>
			;
		}
		if (*buf != '.') {
   118a2:	2a2e      	cmp	r2, #46	; 0x2e
   118a4:	d043      	beq.n	1192e <encode_float+0x3fe>
			buf++;
		}
	}

	/* Emit the explicit exponent, if format requires it. */
	if ((c == 'e') || (c == 'E')) {
   118a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   118aa:	d002      	beq.n	118b2 <encode_float+0x382>
   118ac:	f1bb 0f45 	cmp.w	fp, #69	; 0x45
   118b0:	d12a      	bne.n	11908 <encode_float+0x3d8>
		*buf++ = c;
   118b2:	f886 b000 	strb.w	fp, [r6]
		if (decexp < 0) {
   118b6:	f1b8 0f00 	cmp.w	r8, #0
   118ba:	db3a      	blt.n	11932 <encode_float+0x402>
			decexp = -decexp;
			*buf++ = '-';
		} else {
			*buf++ = '+';
   118bc:	1cb2      	adds	r2, r6, #2
   118be:	232b      	movs	r3, #43	; 0x2b
   118c0:	7073      	strb	r3, [r6, #1]
		}

		/* At most 3 digits to the decimal.  Spit them out. */
		if (decexp >= 100) {
   118c2:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
   118c6:	dd0d      	ble.n	118e4 <encode_float+0x3b4>
			*buf++ = (decexp / 100) + '0';
   118c8:	4920      	ldr	r1, [pc, #128]	; (1194c <encode_float+0x41c>)
   118ca:	fb81 3108 	smull	r3, r1, r1, r8
   118ce:	ea4f 73e8 	mov.w	r3, r8, asr #31
   118d2:	ebc3 1361 	rsb	r3, r3, r1, asr #5
   118d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
   118da:	f802 1b01 	strb.w	r1, [r2], #1
			decexp %= 100;
   118de:	2164      	movs	r1, #100	; 0x64
   118e0:	fb01 8813 	mls	r8, r1, r3, r8
		}

		*buf++ = (decexp / 10) + '0';
   118e4:	491a      	ldr	r1, [pc, #104]	; (11950 <encode_float+0x420>)
   118e6:	fb81 3108 	smull	r3, r1, r1, r8
   118ea:	ea4f 73e8 	mov.w	r3, r8, asr #31
   118ee:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   118f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
   118f6:	4616      	mov	r6, r2
   118f8:	f806 1b02 	strb.w	r1, [r6], #2
		*buf++ = (decexp % 10) + '0';
   118fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   11900:	eba8 0343 	sub.w	r3, r8, r3, lsl #1
   11904:	3330      	adds	r3, #48	; 0x30
   11906:	7053      	strb	r3, [r2, #1]
	}

	/* Cache whether there's padding required */
	conv->pad_fp = (conv->pad0_value > 0)
   11908:	f8da 3004 	ldr.w	r3, [sl, #4]
		|| (conv->pad0_pre_exp > 0);
   1190c:	2b00      	cmp	r3, #0
   1190e:	dd16      	ble.n	1193e <encode_float+0x40e>
   11910:	2401      	movs	r4, #1
	conv->pad_fp = (conv->pad0_value > 0)
   11912:	f89a 3002 	ldrb.w	r3, [sl, #2]
   11916:	f364 1386 	bfi	r3, r4, #6, #1
   1191a:	f88a 3002 	strb.w	r3, [sl, #2]

	/* Set the end of the encoded sequence, and return its start.  Also
	 * store EOS as a non-digit/non-decimal value so we don't have to
	 * check against bpe when iterating in multiple places.
	 */
	*bpe = buf;
   1191e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11920:	601e      	str	r6, [r3, #0]
	*buf = 0;
   11922:	2300      	movs	r3, #0
   11924:	7033      	strb	r3, [r6, #0]
	return bps;
}
   11926:	9813      	ldr	r0, [sp, #76]	; 0x4c
   11928:	b009      	add	sp, #36	; 0x24
   1192a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (*--buf == '0') {
   1192e:	461e      	mov	r6, r3
   11930:	e7b9      	b.n	118a6 <encode_float+0x376>
			decexp = -decexp;
   11932:	f1c8 0800 	rsb	r8, r8, #0
			*buf++ = '-';
   11936:	1cb2      	adds	r2, r6, #2
   11938:	232d      	movs	r3, #45	; 0x2d
   1193a:	7073      	strb	r3, [r6, #1]
   1193c:	e7c1      	b.n	118c2 <encode_float+0x392>
		|| (conv->pad0_pre_exp > 0);
   1193e:	f8da 3008 	ldr.w	r3, [sl, #8]
   11942:	2b00      	cmp	r3, #0
   11944:	dde5      	ble.n	11912 <encode_float+0x3e2>
   11946:	2401      	movs	r4, #1
   11948:	e7e3      	b.n	11912 <encode_float+0x3e2>
   1194a:	bf00      	nop
   1194c:	51eb851f 	.word	0x51eb851f
   11950:	66666667 	.word	0x66666667

00011954 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   11954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11958:	b099      	sub	sp, #100	; 0x64
   1195a:	4606      	mov	r6, r0
   1195c:	460d      	mov	r5, r1
   1195e:	4617      	mov	r7, r2
   11960:	9305      	str	r3, [sp, #20]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   11962:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   11964:	e000      	b.n	11968 <cbvprintf+0x14>
		if (*fp != '%') {
			OUTC(*fp++);
   11966:	3401      	adds	r4, #1
	while (*fp != 0) {
   11968:	7838      	ldrb	r0, [r7, #0]
   1196a:	2800      	cmp	r0, #0
   1196c:	f000 8591 	beq.w	12492 <cbvprintf+0xb3e>
		if (*fp != '%') {
   11970:	2825      	cmp	r0, #37	; 0x25
   11972:	d007      	beq.n	11984 <cbvprintf+0x30>
			OUTC(*fp++);
   11974:	3701      	adds	r7, #1
   11976:	4629      	mov	r1, r5
   11978:	47b0      	blx	r6
   1197a:	2800      	cmp	r0, #0
   1197c:	daf3      	bge.n	11966 <cbvprintf+0x12>
	}

	return count;
#undef OUTS
#undef OUTC
}
   1197e:	b019      	add	sp, #100	; 0x64
   11980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} state = {
   11984:	2300      	movs	r3, #0
   11986:	930a      	str	r3, [sp, #40]	; 0x28
   11988:	930b      	str	r3, [sp, #44]	; 0x2c
   1198a:	930f      	str	r3, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
   1198c:	f10d 025d 	add.w	r2, sp, #93	; 0x5d
   11990:	9208      	str	r2, [sp, #32]
		char sign = 0;
   11992:	f88d 301f 	strb.w	r3, [sp, #31]
	*conv = (struct conversion) {
   11996:	930c      	str	r3, [sp, #48]	; 0x30
   11998:	930d      	str	r3, [sp, #52]	; 0x34
   1199a:	930e      	str	r3, [sp, #56]	; 0x38
	++sp;
   1199c:	f107 0901 	add.w	r9, r7, #1
	if (*sp == '%') {
   119a0:	787b      	ldrb	r3, [r7, #1]
   119a2:	2b25      	cmp	r3, #37	; 0x25
   119a4:	d002      	beq.n	119ac <cbvprintf+0x58>
	bool loop = true;
   119a6:	f04f 0801 	mov.w	r8, #1
   119aa:	e031      	b.n	11a10 <cbvprintf+0xbc>
		conv->specifier = *sp++;
   119ac:	f107 0902 	add.w	r9, r7, #2
   119b0:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		return sp;
   119b4:	e1ae      	b.n	11d14 <cbvprintf+0x3c0>
			conv->flag_dash = true;
   119b6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   119ba:	f043 0304 	orr.w	r3, r3, #4
   119be:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (loop) {
   119c2:	f1b8 0f00 	cmp.w	r8, #0
   119c6:	d020      	beq.n	11a0a <cbvprintf+0xb6>
			++sp;
   119c8:	f109 0901 	add.w	r9, r9, #1
   119cc:	e01d      	b.n	11a0a <cbvprintf+0xb6>
			conv->flag_plus = true;
   119ce:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   119d2:	f043 0308 	orr.w	r3, r3, #8
   119d6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
   119da:	e7f2      	b.n	119c2 <cbvprintf+0x6e>
			conv->flag_space = true;
   119dc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   119e0:	f043 0310 	orr.w	r3, r3, #16
   119e4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
   119e8:	e7eb      	b.n	119c2 <cbvprintf+0x6e>
			conv->flag_hash = true;
   119ea:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   119ee:	f043 0320 	orr.w	r3, r3, #32
   119f2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
   119f6:	e7e4      	b.n	119c2 <cbvprintf+0x6e>
			conv->flag_zero = true;
   119f8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   119fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11a00:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
   11a04:	e7dd      	b.n	119c2 <cbvprintf+0x6e>
		switch (*sp) {
   11a06:	f04f 0800 	mov.w	r8, #0
	} while (loop);
   11a0a:	f1b8 0f00 	cmp.w	r8, #0
   11a0e:	d029      	beq.n	11a64 <cbvprintf+0x110>
		switch (*sp) {
   11a10:	f899 3000 	ldrb.w	r3, [r9]
   11a14:	3b20      	subs	r3, #32
   11a16:	2b10      	cmp	r3, #16
   11a18:	d8f5      	bhi.n	11a06 <cbvprintf+0xb2>
   11a1a:	a201      	add	r2, pc, #4	; (adr r2, 11a20 <cbvprintf+0xcc>)
   11a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11a20:	000119dd 	.word	0x000119dd
   11a24:	00011a07 	.word	0x00011a07
   11a28:	00011a07 	.word	0x00011a07
   11a2c:	000119eb 	.word	0x000119eb
   11a30:	00011a07 	.word	0x00011a07
   11a34:	00011a07 	.word	0x00011a07
   11a38:	00011a07 	.word	0x00011a07
   11a3c:	00011a07 	.word	0x00011a07
   11a40:	00011a07 	.word	0x00011a07
   11a44:	00011a07 	.word	0x00011a07
   11a48:	00011a07 	.word	0x00011a07
   11a4c:	000119cf 	.word	0x000119cf
   11a50:	00011a07 	.word	0x00011a07
   11a54:	000119b7 	.word	0x000119b7
   11a58:	00011a07 	.word	0x00011a07
   11a5c:	00011a07 	.word	0x00011a07
   11a60:	000119f9 	.word	0x000119f9
	if (conv->flag_zero && conv->flag_dash) {
   11a64:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11a68:	f003 0344 	and.w	r3, r3, #68	; 0x44
   11a6c:	2b44      	cmp	r3, #68	; 0x44
   11a6e:	d06d      	beq.n	11b4c <cbvprintf+0x1f8>
	sp = extract_width(conv, sp);
   11a70:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
	conv->width_present = true;
   11a74:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11a7c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	if (*sp == '*') {
   11a80:	f899 3000 	ldrb.w	r3, [r9]
   11a84:	2b2a      	cmp	r3, #42	; 0x2a
   11a86:	d068      	beq.n	11b5a <cbvprintf+0x206>
	size_t width = extract_decimal(&sp);
   11a88:	a809      	add	r0, sp, #36	; 0x24
   11a8a:	f006 f922 	bl	17cd2 <extract_decimal>
	if (sp != wp) {
   11a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11a90:	4599      	cmp	r9, r3
   11a92:	d012      	beq.n	11aba <cbvprintf+0x166>
		conv->width_present = true;
   11a94:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11a9c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		conv->width_value = width;
   11aa0:	900d      	str	r0, [sp, #52]	; 0x34
		conv->unsupported |= ((conv->width_value < 0)
   11aa2:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   11aa6:	2800      	cmp	r0, #0
   11aa8:	db60      	blt.n	11b6c <cbvprintf+0x218>
   11aaa:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   11aac:	4313      	orrs	r3, r2
   11aae:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11ab2:	f363 0241 	bfi	r2, r3, #1, #1
   11ab6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   11aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
	sp = extract_prec(conv, sp);
   11abc:	9309      	str	r3, [sp, #36]	; 0x24
	conv->prec_present = (*sp == '.');
   11abe:	781b      	ldrb	r3, [r3, #0]
   11ac0:	2b2e      	cmp	r3, #46	; 0x2e
   11ac2:	bf14      	ite	ne
   11ac4:	2300      	movne	r3, #0
   11ac6:	2301      	moveq	r3, #1
   11ac8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   11acc:	f363 0241 	bfi	r2, r3, #1, #1
   11ad0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   11ad4:	2b00      	cmp	r3, #0
   11ad6:	d04b      	beq.n	11b70 <cbvprintf+0x21c>
	++sp;
   11ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11ada:	1c5a      	adds	r2, r3, #1
   11adc:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
   11ade:	785b      	ldrb	r3, [r3, #1]
   11ae0:	2b2a      	cmp	r3, #42	; 0x2a
   11ae2:	d048      	beq.n	11b76 <cbvprintf+0x222>
	size_t prec = extract_decimal(&sp);
   11ae4:	a809      	add	r0, sp, #36	; 0x24
   11ae6:	f006 f8f4 	bl	17cd2 <extract_decimal>
	conv->prec_value = prec;
   11aea:	900e      	str	r0, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   11aec:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11af0:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   11af4:	2800      	cmp	r0, #0
   11af6:	db47      	blt.n	11b88 <cbvprintf+0x234>
   11af8:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   11afa:	4313      	orrs	r3, r2
   11afc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11b00:	f363 0241 	bfi	r2, r3, #1, #1
   11b04:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   11b08:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
	switch (*sp) {
   11b0c:	f899 3000 	ldrb.w	r3, [r9]
   11b10:	3b4c      	subs	r3, #76	; 0x4c
   11b12:	2b2e      	cmp	r3, #46	; 0x2e
   11b14:	f200 80dc 	bhi.w	11cd0 <cbvprintf+0x37c>
   11b18:	e8df f003 	tbb	[pc, r3]
   11b1c:	dadadaca 	.word	0xdadadaca
   11b20:	dadadada 	.word	0xdadadada
   11b24:	dadadada 	.word	0xdadadada
   11b28:	dadadada 	.word	0xdadadada
   11b2c:	dadadada 	.word	0xdadadada
   11b30:	dadadada 	.word	0xdadadada
   11b34:	dadadada 	.word	0xdadadada
   11b38:	da6ada38 	.word	0xda6ada38
   11b3c:	dadada51 	.word	0xdadada51
   11b40:	dadadada 	.word	0xdadadada
   11b44:	dadadac0 	.word	0xdadadac0
   11b48:	dada      	.short	0xdada
   11b4a:	b6          	.byte	0xb6
   11b4b:	00          	.byte	0x00
		conv->flag_zero = false;
   11b4c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11b50:	f36f 1386 	bfc	r3, #6, #1
   11b54:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   11b58:	e78a      	b.n	11a70 <cbvprintf+0x11c>
		conv->width_star = true;
   11b5a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11b5e:	f043 0301 	orr.w	r3, r3, #1
   11b62:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		return ++sp;
   11b66:	464b      	mov	r3, r9
   11b68:	3301      	adds	r3, #1
   11b6a:	e7a7      	b.n	11abc <cbvprintf+0x168>
				      || (width != (size_t)conv->width_value));
   11b6c:	2201      	movs	r2, #1
   11b6e:	e79d      	b.n	11aac <cbvprintf+0x158>
		return sp;
   11b70:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   11b74:	e7ca      	b.n	11b0c <cbvprintf+0x1b8>
		conv->prec_star = true;
   11b76:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11b7a:	f043 0304 	orr.w	r3, r3, #4
   11b7e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		return ++sp;
   11b82:	f102 0901 	add.w	r9, r2, #1
   11b86:	e7c1      	b.n	11b0c <cbvprintf+0x1b8>
			      || (prec != (size_t)conv->prec_value));
   11b88:	2201      	movs	r2, #1
   11b8a:	e7b6      	b.n	11afa <cbvprintf+0x1a6>
		if (*++sp == 'h') {
   11b8c:	f109 0201 	add.w	r2, r9, #1
   11b90:	f899 3001 	ldrb.w	r3, [r9, #1]
   11b94:	2b68      	cmp	r3, #104	; 0x68
   11b96:	d008      	beq.n	11baa <cbvprintf+0x256>
			conv->length_mod = LENGTH_H;
   11b98:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11b9c:	2102      	movs	r1, #2
   11b9e:	f361 03c6 	bfi	r3, r1, #3, #4
   11ba2:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		if (*++sp == 'h') {
   11ba6:	4691      	mov	r9, r2
   11ba8:	e02b      	b.n	11c02 <cbvprintf+0x2ae>
			conv->length_mod = LENGTH_HH;
   11baa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11bae:	2201      	movs	r2, #1
   11bb0:	f362 03c6 	bfi	r3, r2, #3, #4
   11bb4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
			++sp;
   11bb8:	f109 0902 	add.w	r9, r9, #2
   11bbc:	e021      	b.n	11c02 <cbvprintf+0x2ae>
		if (*++sp == 'l') {
   11bbe:	f109 0201 	add.w	r2, r9, #1
   11bc2:	f899 3001 	ldrb.w	r3, [r9, #1]
   11bc6:	2b6c      	cmp	r3, #108	; 0x6c
   11bc8:	d008      	beq.n	11bdc <cbvprintf+0x288>
			conv->length_mod = LENGTH_L;
   11bca:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11bce:	2103      	movs	r1, #3
   11bd0:	f361 03c6 	bfi	r3, r1, #3, #4
   11bd4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		if (*++sp == 'l') {
   11bd8:	4691      	mov	r9, r2
   11bda:	e012      	b.n	11c02 <cbvprintf+0x2ae>
			conv->length_mod = LENGTH_LL;
   11bdc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11be0:	2204      	movs	r2, #4
   11be2:	f362 03c6 	bfi	r3, r2, #3, #4
   11be6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
			++sp;
   11bea:	f109 0902 	add.w	r9, r9, #2
   11bee:	e008      	b.n	11c02 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_J;
   11bf0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11bf4:	2205      	movs	r2, #5
   11bf6:	f362 03c6 	bfi	r3, r2, #3, #4
   11bfa:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
   11bfe:	f109 0901 	add.w	r9, r9, #1
	conv->specifier = *sp++;
   11c02:	f819 2b01 	ldrb.w	r2, [r9], #1
   11c06:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   11c0a:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   11c0e:	2b37      	cmp	r3, #55	; 0x37
   11c10:	f200 8185 	bhi.w	11f1e <cbvprintf+0x5ca>
   11c14:	e8df f013 	tbh	[pc, r3, lsl #1]
   11c18:	01830131 	.word	0x01830131
   11c1c:	01830183 	.word	0x01830183
   11c20:	01310131 	.word	0x01310131
   11c24:	01830131 	.word	0x01830131
   11c28:	01830183 	.word	0x01830183
   11c2c:	01830183 	.word	0x01830183
   11c30:	01830183 	.word	0x01830183
   11c34:	01830183 	.word	0x01830183
   11c38:	01830183 	.word	0x01830183
   11c3c:	01830183 	.word	0x01830183
   11c40:	01830183 	.word	0x01830183
   11c44:	011c0183 	.word	0x011c0183
   11c48:	01830183 	.word	0x01830183
   11c4c:	01830183 	.word	0x01830183
   11c50:	01830183 	.word	0x01830183
   11c54:	01830183 	.word	0x01830183
   11c58:	01830131 	.word	0x01830131
   11c5c:	0063011c 	.word	0x0063011c
   11c60:	01310131 	.word	0x01310131
   11c64:	01830131 	.word	0x01830131
   11c68:	01830063 	.word	0x01830063
   11c6c:	01830183 	.word	0x01830183
   11c70:	01620183 	.word	0x01620183
   11c74:	0173011c 	.word	0x0173011c
   11c78:	01830183 	.word	0x01830183
   11c7c:	01830173 	.word	0x01830173
   11c80:	0183011c 	.word	0x0183011c
   11c84:	011c0183 	.word	0x011c0183
		conv->length_mod = LENGTH_Z;
   11c88:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11c8c:	2206      	movs	r2, #6
   11c8e:	f362 03c6 	bfi	r3, r2, #3, #4
   11c92:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
   11c96:	f109 0901 	add.w	r9, r9, #1
		break;
   11c9a:	e7b2      	b.n	11c02 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_T;
   11c9c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11ca0:	2207      	movs	r2, #7
   11ca2:	f362 03c6 	bfi	r3, r2, #3, #4
   11ca6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
   11caa:	f109 0901 	add.w	r9, r9, #1
		break;
   11cae:	e7a8      	b.n	11c02 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_UPPER_L;
   11cb0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11cb4:	2208      	movs	r2, #8
   11cb6:	f362 03c6 	bfi	r3, r2, #3, #4
   11cba:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
   11cbe:	f109 0901 	add.w	r9, r9, #1
		conv->unsupported = true;
   11cc2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11cc6:	f043 0302 	orr.w	r3, r3, #2
   11cca:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		break;
   11cce:	e798      	b.n	11c02 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_NONE;
   11cd0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11cd4:	f36f 03c6 	bfc	r3, #3, #4
   11cd8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   11cdc:	e791      	b.n	11c02 <cbvprintf+0x2ae>
		conv->specifier_cat = SPECIFIER_SINT;
   11cde:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   11ce2:	2101      	movs	r1, #1
   11ce4:	f361 0302 	bfi	r3, r1, #0, #3
   11ce8:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   11cec:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11cf0:	f003 0378 	and.w	r3, r3, #120	; 0x78
   11cf4:	2b40      	cmp	r3, #64	; 0x40
   11cf6:	f000 80b3 	beq.w	11e60 <cbvprintf+0x50c>
		if (conv->specifier == 'c') {
   11cfa:	2a63      	cmp	r2, #99	; 0x63
   11cfc:	f000 80b7 	beq.w	11e6e <cbvprintf+0x51a>
	conv->unsupported |= unsupported;
   11d00:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11d04:	f3c3 0240 	ubfx	r2, r3, #1, #1
   11d08:	ea48 0802 	orr.w	r8, r8, r2
   11d0c:	f368 0341 	bfi	r3, r8, #1, #1
   11d10:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (conv->width_star) {
   11d14:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11d18:	f013 0f01 	tst.w	r3, #1
   11d1c:	f000 8112 	beq.w	11f44 <cbvprintf+0x5f0>
			width = va_arg(ap, int);
   11d20:	9b05      	ldr	r3, [sp, #20]
   11d22:	1d1a      	adds	r2, r3, #4
   11d24:	9205      	str	r2, [sp, #20]
   11d26:	f8d3 8000 	ldr.w	r8, [r3]
			if (width < 0) {
   11d2a:	f1b8 0f00 	cmp.w	r8, #0
   11d2e:	f2c0 8100 	blt.w	11f32 <cbvprintf+0x5de>
		if (conv->prec_star) {
   11d32:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11d36:	f013 0f04 	tst.w	r3, #4
   11d3a:	f000 8116 	beq.w	11f6a <cbvprintf+0x616>
			int arg = va_arg(ap, int);
   11d3e:	9b05      	ldr	r3, [sp, #20]
   11d40:	1d1a      	adds	r2, r3, #4
   11d42:	9205      	str	r2, [sp, #20]
   11d44:	f8d3 a000 	ldr.w	sl, [r3]
			if (arg < 0) {
   11d48:	f1ba 0f00 	cmp.w	sl, #0
   11d4c:	f2c0 8104 	blt.w	11f58 <cbvprintf+0x604>
		conv->pad0_value = 0;
   11d50:	2300      	movs	r3, #0
   11d52:	930d      	str	r3, [sp, #52]	; 0x34
		conv->pad0_pre_exp = 0;
   11d54:	930e      	str	r3, [sp, #56]	; 0x38
		    && (conv->specifier_cat == SPECIFIER_FP)
   11d56:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   11d5a:	f003 0307 	and.w	r3, r3, #7
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   11d5e:	2b04      	cmp	r3, #4
   11d60:	f000 810c 	beq.w	11f7c <cbvprintf+0x628>
			= (enum specifier_cat_enum)conv->specifier_cat;
   11d64:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   11d68:	f003 0307 	and.w	r3, r3, #7
			= (enum length_mod_enum)conv->length_mod;
   11d6c:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
   11d70:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   11d74:	2b01      	cmp	r3, #1
   11d76:	f000 8111 	beq.w	11f9c <cbvprintf+0x648>
		} else if (specifier_cat == SPECIFIER_UINT) {
   11d7a:	2b02      	cmp	r3, #2
   11d7c:	f000 8156 	beq.w	1202c <cbvprintf+0x6d8>
		} else if (specifier_cat == SPECIFIER_FP) {
   11d80:	2b04      	cmp	r3, #4
   11d82:	f000 81a7 	beq.w	120d4 <cbvprintf+0x780>
		} else if (specifier_cat == SPECIFIER_PTR) {
   11d86:	2b03      	cmp	r3, #3
   11d88:	f000 81be 	beq.w	12108 <cbvprintf+0x7b4>
		if (conv->invalid || conv->unsupported) {
   11d8c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11d90:	f012 0f03 	tst.w	r2, #3
   11d94:	f040 81be 	bne.w	12114 <cbvprintf+0x7c0>
		switch (conv->specifier) {
   11d98:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   11d9c:	3b25      	subs	r3, #37	; 0x25
   11d9e:	2b53      	cmp	r3, #83	; 0x53
   11da0:	f200 81cb 	bhi.w	1213a <cbvprintf+0x7e6>
   11da4:	e8df f013 	tbh	[pc, r3, lsl #1]
   11da8:	01c901c2 	.word	0x01c901c2
   11dac:	01c901c9 	.word	0x01c901c9
   11db0:	01c901c9 	.word	0x01c901c9
   11db4:	01c901c9 	.word	0x01c901c9
   11db8:	01c901c9 	.word	0x01c901c9
   11dbc:	01c901c9 	.word	0x01c901c9
   11dc0:	01c901c9 	.word	0x01c901c9
   11dc4:	01c901c9 	.word	0x01c901c9
   11dc8:	01c901c9 	.word	0x01c901c9
   11dcc:	01c901c9 	.word	0x01c901c9
   11dd0:	01c901c9 	.word	0x01c901c9
   11dd4:	01c901c9 	.word	0x01c901c9
   11dd8:	01c901c9 	.word	0x01c901c9
   11ddc:	01c901c9 	.word	0x01c901c9
   11de0:	01c9028a 	.word	0x01c9028a
   11de4:	01c901c9 	.word	0x01c901c9
   11de8:	028a028a 	.word	0x028a028a
   11dec:	01c9028a 	.word	0x01c9028a
   11df0:	01c901c9 	.word	0x01c901c9
   11df4:	01c901c9 	.word	0x01c901c9
   11df8:	01c901c9 	.word	0x01c901c9
   11dfc:	01c901c9 	.word	0x01c901c9
   11e00:	01c901c9 	.word	0x01c901c9
   11e04:	01c901c9 	.word	0x01c901c9
   11e08:	01c901c9 	.word	0x01c901c9
   11e0c:	022401c9 	.word	0x022401c9
   11e10:	01c901c9 	.word	0x01c901c9
   11e14:	01c901c9 	.word	0x01c901c9
   11e18:	01c901c9 	.word	0x01c901c9
   11e1c:	01c901c9 	.word	0x01c901c9
   11e20:	01c9028a 	.word	0x01c9028a
   11e24:	0216020e 	.word	0x0216020e
   11e28:	028a028a 	.word	0x028a028a
   11e2c:	01c9028a 	.word	0x01c9028a
   11e30:	01c90216 	.word	0x01c90216
   11e34:	01c901c9 	.word	0x01c901c9
   11e38:	026601c9 	.word	0x026601c9
   11e3c:	024e0224 	.word	0x024e0224
   11e40:	01c901c9 	.word	0x01c901c9
   11e44:	01c901cb 	.word	0x01c901cb
   11e48:	01c90224 	.word	0x01c90224
   11e4c:	022401c9 	.word	0x022401c9
		conv->specifier_cat = SPECIFIER_UINT;
   11e50:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   11e54:	2102      	movs	r1, #2
   11e56:	f361 0302 	bfi	r3, r1, #0, #3
   11e5a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   11e5e:	e745      	b.n	11cec <cbvprintf+0x398>
			conv->invalid = true;
   11e60:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   11e64:	f041 0101 	orr.w	r1, r1, #1
   11e68:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   11e6c:	e745      	b.n	11cfa <cbvprintf+0x3a6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   11e6e:	f1b3 0800 	subs.w	r8, r3, #0
   11e72:	bf18      	it	ne
   11e74:	f04f 0801 	movne.w	r8, #1
   11e78:	e742      	b.n	11d00 <cbvprintf+0x3ac>
		conv->specifier_cat = SPECIFIER_FP;
   11e7a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   11e7e:	2104      	movs	r1, #4
   11e80:	f361 0302 	bfi	r3, r1, #0, #3
   11e84:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			|| (conv->specifier == 'A');
   11e88:	2a61      	cmp	r2, #97	; 0x61
   11e8a:	d01f      	beq.n	11ecc <cbvprintf+0x578>
   11e8c:	2a41      	cmp	r2, #65	; 0x41
   11e8e:	d01b      	beq.n	11ec8 <cbvprintf+0x574>
   11e90:	2200      	movs	r2, #0
		conv->specifier_a = (conv->specifier == 'a')
   11e92:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11e96:	f362 13c7 	bfi	r3, r2, #7, #1
   11e9a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		if (conv->specifier_a
   11e9e:	b2da      	uxtb	r2, r3
   11ea0:	f013 0f80 	tst.w	r3, #128	; 0x80
   11ea4:	d142      	bne.n	11f2c <cbvprintf+0x5d8>
		if (conv->length_mod == LENGTH_L) {
   11ea6:	f002 0278 	and.w	r2, r2, #120	; 0x78
   11eaa:	2a18      	cmp	r2, #24
   11eac:	d010      	beq.n	11ed0 <cbvprintf+0x57c>
		} else if ((conv->length_mod != LENGTH_NONE)
   11eae:	2a00      	cmp	r2, #0
   11eb0:	f43f af26 	beq.w	11d00 <cbvprintf+0x3ac>
			   && (conv->length_mod != LENGTH_UPPER_L)) {
   11eb4:	2a40      	cmp	r2, #64	; 0x40
   11eb6:	f43f af23 	beq.w	11d00 <cbvprintf+0x3ac>
			conv->invalid = true;
   11eba:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11ebe:	f043 0301 	orr.w	r3, r3, #1
   11ec2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   11ec6:	e71b      	b.n	11d00 <cbvprintf+0x3ac>
			|| (conv->specifier == 'A');
   11ec8:	2201      	movs	r2, #1
   11eca:	e7e2      	b.n	11e92 <cbvprintf+0x53e>
   11ecc:	2201      	movs	r2, #1
   11ece:	e7e0      	b.n	11e92 <cbvprintf+0x53e>
			conv->length_mod = LENGTH_NONE;
   11ed0:	b2db      	uxtb	r3, r3
   11ed2:	f36f 03c6 	bfc	r3, #3, #4
   11ed6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   11eda:	e711      	b.n	11d00 <cbvprintf+0x3ac>
		conv->specifier_cat = SPECIFIER_PTR;
   11edc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   11ee0:	2203      	movs	r2, #3
   11ee2:	f362 0302 	bfi	r3, r2, #0, #3
   11ee6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   11eea:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11eee:	f003 0378 	and.w	r3, r3, #120	; 0x78
   11ef2:	2b40      	cmp	r3, #64	; 0x40
   11ef4:	f47f af04 	bne.w	11d00 <cbvprintf+0x3ac>
			unsupported = true;
   11ef8:	f04f 0801 	mov.w	r8, #1
   11efc:	e700      	b.n	11d00 <cbvprintf+0x3ac>
		conv->specifier_cat = SPECIFIER_PTR;
   11efe:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   11f02:	2203      	movs	r2, #3
   11f04:	f362 0302 	bfi	r3, r2, #0, #3
   11f08:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   11f0c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11f10:	f013 0f78 	tst.w	r3, #120	; 0x78
   11f14:	f43f aef4 	beq.w	11d00 <cbvprintf+0x3ac>
			unsupported = true;
   11f18:	f04f 0801 	mov.w	r8, #1
   11f1c:	e6f0      	b.n	11d00 <cbvprintf+0x3ac>
		conv->invalid = true;
   11f1e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11f22:	f043 0301 	orr.w	r3, r3, #1
   11f26:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		break;
   11f2a:	e6e9      	b.n	11d00 <cbvprintf+0x3ac>
			unsupported = true;
   11f2c:	f04f 0801 	mov.w	r8, #1
   11f30:	e6e6      	b.n	11d00 <cbvprintf+0x3ac>
				conv->flag_dash = true;
   11f32:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11f36:	f043 0304 	orr.w	r3, r3, #4
   11f3a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
				width = -width;
   11f3e:	f1c8 0800 	rsb	r8, r8, #0
   11f42:	e6f6      	b.n	11d32 <cbvprintf+0x3de>
		} else if (conv->width_present) {
   11f44:	f99d 3030 	ldrsb.w	r3, [sp, #48]	; 0x30
   11f48:	2b00      	cmp	r3, #0
   11f4a:	db02      	blt.n	11f52 <cbvprintf+0x5fe>
		int width = -1;
   11f4c:	f04f 38ff 	mov.w	r8, #4294967295
   11f50:	e6ef      	b.n	11d32 <cbvprintf+0x3de>
			width = conv->width_value;
   11f52:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   11f56:	e6ec      	b.n	11d32 <cbvprintf+0x3de>
				conv->prec_present = false;
   11f58:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11f5c:	f36f 0341 	bfc	r3, #1, #1
   11f60:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   11f64:	f04f 3aff 	mov.w	sl, #4294967295
   11f68:	e6f2      	b.n	11d50 <cbvprintf+0x3fc>
		} else if (conv->prec_present) {
   11f6a:	f013 0f02 	tst.w	r3, #2
   11f6e:	d002      	beq.n	11f76 <cbvprintf+0x622>
			precision = conv->prec_value;
   11f70:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   11f74:	e6ec      	b.n	11d50 <cbvprintf+0x3fc>
		int precision = -1;
   11f76:	f04f 3aff 	mov.w	sl, #4294967295
   11f7a:	e6e9      	b.n	11d50 <cbvprintf+0x3fc>
		    && !conv->prec_present) {
   11f7c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11f80:	f013 0f02 	tst.w	r3, #2
   11f84:	f47f aeee 	bne.w	11d64 <cbvprintf+0x410>
			if (conv->specifier_a) {
   11f88:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
   11f8c:	2b00      	cmp	r3, #0
   11f8e:	db02      	blt.n	11f96 <cbvprintf+0x642>
				precision = 6;
   11f90:	f04f 0a06 	mov.w	sl, #6
   11f94:	e6e6      	b.n	11d64 <cbvprintf+0x410>
				precision = FRACTION_HEX;
   11f96:	f04f 0a0d 	mov.w	sl, #13
   11f9a:	e6e3      	b.n	11d64 <cbvprintf+0x410>
			switch (length_mod) {
   11f9c:	1ecb      	subs	r3, r1, #3
   11f9e:	2b04      	cmp	r3, #4
   11fa0:	d804      	bhi.n	11fac <cbvprintf+0x658>
   11fa2:	e8df f003 	tbb	[pc, r3]
   11fa6:	1d0b      	.short	0x1d0b
   11fa8:	3529      	.short	0x3529
   11faa:	35          	.byte	0x35
   11fab:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   11fac:	9b05      	ldr	r3, [sp, #20]
   11fae:	1d1a      	adds	r2, r3, #4
   11fb0:	9205      	str	r2, [sp, #20]
   11fb2:	681a      	ldr	r2, [r3, #0]
   11fb4:	17d3      	asrs	r3, r2, #31
   11fb6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   11fba:	e006      	b.n	11fca <cbvprintf+0x676>
					value->sint = va_arg(ap, long);
   11fbc:	9b05      	ldr	r3, [sp, #20]
   11fbe:	1d1a      	adds	r2, r3, #4
   11fc0:	9205      	str	r2, [sp, #20]
   11fc2:	681a      	ldr	r2, [r3, #0]
   11fc4:	17d3      	asrs	r3, r2, #31
   11fc6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   11fca:	2901      	cmp	r1, #1
   11fcc:	d028      	beq.n	12020 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
   11fce:	2902      	cmp	r1, #2
   11fd0:	f47f aedc 	bne.w	11d8c <cbvprintf+0x438>
				value->sint = (short)value->sint;
   11fd4:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
   11fd8:	17d3      	asrs	r3, r2, #31
   11fda:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   11fde:	e6d5      	b.n	11d8c <cbvprintf+0x438>
					(sint_value_type)va_arg(ap, long long);
   11fe0:	9b05      	ldr	r3, [sp, #20]
   11fe2:	3307      	adds	r3, #7
   11fe4:	f023 0307 	bic.w	r3, r3, #7
   11fe8:	f103 0208 	add.w	r2, r3, #8
   11fec:	9205      	str	r2, [sp, #20]
   11fee:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   11ff2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   11ff6:	e7e8      	b.n	11fca <cbvprintf+0x676>
					(sint_value_type)va_arg(ap, intmax_t);
   11ff8:	9b05      	ldr	r3, [sp, #20]
   11ffa:	3307      	adds	r3, #7
   11ffc:	f023 0307 	bic.w	r3, r3, #7
   12000:	f103 0208 	add.w	r2, r3, #8
   12004:	9205      	str	r2, [sp, #20]
   12006:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   1200a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   1200e:	e7dc      	b.n	11fca <cbvprintf+0x676>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   12010:	9b05      	ldr	r3, [sp, #20]
   12012:	1d1a      	adds	r2, r3, #4
   12014:	9205      	str	r2, [sp, #20]
   12016:	681a      	ldr	r2, [r3, #0]
   12018:	17d3      	asrs	r3, r2, #31
				value->sint =
   1201a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   1201e:	e7d4      	b.n	11fca <cbvprintf+0x676>
				value->sint = (char)value->sint;
   12020:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   12024:	930a      	str	r3, [sp, #40]	; 0x28
   12026:	2300      	movs	r3, #0
   12028:	930b      	str	r3, [sp, #44]	; 0x2c
   1202a:	e6af      	b.n	11d8c <cbvprintf+0x438>
			switch (length_mod) {
   1202c:	1ecb      	subs	r3, r1, #3
   1202e:	2b04      	cmp	r3, #4
   12030:	d804      	bhi.n	1203c <cbvprintf+0x6e8>
   12032:	e8df f003 	tbb	[pc, r3]
   12036:	1f0b      	.short	0x1f0b
   12038:	4135      	.short	0x4135
   1203a:	41          	.byte	0x41
   1203b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   1203c:	9b05      	ldr	r3, [sp, #20]
   1203e:	1d1a      	adds	r2, r3, #4
   12040:	9205      	str	r2, [sp, #20]
   12042:	681b      	ldr	r3, [r3, #0]
   12044:	930a      	str	r3, [sp, #40]	; 0x28
   12046:	2300      	movs	r3, #0
   12048:	930b      	str	r3, [sp, #44]	; 0x2c
				break;
   1204a:	e01e      	b.n	1208a <cbvprintf+0x736>
				    && (conv->specifier == 'c')) {
   1204c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
				if ((!WCHAR_IS_SIGNED)
   12050:	2b63      	cmp	r3, #99	; 0x63
   12052:	d007      	beq.n	12064 <cbvprintf+0x710>
					value->uint = va_arg(ap, unsigned long);
   12054:	9b05      	ldr	r3, [sp, #20]
   12056:	1d1a      	adds	r2, r3, #4
   12058:	9205      	str	r2, [sp, #20]
   1205a:	681b      	ldr	r3, [r3, #0]
   1205c:	930a      	str	r3, [sp, #40]	; 0x28
   1205e:	2300      	movs	r3, #0
   12060:	930b      	str	r3, [sp, #44]	; 0x2c
   12062:	e012      	b.n	1208a <cbvprintf+0x736>
					value->uint = (wchar_t)va_arg(ap,
   12064:	9b05      	ldr	r3, [sp, #20]
   12066:	1d1a      	adds	r2, r3, #4
   12068:	9205      	str	r2, [sp, #20]
   1206a:	681b      	ldr	r3, [r3, #0]
   1206c:	930a      	str	r3, [sp, #40]	; 0x28
   1206e:	2300      	movs	r3, #0
   12070:	930b      	str	r3, [sp, #44]	; 0x2c
   12072:	e00a      	b.n	1208a <cbvprintf+0x736>
					(uint_value_type)va_arg(ap,
   12074:	9b05      	ldr	r3, [sp, #20]
   12076:	3307      	adds	r3, #7
   12078:	f023 0307 	bic.w	r3, r3, #7
   1207c:	f103 0208 	add.w	r2, r3, #8
   12080:	9205      	str	r2, [sp, #20]
   12082:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   12086:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   1208a:	2901      	cmp	r1, #1
   1208c:	d01c      	beq.n	120c8 <cbvprintf+0x774>
			} else if (length_mod == LENGTH_H) {
   1208e:	2902      	cmp	r1, #2
   12090:	f47f ae7c 	bne.w	11d8c <cbvprintf+0x438>
				value->uint = (unsigned short)value->uint;
   12094:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   12098:	930a      	str	r3, [sp, #40]	; 0x28
   1209a:	2300      	movs	r3, #0
   1209c:	930b      	str	r3, [sp, #44]	; 0x2c
   1209e:	e675      	b.n	11d8c <cbvprintf+0x438>
					(uint_value_type)va_arg(ap,
   120a0:	9b05      	ldr	r3, [sp, #20]
   120a2:	3307      	adds	r3, #7
   120a4:	f023 0307 	bic.w	r3, r3, #7
   120a8:	f103 0208 	add.w	r2, r3, #8
   120ac:	9205      	str	r2, [sp, #20]
   120ae:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   120b2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   120b6:	e7e8      	b.n	1208a <cbvprintf+0x736>
					(uint_value_type)va_arg(ap, size_t);
   120b8:	9b05      	ldr	r3, [sp, #20]
   120ba:	1d1a      	adds	r2, r3, #4
   120bc:	9205      	str	r2, [sp, #20]
   120be:	681b      	ldr	r3, [r3, #0]
				value->uint =
   120c0:	930a      	str	r3, [sp, #40]	; 0x28
   120c2:	2300      	movs	r3, #0
   120c4:	930b      	str	r3, [sp, #44]	; 0x2c
				break;
   120c6:	e7e0      	b.n	1208a <cbvprintf+0x736>
				value->uint = (unsigned char)value->uint;
   120c8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   120cc:	930a      	str	r3, [sp, #40]	; 0x28
   120ce:	2300      	movs	r3, #0
   120d0:	930b      	str	r3, [sp, #44]	; 0x2c
   120d2:	e65b      	b.n	11d8c <cbvprintf+0x438>
			if (length_mod == LENGTH_UPPER_L) {
   120d4:	2908      	cmp	r1, #8
   120d6:	d00b      	beq.n	120f0 <cbvprintf+0x79c>
				value->dbl = va_arg(ap, double);
   120d8:	9b05      	ldr	r3, [sp, #20]
   120da:	3307      	adds	r3, #7
   120dc:	f023 0307 	bic.w	r3, r3, #7
   120e0:	f103 0208 	add.w	r2, r3, #8
   120e4:	9205      	str	r2, [sp, #20]
   120e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   120ea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   120ee:	e64d      	b.n	11d8c <cbvprintf+0x438>
				value->ldbl = va_arg(ap, long double);
   120f0:	9b05      	ldr	r3, [sp, #20]
   120f2:	3307      	adds	r3, #7
   120f4:	f023 0307 	bic.w	r3, r3, #7
   120f8:	f103 0208 	add.w	r2, r3, #8
   120fc:	9205      	str	r2, [sp, #20]
   120fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   12102:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   12106:	e641      	b.n	11d8c <cbvprintf+0x438>
			value->ptr = va_arg(ap, void *);
   12108:	9b05      	ldr	r3, [sp, #20]
   1210a:	1d1a      	adds	r2, r3, #4
   1210c:	9205      	str	r2, [sp, #20]
   1210e:	681b      	ldr	r3, [r3, #0]
   12110:	930a      	str	r3, [sp, #40]	; 0x28
   12112:	e63b      	b.n	11d8c <cbvprintf+0x438>
			OUTS(sp, fp);
   12114:	464b      	mov	r3, r9
   12116:	463a      	mov	r2, r7
   12118:	4629      	mov	r1, r5
   1211a:	4630      	mov	r0, r6
   1211c:	f005 fe9c 	bl	17e58 <outs>
   12120:	2800      	cmp	r0, #0
   12122:	f6ff ac2c 	blt.w	1197e <cbvprintf+0x2a>
   12126:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   12128:	464f      	mov	r7, r9
			continue;
   1212a:	e41d      	b.n	11968 <cbvprintf+0x14>
			OUTC('%');
   1212c:	4629      	mov	r1, r5
   1212e:	2025      	movs	r0, #37	; 0x25
   12130:	47b0      	blx	r6
   12132:	2800      	cmp	r0, #0
   12134:	f6ff ac23 	blt.w	1197e <cbvprintf+0x2a>
   12138:	3401      	adds	r4, #1
		fp = extract_conversion(conv, sp);
   1213a:	464f      	mov	r7, r9
			continue;
   1213c:	e414      	b.n	11968 <cbvprintf+0x14>
			bps = (const char *)value->ptr;
   1213e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
			if (precision >= 0) {
   12140:	f1ba 0f00 	cmp.w	sl, #0
   12144:	db3a      	blt.n	121bc <cbvprintf+0x868>
				len = strnlen(bps, precision);
   12146:	4651      	mov	r1, sl
   12148:	4638      	mov	r0, r7
   1214a:	f005 ff80 	bl	1804e <strnlen>
			bpe = bps + len;
   1214e:	4438      	add	r0, r7
   12150:	9008      	str	r0, [sp, #32]
		if (bps == NULL) {
   12152:	2f00      	cmp	r7, #0
   12154:	d0f1      	beq.n	1213a <cbvprintf+0x7e6>
		size_t nj_len = (bpe - bps);
   12156:	9b08      	ldr	r3, [sp, #32]
   12158:	1bdb      	subs	r3, r3, r7
		if (sign != 0) {
   1215a:	f89d 001f 	ldrb.w	r0, [sp, #31]
   1215e:	b100      	cbz	r0, 12162 <cbvprintf+0x80e>
			nj_len += 1U;
   12160:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   12162:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   12166:	f011 0f10 	tst.w	r1, #16
   1216a:	f000 80b6 	beq.w	122da <cbvprintf+0x986>
			nj_len += 2U;
   1216e:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
   12170:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12172:	4413      	add	r3, r2
		if (conv->pad_fp) {
   12174:	f011 0f40 	tst.w	r1, #64	; 0x40
   12178:	d001      	beq.n	1217e <cbvprintf+0x82a>
			nj_len += conv->pad0_pre_exp;
   1217a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1217c:	4413      	add	r3, r2
		if (width > 0) {
   1217e:	f1b8 0f00 	cmp.w	r8, #0
   12182:	f340 80c3 	ble.w	1230c <cbvprintf+0x9b8>
			width -= (int)nj_len;
   12186:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
   1218a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1218e:	f013 0f04 	tst.w	r3, #4
   12192:	f040 80bb 	bne.w	1230c <cbvprintf+0x9b8>
				if (conv->flag_zero) {
   12196:	f013 0f40 	tst.w	r3, #64	; 0x40
   1219a:	f000 80a4 	beq.w	122e6 <cbvprintf+0x992>
					if (sign != 0) {
   1219e:	2800      	cmp	r0, #0
   121a0:	f000 80a4 	beq.w	122ec <cbvprintf+0x998>
						OUTC(sign);
   121a4:	4629      	mov	r1, r5
   121a6:	47b0      	blx	r6
   121a8:	2800      	cmp	r0, #0
   121aa:	f6ff abe8 	blt.w	1197e <cbvprintf+0x2a>
   121ae:	3401      	adds	r4, #1
						sign = 0;
   121b0:	2300      	movs	r3, #0
   121b2:	f88d 301f 	strb.w	r3, [sp, #31]
					pad = '0';
   121b6:	f04f 0a30 	mov.w	sl, #48	; 0x30
   121ba:	e099      	b.n	122f0 <cbvprintf+0x99c>
				len = strlen(bps);
   121bc:	4638      	mov	r0, r7
   121be:	f005 ff3e 	bl	1803e <strlen>
   121c2:	e7c4      	b.n	1214e <cbvprintf+0x7fa>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   121c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   121c6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
			bpe = buf + 1;
   121ca:	f10d 0345 	add.w	r3, sp, #69	; 0x45
   121ce:	9308      	str	r3, [sp, #32]
			bps = buf;
   121d0:	af11      	add	r7, sp, #68	; 0x44
			break;
   121d2:	e7be      	b.n	12152 <cbvprintf+0x7fe>
			if (conv->flag_plus) {
   121d4:	f012 0f08 	tst.w	r2, #8
   121d8:	d024      	beq.n	12224 <cbvprintf+0x8d0>
				sign = '+';
   121da:	232b      	movs	r3, #43	; 0x2b
   121dc:	f88d 301f 	strb.w	r3, [sp, #31]
			sint = value->sint;
   121e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   121e4:	2a00      	cmp	r2, #0
   121e6:	f173 0100 	sbcs.w	r1, r3, #0
   121ea:	db22      	blt.n	12232 <cbvprintf+0x8de>
				value->uint = (uint_value_type)sint;
   121ec:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			bps = encode_uint(value->uint, conv, buf, bpe);
   121f0:	9b08      	ldr	r3, [sp, #32]
   121f2:	9300      	str	r3, [sp, #0]
   121f4:	ab11      	add	r3, sp, #68	; 0x44
   121f6:	aa0c      	add	r2, sp, #48	; 0x30
   121f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   121fc:	f005 fdc2 	bl	17d84 <encode_uint>
   12200:	4607      	mov	r7, r0
			if (precision >= 0) {
   12202:	f1ba 0f00 	cmp.w	sl, #0
   12206:	dba4      	blt.n	12152 <cbvprintf+0x7fe>
				size_t len = bpe - bps;
   12208:	9b08      	ldr	r3, [sp, #32]
   1220a:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   1220c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   12210:	f36f 1286 	bfc	r2, #6, #1
   12214:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   12218:	459a      	cmp	sl, r3
   1221a:	d99a      	bls.n	12152 <cbvprintf+0x7fe>
					conv->pad0_value = precision - (int)len;
   1221c:	ebaa 0303 	sub.w	r3, sl, r3
   12220:	930d      	str	r3, [sp, #52]	; 0x34
   12222:	e796      	b.n	12152 <cbvprintf+0x7fe>
			} else if (conv->flag_space) {
   12224:	f012 0f10 	tst.w	r2, #16
   12228:	d0da      	beq.n	121e0 <cbvprintf+0x88c>
				sign = ' ';
   1222a:	2320      	movs	r3, #32
   1222c:	f88d 301f 	strb.w	r3, [sp, #31]
   12230:	e7d6      	b.n	121e0 <cbvprintf+0x88c>
				sign = '-';
   12232:	212d      	movs	r1, #45	; 0x2d
   12234:	f88d 101f 	strb.w	r1, [sp, #31]
				value->uint = (uint_value_type)-sint;
   12238:	4252      	negs	r2, r2
   1223a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1223e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   12242:	e7d5      	b.n	121f0 <cbvprintf+0x89c>
			if (value->ptr != NULL) {
   12244:	980a      	ldr	r0, [sp, #40]	; 0x28
   12246:	b918      	cbnz	r0, 12250 <cbvprintf+0x8fc>
			bpe = bps + 5;
   12248:	4f93      	ldr	r7, [pc, #588]	; (12498 <cbvprintf+0xb44>)
   1224a:	9708      	str	r7, [sp, #32]
			bps = "(nil)";
   1224c:	3f05      	subs	r7, #5
			break;
   1224e:	e780      	b.n	12152 <cbvprintf+0x7fe>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12250:	9b08      	ldr	r3, [sp, #32]
   12252:	9300      	str	r3, [sp, #0]
   12254:	ab11      	add	r3, sp, #68	; 0x44
   12256:	aa0c      	add	r2, sp, #48	; 0x30
   12258:	2100      	movs	r1, #0
   1225a:	f005 fd93 	bl	17d84 <encode_uint>
   1225e:	4607      	mov	r7, r0
				conv->altform_0c = true;
   12260:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12264:	f043 0310 	orr.w	r3, r3, #16
   12268:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
				conv->specifier = 'x';
   1226c:	2378      	movs	r3, #120	; 0x78
   1226e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
				goto prec_int_pad0;
   12272:	e7c6      	b.n	12202 <cbvprintf+0x8ae>
				store_count(conv, value->ptr, count);
   12274:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   12276:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1227a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1227e:	2b07      	cmp	r3, #7
   12280:	f63f af5b 	bhi.w	1213a <cbvprintf+0x7e6>
   12284:	e8df f003 	tbb	[pc, r3]
   12288:	0a080604 	.word	0x0a080604
   1228c:	1816110c 	.word	0x1816110c
		*(int *)dp = count;
   12290:	6014      	str	r4, [r2, #0]
		break;
   12292:	e752      	b.n	1213a <cbvprintf+0x7e6>
		*(signed char *)dp = (signed char)count;
   12294:	7014      	strb	r4, [r2, #0]
		break;
   12296:	e750      	b.n	1213a <cbvprintf+0x7e6>
		*(short *)dp = (short)count;
   12298:	8014      	strh	r4, [r2, #0]
		break;
   1229a:	e74e      	b.n	1213a <cbvprintf+0x7e6>
		*(long *)dp = (long)count;
   1229c:	6014      	str	r4, [r2, #0]
		break;
   1229e:	e74c      	b.n	1213a <cbvprintf+0x7e6>
		*(long long *)dp = (long long)count;
   122a0:	4620      	mov	r0, r4
   122a2:	17e1      	asrs	r1, r4, #31
   122a4:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   122a8:	e747      	b.n	1213a <cbvprintf+0x7e6>
		*(intmax_t *)dp = (intmax_t)count;
   122aa:	4620      	mov	r0, r4
   122ac:	17e1      	asrs	r1, r4, #31
   122ae:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   122b2:	e742      	b.n	1213a <cbvprintf+0x7e6>
		*(size_t *)dp = (size_t)count;
   122b4:	6014      	str	r4, [r2, #0]
		break;
   122b6:	e740      	b.n	1213a <cbvprintf+0x7e6>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   122b8:	6014      	str	r4, [r2, #0]
}
   122ba:	e73e      	b.n	1213a <cbvprintf+0x7e6>
				bps = encode_float(value->dbl, conv, precision,
   122bc:	ab08      	add	r3, sp, #32
   122be:	9302      	str	r3, [sp, #8]
   122c0:	ab11      	add	r3, sp, #68	; 0x44
   122c2:	9301      	str	r3, [sp, #4]
   122c4:	f10d 031f 	add.w	r3, sp, #31
   122c8:	9300      	str	r3, [sp, #0]
   122ca:	4653      	mov	r3, sl
   122cc:	aa0c      	add	r2, sp, #48	; 0x30
   122ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   122d2:	f7ff f92d 	bl	11530 <encode_float>
   122d6:	4607      	mov	r7, r0
			break;
   122d8:	e73b      	b.n	12152 <cbvprintf+0x7fe>
		} else if (conv->altform_0) {
   122da:	f011 0f08 	tst.w	r1, #8
   122de:	f43f af47 	beq.w	12170 <cbvprintf+0x81c>
			nj_len += 1U;
   122e2:	3301      	adds	r3, #1
   122e4:	e744      	b.n	12170 <cbvprintf+0x81c>
				char pad = ' ';
   122e6:	f04f 0a20 	mov.w	sl, #32
   122ea:	e001      	b.n	122f0 <cbvprintf+0x99c>
					pad = '0';
   122ec:	f04f 0a30 	mov.w	sl, #48	; 0x30
   122f0:	4643      	mov	r3, r8
				while (width-- > 0) {
   122f2:	f103 38ff 	add.w	r8, r3, #4294967295
   122f6:	2b00      	cmp	r3, #0
   122f8:	dd08      	ble.n	1230c <cbvprintf+0x9b8>
					OUTC(pad);
   122fa:	4629      	mov	r1, r5
   122fc:	4650      	mov	r0, sl
   122fe:	47b0      	blx	r6
   12300:	2800      	cmp	r0, #0
   12302:	f6ff ab3c 	blt.w	1197e <cbvprintf+0x2a>
   12306:	3401      	adds	r4, #1
				while (width-- > 0) {
   12308:	4643      	mov	r3, r8
   1230a:	e7f2      	b.n	122f2 <cbvprintf+0x99e>
		if (sign != 0) {
   1230c:	f89d 001f 	ldrb.w	r0, [sp, #31]
   12310:	b128      	cbz	r0, 1231e <cbvprintf+0x9ca>
			OUTC(sign);
   12312:	4629      	mov	r1, r5
   12314:	47b0      	blx	r6
   12316:	2800      	cmp	r0, #0
   12318:	f6ff ab31 	blt.w	1197e <cbvprintf+0x2a>
   1231c:	3401      	adds	r4, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   1231e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12322:	f013 0f40 	tst.w	r3, #64	; 0x40
   12326:	d070      	beq.n	1240a <cbvprintf+0xab6>
			if (conv->specifier_a) {
   12328:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
   1232c:	2b00      	cmp	r3, #0
   1232e:	db0c      	blt.n	1234a <cbvprintf+0x9f6>
				while (isdigit((int)*cp)) {
   12330:	7838      	ldrb	r0, [r7, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   12332:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   12336:	2b09      	cmp	r3, #9
   12338:	d812      	bhi.n	12360 <cbvprintf+0xa0c>
					OUTC(*cp++);
   1233a:	3701      	adds	r7, #1
   1233c:	4629      	mov	r1, r5
   1233e:	47b0      	blx	r6
   12340:	2800      	cmp	r0, #0
   12342:	f6ff ab1c 	blt.w	1197e <cbvprintf+0x2a>
   12346:	3401      	adds	r4, #1
   12348:	e7f2      	b.n	12330 <cbvprintf+0x9dc>
				while (*cp != 'p') {
   1234a:	7838      	ldrb	r0, [r7, #0]
   1234c:	2870      	cmp	r0, #112	; 0x70
   1234e:	d043      	beq.n	123d8 <cbvprintf+0xa84>
					OUTC(*cp++);
   12350:	3701      	adds	r7, #1
   12352:	4629      	mov	r1, r5
   12354:	47b0      	blx	r6
   12356:	2800      	cmp	r0, #0
   12358:	f6ff ab11 	blt.w	1197e <cbvprintf+0x2a>
   1235c:	3401      	adds	r4, #1
   1235e:	e7f4      	b.n	1234a <cbvprintf+0x9f6>
				pad_len = conv->pad0_value;
   12360:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
				if (!conv->pad_postdp) {
   12364:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12368:	f013 0f20 	tst.w	r3, #32
   1236c:	d00f      	beq.n	1238e <cbvprintf+0xa3a>
				if (*cp == '.') {
   1236e:	7838      	ldrb	r0, [r7, #0]
   12370:	282e      	cmp	r0, #46	; 0x2e
   12372:	d01c      	beq.n	123ae <cbvprintf+0xa5a>
				while (isdigit((int)*cp)) {
   12374:	7838      	ldrb	r0, [r7, #0]
   12376:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1237a:	2b09      	cmp	r3, #9
   1237c:	d82c      	bhi.n	123d8 <cbvprintf+0xa84>
					OUTC(*cp++);
   1237e:	3701      	adds	r7, #1
   12380:	4629      	mov	r1, r5
   12382:	47b0      	blx	r6
   12384:	2800      	cmp	r0, #0
   12386:	f6ff aafa 	blt.w	1197e <cbvprintf+0x2a>
   1238a:	3401      	adds	r4, #1
   1238c:	e7f2      	b.n	12374 <cbvprintf+0xa20>
					while (pad_len-- > 0) {
   1238e:	f10a 3bff 	add.w	fp, sl, #4294967295
   12392:	f1ba 0f00 	cmp.w	sl, #0
   12396:	dd08      	ble.n	123aa <cbvprintf+0xa56>
						OUTC('0');
   12398:	4629      	mov	r1, r5
   1239a:	2030      	movs	r0, #48	; 0x30
   1239c:	47b0      	blx	r6
   1239e:	2800      	cmp	r0, #0
   123a0:	f6ff aaed 	blt.w	1197e <cbvprintf+0x2a>
   123a4:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
   123a6:	46da      	mov	sl, fp
   123a8:	e7f1      	b.n	1238e <cbvprintf+0xa3a>
   123aa:	46da      	mov	sl, fp
   123ac:	e7df      	b.n	1236e <cbvprintf+0xa1a>
					OUTC(*cp++);
   123ae:	3701      	adds	r7, #1
   123b0:	4629      	mov	r1, r5
   123b2:	47b0      	blx	r6
   123b4:	2800      	cmp	r0, #0
   123b6:	f6ff aae2 	blt.w	1197e <cbvprintf+0x2a>
   123ba:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
   123bc:	f10a 3bff 	add.w	fp, sl, #4294967295
   123c0:	f1ba 0f00 	cmp.w	sl, #0
   123c4:	ddd6      	ble.n	12374 <cbvprintf+0xa20>
						OUTC('0');
   123c6:	4629      	mov	r1, r5
   123c8:	2030      	movs	r0, #48	; 0x30
   123ca:	47b0      	blx	r6
   123cc:	2800      	cmp	r0, #0
   123ce:	f6ff aad6 	blt.w	1197e <cbvprintf+0x2a>
   123d2:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
   123d4:	46da      	mov	sl, fp
   123d6:	e7f1      	b.n	123bc <cbvprintf+0xa68>
			pad_len = conv->pad0_pre_exp;
   123d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			while (pad_len-- > 0) {
   123da:	f103 3aff 	add.w	sl, r3, #4294967295
   123de:	2b00      	cmp	r3, #0
   123e0:	dd08      	ble.n	123f4 <cbvprintf+0xaa0>
				OUTC('0');
   123e2:	4629      	mov	r1, r5
   123e4:	2030      	movs	r0, #48	; 0x30
   123e6:	47b0      	blx	r6
   123e8:	2800      	cmp	r0, #0
   123ea:	f6ff aac8 	blt.w	1197e <cbvprintf+0x2a>
   123ee:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   123f0:	4653      	mov	r3, sl
   123f2:	e7f2      	b.n	123da <cbvprintf+0xa86>
			OUTS(cp, bpe);
   123f4:	9b08      	ldr	r3, [sp, #32]
   123f6:	463a      	mov	r2, r7
   123f8:	4629      	mov	r1, r5
   123fa:	4630      	mov	r0, r6
   123fc:	f005 fd2c 	bl	17e58 <outs>
   12400:	2800      	cmp	r0, #0
   12402:	f6ff aabc 	blt.w	1197e <cbvprintf+0x2a>
   12406:	4404      	add	r4, r0
   12408:	e033      	b.n	12472 <cbvprintf+0xb1e>
			if (conv->altform_0c | conv->altform_0) {
   1240a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   1240e:	f3c3 1200 	ubfx	r2, r3, #4, #1
   12412:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   12416:	4313      	orrs	r3, r2
   12418:	d006      	beq.n	12428 <cbvprintf+0xad4>
				OUTC('0');
   1241a:	4629      	mov	r1, r5
   1241c:	2030      	movs	r0, #48	; 0x30
   1241e:	47b0      	blx	r6
   12420:	2800      	cmp	r0, #0
   12422:	f6ff aaac 	blt.w	1197e <cbvprintf+0x2a>
   12426:	3401      	adds	r4, #1
			if (conv->altform_0c) {
   12428:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   1242c:	f013 0f10 	tst.w	r3, #16
   12430:	d007      	beq.n	12442 <cbvprintf+0xaee>
				OUTC(conv->specifier);
   12432:	4629      	mov	r1, r5
   12434:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   12438:	47b0      	blx	r6
   1243a:	2800      	cmp	r0, #0
   1243c:	f6ff aa9f 	blt.w	1197e <cbvprintf+0x2a>
   12440:	3401      	adds	r4, #1
			pad_len = conv->pad0_value;
   12442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			while (pad_len-- > 0) {
   12444:	f103 3aff 	add.w	sl, r3, #4294967295
   12448:	2b00      	cmp	r3, #0
   1244a:	dd08      	ble.n	1245e <cbvprintf+0xb0a>
				OUTC('0');
   1244c:	4629      	mov	r1, r5
   1244e:	2030      	movs	r0, #48	; 0x30
   12450:	47b0      	blx	r6
   12452:	2800      	cmp	r0, #0
   12454:	f6ff aa93 	blt.w	1197e <cbvprintf+0x2a>
   12458:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   1245a:	4653      	mov	r3, sl
   1245c:	e7f2      	b.n	12444 <cbvprintf+0xaf0>
			OUTS(bps, bpe);
   1245e:	9b08      	ldr	r3, [sp, #32]
   12460:	463a      	mov	r2, r7
   12462:	4629      	mov	r1, r5
   12464:	4630      	mov	r0, r6
   12466:	f005 fcf7 	bl	17e58 <outs>
   1246a:	2800      	cmp	r0, #0
   1246c:	f6ff aa87 	blt.w	1197e <cbvprintf+0x2a>
   12470:	4404      	add	r4, r0
		while (width > 0) {
   12472:	f1b8 0f00 	cmp.w	r8, #0
   12476:	dd09      	ble.n	1248c <cbvprintf+0xb38>
			OUTC(' ');
   12478:	4629      	mov	r1, r5
   1247a:	2020      	movs	r0, #32
   1247c:	47b0      	blx	r6
   1247e:	2800      	cmp	r0, #0
   12480:	f6ff aa7d 	blt.w	1197e <cbvprintf+0x2a>
   12484:	3401      	adds	r4, #1
			--width;
   12486:	f108 38ff 	add.w	r8, r8, #4294967295
   1248a:	e7f2      	b.n	12472 <cbvprintf+0xb1e>
		fp = extract_conversion(conv, sp);
   1248c:	464f      	mov	r7, r9
   1248e:	f7ff ba6b 	b.w	11968 <cbvprintf+0x14>
	return count;
   12492:	4620      	mov	r0, r4
   12494:	f7ff ba73 	b.w	1197e <cbvprintf+0x2a>
   12498:	000195fd 	.word	0x000195fd

0001249c <nordicsemi_nrf91_init>:
   1249c:	f04f 0220 	mov.w	r2, #32
   124a0:	f3ef 8311 	mrs	r3, BASEPRI
   124a4:	f382 8812 	msr	BASEPRI_MAX, r2
   124a8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   124ac:	4a04      	ldr	r2, [pc, #16]	; (124c0 <nordicsemi_nrf91_init+0x24>)
   124ae:	2101      	movs	r1, #1
   124b0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   124b4:	f383 8811 	msr	BASEPRI, r3
   124b8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   124bc:	2000      	movs	r0, #0
   124be:	4770      	bx	lr
   124c0:	40039000 	.word	0x40039000

000124c4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   124c4:	b130      	cbz	r0, 124d4 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   124c6:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   124c8:	0180      	lsls	r0, r0, #6
   124ca:	4b03      	ldr	r3, [pc, #12]	; (124d8 <arch_busy_wait+0x14>)
   124cc:	f043 0301 	orr.w	r3, r3, #1
   124d0:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   124d2:	bd08      	pop	{r3, pc}
   124d4:	4770      	bx	lr
   124d6:	bf00      	nop
   124d8:	00019570 	.word	0x00019570

000124dc <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
   124dc:	b570      	push	{r4, r5, r6, lr}
   124de:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
   124e0:	4b2a      	ldr	r3, [pc, #168]	; (1258c <pm_system_resume+0xb0>)
   124e2:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   124e4:	f004 031f 	and.w	r3, r4, #31
   124e8:	2201      	movs	r2, #1
   124ea:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   124ec:	0961      	lsrs	r1, r4, #5
   124ee:	4b28      	ldr	r3, [pc, #160]	; (12590 <pm_system_resume+0xb4>)
   124f0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   124f4:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   124f6:	e8d3 1fef 	ldaex	r1, [r3]
   124fa:	ea01 0500 	and.w	r5, r1, r0
   124fe:	e8c3 5fe6 	stlex	r6, r5, [r3]
   12502:	2e00      	cmp	r6, #0
   12504:	d1f7      	bne.n	124f6 <pm_system_resume+0x1a>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   12506:	420a      	tst	r2, r1
   12508:	d03d      	beq.n	12586 <pm_system_resume+0xaa>
		exit_pos_ops(z_power_states[id]);
   1250a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1250e:	009a      	lsls	r2, r3, #2
   12510:	4b20      	ldr	r3, [pc, #128]	; (12594 <pm_system_resume+0xb8>)
   12512:	4413      	add	r3, r2
   12514:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   12518:	ab04      	add	r3, sp, #16
   1251a:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   1251e:	4b1e      	ldr	r3, [pc, #120]	; (12598 <pm_system_resume+0xbc>)
   12520:	b163      	cbz	r3, 1253c <pm_system_resume+0x60>
		pm_power_state_exit_post_ops(info);
   12522:	f005 fcc7 	bl	17eb4 <pm_power_state_exit_post_ops>
	__asm__ volatile(
   12526:	f04f 0320 	mov.w	r3, #32
   1252a:	f3ef 8611 	mrs	r6, BASEPRI
   1252e:	f383 8812 	msr	BASEPRI_MAX, r3
   12532:	f3bf 8f6f 	isb	sy
   12536:	4b19      	ldr	r3, [pc, #100]	; (1259c <pm_system_resume+0xc0>)
   12538:	681d      	ldr	r5, [r3, #0]
   1253a:	e00a      	b.n	12552 <pm_system_resume+0x76>
	__asm__ volatile(
   1253c:	2300      	movs	r3, #0
   1253e:	f383 8811 	msr	BASEPRI, r3
   12542:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   12546:	e7ee      	b.n	12526 <pm_system_resume+0x4a>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12548:	462b      	mov	r3, r5
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   1254a:	b10d      	cbz	r5, 12550 <pm_system_resume+0x74>
	return node->next;
   1254c:	682b      	ldr	r3, [r5, #0]
   1254e:	b16b      	cbz	r3, 1256c <pm_system_resume+0x90>
{
   12550:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12552:	b15d      	cbz	r5, 1256c <pm_system_resume+0x90>
			callback = notifier->state_exit;
   12554:	68aa      	ldr	r2, [r5, #8]
		if (callback) {
   12556:	2a00      	cmp	r2, #0
   12558:	d0f6      	beq.n	12548 <pm_system_resume+0x6c>
			callback(z_power_states[_current_cpu->id].state);
   1255a:	4b0c      	ldr	r3, [pc, #48]	; (1258c <pm_system_resume+0xb0>)
   1255c:	7d1b      	ldrb	r3, [r3, #20]
   1255e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   12562:	0099      	lsls	r1, r3, #2
   12564:	4b0b      	ldr	r3, [pc, #44]	; (12594 <pm_system_resume+0xb8>)
   12566:	5c58      	ldrb	r0, [r3, r1]
   12568:	4790      	blx	r2
   1256a:	e7ed      	b.n	12548 <pm_system_resume+0x6c>
	__asm__ volatile(
   1256c:	f386 8811 	msr	BASEPRI, r6
   12570:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   12574:	4807      	ldr	r0, [pc, #28]	; (12594 <pm_system_resume+0xb8>)
   12576:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1257a:	00a2      	lsls	r2, r4, #2
   1257c:	1881      	adds	r1, r0, r2
   1257e:	2300      	movs	r3, #0
   12580:	5083      	str	r3, [r0, r2]
   12582:	604b      	str	r3, [r1, #4]
   12584:	608b      	str	r3, [r1, #8]
			0, 0};
	}
}
   12586:	b004      	add	sp, #16
   12588:	bd70      	pop	{r4, r5, r6, pc}
   1258a:	bf00      	nop
   1258c:	2000cbb0 	.word	0x2000cbb0
   12590:	2000c75c 	.word	0x2000c75c
   12594:	2000c760 	.word	0x2000c760
   12598:	00017eb5 	.word	0x00017eb5
   1259c:	2000c754 	.word	0x2000c754

000125a0 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   125a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   125a2:	b089      	sub	sp, #36	; 0x24
   125a4:	4605      	mov	r5, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
   125a6:	4b4e      	ldr	r3, [pc, #312]	; (126e0 <pm_system_suspend+0x140>)
   125a8:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   125aa:	f004 031f 	and.w	r3, r4, #31
   125ae:	2201      	movs	r2, #1
   125b0:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   125b2:	0961      	lsrs	r1, r4, #5
   125b4:	4b4b      	ldr	r3, [pc, #300]	; (126e4 <pm_system_suspend+0x144>)
   125b6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   125ba:	e8d3 1fef 	ldaex	r1, [r3]
   125be:	ea41 0002 	orr.w	r0, r1, r2
   125c2:	e8c3 0fe6 	stlex	r6, r0, [r3]
   125c6:	2e00      	cmp	r6, #0
   125c8:	d1f7      	bne.n	125ba <pm_system_suspend+0x1a>

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
   125ca:	420a      	tst	r2, r1
   125cc:	d016      	beq.n	125fc <pm_system_suspend+0x5c>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
   125ce:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   125d2:	4a45      	ldr	r2, [pc, #276]	; (126e8 <pm_system_suspend+0x148>)
   125d4:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   125d8:	2b00      	cmp	r3, #0
   125da:	d07f      	beq.n	126dc <pm_system_suspend+0x13c>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
   125dc:	f1b5 3fff 	cmp.w	r5, #4294967295
   125e0:	d11c      	bne.n	1261c <pm_system_suspend+0x7c>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   125e2:	f004 faa9 	bl	16b38 <k_sched_lock>
	__asm__ volatile(
   125e6:	f04f 0320 	mov.w	r3, #32
   125ea:	f3ef 8611 	mrs	r6, BASEPRI
   125ee:	f383 8812 	msr	BASEPRI_MAX, r3
   125f2:	f3bf 8f6f 	isb	sy
	return list->head;
   125f6:	4b3d      	ldr	r3, [pc, #244]	; (126ec <pm_system_suspend+0x14c>)
   125f8:	681d      	ldr	r5, [r3, #0]
   125fa:	e02a      	b.n	12652 <pm_system_suspend+0xb2>
		z_power_states[id] = pm_policy_next_state(id, ticks);
   125fc:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   12600:	4b39      	ldr	r3, [pc, #228]	; (126e8 <pm_system_suspend+0x148>)
   12602:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   12606:	466f      	mov	r7, sp
   12608:	462a      	mov	r2, r5
   1260a:	4621      	mov	r1, r4
   1260c:	4638      	mov	r0, r7
   1260e:	f005 fc5c 	bl	17eca <pm_policy_next_state>
   12612:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   12616:	e886 0007 	stmia.w	r6, {r0, r1, r2}
   1261a:	e7d8      	b.n	125ce <pm_system_suspend+0x2e>
		     k_us_to_ticks_ceil32(
   1261c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   12620:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12624:	689b      	ldr	r3, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   12626:	0c59      	lsrs	r1, r3, #17
   12628:	03d8      	lsls	r0, r3, #15
   1262a:	4e31      	ldr	r6, [pc, #196]	; (126f0 <pm_system_suspend+0x150>)
   1262c:	4a31      	ldr	r2, [pc, #196]	; (126f4 <pm_system_suspend+0x154>)
   1262e:	2300      	movs	r3, #0
   12630:	1980      	adds	r0, r0, r6
   12632:	f04f 0600 	mov.w	r6, #0
   12636:	eb46 0101 	adc.w	r1, r6, r1
   1263a:	f7fe fb2b 	bl	10c94 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   1263e:	2101      	movs	r1, #1
   12640:	1a28      	subs	r0, r5, r0
   12642:	f006 fd88 	bl	19156 <z_set_timeout_expiry>
   12646:	e7cc      	b.n	125e2 <pm_system_suspend+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12648:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   1264a:	b10d      	cbz	r5, 12650 <pm_system_suspend+0xb0>
	return node->next;
   1264c:	682b      	ldr	r3, [r5, #0]
   1264e:	b16b      	cbz	r3, 1266c <pm_system_suspend+0xcc>
{
   12650:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12652:	b15d      	cbz	r5, 1266c <pm_system_suspend+0xcc>
			callback = notifier->state_entry;
   12654:	686a      	ldr	r2, [r5, #4]
		if (callback) {
   12656:	2a00      	cmp	r2, #0
   12658:	d0f6      	beq.n	12648 <pm_system_suspend+0xa8>
			callback(z_power_states[_current_cpu->id].state);
   1265a:	4b21      	ldr	r3, [pc, #132]	; (126e0 <pm_system_suspend+0x140>)
   1265c:	7d1b      	ldrb	r3, [r3, #20]
   1265e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   12662:	4921      	ldr	r1, [pc, #132]	; (126e8 <pm_system_suspend+0x148>)
   12664:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   12668:	4790      	blx	r2
   1266a:	e7ed      	b.n	12648 <pm_system_suspend+0xa8>
	__asm__ volatile(
   1266c:	f386 8811 	msr	BASEPRI, r6
   12670:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   12674:	f004 031f 	and.w	r3, r4, #31
   12678:	2101      	movs	r1, #1
   1267a:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1267c:	0963      	lsrs	r3, r4, #5
   1267e:	4a1e      	ldr	r2, [pc, #120]	; (126f8 <pm_system_suspend+0x158>)
   12680:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12684:	e8d3 2fef 	ldaex	r2, [r3]
   12688:	430a      	orrs	r2, r1
   1268a:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1268e:	2800      	cmp	r0, #0
   12690:	d1f8      	bne.n	12684 <pm_system_suspend+0xe4>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
   12692:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   12696:	4a14      	ldr	r2, [pc, #80]	; (126e8 <pm_system_suspend+0x148>)
   12698:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1269c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   126a0:	ab08      	add	r3, sp, #32
   126a2:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   126a6:	4b15      	ldr	r3, [pc, #84]	; (126fc <pm_system_suspend+0x15c>)
   126a8:	b10b      	cbz	r3, 126ae <pm_system_suspend+0x10e>
		pm_power_state_set(info);
   126aa:	f005 fbf0 	bl	17e8e <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
   126ae:	f7ff ff15 	bl	124dc <pm_system_resume>
	k_sched_unlock();
   126b2:	f004 fc3f 	bl	16f34 <k_sched_unlock>
	bool ret = true;
   126b6:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
   126b8:	f004 021f 	and.w	r2, r4, #31
   126bc:	2301      	movs	r3, #1
   126be:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   126c0:	0964      	lsrs	r4, r4, #5
   126c2:	4a08      	ldr	r2, [pc, #32]	; (126e4 <pm_system_suspend+0x144>)
   126c4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
   126c8:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   126ca:	e8d4 2fef 	ldaex	r2, [r4]
   126ce:	401a      	ands	r2, r3
   126d0:	e8c4 2fe1 	stlex	r1, r2, [r4]
   126d4:	2900      	cmp	r1, #0
   126d6:	d1f8      	bne.n	126ca <pm_system_suspend+0x12a>
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
   126d8:	b009      	add	sp, #36	; 0x24
   126da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = false;
   126dc:	2000      	movs	r0, #0
   126de:	e7eb      	b.n	126b8 <pm_system_suspend+0x118>
   126e0:	2000cbb0 	.word	0x2000cbb0
   126e4:	2000c76c 	.word	0x2000c76c
   126e8:	2000c760 	.word	0x2000c760
   126ec:	2000c754 	.word	0x2000c754
   126f0:	000f423f 	.word	0x000f423f
   126f4:	000f4240 	.word	0x000f4240
   126f8:	2000c75c 	.word	0x2000c75c
   126fc:	00017e8f 	.word	0x00017e8f

00012700 <before_nse>:
#include <arch/arm/aarch32/cortex_m/fpu.h>

static struct fpu_ctx_full context_buffer;

void before_nse(void)
{
   12700:	b508      	push	{r3, lr}
	k_sched_lock();
   12702:	f004 fa19 	bl	16b38 <k_sched_lock>
	z_arm_save_fp_context(&context_buffer);
   12706:	4802      	ldr	r0, [pc, #8]	; (12710 <before_nse+0x10>)
   12708:	f005 fc33 	bl	17f72 <z_arm_save_fp_context>
}
   1270c:	bd08      	pop	{r3, pc}
   1270e:	bf00      	nop
   12710:	2000c770 	.word	0x2000c770

00012714 <after_nse>:

void after_nse(void)
{
   12714:	b508      	push	{r3, lr}
	z_arm_restore_fp_context(&context_buffer);
   12716:	4803      	ldr	r0, [pc, #12]	; (12724 <after_nse+0x10>)
   12718:	f005 fc2c 	bl	17f74 <z_arm_restore_fp_context>
	k_sched_unlock();
   1271c:	f004 fc0a 	bl	16f34 <k_sched_unlock>
}
   12720:	bd08      	pop	{r3, pc}
   12722:	bf00      	nop
   12724:	2000c770 	.word	0x2000c770

00012728 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   12728:	4901      	ldr	r1, [pc, #4]	; (12730 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1272a:	2210      	movs	r2, #16
	str	r2, [r1]
   1272c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1272e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   12730:	e000ed10 	.word	0xe000ed10

00012734 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   12734:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   12736:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   12738:	f380 8811 	msr	BASEPRI, r0
	isb
   1273c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   12740:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   12744:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   12746:	b662      	cpsie	i
	isb
   12748:	f3bf 8f6f 	isb	sy

	bx	lr
   1274c:	4770      	bx	lr
   1274e:	bf00      	nop

00012750 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   12750:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   12752:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   12754:	f381 8811 	msr	BASEPRI, r1

	wfe
   12758:	bf20      	wfe

	msr	BASEPRI, r0
   1275a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1275e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   12760:	4770      	bx	lr
   12762:	bf00      	nop

00012764 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   12764:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   12766:	2b00      	cmp	r3, #0
   12768:	db08      	blt.n	1277c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1276a:	f000 001f 	and.w	r0, r0, #31
   1276e:	095b      	lsrs	r3, r3, #5
   12770:	2201      	movs	r2, #1
   12772:	fa02 f000 	lsl.w	r0, r2, r0
   12776:	4a02      	ldr	r2, [pc, #8]	; (12780 <arch_irq_enable+0x1c>)
   12778:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   1277c:	4770      	bx	lr
   1277e:	bf00      	nop
   12780:	e000e100 	.word	0xe000e100

00012784 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   12784:	0942      	lsrs	r2, r0, #5
   12786:	4b05      	ldr	r3, [pc, #20]	; (1279c <arch_irq_is_enabled+0x18>)
   12788:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1278c:	f000 001f 	and.w	r0, r0, #31
   12790:	2301      	movs	r3, #1
   12792:	fa03 f000 	lsl.w	r0, r3, r0
}
   12796:	4010      	ands	r0, r2
   12798:	4770      	bx	lr
   1279a:	bf00      	nop
   1279c:	e000e100 	.word	0xe000e100

000127a0 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   127a0:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   127a2:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   127a4:	2b00      	cmp	r3, #0
   127a6:	db08      	blt.n	127ba <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   127a8:	0149      	lsls	r1, r1, #5
   127aa:	b2c9      	uxtb	r1, r1
   127ac:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   127b0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   127b4:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   127b8:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   127ba:	f000 000f 	and.w	r0, r0, #15
   127be:	0149      	lsls	r1, r1, #5
   127c0:	b2c9      	uxtb	r1, r1
   127c2:	4b01      	ldr	r3, [pc, #4]	; (127c8 <z_arm_irq_priority_set+0x28>)
   127c4:	5419      	strb	r1, [r3, r0]
}
   127c6:	4770      	bx	lr
   127c8:	e000ed14 	.word	0xe000ed14

000127cc <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   127cc:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   127ce:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   127d0:	4b05      	ldr	r3, [pc, #20]	; (127e8 <_arch_isr_direct_pm+0x1c>)
   127d2:	699b      	ldr	r3, [r3, #24]
   127d4:	b90b      	cbnz	r3, 127da <_arch_isr_direct_pm+0xe>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   127d6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   127d8:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   127da:	4b03      	ldr	r3, [pc, #12]	; (127e8 <_arch_isr_direct_pm+0x1c>)
   127dc:	2200      	movs	r2, #0
   127de:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   127e0:	f006 fb0c 	bl	18dfc <z_pm_save_idle_exit>
   127e4:	e7f7      	b.n	127d6 <_arch_isr_direct_pm+0xa>
   127e6:	bf00      	nop
   127e8:	2000cbb0 	.word	0x2000cbb0

000127ec <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   127ec:	bf30      	wfi
    b z_SysNmiOnReset
   127ee:	f7ff bffd 	b.w	127ec <z_SysNmiOnReset>
   127f2:	bf00      	nop

000127f4 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   127f4:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   127f6:	4b0f      	ldr	r3, [pc, #60]	; (12834 <z_arm_prep_c+0x40>)
   127f8:	4a0f      	ldr	r2, [pc, #60]	; (12838 <z_arm_prep_c+0x44>)
   127fa:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   127fe:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   12800:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12804:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   12808:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1280c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   12810:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
   12814:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   12818:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   1281c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   12820:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   12824:	f003 fe92 	bl	1654c <z_bss_zero>
	z_data_copy();
   12828:	f004 fcf2 	bl	17210 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   1282c:	f000 f9de 	bl	12bec <z_arm_interrupt_init>
	z_cstart();
   12830:	f003 fe98 	bl	16564 <z_cstart>
   12834:	e000ed00 	.word	0xe000ed00
   12838:	00010000 	.word	0x00010000

0001283c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   1283c:	4a0a      	ldr	r2, [pc, #40]	; (12868 <arch_swap+0x2c>)
   1283e:	6893      	ldr	r3, [r2, #8]
   12840:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
   12844:	4909      	ldr	r1, [pc, #36]	; (1286c <arch_swap+0x30>)
   12846:	6809      	ldr	r1, [r1, #0]
   12848:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1284c:	4908      	ldr	r1, [pc, #32]	; (12870 <arch_swap+0x34>)
   1284e:	684b      	ldr	r3, [r1, #4]
   12850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   12854:	604b      	str	r3, [r1, #4]
   12856:	2300      	movs	r3, #0
   12858:	f383 8811 	msr	BASEPRI, r3
   1285c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   12860:	6893      	ldr	r3, [r2, #8]
}
   12862:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
   12866:	4770      	bx	lr
   12868:	2000cbb0 	.word	0x2000cbb0
   1286c:	000197d0 	.word	0x000197d0
   12870:	e000ed00 	.word	0xe000ed00

00012874 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   12874:	4914      	ldr	r1, [pc, #80]	; (128c8 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
   12876:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   12878:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   1287c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1287e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   12882:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12886:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   12888:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1288c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   12890:	4f0e      	ldr	r7, [pc, #56]	; (128cc <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   12892:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   12896:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   12898:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1289a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1289c:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
   128a0:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   128a2:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   128a6:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   128aa:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   128ae:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   128b2:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   128b6:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   128ba:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   128bc:	f005 fb2c 	bl	17f18 <configure_builtin_stack_guard>
    pop {r2, lr}
   128c0:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   128c4:	4770      	bx	lr
   128c6:	0000      	.short	0x0000
    ldr r1, =_kernel
   128c8:	2000cbb0 	.word	0x2000cbb0
    ldr v4, =_SCS_ICSR
   128cc:	e000ed04 	.word	0xe000ed04

000128d0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   128d0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   128d4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   128d6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   128da:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   128de:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   128e0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   128e4:	2902      	cmp	r1, #2
    beq _oops
   128e6:	d0ff      	beq.n	128e8 <_oops>

000128e8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   128e8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   128ea:	f005 fb03 	bl	17ef4 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   128ee:	bd01      	pop	{r0, pc}

000128f0 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   128f0:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   128f2:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   128f6:	490d      	ldr	r1, [pc, #52]	; (1292c <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   128f8:	f021 0101 	bic.w	r1, r1, #1
   128fc:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   12900:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   12904:	9b01      	ldr	r3, [sp, #4]
   12906:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   1290a:	9b02      	ldr	r3, [sp, #8]
   1290c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   12910:	9b03      	ldr	r3, [sp, #12]
   12912:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   12916:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1291a:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
   1291e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   12920:	2300      	movs	r3, #0
   12922:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   12926:	bc10      	pop	{r4}
   12928:	4770      	bx	lr
   1292a:	bf00      	nop
   1292c:	000178ed 	.word	0x000178ed

00012930 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   12930:	4b09      	ldr	r3, [pc, #36]	; (12958 <arch_switch_to_main_thread+0x28>)
   12932:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
   12934:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   12938:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1293c:	4610      	mov	r0, r2
   1293e:	f381 8809 	msr	PSP, r1
   12942:	2100      	movs	r1, #0
   12944:	b663      	cpsie	if
   12946:	f381 8811 	msr	BASEPRI, r1
   1294a:	f3bf 8f6f 	isb	sy
   1294e:	2200      	movs	r2, #0
   12950:	2300      	movs	r3, #0
   12952:	f004 ffcb 	bl	178ec <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   12956:	bf00      	nop
   12958:	2000cbb0 	.word	0x2000cbb0

0001295c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   1295c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1295e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   12960:	4a0b      	ldr	r2, [pc, #44]	; (12990 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   12962:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   12964:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   12966:	bf1e      	ittt	ne
	movne	r1, #0
   12968:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1296a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   1296c:	f006 fa46 	blne	18dfc <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   12970:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   12972:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   12976:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1297a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1297e:	4905      	ldr	r1, [pc, #20]	; (12994 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   12980:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   12982:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   12984:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   12986:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1298a:	4903      	ldr	r1, [pc, #12]	; (12998 <_isr_wrapper+0x3c>)
	bx r1
   1298c:	4708      	bx	r1
   1298e:	0000      	.short	0x0000
	ldr r2, =_kernel
   12990:	2000cbb0 	.word	0x2000cbb0
	ldr r1, =_sw_isr_table
   12994:	000192e8 	.word	0x000192e8
	ldr r1, =z_arm_int_exit
   12998:	0001299d 	.word	0x0001299d

0001299c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   1299c:	4b04      	ldr	r3, [pc, #16]	; (129b0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1299e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   129a0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   129a2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   129a4:	d003      	beq.n	129ae <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   129a6:	4903      	ldr	r1, [pc, #12]	; (129b4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   129a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   129ac:	600a      	str	r2, [r1, #0]

000129ae <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   129ae:	4770      	bx	lr
	ldr r3, =_kernel
   129b0:	2000cbb0 	.word	0x2000cbb0
	ldr r1, =_SCS_ICSR
   129b4:	e000ed04 	.word	0xe000ed04

000129b8 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   129b8:	b510      	push	{r4, lr}
   129ba:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   129bc:	4b13      	ldr	r3, [pc, #76]	; (12a0c <mem_manage_fault+0x54>)
   129be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   129c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   129c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   129c4:	f013 0f02 	tst.w	r3, #2
   129c8:	d00b      	beq.n	129e2 <mem_manage_fault+0x2a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   129ca:	4b10      	ldr	r3, [pc, #64]	; (12a0c <mem_manage_fault+0x54>)
   129cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   129ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   129d0:	f013 0f80 	tst.w	r3, #128	; 0x80
   129d4:	d005      	beq.n	129e2 <mem_manage_fault+0x2a>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
   129d6:	b121      	cbz	r1, 129e2 <mem_manage_fault+0x2a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   129d8:	4a0c      	ldr	r2, [pc, #48]	; (12a0c <mem_manage_fault+0x54>)
   129da:	6a93      	ldr	r3, [r2, #40]	; 0x28
   129dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   129e0:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   129e2:	4b0a      	ldr	r3, [pc, #40]	; (12a0c <mem_manage_fault+0x54>)
   129e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   129e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   129e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   129ea:	f013 0f10 	tst.w	r3, #16
   129ee:	d101      	bne.n	129f4 <mem_manage_fault+0x3c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   129f0:	4b06      	ldr	r3, [pc, #24]	; (12a0c <mem_manage_fault+0x54>)
   129f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   129f4:	4a05      	ldr	r2, [pc, #20]	; (12a0c <mem_manage_fault+0x54>)
   129f6:	6a93      	ldr	r3, [r2, #40]	; 0x28
   129f8:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   129fc:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   129fe:	2101      	movs	r1, #1
   12a00:	f005 fa8f 	bl	17f22 <memory_fault_recoverable>
   12a04:	7020      	strb	r0, [r4, #0]

	return reason;
}
   12a06:	2000      	movs	r0, #0
   12a08:	bd10      	pop	{r4, pc}
   12a0a:	bf00      	nop
   12a0c:	e000ed00 	.word	0xe000ed00

00012a10 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
   12a10:	b510      	push	{r4, lr}
   12a12:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   12a14:	4b12      	ldr	r3, [pc, #72]	; (12a60 <bus_fault+0x50>)
   12a16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   12a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   12a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12a1c:	f413 7f00 	tst.w	r3, #512	; 0x200
   12a20:	d00b      	beq.n	12a3a <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   12a22:	4b0f      	ldr	r3, [pc, #60]	; (12a60 <bus_fault+0x50>)
   12a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   12a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12a28:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   12a2c:	d005      	beq.n	12a3a <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   12a2e:	b121      	cbz	r1, 12a3a <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   12a30:	4a0b      	ldr	r2, [pc, #44]	; (12a60 <bus_fault+0x50>)
   12a32:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12a34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   12a38:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   12a3a:	4b09      	ldr	r3, [pc, #36]	; (12a60 <bus_fault+0x50>)
   12a3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   12a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12a40:	f413 7f80 	tst.w	r3, #256	; 0x100
   12a44:	d101      	bne.n	12a4a <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   12a46:	4b06      	ldr	r3, [pc, #24]	; (12a60 <bus_fault+0x50>)
   12a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   12a4a:	4a05      	ldr	r2, [pc, #20]	; (12a60 <bus_fault+0x50>)
   12a4c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12a4e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   12a52:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   12a54:	2101      	movs	r1, #1
   12a56:	f005 fa64 	bl	17f22 <memory_fault_recoverable>
   12a5a:	7020      	strb	r0, [r4, #0]

	return reason;
}
   12a5c:	2000      	movs	r0, #0
   12a5e:	bd10      	pop	{r4, pc}
   12a60:	e000ed00 	.word	0xe000ed00

00012a64 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   12a64:	4b0a      	ldr	r3, [pc, #40]	; (12a90 <usage_fault+0x2c>)
   12a66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   12a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   12a6a:	6a98      	ldr	r0, [r3, #40]	; 0x28
   12a6c:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
   12a70:	d10b      	bne.n	12a8a <usage_fault+0x26>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   12a72:	4b07      	ldr	r3, [pc, #28]	; (12a90 <usage_fault+0x2c>)
   12a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   12a76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   12a78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   12a7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   12a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12a7e:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   12a82:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   12a86:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
   12a88:	4770      	bx	lr
		reason = K_ERR_STACK_CHK_FAIL;
   12a8a:	2002      	movs	r0, #2
   12a8c:	e7f1      	b.n	12a72 <usage_fault+0xe>
   12a8e:	bf00      	nop
   12a90:	e000ed00 	.word	0xe000ed00

00012a94 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
   12a94:	b510      	push	{r4, lr}
   12a96:	4604      	mov	r4, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
   12a98:	2300      	movs	r3, #0
   12a9a:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   12a9c:	4b1b      	ldr	r3, [pc, #108]	; (12b0c <hard_fault+0x78>)
   12a9e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   12aa0:	f010 0002 	ands.w	r0, r0, #2
   12aa4:	d12d      	bne.n	12b02 <hard_fault+0x6e>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   12aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12aa8:	2b00      	cmp	r3, #0
   12aaa:	db2b      	blt.n	12b04 <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   12aac:	4b17      	ldr	r3, [pc, #92]	; (12b0c <hard_fault+0x78>)
   12aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12ab0:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
   12ab4:	d027      	beq.n	12b06 <hard_fault+0x72>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   12ab6:	69a3      	ldr	r3, [r4, #24]
	uint16_t fault_insn = *(ret_addr - 1);
   12ab8:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   12abc:	f64d 7302 	movw	r3, #57090	; 0xdf02
   12ac0:	429a      	cmp	r2, r3
   12ac2:	d010      	beq.n	12ae6 <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
   12ac4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   12ac8:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   12acc:	781b      	ldrb	r3, [r3, #0]
   12ace:	b963      	cbnz	r3, 12aea <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
   12ad0:	4b0f      	ldr	r3, [pc, #60]	; (12b10 <hard_fault+0x7c>)
   12ad2:	781b      	ldrb	r3, [r3, #0]
   12ad4:	b97b      	cbnz	r3, 12af6 <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
   12ad6:	4b0f      	ldr	r3, [pc, #60]	; (12b14 <hard_fault+0x80>)
   12ad8:	881b      	ldrh	r3, [r3, #0]
   12ada:	b29b      	uxth	r3, r3
   12adc:	b193      	cbz	r3, 12b04 <hard_fault+0x70>
			reason = usage_fault(esf);
   12ade:	4620      	mov	r0, r4
   12ae0:	f7ff ffc0 	bl	12a64 <usage_fault>
   12ae4:	e00e      	b.n	12b04 <hard_fault+0x70>
			reason = esf->basic.r0;
   12ae6:	6820      	ldr	r0, [r4, #0]
   12ae8:	e00c      	b.n	12b04 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
   12aea:	460a      	mov	r2, r1
   12aec:	2101      	movs	r1, #1
   12aee:	4620      	mov	r0, r4
   12af0:	f7ff ff62 	bl	129b8 <mem_manage_fault>
   12af4:	e006      	b.n	12b04 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
   12af6:	460a      	mov	r2, r1
   12af8:	2101      	movs	r1, #1
   12afa:	4620      	mov	r0, r4
   12afc:	f7ff ff88 	bl	12a10 <bus_fault>
   12b00:	e000      	b.n	12b04 <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   12b02:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
   12b04:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   12b06:	4618      	mov	r0, r3
	return reason;
   12b08:	e7fc      	b.n	12b04 <hard_fault+0x70>
   12b0a:	bf00      	nop
   12b0c:	e000ed00 	.word	0xe000ed00
   12b10:	e000ed29 	.word	0xe000ed29
   12b14:	e000ed2a 	.word	0xe000ed2a

00012b18 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   12b18:	b570      	push	{r4, r5, r6, lr}
   12b1a:	b08a      	sub	sp, #40	; 0x28
   12b1c:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   12b1e:	4b27      	ldr	r3, [pc, #156]	; (12bbc <z_arm_fault+0xa4>)
   12b20:	6859      	ldr	r1, [r3, #4]
   12b22:	f3c1 0108 	ubfx	r1, r1, #0, #9
   12b26:	2300      	movs	r3, #0
   12b28:	f383 8811 	msr	BASEPRI, r3
   12b2c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   12b30:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   12b34:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   12b38:	d115      	bne.n	12b66 <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   12b3a:	f012 0f01 	tst.w	r2, #1
   12b3e:	d11f      	bne.n	12b80 <z_arm_fault+0x68>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   12b40:	f012 0f40 	tst.w	r2, #64	; 0x40
   12b44:	d105      	bne.n	12b52 <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   12b46:	f012 0f08 	tst.w	r2, #8
   12b4a:	d10a      	bne.n	12b62 <z_arm_fault+0x4a>
			ptr_esf = (z_arch_esf_t *)msp;
   12b4c:	4604      	mov	r4, r0
			*nested_exc = true;
   12b4e:	2601      	movs	r6, #1
   12b50:	e00b      	b.n	12b6a <z_arm_fault+0x52>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   12b52:	f012 0f04 	tst.w	r2, #4
   12b56:	d001      	beq.n	12b5c <z_arm_fault+0x44>
	*nested_exc = false;
   12b58:	2600      	movs	r6, #0
   12b5a:	e006      	b.n	12b6a <z_arm_fault+0x52>
			ptr_esf = (z_arch_esf_t *)msp;
   12b5c:	4604      	mov	r4, r0
	*nested_exc = false;
   12b5e:	2600      	movs	r6, #0
   12b60:	e003      	b.n	12b6a <z_arm_fault+0x52>
   12b62:	2600      	movs	r6, #0
   12b64:	e001      	b.n	12b6a <z_arm_fault+0x52>
   12b66:	2600      	movs	r6, #0
		return NULL;
   12b68:	4634      	mov	r4, r6

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   12b6a:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   12b6e:	4620      	mov	r0, r4
   12b70:	f005 f9dc 	bl	17f2c <fault_handle>
   12b74:	4605      	mov	r5, r0
	if (recoverable) {
   12b76:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   12b7a:	b123      	cbz	r3, 12b86 <z_arm_fault+0x6e>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   12b7c:	b00a      	add	sp, #40	; 0x28
   12b7e:	bd70      	pop	{r4, r5, r6, pc}
	*nested_exc = false;
   12b80:	2600      	movs	r6, #0
		return NULL;
   12b82:	4634      	mov	r4, r6
   12b84:	e7f1      	b.n	12b6a <z_arm_fault+0x52>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   12b86:	2220      	movs	r2, #32
   12b88:	4621      	mov	r1, r4
   12b8a:	a801      	add	r0, sp, #4
   12b8c:	f005 fa8a 	bl	180a4 <memcpy>
	if (nested_exc) {
   12b90:	b14e      	cbz	r6, 12ba6 <z_arm_fault+0x8e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   12b92:	9b08      	ldr	r3, [sp, #32]
   12b94:	f3c3 0208 	ubfx	r2, r3, #0, #9
   12b98:	b95a      	cbnz	r2, 12bb2 <z_arm_fault+0x9a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   12b9a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   12b9e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   12ba2:	9308      	str	r3, [sp, #32]
   12ba4:	e005      	b.n	12bb2 <z_arm_fault+0x9a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   12ba6:	9b08      	ldr	r3, [sp, #32]
   12ba8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   12bac:	f023 0301 	bic.w	r3, r3, #1
   12bb0:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   12bb2:	a901      	add	r1, sp, #4
   12bb4:	4628      	mov	r0, r5
   12bb6:	f005 f999 	bl	17eec <z_arm_fatal_error>
   12bba:	e7df      	b.n	12b7c <z_arm_fault+0x64>
   12bbc:	e000ed00 	.word	0xe000ed00

00012bc0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   12bc0:	4b04      	ldr	r3, [pc, #16]	; (12bd4 <z_arm_fault_init+0x14>)
   12bc2:	695a      	ldr	r2, [r3, #20]
   12bc4:	f042 0210 	orr.w	r2, r2, #16
   12bc8:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   12bca:	695a      	ldr	r2, [r3, #20]
   12bcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   12bd0:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   12bd2:	4770      	bx	lr
   12bd4:	e000ed00 	.word	0xe000ed00

00012bd8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   12bd8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   12bdc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   12be0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   12be2:	4672      	mov	r2, lr
	bl z_arm_fault
   12be4:	f7ff ff98 	bl	12b18 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   12be8:	bd01      	pop	{r0, pc}
   12bea:	bf00      	nop

00012bec <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   12bec:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   12bee:	e006      	b.n	12bfe <z_arm_interrupt_init+0x12>
   12bf0:	f002 010f 	and.w	r1, r2, #15
   12bf4:	4b09      	ldr	r3, [pc, #36]	; (12c1c <z_arm_interrupt_init+0x30>)
   12bf6:	440b      	add	r3, r1
   12bf8:	2120      	movs	r1, #32
   12bfa:	7619      	strb	r1, [r3, #24]
   12bfc:	3201      	adds	r2, #1
   12bfe:	2a40      	cmp	r2, #64	; 0x40
   12c00:	dc0a      	bgt.n	12c18 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   12c02:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   12c04:	2b00      	cmp	r3, #0
   12c06:	dbf3      	blt.n	12bf0 <z_arm_interrupt_init+0x4>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12c08:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   12c0c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   12c10:	2120      	movs	r1, #32
   12c12:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   12c16:	e7f1      	b.n	12bfc <z_arm_interrupt_init+0x10>
	}
}
   12c18:	4770      	bx	lr
   12c1a:	bf00      	nop
   12c1c:	e000ecfc 	.word	0xe000ecfc

00012c20 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   12c20:	f006 fb04 	bl	1922c <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12c24:	2020      	movs	r0, #32
    msr BASEPRI, r0
   12c26:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   12c2a:	4808      	ldr	r0, [pc, #32]	; (12c4c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   12c2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   12c30:	1840      	adds	r0, r0, r1
    msr PSP, r0
   12c32:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   12c36:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   12c3a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   12c3c:	4308      	orrs	r0, r1
    msr CONTROL, r0
   12c3e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   12c42:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   12c46:	f7ff fdd5 	bl	127f4 <z_arm_prep_c>
   12c4a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   12c4c:	2000d670 	.word	0x2000d670

00012c50 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   12c50:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   12c54:	4905      	ldr	r1, [pc, #20]	; (12c6c <sys_arch_reboot+0x1c>)
   12c56:	68ca      	ldr	r2, [r1, #12]
   12c58:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   12c5c:	4b04      	ldr	r3, [pc, #16]	; (12c70 <sys_arch_reboot+0x20>)
   12c5e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   12c60:	60cb      	str	r3, [r1, #12]
   12c62:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   12c66:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   12c68:	e7fd      	b.n	12c66 <sys_arch_reboot+0x16>
   12c6a:	bf00      	nop
   12c6c:	e000ed00 	.word	0xe000ed00
   12c70:	05fa0004 	.word	0x05fa0004

00012c74 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   12c74:	b508      	push	{r3, lr}
	if (_current == thread) {
   12c76:	4b08      	ldr	r3, [pc, #32]	; (12c98 <z_impl_k_thread_abort+0x24>)
   12c78:	689b      	ldr	r3, [r3, #8]
   12c7a:	4283      	cmp	r3, r0
   12c7c:	d002      	beq.n	12c84 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
   12c7e:	f004 fa9f 	bl	171c0 <z_thread_abort>
}
   12c82:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   12c84:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   12c88:	2b00      	cmp	r3, #0
   12c8a:	d0f8      	beq.n	12c7e <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12c8c:	4a03      	ldr	r2, [pc, #12]	; (12c9c <z_impl_k_thread_abort+0x28>)
   12c8e:	6853      	ldr	r3, [r2, #4]
   12c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   12c94:	6053      	str	r3, [r2, #4]
   12c96:	e7f2      	b.n	12c7e <z_impl_k_thread_abort+0xa>
   12c98:	2000cbb0 	.word	0x2000cbb0
   12c9c:	e000ed00 	.word	0xe000ed00

00012ca0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   12ca0:	b510      	push	{r4, lr}
   12ca2:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   12ca4:	4c09      	ldr	r4, [pc, #36]	; (12ccc <z_arm_configure_static_mpu_regions+0x2c>)
   12ca6:	4623      	mov	r3, r4
   12ca8:	4a09      	ldr	r2, [pc, #36]	; (12cd0 <z_arm_configure_static_mpu_regions+0x30>)
   12caa:	2101      	movs	r1, #1
   12cac:	4809      	ldr	r0, [pc, #36]	; (12cd4 <z_arm_configure_static_mpu_regions+0x34>)
   12cae:	f005 f9a4 	bl	17ffa <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   12cb2:	2300      	movs	r3, #0
   12cb4:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   12cb6:	4b08      	ldr	r3, [pc, #32]	; (12cd8 <z_arm_configure_static_mpu_regions+0x38>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   12cb8:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   12cba:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   12cbc:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   12cbe:	2101      	movs	r1, #1
   12cc0:	a801      	add	r0, sp, #4
   12cc2:	f005 f99e 	bl	18002 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   12cc6:	b004      	add	sp, #16
   12cc8:	bd10      	pop	{r4, pc}
   12cca:	bf00      	nop
   12ccc:	20040000 	.word	0x20040000
   12cd0:	2000c500 	.word	0x2000c500
   12cd4:	00019600 	.word	0x00019600
   12cd8:	2000c5b0 	.word	0x2000c5b0

00012cdc <mpu_init>:

	/* Flash region(s): Attribute-0
	 * SRAM region(s): Attribute-1
	 * SRAM no cache-able regions(s): Attribute-2
	 */
	MPU->MAIR0 =
   12cdc:	4b01      	ldr	r3, [pc, #4]	; (12ce4 <mpu_init+0x8>)
   12cde:	4a02      	ldr	r2, [pc, #8]	; (12ce8 <mpu_init+0xc>)
   12ce0:	631a      	str	r2, [r3, #48]	; 0x30
		((MPU_MAIR_ATTR_SRAM << MPU_MAIR0_Attr1_Pos) &
			MPU_MAIR0_Attr1_Msk)
		|
		((MPU_MAIR_ATTR_SRAM_NOCACHE << MPU_MAIR0_Attr2_Pos) &
			MPU_MAIR0_Attr2_Msk);
}
   12ce2:	4770      	bx	lr
   12ce4:	e000ed90 	.word	0xe000ed90
   12ce8:	0044ffaa 	.word	0x0044ffaa

00012cec <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   12cec:	b410      	push	{r4}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   12cee:	680b      	ldr	r3, [r1, #0]
   12cf0:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   12cf4:	7a0c      	ldrb	r4, [r1, #8]
   12cf6:	f004 031f 	and.w	r3, r4, #31
   12cfa:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   12cfc:	68cb      	ldr	r3, [r1, #12]
   12cfe:	f023 031f 	bic.w	r3, r3, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   12d02:	0964      	lsrs	r4, r4, #5
   12d04:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   12d08:	f043 0301 	orr.w	r3, r3, #1
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   12d0c:	4902      	ldr	r1, [pc, #8]	; (12d18 <region_init+0x2c>)
   12d0e:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   12d10:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   12d12:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   12d14:	bc10      	pop	{r4}
   12d16:	4770      	bx	lr
   12d18:	e000ed90 	.word	0xe000ed90

00012d1c <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   12d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d20:	b087      	sub	sp, #28
   12d22:	4681      	mov	r9, r0
   12d24:	9100      	str	r1, [sp, #0]
   12d26:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
   12d28:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
   12d2a:	2700      	movs	r7, #0
   12d2c:	e034      	b.n	12d98 <mpu_configure_regions_and_partition+0x7c>
	return -EINVAL;
   12d2e:	f06f 0615 	mvn.w	r6, #21
   12d32:	e053      	b.n	12ddc <mpu_configure_regions_and_partition+0xc0>
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;

		if ((regions[i].start == u_reg_base) &&
   12d34:	45d8      	cmp	r8, fp
   12d36:	d169      	bne.n	12e0c <mpu_configure_regions_and_partition+0xf0>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
   12d38:	4629      	mov	r1, r5
   12d3a:	b2f0      	uxtb	r0, r6
   12d3c:	f005 f942 	bl	17fc4 <mpu_configure_region>
   12d40:	e029      	b.n	12d96 <mpu_configure_regions_and_partition+0x7a>
	MPU->RNR = index;
   12d42:	4b58      	ldr	r3, [pc, #352]	; (12ea4 <mpu_configure_regions_and_partition+0x188>)
   12d44:	6098      	str	r0, [r3, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   12d46:	68d9      	ldr	r1, [r3, #12]
   12d48:	f001 011f 	and.w	r1, r1, #31
		| (base & MPU_RBAR_BASE_Msk);
   12d4c:	f022 021f 	bic.w	r2, r2, #31
   12d50:	430a      	orrs	r2, r1
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   12d52:	60da      	str	r2, [r3, #12]
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
   12d54:	4629      	mov	r1, r5
   12d56:	b2e0      	uxtb	r0, r4
   12d58:	f005 f934 	bl	17fc4 <mpu_configure_region>
   12d5c:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
   12d5e:	f110 0f16 	cmn.w	r0, #22
   12d62:	f000 8097 	beq.w	12e94 <mpu_configure_regions_and_partition+0x178>
				return reg_index;
			}

			reg_index++;
   12d66:	3401      	adds	r4, #1
   12d68:	e015      	b.n	12d96 <mpu_configure_regions_and_partition+0x7a>
			 * underlying region; the end of the underlying
			 * region needs to be set to the start of the
			 * new region.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
   12d6a:	3b01      	subs	r3, #1
	MPU->RNR = index;
   12d6c:	494d      	ldr	r1, [pc, #308]	; (12ea4 <mpu_configure_regions_and_partition+0x188>)
   12d6e:	6088      	str	r0, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   12d70:	690a      	ldr	r2, [r1, #16]
   12d72:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   12d76:	f023 031f 	bic.w	r3, r3, #31
   12d7a:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   12d7c:	610b      	str	r3, [r1, #16]

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
   12d7e:	4629      	mov	r1, r5
   12d80:	b2e0      	uxtb	r0, r4
   12d82:	f005 f91f 	bl	17fc4 <mpu_configure_region>
   12d86:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
   12d88:	f110 0f16 	cmn.w	r0, #22
   12d8c:	f000 8082 	beq.w	12e94 <mpu_configure_regions_and_partition+0x178>
				return reg_index;
			}

			reg_index++;
   12d90:	3401      	adds	r4, #1
   12d92:	e000      	b.n	12d96 <mpu_configure_regions_and_partition+0x7a>

			if (reg_index == -EINVAL) {
				return reg_index;
			}

			reg_index++;
   12d94:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
   12d96:	3701      	adds	r7, #1
   12d98:	9b00      	ldr	r3, [sp, #0]
   12d9a:	429f      	cmp	r7, r3
   12d9c:	da7a      	bge.n	12e94 <mpu_configure_regions_and_partition+0x178>
		if (regions[i].size == 0U) {
   12d9e:	eb07 0547 	add.w	r5, r7, r7, lsl #1
   12da2:	ea4f 0a85 	mov.w	sl, r5, lsl #2
   12da6:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   12daa:	f8d5 8004 	ldr.w	r8, [r5, #4]
   12dae:	f1b8 0f00 	cmp.w	r8, #0
   12db2:	d0f0      	beq.n	12d96 <mpu_configure_regions_and_partition+0x7a>
		if (do_sanity_check &&
   12db4:	9b01      	ldr	r3, [sp, #4]
   12db6:	b123      	cbz	r3, 12dc2 <mpu_configure_regions_and_partition+0xa6>
			(!mpu_partition_is_valid(&regions[i]))) {
   12db8:	4628      	mov	r0, r5
   12dba:	f005 f8e6 	bl	17f8a <mpu_partition_is_valid>
		if (do_sanity_check &&
   12dbe:	2800      	cmp	r0, #0
   12dc0:	d064      	beq.n	12e8c <mpu_configure_regions_and_partition+0x170>
			get_region_index(regions[i].start, regions[i].size);
   12dc2:	f859 b00a 	ldr.w	fp, [r9, sl]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   12dc6:	4658      	mov	r0, fp
   12dc8:	f005 f8d5 	bl	17f76 <arm_cmse_mpu_region_get>
   12dcc:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   12dce:	eb08 000b 	add.w	r0, r8, fp
   12dd2:	3801      	subs	r0, #1
   12dd4:	f005 f8cf 	bl	17f76 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   12dd8:	4286      	cmp	r6, r0
   12dda:	d1a8      	bne.n	12d2e <mpu_configure_regions_and_partition+0x12>
		if ((u_reg_index == -EINVAL) ||
   12ddc:	f116 0f16 	cmn.w	r6, #22
   12de0:	d057      	beq.n	12e92 <mpu_configure_regions_and_partition+0x176>
			(u_reg_index > (reg_index - 1))) {
   12de2:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   12de4:	42b3      	cmp	r3, r6
   12de6:	db59      	blt.n	12e9c <mpu_configure_regions_and_partition+0x180>
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
   12de8:	4630      	mov	r0, r6
	MPU->RNR = index;
   12dea:	4b2e      	ldr	r3, [pc, #184]	; (12ea4 <mpu_configure_regions_and_partition+0x188>)
   12dec:	609e      	str	r6, [r3, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   12dee:	68d9      	ldr	r1, [r3, #12]
   12df0:	f021 011f 	bic.w	r1, r1, #31
	MPU->RNR = index;
   12df4:	609e      	str	r6, [r3, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   12df6:	691b      	ldr	r3, [r3, #16]
   12df8:	f043 081f 	orr.w	r8, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   12dfc:	f859 300a 	ldr.w	r3, [r9, sl]
   12e00:	686a      	ldr	r2, [r5, #4]
   12e02:	441a      	add	r2, r3
   12e04:	f102 3bff 	add.w	fp, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   12e08:	4299      	cmp	r1, r3
   12e0a:	d093      	beq.n	12d34 <mpu_configure_regions_and_partition+0x18>
		} else if (regions[i].start == u_reg_base) {
   12e0c:	4299      	cmp	r1, r3
   12e0e:	d098      	beq.n	12d42 <mpu_configure_regions_and_partition+0x26>
		} else if (reg_last == u_reg_last) {
   12e10:	45d8      	cmp	r8, fp
   12e12:	d0aa      	beq.n	12d6a <mpu_configure_regions_and_partition+0x4e>
				regions[i].start - 1);
   12e14:	3b01      	subs	r3, #1
	MPU->RNR = index;
   12e16:	4923      	ldr	r1, [pc, #140]	; (12ea4 <mpu_configure_regions_and_partition+0x188>)
   12e18:	4606      	mov	r6, r0
   12e1a:	6088      	str	r0, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   12e1c:	690a      	ldr	r2, [r1, #16]
   12e1e:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   12e22:	f023 031f 	bic.w	r3, r3, #31
   12e26:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   12e28:	610b      	str	r3, [r1, #16]
				mpu_configure_region(reg_index, &regions[i]);
   12e2a:	4629      	mov	r1, r5
   12e2c:	b2e0      	uxtb	r0, r4
   12e2e:	f005 f8c9 	bl	17fc4 <mpu_configure_region>
   12e32:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   12e34:	f110 0f16 	cmn.w	r0, #22
   12e38:	d02c      	beq.n	12e94 <mpu_configure_regions_and_partition+0x178>
			reg_index++;
   12e3a:	3001      	adds	r0, #1
	MPU->RNR = index;
   12e3c:	4b19      	ldr	r3, [pc, #100]	; (12ea4 <mpu_configure_regions_and_partition+0x188>)
   12e3e:	609e      	str	r6, [r3, #8]
	attr->rbar = MPU->RBAR &
   12e40:	68d9      	ldr	r1, [r3, #12]
   12e42:	f89d 2010 	ldrb.w	r2, [sp, #16]
   12e46:	f361 0204 	bfi	r2, r1, #0, #5
   12e4a:	f88d 2010 	strb.w	r2, [sp, #16]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   12e4e:	691b      	ldr	r3, [r3, #16]
   12e50:	f3c3 0342 	ubfx	r3, r3, #1, #3
   12e54:	b2d2      	uxtb	r2, r2
   12e56:	f363 1247 	bfi	r2, r3, #5, #3
   12e5a:	f88d 2010 	strb.w	r2, [sp, #16]
			fill_region.base = regions[i].start +
   12e5e:	f859 300a 	ldr.w	r3, [r9, sl]
				regions[i].size;
   12e62:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
   12e64:	4413      	add	r3, r2
   12e66:	9302      	str	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   12e68:	f023 031f 	bic.w	r3, r3, #31
   12e6c:	eba8 080b 	sub.w	r8, r8, fp
   12e70:	4443      	add	r3, r8
   12e72:	3b01      	subs	r3, #1
   12e74:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
   12e78:	9305      	str	r3, [sp, #20]
				region_allocate_and_init(reg_index,
   12e7a:	a902      	add	r1, sp, #8
   12e7c:	b2c0      	uxtb	r0, r0
   12e7e:	f005 f896 	bl	17fae <region_allocate_and_init>
   12e82:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   12e84:	f110 0f16 	cmn.w	r0, #22
   12e88:	d184      	bne.n	12d94 <mpu_configure_regions_and_partition+0x78>
   12e8a:	e003      	b.n	12e94 <mpu_configure_regions_and_partition+0x178>
			return -EINVAL;
   12e8c:	f06f 0415 	mvn.w	r4, #21
   12e90:	e000      	b.n	12e94 <mpu_configure_regions_and_partition+0x178>
			return -EINVAL;
   12e92:	4634      	mov	r4, r6
		}
	}

	return reg_index;
}
   12e94:	4620      	mov	r0, r4
   12e96:	b007      	add	sp, #28
   12e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   12e9c:	f06f 0415 	mvn.w	r4, #21
   12ea0:	e7f8      	b.n	12e94 <mpu_configure_regions_and_partition+0x178>
   12ea2:	bf00      	nop
   12ea4:	e000ed90 	.word	0xe000ed90

00012ea8 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   12ea8:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   12eaa:	4c03      	ldr	r4, [pc, #12]	; (12eb8 <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   12eac:	2301      	movs	r3, #1
   12eae:	7822      	ldrb	r2, [r4, #0]
   12eb0:	f7ff ff34 	bl	12d1c <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   12eb4:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   12eb6:	bd10      	pop	{r4, pc}
   12eb8:	2000cbfa 	.word	0x2000cbfa

00012ebc <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
   12ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12ec0:	4607      	mov	r7, r0
   12ec2:	4688      	mov	r8, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   12ec4:	2400      	movs	r4, #0
   12ec6:	e003      	b.n	12ed0 <mpu_mark_areas_for_dynamic_regions+0x14>
	return -EINVAL;
   12ec8:	f06f 0515 	mvn.w	r5, #21
   12ecc:	e017      	b.n	12efe <mpu_mark_areas_for_dynamic_regions+0x42>
	for (int i = 0; i < dyn_region_areas_num; i++) {
   12ece:	3401      	adds	r4, #1
   12ed0:	45a0      	cmp	r8, r4
   12ed2:	dd3c      	ble.n	12f4e <mpu_mark_areas_for_dynamic_regions+0x92>
		if (dyn_region_areas[i].size == 0U) {
   12ed4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   12ed8:	009a      	lsls	r2, r3, #2
   12eda:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   12ede:	685e      	ldr	r6, [r3, #4]
   12ee0:	2e00      	cmp	r6, #0
   12ee2:	d0f4      	beq.n	12ece <mpu_mark_areas_for_dynamic_regions+0x12>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   12ee4:	f857 9002 	ldr.w	r9, [r7, r2]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   12ee8:	4648      	mov	r0, r9
   12eea:	f005 f844 	bl	17f76 <arm_cmse_mpu_region_get>
   12eee:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   12ef0:	eb06 0009 	add.w	r0, r6, r9
   12ef4:	3801      	subs	r0, #1
   12ef6:	f005 f83e 	bl	17f76 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   12efa:	4285      	cmp	r5, r0
   12efc:	d1e4      	bne.n	12ec8 <mpu_mark_areas_for_dynamic_regions+0xc>
		dyn_reg_info[i].index =
   12efe:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   12f02:	4a16      	ldr	r2, [pc, #88]	; (12f5c <mpu_mark_areas_for_dynamic_regions+0xa0>)
   12f04:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   12f08:	f115 0f16 	cmn.w	r5, #22
   12f0c:	d020      	beq.n	12f50 <mpu_mark_areas_for_dynamic_regions+0x94>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   12f0e:	4b14      	ldr	r3, [pc, #80]	; (12f60 <mpu_mark_areas_for_dynamic_regions+0xa4>)
   12f10:	781b      	ldrb	r3, [r3, #0]
   12f12:	42ab      	cmp	r3, r5
   12f14:	dd1f      	ble.n	12f56 <mpu_mark_areas_for_dynamic_regions+0x9a>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
   12f16:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   12f1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	MPU->RNR = index;
   12f1e:	4a11      	ldr	r2, [pc, #68]	; (12f64 <mpu_mark_areas_for_dynamic_regions+0xa8>)
   12f20:	6095      	str	r5, [r2, #8]
	MPU->RNR = index;
   12f22:	6095      	str	r5, [r2, #8]
	attr->rbar = MPU->RBAR &
   12f24:	68d5      	ldr	r5, [r2, #12]
   12f26:	7b18      	ldrb	r0, [r3, #12]
   12f28:	f365 0004 	bfi	r0, r5, #0, #5
   12f2c:	7318      	strb	r0, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   12f2e:	6910      	ldr	r0, [r2, #16]
   12f30:	f3c0 0042 	ubfx	r0, r0, #1, #3
   12f34:	7b1d      	ldrb	r5, [r3, #12]
   12f36:	f360 1547 	bfi	r5, r0, #5, #3
   12f3a:	731d      	strb	r5, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   12f3c:	68d1      	ldr	r1, [r2, #12]
   12f3e:	f021 011f 	bic.w	r1, r1, #31
   12f42:	6059      	str	r1, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   12f44:	6912      	ldr	r2, [r2, #16]
   12f46:	f022 021f 	bic.w	r2, r2, #31
   12f4a:	611a      	str	r2, [r3, #16]
}
   12f4c:	e7bf      	b.n	12ece <mpu_mark_areas_for_dynamic_regions+0x12>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
   12f4e:	2500      	movs	r5, #0
}
   12f50:	4628      	mov	r0, r5
   12f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   12f56:	f06f 0515 	mvn.w	r5, #21
   12f5a:	e7f9      	b.n	12f50 <mpu_mark_areas_for_dynamic_regions+0x94>
   12f5c:	2000c7f8 	.word	0x2000c7f8
   12f60:	2000cbfa 	.word	0x2000cbfa
   12f64:	e000ed90 	.word	0xe000ed90

00012f68 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   12f68:	4b03      	ldr	r3, [pc, #12]	; (12f78 <arm_core_mpu_enable+0x10>)
   12f6a:	2205      	movs	r2, #5
   12f6c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   12f6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12f72:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   12f76:	4770      	bx	lr
   12f78:	e000ed90 	.word	0xe000ed90

00012f7c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   12f7c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   12f80:	4b01      	ldr	r3, [pc, #4]	; (12f88 <arm_core_mpu_disable+0xc>)
   12f82:	2200      	movs	r2, #0
   12f84:	605a      	str	r2, [r3, #4]
}
   12f86:	4770      	bx	lr
   12f88:	e000ed90 	.word	0xe000ed90

00012f8c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   12f8c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   12f8e:	4b0e      	ldr	r3, [pc, #56]	; (12fc8 <z_arm_mpu_init+0x3c>)
   12f90:	681d      	ldr	r5, [r3, #0]
   12f92:	2d10      	cmp	r5, #16
   12f94:	d815      	bhi.n	12fc2 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   12f96:	f7ff fff1 	bl	12f7c <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
   12f9a:	f7ff fe9f 	bl	12cdc <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   12f9e:	2400      	movs	r4, #0
   12fa0:	42a5      	cmp	r5, r4
   12fa2:	d908      	bls.n	12fb6 <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   12fa4:	4b08      	ldr	r3, [pc, #32]	; (12fc8 <z_arm_mpu_init+0x3c>)
   12fa6:	6859      	ldr	r1, [r3, #4]
   12fa8:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   12fac:	4620      	mov	r0, r4
   12fae:	f7ff fe9d 	bl	12cec <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   12fb2:	3401      	adds	r4, #1
   12fb4:	e7f4      	b.n	12fa0 <z_arm_mpu_init+0x14>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   12fb6:	4b05      	ldr	r3, [pc, #20]	; (12fcc <z_arm_mpu_init+0x40>)
   12fb8:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   12fba:	f7ff ffd5 	bl	12f68 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   12fbe:	2000      	movs	r0, #0
}
   12fc0:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   12fc2:	f04f 30ff 	mov.w	r0, #4294967295
   12fc6:	e7fb      	b.n	12fc0 <z_arm_mpu_init+0x34>
   12fc8:	0001961c 	.word	0x0001961c
   12fcc:	2000cbfa 	.word	0x2000cbfa

00012fd0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   12fd0:	4b01      	ldr	r3, [pc, #4]	; (12fd8 <__stdout_hook_install+0x8>)
   12fd2:	6018      	str	r0, [r3, #0]
}
   12fd4:	4770      	bx	lr
   12fd6:	bf00      	nop
   12fd8:	2000c504 	.word	0x2000c504

00012fdc <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
   12fdc:	3902      	subs	r1, #2
   12fde:	2901      	cmp	r1, #1
   12fe0:	d804      	bhi.n	12fec <z_impl_zephyr_fputc+0x10>
{
   12fe2:	b508      	push	{r3, lr}
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
   12fe4:	4b03      	ldr	r3, [pc, #12]	; (12ff4 <z_impl_zephyr_fputc+0x18>)
   12fe6:	681b      	ldr	r3, [r3, #0]
   12fe8:	4798      	blx	r3
}
   12fea:	bd08      	pop	{r3, pc}
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
   12fec:	f04f 30ff 	mov.w	r0, #4294967295
}
   12ff0:	4770      	bx	lr
   12ff2:	bf00      	nop
   12ff4:	2000c504 	.word	0x2000c504

00012ff8 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
   12ff8:	b40f      	push	{r0, r1, r2, r3}
   12ffa:	b500      	push	{lr}
   12ffc:	b083      	sub	sp, #12
   12ffe:	ab04      	add	r3, sp, #16
   13000:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list vargs;
	int     r;

	va_start(vargs, format);
   13004:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
   13006:	2102      	movs	r1, #2
   13008:	4803      	ldr	r0, [pc, #12]	; (13018 <printf+0x20>)
   1300a:	f7fe fca3 	bl	11954 <cbvprintf>
	va_end(vargs);

	return r;
}
   1300e:	b003      	add	sp, #12
   13010:	f85d eb04 	ldr.w	lr, [sp], #4
   13014:	b004      	add	sp, #16
   13016:	4770      	bx	lr
   13018:	0001812d 	.word	0x0001812d

0001301c <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   1301c:	4800      	ldr	r0, [pc, #0]	; (13020 <get_hf_flags+0x4>)
   1301e:	4770      	bx	lr
   13020:	2000c85c 	.word	0x2000c85c

00013024 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   13024:	4b03      	ldr	r3, [pc, #12]	; (13034 <get_subsys+0x10>)
   13026:	1ac0      	subs	r0, r0, r3
   13028:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   1302a:	4b03      	ldr	r3, [pc, #12]	; (13038 <get_subsys+0x14>)
   1302c:	fb03 f000 	mul.w	r0, r3, r0
   13030:	4770      	bx	lr
   13032:	bf00      	nop
   13034:	2000c81c 	.word	0x2000c81c
   13038:	b6db6db7 	.word	0xb6db6db7

0001303c <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1303c:	b538      	push	{r3, r4, r5, lr}
   1303e:	4605      	mov	r5, r0
   13040:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   13042:	f7ff ffef 	bl	13024 <get_subsys>
   13046:	4601      	mov	r1, r0
   13048:	2240      	movs	r2, #64	; 0x40
   1304a:	4803      	ldr	r0, [pc, #12]	; (13058 <onoff_stop+0x1c>)
   1304c:	f005 f8e9 	bl	18222 <stop>
   13050:	4601      	mov	r1, r0
	notify(mgr, res);
   13052:	4628      	mov	r0, r5
   13054:	47a0      	blx	r4
}
   13056:	bd38      	pop	{r3, r4, r5, pc}
   13058:	00019288 	.word	0x00019288

0001305c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1305c:	b530      	push	{r4, r5, lr}
   1305e:	b083      	sub	sp, #12
   13060:	4605      	mov	r5, r0
   13062:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   13064:	f7ff ffde 	bl	13024 <get_subsys>
   13068:	4601      	mov	r1, r0
   1306a:	2340      	movs	r3, #64	; 0x40
   1306c:	9300      	str	r3, [sp, #0]
   1306e:	4623      	mov	r3, r4
   13070:	4a05      	ldr	r2, [pc, #20]	; (13088 <onoff_start+0x2c>)
   13072:	4806      	ldr	r0, [pc, #24]	; (1308c <onoff_start+0x30>)
   13074:	f005 f8ef 	bl	18256 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   13078:	1e01      	subs	r1, r0, #0
   1307a:	db01      	blt.n	13080 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   1307c:	b003      	add	sp, #12
   1307e:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   13080:	4628      	mov	r0, r5
   13082:	47a0      	blx	r4
}
   13084:	e7fa      	b.n	1307c <onoff_start+0x20>
   13086:	bf00      	nop
   13088:	0001829f 	.word	0x0001829f
   1308c:	00019288 	.word	0x00019288

00013090 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   13090:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   13092:	b110      	cbz	r0, 1309a <clock_event_handler+0xa>
   13094:	2801      	cmp	r0, #1
   13096:	d00d      	beq.n	130b4 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   13098:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1309a:	2100      	movs	r1, #0
   1309c:	4808      	ldr	r0, [pc, #32]	; (130c0 <clock_event_handler+0x30>)
   1309e:	f005 f849 	bl	18134 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   130a2:	6883      	ldr	r3, [r0, #8]
   130a4:	f013 0f07 	tst.w	r3, #7
   130a8:	d1f6      	bne.n	13098 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   130aa:	2100      	movs	r1, #0
   130ac:	4804      	ldr	r0, [pc, #16]	; (130c0 <clock_event_handler+0x30>)
   130ae:	f005 f8a6 	bl	181fe <clkstarted_handle>
   130b2:	e7f1      	b.n	13098 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   130b4:	2101      	movs	r1, #1
   130b6:	4802      	ldr	r0, [pc, #8]	; (130c0 <clock_event_handler+0x30>)
   130b8:	f005 f8a1 	bl	181fe <clkstarted_handle>
}
   130bc:	e7ec      	b.n	13098 <clock_event_handler+0x8>
   130be:	bf00      	nop
   130c0:	00019288 	.word	0x00019288

000130c4 <generic_hfclk_start>:
{
   130c4:	b510      	push	{r4, lr}
	__asm__ volatile(
   130c6:	f04f 0320 	mov.w	r3, #32
   130ca:	f3ef 8411 	mrs	r4, BASEPRI
   130ce:	f383 8812 	msr	BASEPRI_MAX, r3
   130d2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   130d6:	4a13      	ldr	r2, [pc, #76]	; (13124 <generic_hfclk_start+0x60>)
   130d8:	6813      	ldr	r3, [r2, #0]
   130da:	f043 0302 	orr.w	r3, r3, #2
   130de:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   130e0:	f013 0f01 	tst.w	r3, #1
   130e4:	d108      	bne.n	130f8 <generic_hfclk_start+0x34>
	bool already_started = false;
   130e6:	2300      	movs	r3, #0
	__asm__ volatile(
   130e8:	f384 8811 	msr	BASEPRI, r4
   130ec:	f3bf 8f6f 	isb	sy
	if (already_started) {
   130f0:	b993      	cbnz	r3, 13118 <generic_hfclk_start+0x54>
	hfclk_start();
   130f2:	f005 f8dc 	bl	182ae <hfclk_start>
}
   130f6:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   130f8:	4b0b      	ldr	r3, [pc, #44]	; (13128 <generic_hfclk_start+0x64>)
   130fa:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   130fe:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   13102:	f012 0f01 	tst.w	r2, #1
   13106:	d101      	bne.n	1310c <generic_hfclk_start+0x48>
	bool already_started = false;
   13108:	2300      	movs	r3, #0
   1310a:	e7ed      	b.n	130e8 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
   1310c:	f7ff ff86 	bl	1301c <get_hf_flags>
   13110:	f005 f862 	bl	181d8 <set_on_state>
			already_started = true;
   13114:	2301      	movs	r3, #1
   13116:	e7e7      	b.n	130e8 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
   13118:	2100      	movs	r1, #0
   1311a:	4804      	ldr	r0, [pc, #16]	; (1312c <generic_hfclk_start+0x68>)
   1311c:	f005 f86f 	bl	181fe <clkstarted_handle>
		return;
   13120:	e7e9      	b.n	130f6 <generic_hfclk_start+0x32>
   13122:	bf00      	nop
   13124:	2000c86c 	.word	0x2000c86c
   13128:	40005000 	.word	0x40005000
   1312c:	00019288 	.word	0x00019288

00013130 <generic_hfclk_stop>:
{
   13130:	b508      	push	{r3, lr}
   13132:	4b08      	ldr	r3, [pc, #32]	; (13154 <generic_hfclk_stop+0x24>)
   13134:	e8d3 2fef 	ldaex	r2, [r3]
   13138:	f022 0102 	bic.w	r1, r2, #2
   1313c:	e8c3 1fe0 	stlex	r0, r1, [r3]
   13140:	2800      	cmp	r0, #0
   13142:	d1f7      	bne.n	13134 <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   13144:	f012 0f01 	tst.w	r2, #1
   13148:	d000      	beq.n	1314c <generic_hfclk_stop+0x1c>
}
   1314a:	bd08      	pop	{r3, pc}
	hfclk_stop();
   1314c:	f005 f8b9 	bl	182c2 <hfclk_stop>
   13150:	e7fb      	b.n	1314a <generic_hfclk_stop+0x1a>
   13152:	bf00      	nop
   13154:	2000c86c 	.word	0x2000c86c

00013158 <api_blocking_start>:
{
   13158:	b500      	push	{lr}
   1315a:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1315c:	f8cd d000 	str.w	sp, [sp]
   13160:	f8cd d004 	str.w	sp, [sp, #4]
   13164:	2300      	movs	r3, #0
   13166:	9302      	str	r3, [sp, #8]
   13168:	2301      	movs	r3, #1
   1316a:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1316c:	466b      	mov	r3, sp
   1316e:	4a07      	ldr	r2, [pc, #28]	; (1318c <api_blocking_start+0x34>)
   13170:	f005 f88d 	bl	1828e <api_start>
	if (err < 0) {
   13174:	2800      	cmp	r0, #0
   13176:	db05      	blt.n	13184 <api_blocking_start+0x2c>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   13178:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1317c:	2300      	movs	r3, #0
   1317e:	4668      	mov	r0, sp
   13180:	f003 fc32 	bl	169e8 <z_impl_k_sem_take>
}
   13184:	b005      	add	sp, #20
   13186:	f85d fb04 	ldr.w	pc, [sp], #4
   1318a:	bf00      	nop
   1318c:	000182d7 	.word	0x000182d7

00013190 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   13190:	b570      	push	{r4, r5, r6, lr}
   13192:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13194:	2200      	movs	r2, #0
   13196:	2101      	movs	r1, #1
   13198:	2005      	movs	r0, #5
   1319a:	f7ff fb01 	bl	127a0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   1319e:	2005      	movs	r0, #5
   131a0:	f7ff fae0 	bl	12764 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   131a4:	4811      	ldr	r0, [pc, #68]	; (131ec <clk_init+0x5c>)
   131a6:	f001 f849 	bl	1423c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   131aa:	4b11      	ldr	r3, [pc, #68]	; (131f0 <clk_init+0x60>)
   131ac:	4298      	cmp	r0, r3
   131ae:	d11a      	bne.n	131e6 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   131b0:	f005 fc50 	bl	18a54 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   131b4:	2400      	movs	r4, #0
   131b6:	e003      	b.n	131c0 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   131b8:	2301      	movs	r3, #1
   131ba:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   131bc:	441c      	add	r4, r3
   131be:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
   131c0:	2c01      	cmp	r4, #1
   131c2:	d80e      	bhi.n	131e2 <clk_init+0x52>
						get_sub_data(dev, i);
   131c4:	4621      	mov	r1, r4
   131c6:	4630      	mov	r0, r6
   131c8:	f004 ffb4 	bl	18134 <get_sub_data>
   131cc:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
   131ce:	4621      	mov	r1, r4
   131d0:	4630      	mov	r0, r6
   131d2:	f004 ffba 	bl	1814a <get_onoff_manager>
   131d6:	4907      	ldr	r1, [pc, #28]	; (131f4 <clk_init+0x64>)
   131d8:	f004 fb10 	bl	177fc <onoff_manager_init>
		if (err < 0) {
   131dc:	2800      	cmp	r0, #0
   131de:	daeb      	bge.n	131b8 <clk_init+0x28>
   131e0:	e000      	b.n	131e4 <clk_init+0x54>
	}

	return 0;
   131e2:	2000      	movs	r0, #0
}
   131e4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   131e6:	f06f 0004 	mvn.w	r0, #4
   131ea:	e7fb      	b.n	131e4 <clk_init+0x54>
   131ec:	00013091 	.word	0x00013091
   131f0:	0bad0000 	.word	0x0bad0000
   131f4:	00019674 	.word	0x00019674

000131f8 <lfclk_spinwait>:
{
   131f8:	b570      	push	{r4, r5, r6, lr}
   131fa:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   131fc:	2801      	cmp	r0, #1
   131fe:	d106      	bne.n	1320e <lfclk_spinwait+0x16>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   13200:	4b32      	ldr	r3, [pc, #200]	; (132cc <lfclk_spinwait+0xd4>)
   13202:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   13206:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1320a:	2b02      	cmp	r3, #2
   1320c:	d03c      	beq.n	13288 <lfclk_spinwait+0x90>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1320e:	f005 fde0 	bl	18dd2 <k_is_in_isr>
   13212:	b920      	cbnz	r0, 1321e <lfclk_spinwait+0x26>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   13214:	4b2e      	ldr	r3, [pc, #184]	; (132d0 <lfclk_spinwait+0xd8>)
   13216:	781b      	ldrb	r3, [r3, #0]
   13218:	b193      	cbz	r3, 13240 <lfclk_spinwait+0x48>
   1321a:	2300      	movs	r3, #0
   1321c:	e000      	b.n	13220 <lfclk_spinwait+0x28>
   1321e:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
   13220:	461c      	mov	r4, r3
   13222:	b17b      	cbz	r3, 13244 <lfclk_spinwait+0x4c>
	__asm__ volatile(
   13224:	f04f 0320 	mov.w	r3, #32
   13228:	f3ef 8611 	mrs	r6, BASEPRI
   1322c:	f383 8812 	msr	BASEPRI_MAX, r3
   13230:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
   13234:	b994      	cbnz	r4, 1325c <lfclk_spinwait+0x64>
    p_reg->INTENCLR = mask;
   13236:	4b25      	ldr	r3, [pc, #148]	; (132cc <lfclk_spinwait+0xd4>)
   13238:	2202      	movs	r2, #2
   1323a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1323e:	e00d      	b.n	1325c <lfclk_spinwait+0x64>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   13240:	2301      	movs	r3, #1
   13242:	e7ed      	b.n	13220 <lfclk_spinwait+0x28>
	int key = isr_mode ? irq_lock() : 0;
   13244:	2600      	movs	r6, #0
   13246:	e7f5      	b.n	13234 <lfclk_spinwait+0x3c>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   13248:	b1fc      	cbz	r4, 1328a <lfclk_spinwait+0x92>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1324a:	4630      	mov	r0, r6
   1324c:	f7ff fa80 	bl	12750 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   13250:	4b1e      	ldr	r3, [pc, #120]	; (132cc <lfclk_spinwait+0xd4>)
   13252:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   13256:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   13258:	2b01      	cmp	r3, #1
   1325a:	d01b      	beq.n	13294 <lfclk_spinwait+0x9c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1325c:	4a1b      	ldr	r2, [pc, #108]	; (132cc <lfclk_spinwait+0xd4>)
   1325e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   13262:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   13266:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   1326a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   1326e:	d125      	bne.n	132bc <lfclk_spinwait+0xc4>
    return false;
   13270:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
   13272:	2a00      	cmp	r2, #0
   13274:	d0e8      	beq.n	13248 <lfclk_spinwait+0x50>
   13276:	2b02      	cmp	r3, #2
   13278:	d001      	beq.n	1327e <lfclk_spinwait+0x86>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1327a:	2d01      	cmp	r5, #1
   1327c:	d1e4      	bne.n	13248 <lfclk_spinwait+0x50>
	if (isr_mode) {
   1327e:	b1fc      	cbz	r4, 132c0 <lfclk_spinwait+0xc8>
	__asm__ volatile(
   13280:	f386 8811 	msr	BASEPRI, r6
   13284:	f3bf 8f6f 	isb	sy
}
   13288:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
   1328a:	2021      	movs	r0, #33	; 0x21
   1328c:	2100      	movs	r1, #0
   1328e:	f003 ff65 	bl	1715c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   13292:	e7dd      	b.n	13250 <lfclk_spinwait+0x58>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   13294:	4b0f      	ldr	r3, [pc, #60]	; (132d4 <lfclk_spinwait+0xdc>)
   13296:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   13298:	2b00      	cmp	r3, #0
   1329a:	d0df      	beq.n	1325c <lfclk_spinwait+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1329c:	4b0d      	ldr	r3, [pc, #52]	; (132d4 <lfclk_spinwait+0xdc>)
   1329e:	2200      	movs	r2, #0
   132a0:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   132a2:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   132a4:	4b09      	ldr	r3, [pc, #36]	; (132cc <lfclk_spinwait+0xd4>)
   132a6:	2202      	movs	r2, #2
   132a8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   132ac:	4b0a      	ldr	r3, [pc, #40]	; (132d8 <lfclk_spinwait+0xe0>)
   132ae:	2220      	movs	r2, #32
   132b0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   132b4:	4b09      	ldr	r3, [pc, #36]	; (132dc <lfclk_spinwait+0xe4>)
   132b6:	2201      	movs	r2, #1
   132b8:	601a      	str	r2, [r3, #0]
}
   132ba:	e7cf      	b.n	1325c <lfclk_spinwait+0x64>
                return true;
   132bc:	2201      	movs	r2, #1
   132be:	e7d8      	b.n	13272 <lfclk_spinwait+0x7a>
    p_reg->INTENSET = mask;
   132c0:	4b02      	ldr	r3, [pc, #8]	; (132cc <lfclk_spinwait+0xd4>)
   132c2:	2202      	movs	r2, #2
   132c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   132c8:	e7de      	b.n	13288 <lfclk_spinwait+0x90>
   132ca:	bf00      	nop
   132cc:	40005000 	.word	0x40005000
   132d0:	2000cd2c 	.word	0x2000cd2c
   132d4:	40005104 	.word	0x40005104
   132d8:	e000e100 	.word	0xe000e100
   132dc:	40005008 	.word	0x40005008

000132e0 <z_nrf_clock_control_lf_on>:
{
   132e0:	b510      	push	{r4, lr}
   132e2:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   132e4:	4b0e      	ldr	r3, [pc, #56]	; (13320 <z_nrf_clock_control_lf_on+0x40>)
   132e6:	2101      	movs	r1, #1
   132e8:	e8d3 2fef 	ldaex	r2, [r3]
   132ec:	e8c3 1fe0 	stlex	r0, r1, [r3]
   132f0:	2800      	cmp	r0, #0
   132f2:	d1f9      	bne.n	132e8 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
   132f4:	b11a      	cbz	r2, 132fe <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
   132f6:	1e63      	subs	r3, r4, #1
   132f8:	2b01      	cmp	r3, #1
   132fa:	d90c      	bls.n	13316 <z_nrf_clock_control_lf_on+0x36>
}
   132fc:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   132fe:	4809      	ldr	r0, [pc, #36]	; (13324 <z_nrf_clock_control_lf_on+0x44>)
   13300:	f004 ff23 	bl	1814a <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   13304:	4908      	ldr	r1, [pc, #32]	; (13328 <z_nrf_clock_control_lf_on+0x48>)
   13306:	2300      	movs	r3, #0
   13308:	604b      	str	r3, [r1, #4]
   1330a:	60cb      	str	r3, [r1, #12]
   1330c:	2301      	movs	r3, #1
   1330e:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   13310:	f004 fa90 	bl	17834 <onoff_request>
   13314:	e7ef      	b.n	132f6 <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
   13316:	4620      	mov	r0, r4
   13318:	f7ff ff6e 	bl	131f8 <lfclk_spinwait>
		break;
   1331c:	e7ee      	b.n	132fc <z_nrf_clock_control_lf_on+0x1c>
   1331e:	bf00      	nop
   13320:	2000c870 	.word	0x2000c870
   13324:	00019288 	.word	0x00019288
   13328:	2000c80c 	.word	0x2000c80c

0001332c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   1332c:	b510      	push	{r4, lr}
   1332e:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   13330:	280a      	cmp	r0, #10
   13332:	d007      	beq.n	13344 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   13334:	4b07      	ldr	r3, [pc, #28]	; (13354 <console_out+0x28>)
   13336:	6818      	ldr	r0, [r3, #0]
   13338:	b2e1      	uxtb	r1, r4
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
   1333a:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   1333c:	685b      	ldr	r3, [r3, #4]
   1333e:	4798      	blx	r3

	return c;
}
   13340:	4620      	mov	r0, r4
   13342:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
   13344:	4b03      	ldr	r3, [pc, #12]	; (13354 <console_out+0x28>)
   13346:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
   13348:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   1334a:	685b      	ldr	r3, [r3, #4]
   1334c:	210d      	movs	r1, #13
   1334e:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   13350:	e7f0      	b.n	13334 <console_out+0x8>
   13352:	bf00      	nop
   13354:	2000c874 	.word	0x2000c874

00013358 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
   13358:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
   1335a:	4c04      	ldr	r4, [pc, #16]	; (1336c <uart_console_hook_install+0x14>)
   1335c:	4620      	mov	r0, r4
   1335e:	f7ff fe37 	bl	12fd0 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
   13362:	4620      	mov	r0, r4
   13364:	f7fe f80c 	bl	11380 <__printk_hook_install>
#endif
}
   13368:	bd10      	pop	{r4, pc}
   1336a:	bf00      	nop
   1336c:	0001332d 	.word	0x0001332d

00013370 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   13370:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   13372:	4806      	ldr	r0, [pc, #24]	; (1338c <uart_console_init+0x1c>)
   13374:	4b06      	ldr	r3, [pc, #24]	; (13390 <uart_console_init+0x20>)
   13376:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   13378:	f005 fc7d 	bl	18c76 <z_device_ready>
   1337c:	b118      	cbz	r0, 13386 <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
   1337e:	f7ff ffeb 	bl	13358 <uart_console_hook_install>

	return 0;
   13382:	2000      	movs	r0, #0
}
   13384:	bd08      	pop	{r3, pc}
		return -ENODEV;
   13386:	f06f 0012 	mvn.w	r0, #18
   1338a:	e7fb      	b.n	13384 <uart_console_init+0x14>
   1338c:	000192d0 	.word	0x000192d0
   13390:	2000c874 	.word	0x2000c874

00013394 <get_drive>:

static int get_drive(gpio_flags_t flags, nrf_gpio_pin_drive_t *drive)
{
	int err = 0;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   13394:	4b1f      	ldr	r3, [pc, #124]	; (13414 <get_drive+0x80>)
   13396:	4003      	ands	r3, r0
   13398:	4a1f      	ldr	r2, [pc, #124]	; (13418 <get_drive+0x84>)
   1339a:	4293      	cmp	r3, r2
   1339c:	d032      	beq.n	13404 <get_drive+0x70>
   1339e:	d816      	bhi.n	133ce <get_drive+0x3a>
   133a0:	2b06      	cmp	r3, #6
   133a2:	d02b      	beq.n	133fc <get_drive+0x68>
   133a4:	d906      	bls.n	133b4 <get_drive+0x20>
   133a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   133aa:	d10d      	bne.n	133c8 <get_drive+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		*drive = NRF_GPIO_PIN_H0S1;
   133ac:	2301      	movs	r3, #1
   133ae:	700b      	strb	r3, [r1, #0]
	int err = 0;
   133b0:	2000      	movs	r0, #0
		break;
   133b2:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   133b4:	b1fb      	cbz	r3, 133f6 <get_drive+0x62>
   133b6:	2b02      	cmp	r3, #2
   133b8:	d103      	bne.n	133c2 <get_drive+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0S1;
   133ba:	2304      	movs	r3, #4
   133bc:	700b      	strb	r3, [r1, #0]
	int err = 0;
   133be:	2000      	movs	r0, #0
		break;
   133c0:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   133c2:	f06f 0015 	mvn.w	r0, #21
   133c6:	4770      	bx	lr
   133c8:	f06f 0015 	mvn.w	r0, #21
   133cc:	4770      	bx	lr
   133ce:	4a13      	ldr	r2, [pc, #76]	; (1341c <get_drive+0x88>)
   133d0:	4293      	cmp	r3, r2
   133d2:	d01b      	beq.n	1340c <get_drive+0x78>
   133d4:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   133d8:	d103      	bne.n	133e2 <get_drive+0x4e>
		*drive = NRF_GPIO_PIN_H0H1;
   133da:	2303      	movs	r3, #3
   133dc:	700b      	strb	r3, [r1, #0]
	int err = 0;
   133de:	2000      	movs	r0, #0
		break;
   133e0:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   133e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   133e6:	d103      	bne.n	133f0 <get_drive+0x5c>
		*drive = NRF_GPIO_PIN_S0H1;
   133e8:	2302      	movs	r3, #2
   133ea:	700b      	strb	r3, [r1, #0]
	int err = 0;
   133ec:	2000      	movs	r0, #0
		break;
   133ee:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   133f0:	f06f 0015 	mvn.w	r0, #21
   133f4:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   133f6:	2000      	movs	r0, #0
   133f8:	7008      	strb	r0, [r1, #0]
		break;
   133fa:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   133fc:	2306      	movs	r3, #6
   133fe:	700b      	strb	r3, [r1, #0]
	int err = 0;
   13400:	2000      	movs	r0, #0
		break;
   13402:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   13404:	2307      	movs	r3, #7
   13406:	700b      	strb	r3, [r1, #0]
	int err = 0;
   13408:	2000      	movs	r0, #0
		break;
   1340a:	4770      	bx	lr
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0H1;
   1340c:	2305      	movs	r3, #5
   1340e:	700b      	strb	r3, [r1, #0]
	int err = 0;
   13410:	2000      	movs	r0, #0
		err = -EINVAL;
		break;
	}

	return err;
}
   13412:	4770      	bx	lr
   13414:	00f00006 	.word	0x00f00006
   13418:	00100006 	.word	0x00100006
   1341c:	00400002 	.word	0x00400002

00013420 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   13420:	b908      	cbnz	r0, 13426 <get_dev+0x6>
   13422:	4802      	ldr	r0, [pc, #8]	; (1342c <get_dev+0xc>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   13424:	4770      	bx	lr
	const struct device *dev = NULL;
   13426:	2000      	movs	r0, #0
   13428:	4770      	bx	lr
   1342a:	bf00      	nop
   1342c:	000192a0 	.word	0x000192a0

00013430 <gpio_nrfx_pin_interrupt_configure>:
{
   13430:	b5f0      	push	{r4, r5, r6, r7, lr}
   13432:	b085      	sub	sp, #20
   13434:	460e      	mov	r6, r1
   13436:	4619      	mov	r1, r3
	return port->config;
   13438:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1343a:	7b1b      	ldrb	r3, [r3, #12]
   1343c:	f006 051f 	and.w	r5, r6, #31
   13440:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   13444:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   13448:	d022      	beq.n	13490 <gpio_nrfx_pin_interrupt_configure+0x60>
   1344a:	4607      	mov	r7, r0
   1344c:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1344e:	2300      	movs	r3, #0
   13450:	9302      	str	r3, [sp, #8]
   13452:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
   13454:	4610      	mov	r0, r2
   13456:	f004 ff6f 	bl	18338 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1345a:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
   1345e:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   13460:	6899      	ldr	r1, [r3, #8]
   13462:	40f1      	lsrs	r1, r6
   13464:	f011 0f01 	tst.w	r1, #1
   13468:	d102      	bne.n	13470 <gpio_nrfx_pin_interrupt_configure+0x40>
   1346a:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
   1346e:	d014      	beq.n	1349a <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   13470:	2300      	movs	r3, #0
   13472:	aa02      	add	r2, sp, #8
   13474:	4619      	mov	r1, r3
   13476:	4628      	mov	r0, r5
   13478:	f001 f9b4 	bl	147e4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1347c:	4b18      	ldr	r3, [pc, #96]	; (134e0 <gpio_nrfx_pin_interrupt_configure+0xb0>)
   1347e:	4298      	cmp	r0, r3
   13480:	d12a      	bne.n	134d8 <gpio_nrfx_pin_interrupt_configure+0xa8>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   13482:	2101      	movs	r1, #1
   13484:	4628      	mov	r0, r5
   13486:	f001 fb79 	bl	14b7c <nrfx_gpiote_trigger_enable>
	return 0;
   1348a:	2000      	movs	r0, #0
}
   1348c:	b005      	add	sp, #20
   1348e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   13490:	4628      	mov	r0, r5
   13492:	f001 fbcb 	bl	14c2c <nrfx_gpiote_trigger_disable>
		return 0;
   13496:	2000      	movs	r0, #0
   13498:	e7f8      	b.n	1348c <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1349a:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1349e:	3380      	adds	r3, #128	; 0x80
   134a0:	4a10      	ldr	r2, [pc, #64]	; (134e4 <gpio_nrfx_pin_interrupt_configure+0xb4>)
   134a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   134a6:	f013 0f01 	tst.w	r3, #1
   134aa:	d1e1      	bne.n	13470 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   134ac:	f10d 0107 	add.w	r1, sp, #7
   134b0:	4628      	mov	r0, r5
   134b2:	f001 fb07 	bl	14ac4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   134b6:	4b0c      	ldr	r3, [pc, #48]	; (134e8 <gpio_nrfx_pin_interrupt_configure+0xb8>)
   134b8:	4298      	cmp	r0, r3
   134ba:	d003      	beq.n	134c4 <gpio_nrfx_pin_interrupt_configure+0x94>
		trigger_config.p_in_channel = &ch;
   134bc:	f10d 0307 	add.w	r3, sp, #7
   134c0:	9303      	str	r3, [sp, #12]
   134c2:	e7d5      	b.n	13470 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
   134c4:	f10d 0007 	add.w	r0, sp, #7
   134c8:	f001 fb50 	bl	14b6c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   134cc:	4b04      	ldr	r3, [pc, #16]	; (134e0 <gpio_nrfx_pin_interrupt_configure+0xb0>)
   134ce:	4298      	cmp	r0, r3
   134d0:	d0f4      	beq.n	134bc <gpio_nrfx_pin_interrupt_configure+0x8c>
				return -ENOMEM;
   134d2:	f06f 000b 	mvn.w	r0, #11
   134d6:	e7d9      	b.n	1348c <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
   134d8:	f06f 0004 	mvn.w	r0, #4
   134dc:	e7d6      	b.n	1348c <gpio_nrfx_pin_interrupt_configure+0x5c>
   134de:	bf00      	nop
   134e0:	0bad0000 	.word	0x0bad0000
   134e4:	40842500 	.word	0x40842500
   134e8:	0bad0004 	.word	0x0bad0004

000134ec <pin_uninit>:
{
   134ec:	b530      	push	{r4, r5, lr}
   134ee:	b083      	sub	sp, #12
   134f0:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
   134f2:	f10d 0107 	add.w	r1, sp, #7
   134f6:	f001 fae5 	bl	14ac4 <nrfx_gpiote_channel_get>
   134fa:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
   134fc:	4620      	mov	r0, r4
   134fe:	f001 fbbf 	bl	14c80 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   13502:	4b0b      	ldr	r3, [pc, #44]	; (13530 <pin_uninit+0x44>)
   13504:	4298      	cmp	r0, r3
   13506:	d10f      	bne.n	13528 <pin_uninit+0x3c>
	if (free_ch) {
   13508:	429d      	cmp	r5, r3
   1350a:	d005      	beq.n	13518 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   1350c:	4b08      	ldr	r3, [pc, #32]	; (13530 <pin_uninit+0x44>)
   1350e:	4298      	cmp	r0, r3
   13510:	d107      	bne.n	13522 <pin_uninit+0x36>
   13512:	2000      	movs	r0, #0
}
   13514:	b003      	add	sp, #12
   13516:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
   13518:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1351c:	f001 fb1e 	bl	14b5c <nrfx_gpiote_channel_free>
   13520:	e7f4      	b.n	1350c <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   13522:	f06f 0004 	mvn.w	r0, #4
   13526:	e7f5      	b.n	13514 <pin_uninit+0x28>
		return -EIO;
   13528:	f06f 0004 	mvn.w	r0, #4
   1352c:	e7f2      	b.n	13514 <pin_uninit+0x28>
   1352e:	bf00      	nop
   13530:	0bad0000 	.word	0x0bad0000

00013534 <gpio_nrfx_pin_configure>:
{
   13534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13538:	b087      	sub	sp, #28
	return port->config;
   1353a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1353e:	f898 300c 	ldrb.w	r3, [r8, #12]
   13542:	f001 051f 	and.w	r5, r1, #31
   13546:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   1354a:	2a00      	cmp	r2, #0
   1354c:	d043      	beq.n	135d6 <gpio_nrfx_pin_configure+0xa2>
   1354e:	460c      	mov	r4, r1
   13550:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   13552:	2600      	movs	r6, #0
   13554:	9603      	str	r6, [sp, #12]
   13556:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
   13558:	f10d 0117 	add.w	r1, sp, #23
   1355c:	4620      	mov	r0, r4
   1355e:	f001 fab1 	bl	14ac4 <nrfx_gpiote_channel_get>
   13562:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   13564:	4633      	mov	r3, r6
   13566:	aa03      	add	r2, sp, #12
   13568:	4631      	mov	r1, r6
   1356a:	4628      	mov	r0, r5
   1356c:	f001 f93a 	bl	147e4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   13570:	4b2f      	ldr	r3, [pc, #188]	; (13630 <gpio_nrfx_pin_configure+0xfc>)
   13572:	4298      	cmp	r0, r3
   13574:	d159      	bne.n	1362a <gpio_nrfx_pin_configure+0xf6>
	if (free_ch) {
   13576:	4599      	cmp	r9, r3
   13578:	d035      	beq.n	135e6 <gpio_nrfx_pin_configure+0xb2>
	if (flags & GPIO_OUTPUT) {
   1357a:	f417 7f00 	tst.w	r7, #512	; 0x200
   1357e:	d041      	beq.n	13604 <gpio_nrfx_pin_configure+0xd0>
		int rv = get_drive(flags, &drive);
   13580:	f10d 0103 	add.w	r1, sp, #3
   13584:	4638      	mov	r0, r7
   13586:	f7ff ff05 	bl	13394 <get_drive>
		if (rv != 0) {
   1358a:	4606      	mov	r6, r0
   1358c:	bb38      	cbnz	r0, 135de <gpio_nrfx_pin_configure+0xaa>
		nrfx_gpiote_output_config_t output_config = {
   1358e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13592:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   13596:	f417 7f80 	tst.w	r7, #256	; 0x100
   1359a:	bf0c      	ite	eq
   1359c:	2301      	moveq	r3, #1
   1359e:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   135a0:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   135a4:	4638      	mov	r0, r7
   135a6:	f004 fe9b 	bl	182e0 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   135aa:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   135ae:	f417 6f00 	tst.w	r7, #2048	; 0x800
   135b2:	d01d      	beq.n	135f0 <gpio_nrfx_pin_configure+0xbc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   135b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   135b8:	2101      	movs	r1, #1
   135ba:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
   135be:	609c      	str	r4, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   135c0:	2200      	movs	r2, #0
   135c2:	a901      	add	r1, sp, #4
   135c4:	4628      	mov	r0, r5
   135c6:	f001 f9bf 	bl	14948 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   135ca:	4b19      	ldr	r3, [pc, #100]	; (13630 <gpio_nrfx_pin_configure+0xfc>)
   135cc:	4298      	cmp	r0, r3
   135ce:	d006      	beq.n	135de <gpio_nrfx_pin_configure+0xaa>
   135d0:	f06f 0615 	mvn.w	r6, #21
   135d4:	e003      	b.n	135de <gpio_nrfx_pin_configure+0xaa>
		return pin_uninit(abs_pin);
   135d6:	4628      	mov	r0, r5
   135d8:	f7ff ff88 	bl	134ec <pin_uninit>
   135dc:	4606      	mov	r6, r0
}
   135de:	4630      	mov	r0, r6
   135e0:	b007      	add	sp, #28
   135e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
   135e6:	f89d 0017 	ldrb.w	r0, [sp, #23]
   135ea:	f001 fab7 	bl	14b5c <nrfx_gpiote_channel_free>
   135ee:	e7c4      	b.n	1357a <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   135f0:	f417 6f80 	tst.w	r7, #1024	; 0x400
   135f4:	d0e4      	beq.n	135c0 <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   135f6:	f8d8 2004 	ldr.w	r2, [r8, #4]
   135fa:	2301      	movs	r3, #1
   135fc:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
   13600:	60d4      	str	r4, [r2, #12]
}
   13602:	e7dd      	b.n	135c0 <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
   13604:	4638      	mov	r0, r7
   13606:	f004 fe6b 	bl	182e0 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   1360a:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1360e:	2300      	movs	r3, #0
   13610:	461a      	mov	r2, r3
   13612:	a902      	add	r1, sp, #8
   13614:	4628      	mov	r0, r5
   13616:	f001 f8e5 	bl	147e4 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1361a:	4b05      	ldr	r3, [pc, #20]	; (13630 <gpio_nrfx_pin_configure+0xfc>)
   1361c:	4298      	cmp	r0, r3
   1361e:	d101      	bne.n	13624 <gpio_nrfx_pin_configure+0xf0>
   13620:	2600      	movs	r6, #0
   13622:	e7dc      	b.n	135de <gpio_nrfx_pin_configure+0xaa>
   13624:	f06f 0615 	mvn.w	r6, #21
   13628:	e7d9      	b.n	135de <gpio_nrfx_pin_configure+0xaa>
		return -EINVAL;
   1362a:	f06f 0615 	mvn.w	r6, #21
   1362e:	e7d6      	b.n	135de <gpio_nrfx_pin_configure+0xaa>
   13630:	0bad0000 	.word	0x0bad0000

00013634 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   13634:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   13636:	f001 fa87 	bl	14b48 <nrfx_gpiote_is_init>
   1363a:	b108      	cbz	r0, 13640 <gpio_nrfx_init+0xc>
		return 0;
   1363c:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1363e:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   13640:	f001 fa58 	bl	14af4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   13644:	4b08      	ldr	r3, [pc, #32]	; (13668 <gpio_nrfx_init+0x34>)
   13646:	4298      	cmp	r0, r3
   13648:	d10a      	bne.n	13660 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1364a:	2100      	movs	r1, #0
   1364c:	4807      	ldr	r0, [pc, #28]	; (1366c <gpio_nrfx_init+0x38>)
   1364e:	f001 fa33 	bl	14ab8 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   13652:	2200      	movs	r2, #0
   13654:	2105      	movs	r1, #5
   13656:	2031      	movs	r0, #49	; 0x31
   13658:	f7ff f8a2 	bl	127a0 <z_arm_irq_priority_set>
	return 0;
   1365c:	2000      	movs	r0, #0
   1365e:	e7ee      	b.n	1363e <gpio_nrfx_init+0xa>
		return -EIO;
   13660:	f06f 0004 	mvn.w	r0, #4
   13664:	e7eb      	b.n	1363e <gpio_nrfx_init+0xa>
   13666:	bf00      	nop
   13668:	0bad0000 	.word	0x0bad0000
   1366c:	000183c9 	.word	0x000183c9

00013670 <uarte_nrfx_pins_configure>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
   13670:	6843      	ldr	r3, [r0, #4]
#ifndef CONFIG_PINCTRL
static void uarte_nrfx_pins_configure(const struct device *dev, bool sleep)
{
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	if (!sleep) {
   13672:	2900      	cmp	r1, #0
   13674:	d153      	bne.n	1371e <uarte_nrfx_pins_configure+0xae>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   13676:	68da      	ldr	r2, [r3, #12]
   13678:	f1b2 3fff 	cmp.w	r2, #4294967295
   1367c:	d00d      	beq.n	1369a <uarte_nrfx_pins_configure+0x2a>
    *p_pin = pin_number & 0x1F;
   1367e:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   13682:	2101      	movs	r1, #1
   13684:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
   13688:	493b      	ldr	r1, [pc, #236]	; (13778 <uarte_nrfx_pins_configure+0x108>)
   1368a:	608a      	str	r2, [r1, #8]
			nrf_gpio_pin_write(cfg->tx_pin, 1);
			nrf_gpio_cfg_output(cfg->tx_pin);
   1368c:	68da      	ldr	r2, [r3, #12]
    *p_pin = pin_number & 0x1F;
   1368e:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   13692:	3280      	adds	r2, #128	; 0x80
   13694:	2003      	movs	r0, #3
   13696:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		}

		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1369a:	691a      	ldr	r2, [r3, #16]
   1369c:	f1b2 3fff 	cmp.w	r2, #4294967295
   136a0:	d00a      	beq.n	136b8 <uarte_nrfx_pins_configure+0x48>
			nrf_gpio_cfg_input(cfg->rx_pin,
					   (cfg->rx_pull_up ?
   136a2:	7f19      	ldrb	r1, [r3, #28]
			nrf_gpio_cfg_input(cfg->rx_pin,
   136a4:	2900      	cmp	r1, #0
   136a6:	d036      	beq.n	13716 <uarte_nrfx_pins_configure+0xa6>
   136a8:	2103      	movs	r1, #3
    *p_pin = pin_number & 0x1F;
   136aa:	f002 021f 	and.w	r2, r2, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   136ae:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   136b0:	3280      	adds	r2, #128	; 0x80
   136b2:	4831      	ldr	r0, [pc, #196]	; (13778 <uarte_nrfx_pins_configure+0x108>)
   136b4:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
					    NRF_GPIO_PIN_PULLUP :
					    NRF_GPIO_PIN_NOPULL));
		}

		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   136b8:	695a      	ldr	r2, [r3, #20]
   136ba:	f1b2 3fff 	cmp.w	r2, #4294967295
   136be:	d00d      	beq.n	136dc <uarte_nrfx_pins_configure+0x6c>
    *p_pin = pin_number & 0x1F;
   136c0:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   136c4:	2101      	movs	r1, #1
   136c6:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
   136ca:	492b      	ldr	r1, [pc, #172]	; (13778 <uarte_nrfx_pins_configure+0x108>)
   136cc:	608a      	str	r2, [r1, #8]
			nrf_gpio_pin_write(cfg->rts_pin, 1);
			nrf_gpio_cfg_output(cfg->rts_pin);
   136ce:	695a      	ldr	r2, [r3, #20]
    *p_pin = pin_number & 0x1F;
   136d0:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   136d4:	3280      	adds	r2, #128	; 0x80
   136d6:	2003      	movs	r0, #3
   136d8:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		}

		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   136dc:	699a      	ldr	r2, [r3, #24]
   136de:	f1b2 3fff 	cmp.w	r2, #4294967295
   136e2:	d009      	beq.n	136f8 <uarte_nrfx_pins_configure+0x88>
			nrf_gpio_cfg_input(cfg->cts_pin,
					   (cfg->cts_pull_up ?
   136e4:	7f59      	ldrb	r1, [r3, #29]
			nrf_gpio_cfg_input(cfg->cts_pin,
   136e6:	b1c1      	cbz	r1, 1371a <uarte_nrfx_pins_configure+0xaa>
   136e8:	2103      	movs	r1, #3
    *p_pin = pin_number & 0x1F;
   136ea:	f002 021f 	and.w	r2, r2, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   136ee:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   136f0:	3280      	adds	r2, #128	; 0x80
   136f2:	4821      	ldr	r0, [pc, #132]	; (13778 <uarte_nrfx_pins_configure+0x108>)
   136f4:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
			nrf_gpio_cfg_default(cfg->cts_pin);
		}
	}

	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   136f8:	681a      	ldr	r2, [r3, #0]
   136fa:	68d8      	ldr	r0, [r3, #12]
   136fc:	6919      	ldr	r1, [r3, #16]

NRF_STATIC_INLINE void nrf_uarte_txrx_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pseltxd,
                                               uint32_t         pselrxd)
{
    p_reg->PSEL.TXD = pseltxd;
   136fe:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   13702:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   13706:	681a      	ldr	r2, [r3, #0]
   13708:	6959      	ldr	r1, [r3, #20]
   1370a:	699b      	ldr	r3, [r3, #24]

NRF_STATIC_INLINE void nrf_uarte_hwfc_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pselrts,
                                               uint32_t         pselcts)
{
    p_reg->PSEL.RTS = pselrts;
   1370c:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   13710:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   13714:	4770      	bx	lr
			nrf_gpio_cfg_input(cfg->rx_pin,
   13716:	2100      	movs	r1, #0
   13718:	e7c7      	b.n	136aa <uarte_nrfx_pins_configure+0x3a>
			nrf_gpio_cfg_input(cfg->cts_pin,
   1371a:	2100      	movs	r1, #0
   1371c:	e7e5      	b.n	136ea <uarte_nrfx_pins_configure+0x7a>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1371e:	68da      	ldr	r2, [r3, #12]
   13720:	f1b2 3fff 	cmp.w	r2, #4294967295
   13724:	d006      	beq.n	13734 <uarte_nrfx_pins_configure+0xc4>
    *p_pin = pin_number & 0x1F;
   13726:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   1372a:	3280      	adds	r2, #128	; 0x80
   1372c:	4912      	ldr	r1, [pc, #72]	; (13778 <uarte_nrfx_pins_configure+0x108>)
   1372e:	2002      	movs	r0, #2
   13730:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   13734:	691a      	ldr	r2, [r3, #16]
   13736:	f1b2 3fff 	cmp.w	r2, #4294967295
   1373a:	d006      	beq.n	1374a <uarte_nrfx_pins_configure+0xda>
    *p_pin = pin_number & 0x1F;
   1373c:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   13740:	3280      	adds	r2, #128	; 0x80
   13742:	490d      	ldr	r1, [pc, #52]	; (13778 <uarte_nrfx_pins_configure+0x108>)
   13744:	2002      	movs	r0, #2
   13746:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1374a:	695a      	ldr	r2, [r3, #20]
   1374c:	f1b2 3fff 	cmp.w	r2, #4294967295
   13750:	d006      	beq.n	13760 <uarte_nrfx_pins_configure+0xf0>
    *p_pin = pin_number & 0x1F;
   13752:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   13756:	3280      	adds	r2, #128	; 0x80
   13758:	4907      	ldr	r1, [pc, #28]	; (13778 <uarte_nrfx_pins_configure+0x108>)
   1375a:	2002      	movs	r0, #2
   1375c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   13760:	699a      	ldr	r2, [r3, #24]
   13762:	f1b2 3fff 	cmp.w	r2, #4294967295
   13766:	d0c7      	beq.n	136f8 <uarte_nrfx_pins_configure+0x88>
    *p_pin = pin_number & 0x1F;
   13768:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   1376c:	3280      	adds	r2, #128	; 0x80
   1376e:	4902      	ldr	r1, [pc, #8]	; (13778 <uarte_nrfx_pins_configure+0x108>)
   13770:	2002      	movs	r0, #2
   13772:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
}
   13776:	e7bf      	b.n	136f8 <uarte_nrfx_pins_configure+0x88>
   13778:	40842500 	.word	0x40842500

0001377c <baudrate_set>:
	return dev->config;
   1377c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1377e:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   13780:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   13784:	d06f      	beq.n	13866 <baudrate_set+0xea>
   13786:	d83a      	bhi.n	137fe <baudrate_set+0x82>
   13788:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   1378c:	d06e      	beq.n	1386c <baudrate_set+0xf0>
   1378e:	d90a      	bls.n	137a6 <baudrate_set+0x2a>
   13790:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   13794:	d075      	beq.n	13882 <baudrate_set+0x106>
   13796:	d924      	bls.n	137e2 <baudrate_set+0x66>
   13798:	f647 2312 	movw	r3, #31250	; 0x7a12
   1379c:	4299      	cmp	r1, r3
   1379e:	d12b      	bne.n	137f8 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   137a0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   137a4:	e013      	b.n	137ce <baudrate_set+0x52>
	switch (baudrate) {
   137a6:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   137aa:	d061      	beq.n	13870 <baudrate_set+0xf4>
   137ac:	d907      	bls.n	137be <baudrate_set+0x42>
   137ae:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   137b2:	d063      	beq.n	1387c <baudrate_set+0x100>
   137b4:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   137b8:	d110      	bne.n	137dc <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   137ba:	4b3c      	ldr	r3, [pc, #240]	; (138ac <baudrate_set+0x130>)
   137bc:	e007      	b.n	137ce <baudrate_set+0x52>
	switch (baudrate) {
   137be:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   137c2:	d058      	beq.n	13876 <baudrate_set+0xfa>
   137c4:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   137c8:	d105      	bne.n	137d6 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   137ca:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   137ce:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   137d2:	2000      	movs	r0, #0
   137d4:	4770      	bx	lr
	switch (baudrate) {
   137d6:	f06f 0015 	mvn.w	r0, #21
   137da:	4770      	bx	lr
   137dc:	f06f 0015 	mvn.w	r0, #21
   137e0:	4770      	bx	lr
   137e2:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   137e6:	d04e      	beq.n	13886 <baudrate_set+0x10a>
   137e8:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   137ec:	d101      	bne.n	137f2 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   137ee:	4b30      	ldr	r3, [pc, #192]	; (138b0 <baudrate_set+0x134>)
   137f0:	e7ed      	b.n	137ce <baudrate_set+0x52>
	switch (baudrate) {
   137f2:	f06f 0015 	mvn.w	r0, #21
   137f6:	4770      	bx	lr
   137f8:	f06f 0015 	mvn.w	r0, #21
   137fc:	4770      	bx	lr
   137fe:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   13802:	d042      	beq.n	1388a <baudrate_set+0x10e>
   13804:	d909      	bls.n	1381a <baudrate_set+0x9e>
   13806:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   1380a:	d046      	beq.n	1389a <baudrate_set+0x11e>
   1380c:	d91f      	bls.n	1384e <baudrate_set+0xd2>
   1380e:	4b29      	ldr	r3, [pc, #164]	; (138b4 <baudrate_set+0x138>)
   13810:	4299      	cmp	r1, r3
   13812:	d148      	bne.n	138a6 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   13814:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13818:	e7d9      	b.n	137ce <baudrate_set+0x52>
	switch (baudrate) {
   1381a:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   1381e:	d037      	beq.n	13890 <baudrate_set+0x114>
   13820:	d905      	bls.n	1382e <baudrate_set+0xb2>
   13822:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   13826:	d10f      	bne.n	13848 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   13828:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1382c:	e7cf      	b.n	137ce <baudrate_set+0x52>
	switch (baudrate) {
   1382e:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   13832:	4299      	cmp	r1, r3
   13834:	d02e      	beq.n	13894 <baudrate_set+0x118>
   13836:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   1383a:	d102      	bne.n	13842 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1383c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   13840:	e7c5      	b.n	137ce <baudrate_set+0x52>
	switch (baudrate) {
   13842:	f06f 0015 	mvn.w	r0, #21
   13846:	4770      	bx	lr
   13848:	f06f 0015 	mvn.w	r0, #21
   1384c:	4770      	bx	lr
   1384e:	4b1a      	ldr	r3, [pc, #104]	; (138b8 <baudrate_set+0x13c>)
   13850:	4299      	cmp	r1, r3
   13852:	d025      	beq.n	138a0 <baudrate_set+0x124>
   13854:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   13858:	d102      	bne.n	13860 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1385a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1385e:	e7b6      	b.n	137ce <baudrate_set+0x52>
	switch (baudrate) {
   13860:	f06f 0015 	mvn.w	r0, #21
   13864:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   13866:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1386a:	e7b0      	b.n	137ce <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1386c:	4b13      	ldr	r3, [pc, #76]	; (138bc <baudrate_set+0x140>)
   1386e:	e7ae      	b.n	137ce <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   13870:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   13874:	e7ab      	b.n	137ce <baudrate_set+0x52>
	switch (baudrate) {
   13876:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1387a:	e7a8      	b.n	137ce <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1387c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   13880:	e7a5      	b.n	137ce <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   13882:	4b0f      	ldr	r3, [pc, #60]	; (138c0 <baudrate_set+0x144>)
   13884:	e7a3      	b.n	137ce <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   13886:	4b0f      	ldr	r3, [pc, #60]	; (138c4 <baudrate_set+0x148>)
   13888:	e7a1      	b.n	137ce <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1388a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1388e:	e79e      	b.n	137ce <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   13890:	4b0d      	ldr	r3, [pc, #52]	; (138c8 <baudrate_set+0x14c>)
   13892:	e79c      	b.n	137ce <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   13894:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   13898:	e799      	b.n	137ce <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1389a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1389e:	e796      	b.n	137ce <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   138a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   138a4:	e793      	b.n	137ce <baudrate_set+0x52>
	switch (baudrate) {
   138a6:	f06f 0015 	mvn.w	r0, #21
}
   138aa:	4770      	bx	lr
   138ac:	0013b000 	.word	0x0013b000
   138b0:	004ea000 	.word	0x004ea000
   138b4:	000f4240 	.word	0x000f4240
   138b8:	0003d090 	.word	0x0003d090
   138bc:	00275000 	.word	0x00275000
   138c0:	0075c000 	.word	0x0075c000
   138c4:	003af000 	.word	0x003af000
   138c8:	013a9000 	.word	0x013a9000

000138cc <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   138cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   138d0:	4605      	mov	r5, r0
   138d2:	460f      	mov	r7, r1
	return dev->data;
   138d4:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   138d8:	f005 fa7b 	bl	18dd2 <k_is_in_isr>
   138dc:	b920      	cbnz	r0, 138e8 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
   138de:	4b16      	ldr	r3, [pc, #88]	; (13938 <uarte_nrfx_poll_out+0x6c>)
   138e0:	781b      	ldrb	r3, [r3, #0]
   138e2:	b1ab      	cbz	r3, 13910 <uarte_nrfx_poll_out+0x44>
   138e4:	2300      	movs	r3, #0
   138e6:	e000      	b.n	138ea <uarte_nrfx_poll_out+0x1e>
   138e8:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
   138ea:	b19b      	cbz	r3, 13914 <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
   138ec:	f04f 0320 	mov.w	r3, #32
   138f0:	f3ef 8411 	mrs	r4, BASEPRI
   138f4:	f383 8812 	msr	BASEPRI_MAX, r3
   138f8:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
   138fc:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
   138fe:	4628      	mov	r0, r5
   13900:	f004 fe2c 	bl	1855c <is_tx_ready>
   13904:	b950      	cbnz	r0, 1391c <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
   13906:	f384 8811 	msr	BASEPRI, r4
   1390a:	f3bf 8f6f 	isb	sy
}
   1390e:	e7ed      	b.n	138ec <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   13910:	2301      	movs	r3, #1
   13912:	e7ea      	b.n	138ea <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   13914:	4628      	mov	r0, r5
   13916:	f004 fe70 	bl	185fa <wait_tx_ready>
   1391a:	4606      	mov	r6, r0
	}

	data->char_out = c;
   1391c:	4641      	mov	r1, r8
   1391e:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
   13922:	2201      	movs	r2, #1
   13924:	4628      	mov	r0, r5
   13926:	f004 fe33 	bl	18590 <tx_start>
	__asm__ volatile(
   1392a:	f386 8811 	msr	BASEPRI, r6
   1392e:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   13932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13936:	bf00      	nop
   13938:	2000cd2c 	.word	0x2000cd2c

0001393c <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   1393c:	b538      	push	{r3, r4, r5, lr}
   1393e:	4605      	mov	r5, r0
   13940:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   13942:	f101 0012 	add.w	r0, r1, #18
   13946:	f000 fd71 	bl	1442c <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1394a:	4b0a      	ldr	r3, [pc, #40]	; (13974 <endtx_stoptx_ppi_init+0x38>)
   1394c:	4298      	cmp	r0, r3
   1394e:	d10e      	bne.n	1396e <endtx_stoptx_ppi_init+0x32>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   13950:	7ca3      	ldrb	r3, [r4, #18]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   13952:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13956:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1395a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1395e:	7ca2      	ldrb	r2, [r4, #18]
   13960:	2301      	movs	r3, #1
   13962:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   13964:	4a04      	ldr	r2, [pc, #16]	; (13978 <endtx_stoptx_ppi_init+0x3c>)
   13966:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   1396a:	2000      	movs	r0, #0
}
   1396c:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
   1396e:	f06f 0004 	mvn.w	r0, #4
   13972:	e7fb      	b.n	1396c <endtx_stoptx_ppi_init+0x30>
   13974:	0bad0000 	.word	0x0bad0000
   13978:	40017000 	.word	0x40017000

0001397c <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1397c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   13980:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   13984:	4b01      	ldr	r3, [pc, #4]	; (1398c <set_comparator+0x10>)
   13986:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   1398a:	4770      	bx	lr
   1398c:	40015000 	.word	0x40015000

00013990 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   13990:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   13994:	4b01      	ldr	r3, [pc, #4]	; (1399c <get_comparator+0xc>)
   13996:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   1399a:	4770      	bx	lr
   1399c:	40015000 	.word	0x40015000

000139a0 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   139a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   139a4:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   139a6:	4a02      	ldr	r2, [pc, #8]	; (139b0 <event_enable+0x10>)
   139a8:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   139ac:	4770      	bx	lr
   139ae:	bf00      	nop
   139b0:	40015000 	.word	0x40015000

000139b4 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   139b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   139b8:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   139ba:	4a02      	ldr	r2, [pc, #8]	; (139c4 <event_disable+0x10>)
   139bc:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   139c0:	4770      	bx	lr
   139c2:	bf00      	nop
   139c4:	40015000 	.word	0x40015000

000139c8 <counter>:
     return p_reg->COUNTER;
   139c8:	4b01      	ldr	r3, [pc, #4]	; (139d0 <counter+0x8>)
   139ca:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   139ce:	4770      	bx	lr
   139d0:	40015000 	.word	0x40015000

000139d4 <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
   139d4:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   139d6:	2301      	movs	r3, #1
   139d8:	4083      	lsls	r3, r0
   139da:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   139dc:	4a0c      	ldr	r2, [pc, #48]	; (13a10 <compare_int_lock+0x3c>)
   139de:	e8d2 1fef 	ldaex	r1, [r2]
   139e2:	ea01 0c04 	and.w	ip, r1, r4
   139e6:	e8c2 cfee 	stlex	lr, ip, [r2]
   139ea:	f1be 0f00 	cmp.w	lr, #0
   139ee:	d1f6      	bne.n	139de <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   139f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   139f4:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   139f8:	4a06      	ldr	r2, [pc, #24]	; (13a14 <compare_int_lock+0x40>)
   139fa:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
   139fe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13a02:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   13a06:	420b      	tst	r3, r1
}
   13a08:	bf14      	ite	ne
   13a0a:	2001      	movne	r0, #1
   13a0c:	2000      	moveq	r0, #0
   13a0e:	bd10      	pop	{r4, pc}
   13a10:	2000c888 	.word	0x2000c888
   13a14:	40015000 	.word	0x40015000

00013a18 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
   13a18:	b570      	push	{r4, r5, r6, lr}
   13a1a:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
   13a1c:	f004 fea3 	bl	18766 <full_int_lock>
   13a20:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   13a22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   13a26:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   13a28:	4a15      	ldr	r2, [pc, #84]	; (13a80 <channel_processing_check_and_clear+0x68>)
   13a2a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   13a2e:	4213      	tst	r3, r2
   13a30:	d105      	bne.n	13a3e <channel_processing_check_and_clear+0x26>
	bool result = false;
   13a32:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
   13a34:	4628      	mov	r0, r5
   13a36:	f004 fe9f 	bl	18778 <full_int_unlock>

	return result;
}
   13a3a:	4630      	mov	r0, r6
   13a3c:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   13a3e:	2301      	movs	r3, #1
   13a40:	40a3      	lsls	r3, r4
   13a42:	43db      	mvns	r3, r3
   13a44:	4a0f      	ldr	r2, [pc, #60]	; (13a84 <channel_processing_check_and_clear+0x6c>)
   13a46:	e8d2 1fef 	ldaex	r1, [r2]
   13a4a:	ea01 0003 	and.w	r0, r1, r3
   13a4e:	e8c2 0fe6 	stlex	r6, r0, [r2]
   13a52:	2e00      	cmp	r6, #0
   13a54:	d1f7      	bne.n	13a46 <channel_processing_check_and_clear+0x2e>
   13a56:	b959      	cbnz	r1, 13a70 <channel_processing_check_and_clear+0x58>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   13a58:	f104 0350 	add.w	r3, r4, #80	; 0x50
   13a5c:	009b      	lsls	r3, r3, #2
   13a5e:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13a60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13a64:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   13a68:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   13a6a:	b113      	cbz	r3, 13a72 <channel_processing_check_and_clear+0x5a>
   13a6c:	2301      	movs	r3, #1
   13a6e:	e000      	b.n	13a72 <channel_processing_check_and_clear+0x5a>
   13a70:	2301      	movs	r3, #1
		if (result) {
   13a72:	461e      	mov	r6, r3
   13a74:	2b00      	cmp	r3, #0
   13a76:	d0dd      	beq.n	13a34 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
   13a78:	4620      	mov	r0, r4
   13a7a:	f004 fe65 	bl	18748 <event_clear>
   13a7e:	e7d9      	b.n	13a34 <channel_processing_check_and_clear+0x1c>
   13a80:	40015000 	.word	0x40015000
   13a84:	2000c884 	.word	0x2000c884

00013a88 <compare_int_unlock>:
	if (key) {
   13a88:	b901      	cbnz	r1, 13a8c <compare_int_unlock+0x4>
}
   13a8a:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   13a8c:	2301      	movs	r3, #1
   13a8e:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13a90:	4a0e      	ldr	r2, [pc, #56]	; (13acc <compare_int_unlock+0x44>)
   13a92:	e8d2 1fef 	ldaex	r1, [r2]
   13a96:	4319      	orrs	r1, r3
   13a98:	e8c2 1fec 	stlex	ip, r1, [r2]
   13a9c:	f1bc 0f00 	cmp.w	ip, #0
   13aa0:	d1f7      	bne.n	13a92 <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   13aa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   13aa6:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   13aa8:	4a09      	ldr	r2, [pc, #36]	; (13ad0 <compare_int_unlock+0x48>)
   13aaa:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13aae:	4b09      	ldr	r3, [pc, #36]	; (13ad4 <compare_int_unlock+0x4c>)
   13ab0:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   13ab4:	fa23 f000 	lsr.w	r0, r3, r0
   13ab8:	f010 0f01 	tst.w	r0, #1
   13abc:	d0e5      	beq.n	13a8a <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13abe:	4b06      	ldr	r3, [pc, #24]	; (13ad8 <compare_int_unlock+0x50>)
   13ac0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   13ac4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   13ac8:	e7df      	b.n	13a8a <compare_int_unlock+0x2>
   13aca:	bf00      	nop
   13acc:	2000c888 	.word	0x2000c888
   13ad0:	40015000 	.word	0x40015000
   13ad4:	2000c884 	.word	0x2000c884
   13ad8:	e000e100 	.word	0xe000e100

00013adc <sys_clock_timeout_handler>:
{
   13adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13ade:	4607      	mov	r7, r0
   13ae0:	4614      	mov	r4, r2
   13ae2:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   13ae4:	4610      	mov	r0, r2
   13ae6:	4619      	mov	r1, r3
   13ae8:	f004 fe3a 	bl	18760 <absolute_time_to_cc>
   13aec:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   13aee:	4b15      	ldr	r3, [pc, #84]	; (13b44 <sys_clock_timeout_handler+0x68>)
   13af0:	681a      	ldr	r2, [r3, #0]
   13af2:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
   13af4:	601c      	str	r4, [r3, #0]
   13af6:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   13af8:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   13afc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   13b00:	d308      	bcc.n	13b14 <sys_clock_timeout_handler+0x38>
	return false;
   13b02:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   13b04:	f003 fc90 	bl	17428 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
   13b08:	4638      	mov	r0, r7
   13b0a:	f7ff ff41 	bl	13990 <get_comparator>
   13b0e:	42a8      	cmp	r0, r5
   13b10:	d00c      	beq.n	13b2c <sys_clock_timeout_handler+0x50>
}
   13b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   13b14:	4b0c      	ldr	r3, [pc, #48]	; (13b48 <sys_clock_timeout_handler+0x6c>)
   13b16:	6819      	ldr	r1, [r3, #0]
   13b18:	0a0b      	lsrs	r3, r1, #8
   13b1a:	060a      	lsls	r2, r1, #24
   13b1c:	1952      	adds	r2, r2, r5
   13b1e:	f143 0300 	adc.w	r3, r3, #0
   13b22:	490a      	ldr	r1, [pc, #40]	; (13b4c <sys_clock_timeout_handler+0x70>)
   13b24:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   13b28:	2401      	movs	r4, #1
   13b2a:	e7eb      	b.n	13b04 <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
   13b2c:	b11c      	cbz	r4, 13b36 <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
   13b2e:	4638      	mov	r0, r7
   13b30:	f7ff ff36 	bl	139a0 <event_enable>
}
   13b34:	e7ed      	b.n	13b12 <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
   13b36:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   13b3a:	4638      	mov	r0, r7
   13b3c:	f7ff ff1e 	bl	1397c <set_comparator>
   13b40:	e7f5      	b.n	13b2e <sys_clock_timeout_handler+0x52>
   13b42:	bf00      	nop
   13b44:	2000c5c8 	.word	0x2000c5c8
   13b48:	2000c88c 	.word	0x2000c88c
   13b4c:	2000c5b0 	.word	0x2000c5b0

00013b50 <z_nrf_rtc_timer_read>:
{
   13b50:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   13b52:	4b0d      	ldr	r3, [pc, #52]	; (13b88 <z_nrf_rtc_timer_read+0x38>)
   13b54:	681b      	ldr	r3, [r3, #0]
   13b56:	0a1d      	lsrs	r5, r3, #8
   13b58:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   13b5a:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   13b5e:	f7ff ff33 	bl	139c8 <counter>
   13b62:	4603      	mov	r3, r0
	val += cntr;
   13b64:	1820      	adds	r0, r4, r0
   13b66:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   13b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   13b6e:	d20a      	bcs.n	13b86 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   13b70:	4b06      	ldr	r3, [pc, #24]	; (13b8c <z_nrf_rtc_timer_read+0x3c>)
   13b72:	e9d3 2300 	ldrd	r2, r3, [r3]
   13b76:	4299      	cmp	r1, r3
   13b78:	bf08      	it	eq
   13b7a:	4290      	cmpeq	r0, r2
   13b7c:	d203      	bcs.n	13b86 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   13b7e:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   13b82:	f141 0100 	adc.w	r1, r1, #0
}
   13b86:	bd38      	pop	{r3, r4, r5, pc}
   13b88:	2000c88c 	.word	0x2000c88c
   13b8c:	2000c5b0 	.word	0x2000c5b0

00013b90 <compare_set_nolocks>:
{
   13b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13b94:	4606      	mov	r6, r0
   13b96:	4614      	mov	r4, r2
   13b98:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   13b9a:	4610      	mov	r0, r2
   13b9c:	4619      	mov	r1, r3
   13b9e:	f004 fddf 	bl	18760 <absolute_time_to_cc>
   13ba2:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   13ba4:	f7ff ffd4 	bl	13b50 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   13ba8:	42a9      	cmp	r1, r5
   13baa:	bf08      	it	eq
   13bac:	42a0      	cmpeq	r0, r4
   13bae:	d21e      	bcs.n	13bee <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
   13bb0:	ebb4 0800 	subs.w	r8, r4, r0
   13bb4:	eb65 0901 	sbc.w	r9, r5, r1
   13bb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   13bbc:	2300      	movs	r3, #0
   13bbe:	454b      	cmp	r3, r9
   13bc0:	bf08      	it	eq
   13bc2:	4542      	cmpeq	r2, r8
   13bc4:	d32a      	bcc.n	13c1c <compare_set_nolocks+0x8c>
		if (target_time != cc_data[chan].target_time) {
   13bc6:	4b17      	ldr	r3, [pc, #92]	; (13c24 <compare_set_nolocks+0x94>)
   13bc8:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   13bcc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   13bd0:	42ab      	cmp	r3, r5
   13bd2:	bf08      	it	eq
   13bd4:	42a2      	cmpeq	r2, r4
   13bd6:	d014      	beq.n	13c02 <compare_set_nolocks+0x72>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
   13bd8:	4639      	mov	r1, r7
   13bda:	4630      	mov	r0, r6
   13bdc:	f004 fdd1 	bl	18782 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
   13be0:	4639      	mov	r1, r7
   13be2:	f004 fdad 	bl	18740 <counter_sub>
   13be6:	1824      	adds	r4, r4, r0
   13be8:	f145 0500 	adc.w	r5, r5, #0
   13bec:	e009      	b.n	13c02 <compare_set_nolocks+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
   13bee:	2301      	movs	r3, #1
   13bf0:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13bf2:	4a0d      	ldr	r2, [pc, #52]	; (13c28 <compare_set_nolocks+0x98>)
   13bf4:	e8d2 1fef 	ldaex	r1, [r2]
   13bf8:	4319      	orrs	r1, r3
   13bfa:	e8c2 1fe0 	stlex	r0, r1, [r2]
   13bfe:	2800      	cmp	r0, #0
   13c00:	d1f8      	bne.n	13bf4 <compare_set_nolocks+0x64>
	cc_data[chan].target_time = target_time;
   13c02:	4b08      	ldr	r3, [pc, #32]	; (13c24 <compare_set_nolocks+0x94>)
   13c04:	0132      	lsls	r2, r6, #4
   13c06:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   13c0a:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   13c0e:	9908      	ldr	r1, [sp, #32]
   13c10:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   13c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13c14:	6073      	str	r3, [r6, #4]
	return ret;
   13c16:	2000      	movs	r0, #0
}
   13c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   13c1c:	f06f 0015 	mvn.w	r0, #21
   13c20:	e7fa      	b.n	13c18 <compare_set_nolocks+0x88>
   13c22:	bf00      	nop
   13c24:	2000c5b8 	.word	0x2000c5b8
   13c28:	2000c884 	.word	0x2000c884

00013c2c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   13c2c:	b530      	push	{r4, r5, lr}
   13c2e:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   13c30:	2300      	movs	r3, #0
   13c32:	4a1e      	ldr	r2, [pc, #120]	; (13cac <sys_clock_driver_init+0x80>)
   13c34:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   13c38:	2b00      	cmp	r3, #0
   13c3a:	dd25      	ble.n	13c88 <sys_clock_driver_init+0x5c>
    p_reg->INTENSET = mask;
   13c3c:	4c1b      	ldr	r4, [pc, #108]	; (13cac <sys_clock_driver_init+0x80>)
   13c3e:	2502      	movs	r5, #2
   13c40:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13c44:	4b1a      	ldr	r3, [pc, #104]	; (13cb0 <sys_clock_driver_init+0x84>)
   13c46:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   13c4a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   13c4e:	2200      	movs	r2, #0
   13c50:	2101      	movs	r1, #1
   13c52:	2015      	movs	r0, #21
   13c54:	f7fe fda4 	bl	127a0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   13c58:	2015      	movs	r0, #21
   13c5a:	f7fe fd83 	bl	12764 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   13c5e:	2301      	movs	r3, #1
   13c60:	4a14      	ldr	r2, [pc, #80]	; (13cb4 <sys_clock_driver_init+0x88>)
   13c62:	6013      	str	r3, [r2, #0]
   13c64:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   13c66:	4a14      	ldr	r2, [pc, #80]	; (13cb8 <sys_clock_driver_init+0x8c>)
   13c68:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   13c6a:	2400      	movs	r4, #0
   13c6c:	9401      	str	r4, [sp, #4]
   13c6e:	4b13      	ldr	r3, [pc, #76]	; (13cbc <sys_clock_driver_init+0x90>)
   13c70:	9300      	str	r3, [sp, #0]
   13c72:	4a13      	ldr	r2, [pc, #76]	; (13cc0 <sys_clock_driver_init+0x94>)
   13c74:	2300      	movs	r3, #0
   13c76:	4620      	mov	r0, r4
   13c78:	f004 fdbe 	bl	187f8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   13c7c:	4628      	mov	r0, r5
   13c7e:	f7ff fb2f 	bl	132e0 <z_nrf_clock_control_lf_on>

	return 0;
}
   13c82:	4620      	mov	r0, r4
   13c84:	b003      	add	sp, #12
   13c86:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   13c88:	4a0e      	ldr	r2, [pc, #56]	; (13cc4 <sys_clock_driver_init+0x98>)
   13c8a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   13c8e:	f04f 30ff 	mov.w	r0, #4294967295
   13c92:	f04f 31ff 	mov.w	r1, #4294967295
   13c96:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   13c9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   13c9e:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   13ca0:	4902      	ldr	r1, [pc, #8]	; (13cac <sys_clock_driver_init+0x80>)
   13ca2:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   13ca6:	3301      	adds	r3, #1
   13ca8:	e7c6      	b.n	13c38 <sys_clock_driver_init+0xc>
   13caa:	bf00      	nop
   13cac:	40015000 	.word	0x40015000
   13cb0:	e000e100 	.word	0xe000e100
   13cb4:	40015008 	.word	0x40015008
   13cb8:	2000c888 	.word	0x2000c888
   13cbc:	00013add 	.word	0x00013add
   13cc0:	007fffff 	.word	0x007fffff
   13cc4:	2000c5b8 	.word	0x2000c5b8

00013cc8 <process_channel>:
{
   13cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13ccc:	b082      	sub	sp, #8
   13cce:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   13cd0:	f7ff fea2 	bl	13a18 <channel_processing_check_and_clear>
   13cd4:	b910      	cbnz	r0, 13cdc <process_channel+0x14>
}
   13cd6:	b002      	add	sp, #8
   13cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   13cdc:	f7ff ff38 	bl	13b50 <z_nrf_rtc_timer_read>
   13ce0:	4606      	mov	r6, r0
   13ce2:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
   13ce4:	f004 fd3f 	bl	18766 <full_int_lock>
   13ce8:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
   13cea:	4b13      	ldr	r3, [pc, #76]	; (13d38 <process_channel+0x70>)
   13cec:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   13cf0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   13cf4:	454f      	cmp	r7, r9
   13cf6:	bf08      	it	eq
   13cf8:	4546      	cmpeq	r6, r8
   13cfa:	d20b      	bcs.n	13d14 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   13cfc:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
   13cfe:	4650      	mov	r0, sl
   13d00:	f004 fd3a 	bl	18778 <full_int_unlock>
		if (handler) {
   13d04:	2e00      	cmp	r6, #0
   13d06:	d0e6      	beq.n	13cd6 <process_channel+0xe>
			handler(chan, expire_time, user_context);
   13d08:	9500      	str	r5, [sp, #0]
   13d0a:	4642      	mov	r2, r8
   13d0c:	464b      	mov	r3, r9
   13d0e:	4620      	mov	r0, r4
   13d10:	47b0      	blx	r6
}
   13d12:	e7e0      	b.n	13cd6 <process_channel+0xe>
			handler = cc_data[chan].callback;
   13d14:	4a08      	ldr	r2, [pc, #32]	; (13d38 <process_channel+0x70>)
   13d16:	0123      	lsls	r3, r4, #4
   13d18:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   13d1c:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
   13d1e:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
   13d20:	2000      	movs	r0, #0
   13d22:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   13d24:	f04f 32ff 	mov.w	r2, #4294967295
   13d28:	f04f 33ff 	mov.w	r3, #4294967295
   13d2c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   13d30:	4620      	mov	r0, r4
   13d32:	f7ff fe3f 	bl	139b4 <event_disable>
   13d36:	e7e2      	b.n	13cfe <process_channel+0x36>
   13d38:	2000c5b8 	.word	0x2000c5b8

00013d3c <rtc_nrf_isr>:
{
   13d3c:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   13d3e:	4b0d      	ldr	r3, [pc, #52]	; (13d74 <rtc_nrf_isr+0x38>)
   13d40:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   13d44:	f013 0f02 	tst.w	r3, #2
   13d48:	d00a      	beq.n	13d60 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13d4a:	4b0b      	ldr	r3, [pc, #44]	; (13d78 <rtc_nrf_isr+0x3c>)
   13d4c:	681b      	ldr	r3, [r3, #0]
   13d4e:	b13b      	cbz	r3, 13d60 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13d50:	4b09      	ldr	r3, [pc, #36]	; (13d78 <rtc_nrf_isr+0x3c>)
   13d52:	2200      	movs	r2, #0
   13d54:	601a      	str	r2, [r3, #0]
   13d56:	681b      	ldr	r3, [r3, #0]
		overflow_cnt++;
   13d58:	4a08      	ldr	r2, [pc, #32]	; (13d7c <rtc_nrf_isr+0x40>)
   13d5a:	6813      	ldr	r3, [r2, #0]
   13d5c:	3301      	adds	r3, #1
   13d5e:	6013      	str	r3, [r2, #0]
{
   13d60:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   13d62:	2c00      	cmp	r4, #0
   13d64:	dd00      	ble.n	13d68 <rtc_nrf_isr+0x2c>
}
   13d66:	bd10      	pop	{r4, pc}
		process_channel(chan);
   13d68:	4620      	mov	r0, r4
   13d6a:	f7ff ffad 	bl	13cc8 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   13d6e:	3401      	adds	r4, #1
   13d70:	e7f7      	b.n	13d62 <rtc_nrf_isr+0x26>
   13d72:	bf00      	nop
   13d74:	40015000 	.word	0x40015000
   13d78:	40015104 	.word	0x40015104
   13d7c:	2000c88c 	.word	0x2000c88c

00013d80 <sys_clock_set_timeout>:
{
   13d80:	b510      	push	{r4, lr}
   13d82:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   13d84:	f1b0 3fff 	cmp.w	r0, #4294967295
   13d88:	d007      	beq.n	13d9a <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   13d8a:	1e44      	subs	r4, r0, #1
   13d8c:	2c00      	cmp	r4, #0
   13d8e:	dd07      	ble.n	13da0 <sys_clock_set_timeout+0x20>
   13d90:	4b11      	ldr	r3, [pc, #68]	; (13dd8 <sys_clock_set_timeout+0x58>)
   13d92:	429c      	cmp	r4, r3
   13d94:	dd05      	ble.n	13da2 <sys_clock_set_timeout+0x22>
   13d96:	4c11      	ldr	r4, [pc, #68]	; (13ddc <sys_clock_set_timeout+0x5c>)
   13d98:	e003      	b.n	13da2 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   13d9a:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
   13d9e:	e7f4      	b.n	13d8a <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   13da0:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   13da2:	f7ff fed5 	bl	13b50 <z_nrf_rtc_timer_read>
   13da6:	4b0e      	ldr	r3, [pc, #56]	; (13de0 <sys_clock_set_timeout+0x60>)
   13da8:	e9d3 2300 	ldrd	r2, r3, [r3]
   13dac:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   13dae:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13db2:	d300      	bcc.n	13db6 <sys_clock_set_timeout+0x36>
		ticks = 0;
   13db4:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   13db6:	4404      	add	r4, r0
   13db8:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
   13dba:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   13dbe:	d300      	bcc.n	13dc2 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   13dc0:	4c06      	ldr	r4, [pc, #24]	; (13ddc <sys_clock_set_timeout+0x5c>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   13dc2:	2000      	movs	r0, #0
   13dc4:	9001      	str	r0, [sp, #4]
   13dc6:	4907      	ldr	r1, [pc, #28]	; (13de4 <sys_clock_set_timeout+0x64>)
   13dc8:	9100      	str	r1, [sp, #0]
   13dca:	1912      	adds	r2, r2, r4
   13dcc:	f143 0300 	adc.w	r3, r3, #0
   13dd0:	f004 fd12 	bl	187f8 <compare_set>
}
   13dd4:	b002      	add	sp, #8
   13dd6:	bd10      	pop	{r4, pc}
   13dd8:	007ffffe 	.word	0x007ffffe
   13ddc:	007fffff 	.word	0x007fffff
   13de0:	2000c5c8 	.word	0x2000c5c8
   13de4:	00013add 	.word	0x00013add

00013de8 <sys_clock_elapsed>:
{
   13de8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   13dea:	f7ff feb1 	bl	13b50 <z_nrf_rtc_timer_read>
   13dee:	4b02      	ldr	r3, [pc, #8]	; (13df8 <sys_clock_elapsed+0x10>)
   13df0:	681b      	ldr	r3, [r3, #0]
}
   13df2:	1ac0      	subs	r0, r0, r3
   13df4:	bd08      	pop	{r3, pc}
   13df6:	bf00      	nop
   13df8:	2000c5c8 	.word	0x2000c5c8

00013dfc <_nrf_modem_lib_init>:
	},
#endif
};

static int _nrf_modem_lib_init(const struct device *unused)
{
   13dfc:	b510      	push	{r4, lr}
	if (!first_time_init) {
   13dfe:	4b1d      	ldr	r3, [pc, #116]	; (13e74 <_nrf_modem_lib_init+0x78>)
   13e00:	781b      	ldrb	r3, [r3, #0]
   13e02:	b1c3      	cbz	r3, 13e36 <_nrf_modem_lib_init+0x3a>
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_NETWORK_IRQ, NRF_MODEM_NETWORK_IRQ_PRIORITY,
   13e04:	2200      	movs	r2, #0
   13e06:	4611      	mov	r1, r2
   13e08:	202a      	movs	r0, #42	; 0x2a
   13e0a:	f7fe fcc9 	bl	127a0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params, NORMAL_MODE);
   13e0e:	2100      	movs	r1, #0
   13e10:	4819      	ldr	r0, [pc, #100]	; (13e78 <_nrf_modem_lib_init+0x7c>)
   13e12:	f002 fa5f 	bl	162d4 <nrf_modem_init>
   13e16:	4b19      	ldr	r3, [pc, #100]	; (13e7c <_nrf_modem_lib_init+0x80>)
   13e18:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   13e1a:	f04f 32ff 	mov.w	r2, #4294967295
   13e1e:	f04f 33ff 	mov.w	r3, #4294967295
   13e22:	4817      	ldr	r0, [pc, #92]	; (13e80 <_nrf_modem_lib_init+0x84>)
   13e24:	f002 fcee 	bl	16804 <z_impl_k_mutex_lock>
	return list->head;
   13e28:	4b16      	ldr	r3, [pc, #88]	; (13e84 <_nrf_modem_lib_init+0x88>)
   13e2a:	6818      	ldr	r0, [r3, #0]

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   13e2c:	b1e0      	cbz	r0, 13e68 <_nrf_modem_lib_init+0x6c>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   13e2e:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   13e30:	b178      	cbz	r0, 13e52 <_nrf_modem_lib_init+0x56>
	return node->next;
   13e32:	6804      	ldr	r4, [r0, #0]
   13e34:	e00d      	b.n	13e52 <_nrf_modem_lib_init+0x56>
	list->head = NULL;
   13e36:	4b13      	ldr	r3, [pc, #76]	; (13e84 <_nrf_modem_lib_init+0x88>)
   13e38:	2200      	movs	r2, #0
   13e3a:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   13e3c:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_init(mutex);
   13e3e:	4810      	ldr	r0, [pc, #64]	; (13e80 <_nrf_modem_lib_init+0x84>)
   13e40:	f004 fff8 	bl	18e34 <z_impl_k_mutex_init>
		first_time_init = true;
   13e44:	4b0b      	ldr	r3, [pc, #44]	; (13e74 <_nrf_modem_lib_init+0x78>)
   13e46:	2201      	movs	r2, #1
   13e48:	701a      	strb	r2, [r3, #0]
   13e4a:	e7db      	b.n	13e04 <_nrf_modem_lib_init+0x8>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   13e4c:	4623      	mov	r3, r4
   13e4e:	4620      	mov	r0, r4
   13e50:	461c      	mov	r4, r3
   13e52:	b148      	cbz	r0, 13e68 <_nrf_modem_lib_init+0x6c>
					     next_thread, node) {
			k_sem_give(&thread->sem);
   13e54:	3004      	adds	r0, #4
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   13e56:	f002 fda3 	bl	169a0 <z_impl_k_sem_give>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   13e5a:	2c00      	cmp	r4, #0
   13e5c:	d0f6      	beq.n	13e4c <_nrf_modem_lib_init+0x50>
   13e5e:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   13e60:	2c00      	cmp	r4, #0
   13e62:	d0f4      	beq.n	13e4e <_nrf_modem_lib_init+0x52>
	return node->next;
   13e64:	6823      	ldr	r3, [r4, #0]
   13e66:	e7f2      	b.n	13e4e <_nrf_modem_lib_init+0x52>
	return z_impl_k_mutex_unlock(mutex);
   13e68:	4805      	ldr	r0, [pc, #20]	; (13e80 <_nrf_modem_lib_init+0x84>)
   13e6a:	f002 fd55 	bl	16918 <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   13e6e:	2000      	movs	r0, #0
   13e70:	bd10      	pop	{r4, pc}
   13e72:	bf00      	nop
   13e74:	2000cbfb 	.word	0x2000cbfb
   13e78:	00019708 	.word	0x00019708
   13e7c:	2000c890 	.word	0x2000c890
   13e80:	2000c89c 	.word	0x2000c89c
   13e84:	2000c894 	.word	0x2000c894

00013e88 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   13e88:	b430      	push	{r4, r5}
   13e8a:	4604      	mov	r4, r0
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
	int entry_age, oldest_entry_age = 0;
   13e8c:	2500      	movs	r5, #0
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   13e8e:	4811      	ldr	r0, [pc, #68]	; (13ed4 <thread_monitor_entry_get+0x4c>)
	struct thread_monitor_entry *entry = thread_event_monitor;
   13e90:	4603      	mov	r3, r0

	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   13e92:	e000      	b.n	13e96 <thread_monitor_entry_get+0xe>
   13e94:	3308      	adds	r3, #8
   13e96:	b19b      	cbz	r3, 13ec0 <thread_monitor_entry_get+0x38>
   13e98:	4a0e      	ldr	r2, [pc, #56]	; (13ed4 <thread_monitor_entry_get+0x4c>)
   13e9a:	4293      	cmp	r3, r2
   13e9c:	d310      	bcc.n	13ec0 <thread_monitor_entry_get+0x38>
   13e9e:	3250      	adds	r2, #80	; 0x50
   13ea0:	4293      	cmp	r3, r2
   13ea2:	d20d      	bcs.n	13ec0 <thread_monitor_entry_get+0x38>
		if (entry->id == id) {
   13ea4:	681a      	ldr	r2, [r3, #0]
   13ea6:	42a2      	cmp	r2, r4
   13ea8:	d011      	beq.n	13ece <thread_monitor_entry_get+0x46>
			return entry;
		} else if (entry->id == 0) {
   13eaa:	b142      	cbz	r2, 13ebe <thread_monitor_entry_get+0x36>
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   13eac:	4a0a      	ldr	r2, [pc, #40]	; (13ed8 <thread_monitor_entry_get+0x50>)
   13eae:	6812      	ldr	r2, [r2, #0]
   13eb0:	6859      	ldr	r1, [r3, #4]
   13eb2:	1a52      	subs	r2, r2, r1
		if (entry_age > oldest_entry_age) {
   13eb4:	4295      	cmp	r5, r2
   13eb6:	daed      	bge.n	13e94 <thread_monitor_entry_get+0xc>
			oldest_entry_age = entry_age;
   13eb8:	4615      	mov	r5, r2
			new_entry = entry;
   13eba:	4618      	mov	r0, r3
   13ebc:	e7ea      	b.n	13e94 <thread_monitor_entry_get+0xc>
			new_entry = entry;
   13ebe:	4618      	mov	r0, r3
		}
	}

	new_entry->id = id;
   13ec0:	6004      	str	r4, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   13ec2:	4b05      	ldr	r3, [pc, #20]	; (13ed8 <thread_monitor_entry_get+0x50>)
   13ec4:	681b      	ldr	r3, [r3, #0]
   13ec6:	3b01      	subs	r3, #1
   13ec8:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   13eca:	bc30      	pop	{r4, r5}
   13ecc:	4770      	bx	lr
			return entry;
   13ece:	4618      	mov	r0, r3
   13ed0:	e7fb      	b.n	13eca <thread_monitor_entry_get+0x42>
   13ed2:	bf00      	nop
   13ed4:	2000c908 	.word	0x2000c908
   13ed8:	2000c8e4 	.word	0x2000c8e4

00013edc <thread_monitor_entry_update>:

/* Update thread monitor entry RPC counter. */
static void thread_monitor_entry_update(struct thread_monitor_entry *entry)
{
	entry->cnt = rpc_event_cnt;
   13edc:	4b01      	ldr	r3, [pc, #4]	; (13ee4 <thread_monitor_entry_update+0x8>)
   13ede:	681b      	ldr	r3, [r3, #0]
   13ee0:	6043      	str	r3, [r0, #4]
}
   13ee2:	4770      	bx	lr
   13ee4:	2000c8e4 	.word	0x2000c8e4

00013ee8 <can_thread_sleep>:
/* Verify that thread can be put into sleep (no RPC event occured in a
 * meantime), or whether we should return to nrf_modem_lib to re-verify if a sleep is
 * needed.
 */
static bool can_thread_sleep(struct thread_monitor_entry *entry)
{
   13ee8:	b508      	push	{r3, lr}
	bool allow_to_sleep = true;

	if (rpc_event_cnt != entry->cnt) {
   13eea:	6842      	ldr	r2, [r0, #4]
   13eec:	4b04      	ldr	r3, [pc, #16]	; (13f00 <can_thread_sleep+0x18>)
   13eee:	681b      	ldr	r3, [r3, #0]
   13ef0:	429a      	cmp	r2, r3
   13ef2:	d101      	bne.n	13ef8 <can_thread_sleep+0x10>
	bool allow_to_sleep = true;
   13ef4:	2001      	movs	r0, #1
		thread_monitor_entry_update(entry);
		allow_to_sleep = false;
	}

	return allow_to_sleep;
}
   13ef6:	bd08      	pop	{r3, pc}
		thread_monitor_entry_update(entry);
   13ef8:	f7ff fff0 	bl	13edc <thread_monitor_entry_update>
		allow_to_sleep = false;
   13efc:	2000      	movs	r0, #0
   13efe:	e7fa      	b.n	13ef6 <can_thread_sleep+0xe>
   13f00:	2000c8e4 	.word	0x2000c8e4

00013f04 <sleeping_thread_add>:

/* Add thread to the sleeping threads list. Will return information whether
 * the thread was allowed to sleep or not.
 */
static bool sleeping_thread_add(struct sleeping_thread *thread)
{
   13f04:	b538      	push	{r3, r4, r5, lr}
   13f06:	4604      	mov	r4, r0
	__asm__ volatile(
   13f08:	f04f 0320 	mov.w	r3, #32
   13f0c:	f3ef 8511 	mrs	r5, BASEPRI
   13f10:	f383 8812 	msr	BASEPRI_MAX, r3
   13f14:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   13f18:	f003 f94c 	bl	171b4 <z_impl_z_current_get>
	bool allow_to_sleep = false;
	struct thread_monitor_entry *entry;

	uint32_t key = irq_lock();

	entry = thread_monitor_entry_get(k_current_get());
   13f1c:	f7ff ffb4 	bl	13e88 <thread_monitor_entry_get>

	if (can_thread_sleep(entry)) {
   13f20:	f7ff ffe2 	bl	13ee8 <can_thread_sleep>
   13f24:	b138      	cbz	r0, 13f36 <sleeping_thread_add+0x32>
	parent->next = child;
   13f26:	2300      	movs	r3, #0
   13f28:	6023      	str	r3, [r4, #0]
	return list->tail;
   13f2a:	4b07      	ldr	r3, [pc, #28]	; (13f48 <sleeping_thread_add+0x44>)
   13f2c:	685b      	ldr	r3, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   13f2e:	b13b      	cbz	r3, 13f40 <sleeping_thread_add+0x3c>
	parent->next = child;
   13f30:	601c      	str	r4, [r3, #0]
	list->tail = node;
   13f32:	4b05      	ldr	r3, [pc, #20]	; (13f48 <sleeping_thread_add+0x44>)
   13f34:	605c      	str	r4, [r3, #4]
	__asm__ volatile(
   13f36:	f385 8811 	msr	BASEPRI, r5
   13f3a:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return allow_to_sleep;
}
   13f3e:	bd38      	pop	{r3, r4, r5, pc}
   13f40:	4b01      	ldr	r3, [pc, #4]	; (13f48 <sleeping_thread_add+0x44>)
   13f42:	605c      	str	r4, [r3, #4]
	list->head = node;
   13f44:	601c      	str	r4, [r3, #0]
}
   13f46:	e7f6      	b.n	13f36 <sleeping_thread_add+0x32>
   13f48:	2000c900 	.word	0x2000c900

00013f4c <sleeping_thread_remove>:

/* Remove a thread form the sleeping threads list. */
static void sleeping_thread_remove(struct sleeping_thread *thread)
{
   13f4c:	b510      	push	{r4, lr}
	__asm__ volatile(
   13f4e:	f04f 0320 	mov.w	r3, #32
   13f52:	f3ef 8411 	mrs	r4, BASEPRI
   13f56:	f383 8812 	msr	BASEPRI_MAX, r3
   13f5a:	f3bf 8f6f 	isb	sy
	struct thread_monitor_entry *entry;

	uint32_t key = irq_lock();

	sys_slist_find_and_remove(&sleeping_threads, &thread->node);
   13f5e:	4601      	mov	r1, r0
	return list->head;
   13f60:	4b14      	ldr	r3, [pc, #80]	; (13fb4 <sleeping_thread_remove+0x68>)
   13f62:	681b      	ldr	r3, [r3, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   13f64:	2200      	movs	r2, #0
   13f66:	b16b      	cbz	r3, 13f84 <sleeping_thread_remove+0x38>
   13f68:	4299      	cmp	r1, r3
   13f6a:	d002      	beq.n	13f72 <sleeping_thread_remove+0x26>
   13f6c:	461a      	mov	r2, r3
   13f6e:	681b      	ldr	r3, [r3, #0]
   13f70:	e7f9      	b.n	13f66 <sleeping_thread_remove+0x1a>
Z_GENLIST_REMOVE(slist, snode)
   13f72:	b192      	cbz	r2, 13f9a <sleeping_thread_remove+0x4e>
	return node->next;
   13f74:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
   13f76:	6013      	str	r3, [r2, #0]
	return list->tail;
   13f78:	4b0e      	ldr	r3, [pc, #56]	; (13fb4 <sleeping_thread_remove+0x68>)
   13f7a:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   13f7c:	4298      	cmp	r0, r3
   13f7e:	d015      	beq.n	13fac <sleeping_thread_remove+0x60>
	parent->next = child;
   13f80:	2300      	movs	r3, #0
   13f82:	6003      	str	r3, [r0, #0]
   13f84:	f003 f916 	bl	171b4 <z_impl_z_current_get>

	entry = thread_monitor_entry_get(k_current_get());
   13f88:	f7ff ff7e 	bl	13e88 <thread_monitor_entry_get>
	thread_monitor_entry_update(entry);
   13f8c:	f7ff ffa6 	bl	13edc <thread_monitor_entry_update>
	__asm__ volatile(
   13f90:	f384 8811 	msr	BASEPRI, r4
   13f94:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   13f98:	bd10      	pop	{r4, pc}
	return node->next;
   13f9a:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   13f9c:	4b05      	ldr	r3, [pc, #20]	; (13fb4 <sleeping_thread_remove+0x68>)
   13f9e:	601a      	str	r2, [r3, #0]
	return list->tail;
   13fa0:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   13fa2:	4298      	cmp	r0, r3
   13fa4:	d1ec      	bne.n	13f80 <sleeping_thread_remove+0x34>
	list->tail = node;
   13fa6:	4b03      	ldr	r3, [pc, #12]	; (13fb4 <sleeping_thread_remove+0x68>)
   13fa8:	605a      	str	r2, [r3, #4]
}
   13faa:	e7e9      	b.n	13f80 <sleeping_thread_remove+0x34>
	list->tail = node;
   13fac:	4b01      	ldr	r3, [pc, #4]	; (13fb4 <sleeping_thread_remove+0x68>)
   13fae:	605a      	str	r2, [r3, #4]
}
   13fb0:	e7e6      	b.n	13f80 <sleeping_thread_remove+0x34>
   13fb2:	bf00      	nop
   13fb4:	2000c900 	.word	0x2000c900

00013fb8 <rpc_proxy_irq_handler>:
void nrf_modem_os_trace_irq_clear(void)
{
	NVIC_ClearPendingIRQ(TRACE_IRQ);
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   13fb8:	4668      	mov	r0, sp
   13fba:	f020 0107 	bic.w	r1, r0, #7
   13fbe:	468d      	mov	sp, r1
   13fc0:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   13fc2:	4b10      	ldr	r3, [pc, #64]	; (14004 <rpc_proxy_irq_handler+0x4c>)
   13fc4:	e8d3 2fef 	ldaex	r2, [r3]
   13fc8:	3201      	adds	r2, #1
   13fca:	e8c3 2fe1 	stlex	r1, r2, [r3]
   13fce:	2900      	cmp	r1, #0
   13fd0:	d1f8      	bne.n	13fc4 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	nrf_modem_application_irq_handler();
   13fd2:	f001 f9c3 	bl	1535c <nrf_modem_application_irq_handler>
	return list->head;
   13fd6:	4b0c      	ldr	r3, [pc, #48]	; (14008 <rpc_proxy_irq_handler+0x50>)
   13fd8:	681c      	ldr	r4, [r3, #0]
   13fda:	e000      	b.n	13fde <rpc_proxy_irq_handler+0x26>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   13fdc:	461c      	mov	r4, r3

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   13fde:	b144      	cbz	r4, 13ff2 <rpc_proxy_irq_handler+0x3a>
		k_sem_give(&thread->sem);
   13fe0:	1d20      	adds	r0, r4, #4
	z_impl_k_sem_give(sem);
   13fe2:	f002 fcdd 	bl	169a0 <z_impl_k_sem_give>
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   13fe6:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   13fe8:	2c00      	cmp	r4, #0
   13fea:	d0f7      	beq.n	13fdc <rpc_proxy_irq_handler+0x24>
	return node->next;
   13fec:	6823      	ldr	r3, [r4, #0]
   13fee:	2b00      	cmp	r3, #0
   13ff0:	d1f4      	bne.n	13fdc <rpc_proxy_irq_handler+0x24>
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   13ff2:	f7fe fbeb 	bl	127cc <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   13ff6:	f7fe fcd1 	bl	1299c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   13ffa:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   13ffe:	4685      	mov	sp, r0
   14000:	4770      	bx	lr
   14002:	bf00      	nop
   14004:	2000c8e4 	.word	0x2000c8e4
   14008:	2000c900 	.word	0x2000c900

0001400c <nrf_modem_os_sem_init>:
{
   1400c:	b538      	push	{r3, r4, r5, lr}
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   1400e:	6803      	ldr	r3, [r0, #0]
   14010:	b12b      	cbz	r3, 1401e <nrf_modem_os_sem_init+0x12>
   14012:	4c09      	ldr	r4, [pc, #36]	; (14038 <nrf_modem_os_sem_init+0x2c>)
   14014:	42a3      	cmp	r3, r4
   14016:	d302      	bcc.n	1401e <nrf_modem_os_sem_init+0x12>
   14018:	3430      	adds	r4, #48	; 0x30
   1401a:	42a3      	cmp	r3, r4
   1401c:	d307      	bcc.n	1402e <nrf_modem_os_sem_init+0x22>
	*sem = &nrf_modem_os_sems[used++];
   1401e:	4b07      	ldr	r3, [pc, #28]	; (1403c <nrf_modem_os_sem_init+0x30>)
   14020:	781c      	ldrb	r4, [r3, #0]
   14022:	1c65      	adds	r5, r4, #1
   14024:	701d      	strb	r5, [r3, #0]
   14026:	4b04      	ldr	r3, [pc, #16]	; (14038 <nrf_modem_os_sem_init+0x2c>)
   14028:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1402c:	6003      	str	r3, [r0, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   1402e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   14030:	f004 ff07 	bl	18e42 <z_impl_k_sem_init>
}
   14034:	bd38      	pop	{r3, r4, r5, pc}
   14036:	bf00      	nop
   14038:	2000c8b4 	.word	0x2000c8b4
   1403c:	2000cbfc 	.word	0x2000cbfc

00014040 <nrf_modem_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14040:	4b02      	ldr	r3, [pc, #8]	; (1404c <nrf_modem_os_application_irq_set+0xc>)
   14042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   14046:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1404a:	4770      	bx	lr
   1404c:	e000e100 	.word	0xe000e100

00014050 <nrf_modem_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14050:	4b02      	ldr	r3, [pc, #8]	; (1405c <nrf_modem_os_application_irq_clear+0xc>)
   14052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   14056:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1405a:	4770      	bx	lr
   1405c:	e000e100 	.word	0xe000e100

00014060 <nrf_modem_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14060:	4b02      	ldr	r3, [pc, #8]	; (1406c <nrf_modem_os_trace_irq_set+0xc>)
   14062:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   14066:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1406a:	4770      	bx	lr
   1406c:	e000e100 	.word	0xe000e100

00014070 <nrf_modem_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14070:	4b02      	ldr	r3, [pc, #8]	; (1407c <nrf_modem_os_trace_irq_clear+0xc>)
   14072:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   14076:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1407a:	4770      	bx	lr
   1407c:	e000e100 	.word	0xe000e100

00014080 <nrf_modem_os_alloc>:
			   rpc_proxy_irq_handler, UNUSED_FLAGS);
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
}

void *nrf_modem_os_alloc(size_t bytes)
{
   14080:	b508      	push	{r3, lr}
   14082:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&library_heap, bytes, K_NO_WAIT);
   14084:	2200      	movs	r2, #0
   14086:	2300      	movs	r3, #0
   14088:	4801      	ldr	r0, [pc, #4]	; (14090 <nrf_modem_os_alloc+0x10>)
   1408a:	f004 fe6e 	bl	18d6a <k_heap_alloc>
		heap_diag.failed_allocs++;
		LOG_WRN("alloc(%d) -> %p", bytes, addr);
	}
#endif
	return addr;
}
   1408e:	bd08      	pop	{r3, pc}
   14090:	2000c598 	.word	0x2000c598

00014094 <nrf_modem_os_free>:

void nrf_modem_os_free(void *mem)
{
   14094:	b508      	push	{r3, lr}
   14096:	4601      	mov	r1, r0
	k_heap_free(&library_heap, mem);
   14098:	4801      	ldr	r0, [pc, #4]	; (140a0 <nrf_modem_os_free+0xc>)
   1409a:	f004 fe71 	bl	18d80 <k_heap_free>
#ifdef CONFIG_NRF_MODEM_LIB_DEBUG_ALLOC
	LOG_INF("free(%p)", mem);
#endif
}
   1409e:	bd08      	pop	{r3, pc}
   140a0:	2000c598 	.word	0x2000c598

000140a4 <nrf_modem_os_shm_tx_alloc>:

void *nrf_modem_os_shm_tx_alloc(size_t bytes)
{
   140a4:	b508      	push	{r3, lr}
   140a6:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&shmem_heap, bytes, K_NO_WAIT);
   140a8:	2200      	movs	r2, #0
   140aa:	2300      	movs	r3, #0
   140ac:	4801      	ldr	r0, [pc, #4]	; (140b4 <nrf_modem_os_shm_tx_alloc+0x10>)
   140ae:	f004 fe5c 	bl	18d6a <k_heap_alloc>
		shmem_diag.failed_allocs++;
		LOG_WRN("shm_tx_alloc(%d) -> %p", bytes, addr);
	}
#endif
	return addr;
}
   140b2:	bd08      	pop	{r3, pc}
   140b4:	2000c8ec 	.word	0x2000c8ec

000140b8 <nrf_modem_os_shm_tx_free>:

void nrf_modem_os_shm_tx_free(void *mem)
{
   140b8:	b508      	push	{r3, lr}
   140ba:	4601      	mov	r1, r0
	k_heap_free(&shmem_heap, mem);
   140bc:	4801      	ldr	r0, [pc, #4]	; (140c4 <nrf_modem_os_shm_tx_free+0xc>)
   140be:	f004 fe5f 	bl	18d80 <k_heap_free>
#ifdef CONFIG_NRF_MODEM_LIB_DEBUG_SHM_TX_ALLOC
	LOG_INF("shm_tx_free(%p)", mem);
#endif
}
   140c2:	bd08      	pop	{r3, pc}
   140c4:	2000c8ec 	.word	0x2000c8ec

000140c8 <nrf_modem_os_init>:
	}
}

/* This function is called by nrf_modem_init() */
void nrf_modem_os_init(void)
{
   140c8:	b510      	push	{r4, lr}
	list->head = NULL;
   140ca:	4b0f      	ldr	r3, [pc, #60]	; (14108 <nrf_modem_os_init+0x40>)
   140cc:	2400      	movs	r4, #0
   140ce:	601c      	str	r4, [r3, #0]
	list->tail = NULL;
   140d0:	605c      	str	r4, [r3, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   140d2:	4b0e      	ldr	r3, [pc, #56]	; (1410c <nrf_modem_os_init+0x44>)
   140d4:	e8d3 2fef 	ldaex	r2, [r3]
   140d8:	e8c3 4fe1 	stlex	r1, r4, [r3]
   140dc:	2900      	cmp	r1, #0
   140de:	d1f9      	bne.n	140d4 <nrf_modem_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   140e0:	f004 fc76 	bl	189d0 <read_task_create>
		trace_irq_init();
	}

#endif

	memset(&heap_diag, 0x00, sizeof(heap_diag));
   140e4:	2204      	movs	r2, #4
   140e6:	4621      	mov	r1, r4
   140e8:	4809      	ldr	r0, [pc, #36]	; (14110 <nrf_modem_os_init+0x48>)
   140ea:	f003 ffff 	bl	180ec <memset>
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   140ee:	2204      	movs	r2, #4
   140f0:	4621      	mov	r1, r4
   140f2:	4808      	ldr	r0, [pc, #32]	; (14114 <nrf_modem_os_init+0x4c>)
   140f4:	f003 fffa 	bl	180ec <memset>

	/* Initialize TX heap */
	k_heap_init(&shmem_heap,
   140f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   140fc:	4906      	ldr	r1, [pc, #24]	; (14118 <nrf_modem_os_init+0x50>)
   140fe:	4807      	ldr	r0, [pc, #28]	; (1411c <nrf_modem_os_init+0x54>)
   14100:	f004 fde0 	bl	18cc4 <k_heap_init>
#ifdef CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIODIC
	k_work_init_delayable(&heap_task.work, diag_task);
	k_work_reschedule(&heap_task.work,
		K_MSEC(CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIOD_MS));
#endif
}
   14104:	bd10      	pop	{r4, pc}
   14106:	bf00      	nop
   14108:	2000c900 	.word	0x2000c900
   1410c:	2000c8e4 	.word	0x2000c8e4
   14110:	2000c8b0 	.word	0x2000c8b0
   14114:	2000c8e8 	.word	0x2000c8e8
   14118:	200084e8 	.word	0x200084e8
   1411c:	2000c8ec 	.word	0x2000c8ec

00014120 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   14120:	b570      	push	{r4, r5, r6, lr}
   14122:	b084      	sub	sp, #16
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);
   14124:	481d      	ldr	r0, [pc, #116]	; (1419c <check_ext_api_requests+0x7c>)
   14126:	f004 fc7f 	bl	18a28 <skip_ext_apis>
   1412a:	4604      	mov	r4, r0

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1412c:	2600      	movs	r6, #0
   1412e:	e00a      	b.n	14146 <check_ext_api_requests+0x26>
	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
		== 0) {
		return ext_api;
	}
	return NULL;
   14130:	2500      	movs	r5, #0
   14132:	e01a      	b.n	1416a <check_ext_api_requests+0x4a>
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   14134:	481a      	ldr	r0, [pc, #104]	; (141a0 <check_ext_api_requests+0x80>)
   14136:	f003 fa6a 	bl	1760e <printk>
				"fulfilled.\r\n");
			*ext_api_req->ext_api = NULL;
   1413a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1413c:	2200      	movs	r2, #0
   1413e:	601a      	str	r2, [r3, #0]
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
   14140:	68e3      	ldr	r3, [r4, #12]
   14142:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   14144:	3601      	adds	r6, #1
   14146:	4b15      	ldr	r3, [pc, #84]	; (1419c <check_ext_api_requests+0x7c>)
   14148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1414a:	42b3      	cmp	r3, r6
   1414c:	d922      	bls.n	14194 <check_ext_api_requests+0x74>
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   1414e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14150:	681d      	ldr	r5, [r3, #0]
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   14152:	ab01      	add	r3, sp, #4
   14154:	4a13      	ldr	r2, [pc, #76]	; (141a4 <check_ext_api_requests+0x84>)
   14156:	ca07      	ldmia	r2, {r0, r1, r2}
   14158:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   1415c:	220c      	movs	r2, #12
   1415e:	4619      	mov	r1, r3
   14160:	4628      	mov	r0, r5
   14162:	f003 ff88 	bl	18076 <memcmp>
   14166:	2800      	cmp	r0, #0
   14168:	d1e2      	bne.n	14130 <check_ext_api_requests+0x10>
   1416a:	b135      	cbz	r5, 1417a <check_ext_api_requests+0x5a>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   1416c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1416e:	4621      	mov	r1, r4
   14170:	6818      	ldr	r0, [r3, #0]
   14172:	f004 fc3d 	bl	189f0 <ext_api_satisfies_req>
   14176:	2800      	cmp	r0, #0
   14178:	d1e2      	bne.n	14140 <check_ext_api_requests+0x20>
		} else if (ext_api_req->required) {
   1417a:	6a23      	ldr	r3, [r4, #32]
   1417c:	2b00      	cmp	r3, #0
   1417e:	d0d9      	beq.n	14134 <check_ext_api_requests+0x14>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   14180:	4809      	ldr	r0, [pc, #36]	; (141a8 <check_ext_api_requests+0x88>)
   14182:	f003 fa44 	bl	1760e <printk>
			k_panic();
   14186:	4040      	eors	r0, r0
   14188:	f380 8811 	msr	BASEPRI, r0
   1418c:	f04f 0004 	mov.w	r0, #4
   14190:	df02      	svc	2
   14192:	e7d5      	b.n	14140 <check_ext_api_requests+0x20>
	}

	return 0;
}
   14194:	2000      	movs	r0, #0
   14196:	b004      	add	sp, #16
   14198:	bd70      	pop	{r4, r5, r6, pc}
   1419a:	bf00      	nop
   1419c:	00010200 	.word	0x00010200
   141a0:	00019758 	.word	0x00019758
   141a4:	0001955c 	.word	0x0001955c
   141a8:	0001972c 	.word	0x0001972c

000141ac <SystemCoreClockUpdate>:
    static bool is_empty_word(uint32_t const volatile * word);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
   141ac:	4b01      	ldr	r3, [pc, #4]	; (141b4 <SystemCoreClockUpdate+0x8>)
   141ae:	4a02      	ldr	r2, [pc, #8]	; (141b8 <SystemCoreClockUpdate+0xc>)
   141b0:	601a      	str	r2, [r3, #0]
}
   141b2:	4770      	bx	lr
   141b4:	2000c51c 	.word	0x2000c51c
   141b8:	03d09000 	.word	0x03d09000

000141bc <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   141bc:	b430      	push	{r4, r5}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   141be:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   141c0:	fab4 f384 	clz	r3, r4
        if (idx < 0) {
   141c4:	f1d3 031f 	rsbs	r3, r3, #31
   141c8:	d411      	bmi.n	141ee <nrfx_flag32_alloc+0x32>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   141ca:	2201      	movs	r2, #1
   141cc:	409a      	lsls	r2, r3
   141ce:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   141d2:	e8d0 5fef 	ldaex	r5, [r0]
   141d6:	42a5      	cmp	r5, r4
   141d8:	d104      	bne.n	141e4 <nrfx_flag32_alloc+0x28>
   141da:	e8c0 2fec 	stlex	ip, r2, [r0]
   141de:	f1bc 0f00 	cmp.w	ip, #0
   141e2:	d1f6      	bne.n	141d2 <nrfx_flag32_alloc+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   141e4:	d1eb      	bne.n	141be <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   141e6:	700b      	strb	r3, [r1, #0]

    return NRFX_SUCCESS;
   141e8:	4802      	ldr	r0, [pc, #8]	; (141f4 <nrfx_flag32_alloc+0x38>)
}
   141ea:	bc30      	pop	{r4, r5}
   141ec:	4770      	bx	lr
            return NRFX_ERROR_NO_MEM;
   141ee:	4802      	ldr	r0, [pc, #8]	; (141f8 <nrfx_flag32_alloc+0x3c>)
   141f0:	e7fb      	b.n	141ea <nrfx_flag32_alloc+0x2e>
   141f2:	bf00      	nop
   141f4:	0bad0000 	.word	0x0bad0000
   141f8:	0bad0002 	.word	0x0bad0002

000141fc <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   141fc:	b410      	push	{r4}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   141fe:	6803      	ldr	r3, [r0, #0]
   14200:	460c      	mov	r4, r1
   14202:	fa23 f101 	lsr.w	r1, r3, r1
   14206:	f011 0f01 	tst.w	r1, #1
   1420a:	d110      	bne.n	1422e <nrfx_flag32_free+0x32>
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   1420c:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   1420e:	2301      	movs	r3, #1
   14210:	40a3      	lsls	r3, r4
   14212:	4313      	orrs	r3, r2
   14214:	e8d0 1fef 	ldaex	r1, [r0]
   14218:	4291      	cmp	r1, r2
   1421a:	d104      	bne.n	14226 <nrfx_flag32_free+0x2a>
   1421c:	e8c0 3fec 	stlex	ip, r3, [r0]
   14220:	f1bc 0f00 	cmp.w	ip, #0
   14224:	d1f6      	bne.n	14214 <nrfx_flag32_free+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   14226:	d1f1      	bne.n	1420c <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   14228:	4802      	ldr	r0, [pc, #8]	; (14234 <nrfx_flag32_free+0x38>)
}
   1422a:	bc10      	pop	{r4}
   1422c:	4770      	bx	lr
        return NRFX_ERROR_INVALID_PARAM;
   1422e:	4802      	ldr	r0, [pc, #8]	; (14238 <nrfx_flag32_free+0x3c>)
   14230:	e7fb      	b.n	1422a <nrfx_flag32_free+0x2e>
   14232:	bf00      	nop
   14234:	0bad0000 	.word	0x0bad0000
   14238:	0bad0004 	.word	0x0bad0004

0001423c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1423c:	4b05      	ldr	r3, [pc, #20]	; (14254 <nrfx_clock_init+0x18>)
   1423e:	791b      	ldrb	r3, [r3, #4]
   14240:	b92b      	cbnz	r3, 1424e <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
   14242:	4b04      	ldr	r3, [pc, #16]	; (14254 <nrfx_clock_init+0x18>)
   14244:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   14246:	2201      	movs	r2, #1
   14248:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1424a:	4803      	ldr	r0, [pc, #12]	; (14258 <nrfx_clock_init+0x1c>)
   1424c:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1424e:	4803      	ldr	r0, [pc, #12]	; (1425c <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   14250:	4770      	bx	lr
   14252:	bf00      	nop
   14254:	2000c958 	.word	0x2000c958
   14258:	0bad0000 	.word	0x0bad0000
   1425c:	0bad000c 	.word	0x0bad000c

00014260 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   14260:	b110      	cbz	r0, 14268 <nrfx_clock_start+0x8>
   14262:	2801      	cmp	r0, #1
   14264:	d021      	beq.n	142aa <nrfx_clock_start+0x4a>
   14266:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   14268:	4a15      	ldr	r2, [pc, #84]	; (142c0 <nrfx_clock_start+0x60>)
   1426a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   1426e:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   14272:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   14276:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   1427a:	d10f      	bne.n	1429c <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1427c:	4b10      	ldr	r3, [pc, #64]	; (142c0 <nrfx_clock_start+0x60>)
   1427e:	2201      	movs	r2, #1
   14280:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14284:	4b0f      	ldr	r3, [pc, #60]	; (142c4 <nrfx_clock_start+0x64>)
   14286:	2200      	movs	r2, #0
   14288:	601a      	str	r2, [r3, #0]
   1428a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1428c:	4b0c      	ldr	r3, [pc, #48]	; (142c0 <nrfx_clock_start+0x60>)
   1428e:	2202      	movs	r2, #2
   14290:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14294:	3308      	adds	r3, #8
   14296:	2201      	movs	r2, #1
   14298:	601a      	str	r2, [r3, #0]
}
   1429a:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   1429c:	2b02      	cmp	r3, #2
   1429e:	d1ed      	bne.n	1427c <nrfx_clock_start+0x1c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   142a0:	4b07      	ldr	r3, [pc, #28]	; (142c0 <nrfx_clock_start+0x60>)
   142a2:	2202      	movs	r2, #2
   142a4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   142a8:	e7ec      	b.n	14284 <nrfx_clock_start+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   142aa:	4b07      	ldr	r3, [pc, #28]	; (142c8 <nrfx_clock_start+0x68>)
   142ac:	2200      	movs	r2, #0
   142ae:	601a      	str	r2, [r3, #0]
   142b0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   142b2:	4b03      	ldr	r3, [pc, #12]	; (142c0 <nrfx_clock_start+0x60>)
   142b4:	2201      	movs	r2, #1
   142b6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   142ba:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   142bc:	4770      	bx	lr
   142be:	bf00      	nop
   142c0:	40005000 	.word	0x40005000
   142c4:	40005104 	.word	0x40005104
   142c8:	40005100 	.word	0x40005100

000142cc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   142cc:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   142ce:	4604      	mov	r4, r0
   142d0:	b110      	cbz	r0, 142d8 <nrfx_clock_stop+0xc>
   142d2:	2801      	cmp	r0, #1
   142d4:	d011      	beq.n	142fa <nrfx_clock_stop+0x2e>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   142d6:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
   142d8:	4b35      	ldr	r3, [pc, #212]	; (143b0 <nrfx_clock_stop+0xe4>)
   142da:	2202      	movs	r2, #2
   142dc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   142e0:	f503 7382 	add.w	r3, r3, #260	; 0x104
   142e4:	2200      	movs	r2, #0
   142e6:	601a      	str	r2, [r3, #0]
   142e8:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   142ea:	4b32      	ldr	r3, [pc, #200]	; (143b4 <nrfx_clock_stop+0xe8>)
   142ec:	2201      	movs	r2, #1
   142ee:	601a      	str	r2, [r3, #0]
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
   142f0:	2c01      	cmp	r4, #1
   142f2:	d00e      	beq.n	14312 <nrfx_clock_stop+0x46>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   142f4:	f242 7510 	movw	r5, #10000	; 0x2710
   142f8:	e047      	b.n	1438a <nrfx_clock_stop+0xbe>
    p_reg->INTENCLR = mask;
   142fa:	2301      	movs	r3, #1
   142fc:	4a2c      	ldr	r2, [pc, #176]	; (143b0 <nrfx_clock_stop+0xe4>)
   142fe:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14302:	f502 7280 	add.w	r2, r2, #256	; 0x100
   14306:	2100      	movs	r1, #0
   14308:	6011      	str	r1, [r2, #0]
   1430a:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1430c:	4a2a      	ldr	r2, [pc, #168]	; (143b8 <nrfx_clock_stop+0xec>)
   1430e:	6013      	str	r3, [r2, #0]
}
   14310:	e7ee      	b.n	142f0 <nrfx_clock_stop+0x24>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   14312:	4625      	mov	r5, r4
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   14314:	f242 7610 	movw	r6, #10000	; 0x2710
   14318:	e013      	b.n	14342 <nrfx_clock_stop+0x76>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1431a:	4b25      	ldr	r3, [pc, #148]	; (143b0 <nrfx_clock_stop+0xe4>)
   1431c:	f8d3 5418 	ldr.w	r5, [r3, #1048]	; 0x418
   14320:	f005 0503 	and.w	r5, r5, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   14324:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
   14328:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1432c:	d11b      	bne.n	14366 <nrfx_clock_stop+0x9a>
    return false;
   1432e:	2300      	movs	r3, #0
   14330:	2b00      	cmp	r3, #0
   14332:	d0d0      	beq.n	142d6 <nrfx_clock_stop+0xa>
   14334:	2d01      	cmp	r5, #1
   14336:	d1ce      	bne.n	142d6 <nrfx_clock_stop+0xa>
   14338:	2001      	movs	r0, #1
   1433a:	f004 fb87 	bl	18a4c <nrfx_busy_wait>
   1433e:	3e01      	subs	r6, #1
   14340:	d0c9      	beq.n	142d6 <nrfx_clock_stop+0xa>
    switch (domain)
   14342:	2c00      	cmp	r4, #0
   14344:	d0e9      	beq.n	1431a <nrfx_clock_stop+0x4e>
   14346:	2c01      	cmp	r4, #1
   14348:	d001      	beq.n	1434e <nrfx_clock_stop+0x82>
   1434a:	2300      	movs	r3, #0
   1434c:	e7f0      	b.n	14330 <nrfx_clock_stop+0x64>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1434e:	4b18      	ldr	r3, [pc, #96]	; (143b0 <nrfx_clock_stop+0xe4>)
   14350:	f8d3 540c 	ldr.w	r5, [r3, #1036]	; 0x40c
   14354:	f005 0501 	and.w	r5, r5, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   14358:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   1435c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   14360:	d103      	bne.n	1436a <nrfx_clock_stop+0x9e>
    return false;
   14362:	2300      	movs	r3, #0
   14364:	e7e4      	b.n	14330 <nrfx_clock_stop+0x64>
                return true;
   14366:	2301      	movs	r3, #1
   14368:	e7e2      	b.n	14330 <nrfx_clock_stop+0x64>
                return true;
   1436a:	2301      	movs	r3, #1
   1436c:	e7e0      	b.n	14330 <nrfx_clock_stop+0x64>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1436e:	4b10      	ldr	r3, [pc, #64]	; (143b0 <nrfx_clock_stop+0xe4>)
   14370:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
   14374:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   14378:	d115      	bne.n	143a6 <nrfx_clock_stop+0xda>
    return false;
   1437a:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1437c:	2b00      	cmp	r3, #0
   1437e:	d0aa      	beq.n	142d6 <nrfx_clock_stop+0xa>
   14380:	2001      	movs	r0, #1
   14382:	f004 fb63 	bl	18a4c <nrfx_busy_wait>
   14386:	3d01      	subs	r5, #1
   14388:	d0a5      	beq.n	142d6 <nrfx_clock_stop+0xa>
    switch (domain)
   1438a:	2c00      	cmp	r4, #0
   1438c:	d0ef      	beq.n	1436e <nrfx_clock_stop+0xa2>
   1438e:	2c01      	cmp	r4, #1
   14390:	d001      	beq.n	14396 <nrfx_clock_stop+0xca>
   14392:	2300      	movs	r3, #0
   14394:	e7f2      	b.n	1437c <nrfx_clock_stop+0xb0>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   14396:	4b06      	ldr	r3, [pc, #24]	; (143b0 <nrfx_clock_stop+0xe4>)
   14398:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   1439c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   143a0:	d103      	bne.n	143aa <nrfx_clock_stop+0xde>
    return false;
   143a2:	2300      	movs	r3, #0
   143a4:	e7ea      	b.n	1437c <nrfx_clock_stop+0xb0>
                return true;
   143a6:	2301      	movs	r3, #1
   143a8:	e7e8      	b.n	1437c <nrfx_clock_stop+0xb0>
                return true;
   143aa:	2301      	movs	r3, #1
   143ac:	e7e6      	b.n	1437c <nrfx_clock_stop+0xb0>
   143ae:	bf00      	nop
   143b0:	40005000 	.word	0x40005000
   143b4:	4000500c 	.word	0x4000500c
   143b8:	40005004 	.word	0x40005004

000143bc <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   143bc:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   143be:	4b17      	ldr	r3, [pc, #92]	; (1441c <nrfx_power_clock_irq_handler+0x60>)
   143c0:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   143c2:	b153      	cbz	r3, 143da <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   143c4:	4b15      	ldr	r3, [pc, #84]	; (1441c <nrfx_power_clock_irq_handler+0x60>)
   143c6:	2000      	movs	r0, #0
   143c8:	6018      	str	r0, [r3, #0]
   143ca:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   143cc:	4b14      	ldr	r3, [pc, #80]	; (14420 <nrfx_power_clock_irq_handler+0x64>)
   143ce:	2201      	movs	r2, #1
   143d0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   143d4:	4b13      	ldr	r3, [pc, #76]	; (14424 <nrfx_power_clock_irq_handler+0x68>)
   143d6:	681b      	ldr	r3, [r3, #0]
   143d8:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   143da:	4b13      	ldr	r3, [pc, #76]	; (14428 <nrfx_power_clock_irq_handler+0x6c>)
   143dc:	681b      	ldr	r3, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   143de:	b1a3      	cbz	r3, 1440a <nrfx_power_clock_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   143e0:	4b11      	ldr	r3, [pc, #68]	; (14428 <nrfx_power_clock_irq_handler+0x6c>)
   143e2:	2200      	movs	r2, #0
   143e4:	601a      	str	r2, [r3, #0]
   143e6:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   143e8:	4a0d      	ldr	r2, [pc, #52]	; (14420 <nrfx_power_clock_irq_handler+0x64>)
   143ea:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   143ee:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   143f2:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   143f6:	2b01      	cmp	r3, #1
   143f8:	d008      	beq.n	1440c <nrfx_power_clock_irq_handler+0x50>
    p_reg->INTENCLR = mask;
   143fa:	4b09      	ldr	r3, [pc, #36]	; (14420 <nrfx_power_clock_irq_handler+0x64>)
   143fc:	2202      	movs	r2, #2
   143fe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   14402:	4b08      	ldr	r3, [pc, #32]	; (14424 <nrfx_power_clock_irq_handler+0x68>)
   14404:	681b      	ldr	r3, [r3, #0]
   14406:	2001      	movs	r0, #1
   14408:	4798      	blx	r3
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1440a:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   1440c:	4b04      	ldr	r3, [pc, #16]	; (14420 <nrfx_power_clock_irq_handler+0x64>)
   1440e:	2202      	movs	r2, #2
   14410:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14414:	3308      	adds	r3, #8
   14416:	2201      	movs	r2, #1
   14418:	601a      	str	r2, [r3, #0]
}
   1441a:	e7f6      	b.n	1440a <nrfx_power_clock_irq_handler+0x4e>
   1441c:	40005100 	.word	0x40005100
   14420:	40005000 	.word	0x40005000
   14424:	2000c958 	.word	0x2000c958
   14428:	40005104 	.word	0x40005104

0001442c <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   1442c:	b508      	push	{r3, lr}
   1442e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   14430:	4801      	ldr	r0, [pc, #4]	; (14438 <nrfx_dppi_channel_alloc+0xc>)
   14432:	f7ff fec3 	bl	141bc <nrfx_flag32_alloc>
}
   14436:	bd08      	pop	{r3, pc}
   14438:	2000c520 	.word	0x2000c520

0001443c <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1443c:	3008      	adds	r0, #8
   1443e:	4b03      	ldr	r3, [pc, #12]	; (1444c <pin_in_use+0x10>)
   14440:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   14444:	f000 0001 	and.w	r0, r0, #1
   14448:	4770      	bx	lr
   1444a:	bf00      	nop
   1444c:	2000c524 	.word	0x2000c524

00014450 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   14450:	3008      	adds	r0, #8
   14452:	4b03      	ldr	r3, [pc, #12]	; (14460 <pin_in_use_by_te+0x10>)
   14454:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   14458:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1445c:	4770      	bx	lr
   1445e:	bf00      	nop
   14460:	2000c524 	.word	0x2000c524

00014464 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   14464:	3008      	adds	r0, #8
   14466:	4b04      	ldr	r3, [pc, #16]	; (14478 <pin_has_trigger+0x14>)
   14468:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1446c:	f010 001c 	ands.w	r0, r0, #28
   14470:	bf18      	it	ne
   14472:	2001      	movne	r0, #1
   14474:	4770      	bx	lr
   14476:	bf00      	nop
   14478:	2000c524 	.word	0x2000c524

0001447c <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1447c:	3008      	adds	r0, #8
   1447e:	4b03      	ldr	r3, [pc, #12]	; (1448c <pin_is_output+0x10>)
   14480:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   14484:	f3c0 0040 	ubfx	r0, r0, #1, #1
   14488:	4770      	bx	lr
   1448a:	bf00      	nop
   1448c:	2000c524 	.word	0x2000c524

00014490 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   14490:	3008      	adds	r0, #8
   14492:	4b02      	ldr	r3, [pc, #8]	; (1449c <pin_te_get+0xc>)
   14494:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   14498:	0b40      	lsrs	r0, r0, #13
   1449a:	4770      	bx	lr
   1449c:	2000c524 	.word	0x2000c524

000144a0 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   144a0:	2200      	movs	r2, #0
   144a2:	e004      	b.n	144ae <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   144a4:	f04f 33ff 	mov.w	r3, #4294967295
   144a8:	4283      	cmp	r3, r0
   144aa:	d00f      	beq.n	144cc <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   144ac:	3201      	adds	r2, #1
   144ae:	2a1f      	cmp	r2, #31
   144b0:	d80a      	bhi.n	144c8 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   144b2:	f102 0308 	add.w	r3, r2, #8
   144b6:	4906      	ldr	r1, [pc, #24]	; (144d0 <handler_in_use+0x30>)
   144b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   144bc:	f413 7f80 	tst.w	r3, #256	; 0x100
   144c0:	d0f0      	beq.n	144a4 <handler_in_use+0x4>
   144c2:	f3c3 2343 	ubfx	r3, r3, #9, #4
   144c6:	e7ef      	b.n	144a8 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   144c8:	2000      	movs	r0, #0
   144ca:	4770      	bx	lr
            return true;
   144cc:	2001      	movs	r0, #1
}
   144ce:	4770      	bx	lr
   144d0:	2000c524 	.word	0x2000c524

000144d4 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   144d4:	2300      	movs	r3, #0
   144d6:	b113      	cbz	r3, 144de <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   144d8:	f04f 30ff 	mov.w	r0, #4294967295
}
   144dc:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   144de:	4a07      	ldr	r2, [pc, #28]	; (144fc <find_handler+0x28>)
   144e0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   144e4:	4282      	cmp	r2, r0
   144e6:	d001      	beq.n	144ec <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   144e8:	3301      	adds	r3, #1
   144ea:	e7f4      	b.n	144d6 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   144ec:	4a03      	ldr	r2, [pc, #12]	; (144fc <find_handler+0x28>)
   144ee:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   144f2:	6852      	ldr	r2, [r2, #4]
   144f4:	428a      	cmp	r2, r1
   144f6:	d1f7      	bne.n	144e8 <find_handler+0x14>
            return i;
   144f8:	4618      	mov	r0, r3
   144fa:	4770      	bx	lr
   144fc:	2000c524 	.word	0x2000c524

00014500 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   14500:	3008      	adds	r0, #8
   14502:	4b06      	ldr	r3, [pc, #24]	; (1451c <channel_handler_get+0x1c>)
   14504:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   14508:	f410 7f80 	tst.w	r0, #256	; 0x100
   1450c:	d004      	beq.n	14518 <channel_handler_get+0x18>
   1450e:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   14512:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   14516:	4770      	bx	lr
        return NULL;
   14518:	2000      	movs	r0, #0
}
   1451a:	4770      	bx	lr
   1451c:	2000c524 	.word	0x2000c524

00014520 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   14520:	b570      	push	{r4, r5, r6, lr}
   14522:	4604      	mov	r4, r0
   14524:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   14526:	f7ff ffeb 	bl	14500 <channel_handler_get>

    if (handler)
   1452a:	b120      	cbz	r0, 14536 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   1452c:	6806      	ldr	r6, [r0, #0]
   1452e:	6842      	ldr	r2, [r0, #4]
   14530:	4629      	mov	r1, r5
   14532:	4620      	mov	r0, r4
   14534:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   14536:	4b04      	ldr	r3, [pc, #16]	; (14548 <call_handler+0x28>)
   14538:	689b      	ldr	r3, [r3, #8]
   1453a:	b123      	cbz	r3, 14546 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1453c:	4a02      	ldr	r2, [pc, #8]	; (14548 <call_handler+0x28>)
   1453e:	68d2      	ldr	r2, [r2, #12]
   14540:	4629      	mov	r1, r5
   14542:	4620      	mov	r0, r4
   14544:	4798      	blx	r3
    }
}
   14546:	bd70      	pop	{r4, r5, r6, pc}
   14548:	2000c524 	.word	0x2000c524

0001454c <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
   1454c:	b570      	push	{r4, r5, r6, lr}
   1454e:	4604      	mov	r4, r0
   14550:	460d      	mov	r5, r1
   14552:	4616      	mov	r6, r2
    if (is_level(trigger))
   14554:	4608      	mov	r0, r1
   14556:	f004 fa9f 	bl	18a98 <is_level>
   1455a:	b9a8      	cbnz	r0, 14588 <next_sense_cond_call_handler+0x3c>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1455c:	2e02      	cmp	r6, #2
   1455e:	d033      	beq.n	145c8 <next_sense_cond_call_handler+0x7c>
   14560:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
   14562:	f004 031f 	and.w	r3, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14566:	491e      	ldr	r1, [pc, #120]	; (145e0 <next_sense_cond_call_handler+0x94>)
   14568:	3380      	adds	r3, #128	; 0x80
   1456a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   1456e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14572:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   14576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        nrf_gpio_cfg_sense_set(pin, next_sense);

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1457a:	2d03      	cmp	r5, #3
   1457c:	d028      	beq.n	145d0 <next_sense_cond_call_handler+0x84>
   1457e:	2e02      	cmp	r6, #2
   14580:	d024      	beq.n	145cc <next_sense_cond_call_handler+0x80>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   14582:	2e03      	cmp	r6, #3
   14584:	d029      	beq.n	145da <next_sense_cond_call_handler+0x8e>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
   14586:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   14588:	4629      	mov	r1, r5
   1458a:	4620      	mov	r0, r4
   1458c:	f7ff ffc8 	bl	14520 <call_handler>
    *p_pin = pin_number & 0x1F;
   14590:	f004 041f 	and.w	r4, r4, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   14594:	f104 0280 	add.w	r2, r4, #128	; 0x80
   14598:	4b11      	ldr	r3, [pc, #68]	; (145e0 <next_sense_cond_call_handler+0x94>)
   1459a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1459e:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   145a2:	429e      	cmp	r6, r3
   145a4:	d1ef      	bne.n	14586 <next_sense_cond_call_handler+0x3a>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   145a6:	4b0e      	ldr	r3, [pc, #56]	; (145e0 <next_sense_cond_call_handler+0x94>)
   145a8:	4614      	mov	r4, r2
   145aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    cnf &= ~to_update;
   145ae:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   145b2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   145b6:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    cnf &= ~to_update;
   145ba:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   145be:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   145c2:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
}
   145c6:	e7de      	b.n	14586 <next_sense_cond_call_handler+0x3a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   145c8:	2003      	movs	r0, #3
   145ca:	e7ca      	b.n	14562 <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   145cc:	2d01      	cmp	r5, #1
   145ce:	d1d8      	bne.n	14582 <next_sense_cond_call_handler+0x36>
            call_handler(pin, trigger);
   145d0:	4629      	mov	r1, r5
   145d2:	4620      	mov	r0, r4
   145d4:	f7ff ffa4 	bl	14520 <call_handler>
}
   145d8:	e7d5      	b.n	14586 <next_sense_cond_call_handler+0x3a>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   145da:	2d02      	cmp	r5, #2
   145dc:	d1d3      	bne.n	14586 <next_sense_cond_call_handler+0x3a>
   145de:	e7f7      	b.n	145d0 <next_sense_cond_call_handler+0x84>
   145e0:	40842500 	.word	0x40842500

000145e4 <latch_pending_read_and_check>:

#if defined(NRF_GPIO_LATCH_PRESENT)
static bool latch_pending_read_and_check(uint32_t * latch)
{
   145e4:	b410      	push	{r4}
    for (i = start_port; i < (start_port + length); i++)
   145e6:	4604      	mov	r4, r0
   145e8:	2300      	movs	r3, #0
   145ea:	b933      	cbnz	r3, 145fa <latch_pending_read_and_check+0x16>
        *p_masks = gpio_regs[i]->LATCH;
   145ec:	4a09      	ldr	r2, [pc, #36]	; (14614 <latch_pending_read_and_check+0x30>)
   145ee:	6a11      	ldr	r1, [r2, #32]
   145f0:	f844 1b04 	str.w	r1, [r4], #4
        gpio_regs[i]->LATCH = *p_masks;
   145f4:	6211      	str	r1, [r2, #32]
    for (i = start_port; i < (start_port + length); i++)
   145f6:	3301      	adds	r3, #1
   145f8:	e7f7      	b.n	145ea <latch_pending_read_and_check+0x6>
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   145fa:	2300      	movs	r3, #0
   145fc:	b113      	cbz	r3, 14604 <latch_pending_read_and_check+0x20>
             * before or during the interrupt processing. Therefore event-processing loop
             * should be executed again. */
            return true;
        }
    }
    return false;
   145fe:	2000      	movs	r0, #0
}
   14600:	bc10      	pop	{r4}
   14602:	4770      	bx	lr
        if (latch[port_idx])
   14604:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
   14608:	b90a      	cbnz	r2, 1460e <latch_pending_read_and_check+0x2a>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1460a:	3301      	adds	r3, #1
   1460c:	e7f6      	b.n	145fc <latch_pending_read_and_check+0x18>
            return true;
   1460e:	2001      	movs	r0, #1
   14610:	e7f6      	b.n	14600 <latch_pending_read_and_check+0x1c>
   14612:	bf00      	nop
   14614:	40842500 	.word	0x40842500

00014618 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   14618:	f100 0208 	add.w	r2, r0, #8
   1461c:	4b0e      	ldr	r3, [pc, #56]	; (14658 <release_handler+0x40>)
   1461e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   14622:	f413 7f80 	tst.w	r3, #256	; 0x100
   14626:	d016      	beq.n	14656 <release_handler+0x3e>
{
   14628:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1462a:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1462e:	4610      	mov	r0, r2
   14630:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   14634:	4a08      	ldr	r2, [pc, #32]	; (14658 <release_handler+0x40>)
   14636:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   1463a:	4620      	mov	r0, r4
   1463c:	f7ff ff30 	bl	144a0 <handler_in_use>
   14640:	b100      	cbz	r0, 14644 <release_handler+0x2c>
}
   14642:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   14644:	4804      	ldr	r0, [pc, #16]	; (14658 <release_handler+0x40>)
   14646:	2300      	movs	r3, #0
   14648:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1464c:	4621      	mov	r1, r4
   1464e:	3054      	adds	r0, #84	; 0x54
   14650:	f7ff fdd4 	bl	141fc <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   14654:	e7f5      	b.n	14642 <release_handler+0x2a>
   14656:	4770      	bx	lr
   14658:	2000c524 	.word	0x2000c524

0001465c <pin_handler_trigger_uninit>:
{
   1465c:	b510      	push	{r4, lr}
   1465e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   14660:	f7ff fef6 	bl	14450 <pin_in_use_by_te>
   14664:	b150      	cbz	r0, 1467c <pin_handler_trigger_uninit+0x20>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   14666:	4620      	mov	r0, r4
   14668:	f7ff ff12 	bl	14490 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1466c:	4b08      	ldr	r3, [pc, #32]	; (14690 <pin_handler_trigger_uninit+0x34>)
   1466e:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   14672:	2200      	movs	r2, #0
   14674:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   14678:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   1467c:	4620      	mov	r0, r4
   1467e:	f7ff ffcb 	bl	14618 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   14682:	3408      	adds	r4, #8
   14684:	4b03      	ldr	r3, [pc, #12]	; (14694 <pin_handler_trigger_uninit+0x38>)
   14686:	2200      	movs	r2, #0
   14688:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   1468c:	bd10      	pop	{r4, pc}
   1468e:	bf00      	nop
   14690:	40031000 	.word	0x40031000
   14694:	2000c524 	.word	0x2000c524

00014698 <pin_handler_set>:
{
   14698:	b570      	push	{r4, r5, r6, lr}
   1469a:	b082      	sub	sp, #8
   1469c:	4606      	mov	r6, r0
   1469e:	460c      	mov	r4, r1
   146a0:	4615      	mov	r5, r2
    release_handler(pin);
   146a2:	f7ff ffb9 	bl	14618 <release_handler>
    if (!handler)
   146a6:	b324      	cbz	r4, 146f2 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   146a8:	4629      	mov	r1, r5
   146aa:	4620      	mov	r0, r4
   146ac:	f7ff ff12 	bl	144d4 <find_handler>
    if (handler_id < 0)
   146b0:	1e03      	subs	r3, r0, #0
   146b2:	db13      	blt.n	146dc <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   146b4:	4a10      	ldr	r2, [pc, #64]	; (146f8 <pin_handler_set+0x60>)
   146b6:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   146ba:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   146be:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   146c0:	025b      	lsls	r3, r3, #9
   146c2:	b29b      	uxth	r3, r3
   146c4:	f106 0008 	add.w	r0, r6, #8
   146c8:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
   146cc:	430b      	orrs	r3, r1
   146ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   146d2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
   146d6:	4809      	ldr	r0, [pc, #36]	; (146fc <pin_handler_set+0x64>)
}
   146d8:	b002      	add	sp, #8
   146da:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   146dc:	f10d 0107 	add.w	r1, sp, #7
   146e0:	4807      	ldr	r0, [pc, #28]	; (14700 <pin_handler_set+0x68>)
   146e2:	f7ff fd6b 	bl	141bc <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   146e6:	4b05      	ldr	r3, [pc, #20]	; (146fc <pin_handler_set+0x64>)
   146e8:	4298      	cmp	r0, r3
   146ea:	d1f5      	bne.n	146d8 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   146ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
   146f0:	e7e0      	b.n	146b4 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   146f2:	4802      	ldr	r0, [pc, #8]	; (146fc <pin_handler_set+0x64>)
   146f4:	e7f0      	b.n	146d8 <pin_handler_set+0x40>
   146f6:	bf00      	nop
   146f8:	2000c524 	.word	0x2000c524
   146fc:	0bad0000 	.word	0x0bad0000
   14700:	2000c578 	.word	0x2000c578

00014704 <port_event_handle>:

static void port_event_handle(void)
{
   14704:	b5f0      	push	{r4, r5, r6, r7, lr}
   14706:	b083      	sub	sp, #12
   14708:	2300      	movs	r3, #0
   1470a:	a801      	add	r0, sp, #4
   1470c:	e005      	b.n	1471a <port_event_handle+0x16>
        *p_masks = gpio_regs[i]->LATCH;
   1470e:	4a22      	ldr	r2, [pc, #136]	; (14798 <port_event_handle+0x94>)
   14710:	6a11      	ldr	r1, [r2, #32]
   14712:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   14716:	6211      	str	r1, [r2, #32]
    for (i = start_port; i < (start_port + length); i++)
   14718:	3301      	adds	r3, #1
   1471a:	2b00      	cmp	r3, #0
   1471c:	d0f7      	beq.n	1470e <port_event_handle+0xa>
   1471e:	e036      	b.n	1478e <port_event_handle+0x8a>
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    do {
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
        {
            while (latch[i])
   14720:	ab02      	add	r3, sp, #8
   14722:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   14726:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1472a:	b328      	cbz	r0, 14778 <port_event_handle+0x74>
            {
                uint32_t pin = NRF_CTZ(latch[i]);
   1472c:	fa90 f0a0 	rbit	r0, r0
   14730:	fab0 f080 	clz	r0, r0

                /* Convert to absolute value. */
                pin += 32 * i;
   14734:	eb00 1045 	add.w	r0, r0, r5, lsl #5
                nrf_gpio_pin_sense_t sense;
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   14738:	f100 0208 	add.w	r2, r0, #8
   1473c:	4b17      	ldr	r3, [pc, #92]	; (1479c <port_event_handle+0x98>)
   1473e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   14742:	08c6      	lsrs	r6, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   14744:	f000 0307 	and.w	r3, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   14748:	af01      	add	r7, sp, #4
   1474a:	2401      	movs	r4, #1
   1474c:	fa04 f203 	lsl.w	r2, r4, r3
   14750:	5dbb      	ldrb	r3, [r7, r6]
   14752:	ea23 0302 	bic.w	r3, r3, r2
   14756:	55bb      	strb	r3, [r7, r6]
    *p_pin = pin_number & 0x1F;
   14758:	f000 071f 	and.w	r7, r0, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1475c:	4e0e      	ldr	r6, [pc, #56]	; (14798 <port_event_handle+0x94>)
   1475e:	f107 0380 	add.w	r3, r7, #128	; 0x80
   14762:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
   14766:	f3c2 4201 	ubfx	r2, r2, #16, #2
   1476a:	f3c1 0182 	ubfx	r1, r1, #2, #3
   1476e:	f7ff feed 	bl	1454c <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
   14772:	40bc      	lsls	r4, r7
   14774:	6234      	str	r4, [r6, #32]
}
   14776:	e7d3      	b.n	14720 <port_event_handle+0x1c>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   14778:	3501      	adds	r5, #1
   1477a:	2d00      	cmp	r5, #0
   1477c:	d0d0      	beq.n	14720 <port_event_handle+0x1c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1477e:	4b08      	ldr	r3, [pc, #32]	; (147a0 <port_event_handle+0x9c>)
   14780:	2200      	movs	r2, #0
   14782:	601a      	str	r2, [r3, #0]
   14784:	681b      	ldr	r3, [r3, #0]
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
   14786:	a801      	add	r0, sp, #4
   14788:	f7ff ff2c 	bl	145e4 <latch_pending_read_and_check>
   1478c:	b108      	cbz	r0, 14792 <port_event_handle+0x8e>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1478e:	2500      	movs	r5, #0
   14790:	e7f3      	b.n	1477a <port_event_handle+0x76>
}
   14792:	b003      	add	sp, #12
   14794:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14796:	bf00      	nop
   14798:	40842500 	.word	0x40842500
   1479c:	2000c524 	.word	0x2000c524
   147a0:	4003117c 	.word	0x4003117c

000147a4 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   147a4:	b538      	push	{r3, r4, r5, lr}
   147a6:	4604      	mov	r4, r0
    while (mask)
   147a8:	b1cc      	cbz	r4, 147de <gpiote_evt_handle+0x3a>
    {
        uint32_t ch = NRF_CTZ(mask);
   147aa:	fa94 f3a4 	rbit	r3, r4
   147ae:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   147b2:	2201      	movs	r2, #1
   147b4:	409a      	lsls	r2, r3
   147b6:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   147ba:	4a09      	ldr	r2, [pc, #36]	; (147e0 <gpiote_evt_handle+0x3c>)
   147bc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   147c0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   147c4:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   147c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   147cc:	f3c0 4001 	ubfx	r0, r0, #16, #2
   147d0:	f004 f960 	bl	18a94 <gpiote_polarity_to_trigger>
   147d4:	4601      	mov	r1, r0
   147d6:	4628      	mov	r0, r5
   147d8:	f7ff fea2 	bl	14520 <call_handler>
   147dc:	e7e4      	b.n	147a8 <gpiote_evt_handle+0x4>
    }
}
   147de:	bd38      	pop	{r3, r4, r5, pc}
   147e0:	40031000 	.word	0x40031000

000147e4 <nrfx_gpiote_input_configure>:
{
   147e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   147e8:	4604      	mov	r4, r0
   147ea:	4615      	mov	r5, r2
   147ec:	461e      	mov	r6, r3
    if (p_input_config)
   147ee:	b341      	cbz	r1, 14842 <nrfx_gpiote_input_configure+0x5e>
   147f0:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   147f2:	f004 f939 	bl	18a68 <pin_is_task_output>
   147f6:	2800      	cmp	r0, #0
   147f8:	f040 8093 	bne.w	14922 <nrfx_gpiote_input_configure+0x13e>
    *p_pin = pin_number & 0x1F;
   147fc:	f004 021f 	and.w	r2, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14800:	f102 0180 	add.w	r1, r2, #128	; 0x80
   14804:	4b4b      	ldr	r3, [pc, #300]	; (14934 <nrfx_gpiote_input_configure+0x150>)
   14806:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1480a:	2f00      	cmp	r7, #0
   1480c:	d03a      	beq.n	14884 <nrfx_gpiote_input_configure+0xa0>
   1480e:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   14810:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
   14814:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   14818:	2f00      	cmp	r7, #0
   1481a:	d035      	beq.n	14888 <nrfx_gpiote_input_configure+0xa4>
   1481c:	7839      	ldrb	r1, [r7, #0]
   1481e:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14820:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   14822:	3280      	adds	r2, #128	; 0x80
   14824:	4943      	ldr	r1, [pc, #268]	; (14934 <nrfx_gpiote_input_configure+0x150>)
   14826:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1482a:	4a43      	ldr	r2, [pc, #268]	; (14938 <nrfx_gpiote_input_configure+0x154>)
   1482c:	f104 0108 	add.w	r1, r4, #8
   14830:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   14834:	f023 0302 	bic.w	r3, r3, #2
   14838:	b29b      	uxth	r3, r3
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1483a:	f043 0301 	orr.w	r3, r3, #1
   1483e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   14842:	b1b5      	cbz	r5, 14872 <nrfx_gpiote_input_configure+0x8e>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   14844:	f895 8000 	ldrb.w	r8, [r5]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   14848:	f8d5 9004 	ldr.w	r9, [r5, #4]
        if (pin_is_output(pin))
   1484c:	4620      	mov	r0, r4
   1484e:	f7ff fe15 	bl	1447c <pin_is_output>
   14852:	b1d8      	cbz	r0, 1488c <nrfx_gpiote_input_configure+0xa8>
            if (use_evt)
   14854:	f1b9 0f00 	cmp.w	r9, #0
   14858:	d165      	bne.n	14926 <nrfx_gpiote_input_configure+0x142>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1485a:	4b37      	ldr	r3, [pc, #220]	; (14938 <nrfx_gpiote_input_configure+0x154>)
   1485c:	f104 0208 	add.w	r2, r4, #8
   14860:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   14864:	f020 001c 	bic.w	r0, r0, #28
   14868:	b280      	uxth	r0, r0
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1486a:	ea40 0088 	orr.w	r0, r0, r8, lsl #2
   1486e:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
    if (p_handler_config)
   14872:	2e00      	cmp	r6, #0
   14874:	d05b      	beq.n	1492e <nrfx_gpiote_input_configure+0x14a>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   14876:	6872      	ldr	r2, [r6, #4]
   14878:	6831      	ldr	r1, [r6, #0]
   1487a:	4620      	mov	r0, r4
   1487c:	f7ff ff0c 	bl	14698 <pin_handler_set>
}
   14880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   14884:	2100      	movs	r1, #0
   14886:	e7c3      	b.n	14810 <nrfx_gpiote_input_configure+0x2c>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   14888:	2100      	movs	r1, #0
   1488a:	e7c9      	b.n	14820 <nrfx_gpiote_input_configure+0x3c>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1488c:	4b2a      	ldr	r3, [pc, #168]	; (14938 <nrfx_gpiote_input_configure+0x154>)
   1488e:	f104 0208 	add.w	r2, r4, #8
   14892:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
   14896:	f027 0720 	bic.w	r7, r7, #32
   1489a:	04ff      	lsls	r7, r7, #19
   1489c:	0cff      	lsrs	r7, r7, #19
   1489e:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
            if (use_evt)
   148a2:	f1b9 0f00 	cmp.w	r9, #0
   148a6:	d0d8      	beq.n	1485a <nrfx_gpiote_input_configure+0x76>
                if (!edge)
   148a8:	f1b8 0f03 	cmp.w	r8, #3
   148ac:	d83d      	bhi.n	1492a <nrfx_gpiote_input_configure+0x146>
                uint8_t ch = *p_trigger_config->p_in_channel;
   148ae:	686b      	ldr	r3, [r5, #4]
   148b0:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   148b2:	f1b8 0f00 	cmp.w	r8, #0
   148b6:	d108      	bne.n	148ca <nrfx_gpiote_input_configure+0xe6>
    p_reg->CONFIG[idx] = 0;
   148b8:	4b20      	ldr	r3, [pc, #128]	; (1493c <nrfx_gpiote_input_configure+0x158>)
   148ba:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   148be:	2200      	movs	r2, #0
   148c0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    p_reg->CONFIG[idx] = 0;
   148c4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#endif
}
   148c8:	e7c7      	b.n	1485a <nrfx_gpiote_input_configure+0x76>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   148ca:	4640      	mov	r0, r8
   148cc:	f004 f8e3 	bl	18a96 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   148d0:	4b1a      	ldr	r3, [pc, #104]	; (1493c <nrfx_gpiote_input_configure+0x158>)
   148d2:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   148d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   148da:	f021 0103 	bic.w	r1, r1, #3
   148de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   148e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   148e6:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
   148ea:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   148ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   148f2:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
   148f6:	0221      	lsls	r1, r4, #8
   148f8:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   148fc:	0400      	lsls	r0, r0, #16
   148fe:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14902:	4301      	orrs	r1, r0
   14904:	ea4c 0101 	orr.w	r1, ip, r1
   14908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1490c:	036d      	lsls	r5, r5, #13
   1490e:	b2ad      	uxth	r5, r5
   14910:	f104 0308 	add.w	r3, r4, #8
   14914:	432f      	orrs	r7, r5
   14916:	f047 0720 	orr.w	r7, r7, #32
   1491a:	4a07      	ldr	r2, [pc, #28]	; (14938 <nrfx_gpiote_input_configure+0x154>)
   1491c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
   14920:	e79b      	b.n	1485a <nrfx_gpiote_input_configure+0x76>
            return NRFX_ERROR_INVALID_PARAM;
   14922:	4807      	ldr	r0, [pc, #28]	; (14940 <nrfx_gpiote_input_configure+0x15c>)
   14924:	e7ac      	b.n	14880 <nrfx_gpiote_input_configure+0x9c>
                return NRFX_ERROR_INVALID_PARAM;
   14926:	4806      	ldr	r0, [pc, #24]	; (14940 <nrfx_gpiote_input_configure+0x15c>)
   14928:	e7aa      	b.n	14880 <nrfx_gpiote_input_configure+0x9c>
                    return NRFX_ERROR_INVALID_PARAM;
   1492a:	4805      	ldr	r0, [pc, #20]	; (14940 <nrfx_gpiote_input_configure+0x15c>)
   1492c:	e7a8      	b.n	14880 <nrfx_gpiote_input_configure+0x9c>
        err = NRFX_SUCCESS;
   1492e:	4805      	ldr	r0, [pc, #20]	; (14944 <nrfx_gpiote_input_configure+0x160>)
   14930:	e7a6      	b.n	14880 <nrfx_gpiote_input_configure+0x9c>
   14932:	bf00      	nop
   14934:	40842500 	.word	0x40842500
   14938:	2000c524 	.word	0x2000c524
   1493c:	40031000 	.word	0x40031000
   14940:	0bad0004 	.word	0x0bad0004
   14944:	0bad0000 	.word	0x0bad0000

00014948 <nrfx_gpiote_output_configure>:
{
   14948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1494a:	4604      	mov	r4, r0
   1494c:	4616      	mov	r6, r2
    if (p_config)
   1494e:	2900      	cmp	r1, #0
   14950:	d04a      	beq.n	149e8 <nrfx_gpiote_output_configure+0xa0>
   14952:	460d      	mov	r5, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   14954:	f004 f897 	bl	18a86 <pin_is_input>
   14958:	b128      	cbz	r0, 14966 <nrfx_gpiote_output_configure+0x1e>
   1495a:	4620      	mov	r0, r4
   1495c:	f7ff fd78 	bl	14450 <pin_in_use_by_te>
   14960:	2800      	cmp	r0, #0
   14962:	f040 8095 	bne.w	14a90 <nrfx_gpiote_output_configure+0x148>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   14966:	4620      	mov	r0, r4
   14968:	f7ff fd7c 	bl	14464 <pin_has_trigger>
   1496c:	b118      	cbz	r0, 14976 <nrfx_gpiote_output_configure+0x2e>
   1496e:	786b      	ldrb	r3, [r5, #1]
   14970:	2b01      	cmp	r3, #1
   14972:	f000 808f 	beq.w	14a94 <nrfx_gpiote_output_configure+0x14c>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   14976:	1ca8      	adds	r0, r5, #2
    *p_pin = pin_number & 0x1F;
   14978:	f004 021f 	and.w	r2, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1497c:	f102 0180 	add.w	r1, r2, #128	; 0x80
   14980:	4b48      	ldr	r3, [pc, #288]	; (14aa4 <nrfx_gpiote_output_configure+0x15c>)
   14982:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   14986:	1c6f      	adds	r7, r5, #1
   14988:	d074      	beq.n	14a74 <nrfx_gpiote_output_configure+0x12c>
   1498a:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1498c:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   14990:	2800      	cmp	r0, #0
   14992:	d071      	beq.n	14a78 <nrfx_gpiote_output_configure+0x130>
   14994:	f04f 0c0c 	mov.w	ip, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   14998:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1499c:	2d00      	cmp	r5, #0
   1499e:	d06e      	beq.n	14a7e <nrfx_gpiote_output_configure+0x136>
   149a0:	f44f 6ce0 	mov.w	ip, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   149a4:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   149a8:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   149ac:	2f00      	cmp	r7, #0
   149ae:	d069      	beq.n	14a84 <nrfx_gpiote_output_configure+0x13c>
   149b0:	786b      	ldrb	r3, [r5, #1]
   149b2:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   149b4:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   149b8:	2800      	cmp	r0, #0
   149ba:	d065      	beq.n	14a88 <nrfx_gpiote_output_configure+0x140>
   149bc:	78a8      	ldrb	r0, [r5, #2]
   149be:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   149c0:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   149c2:	2d00      	cmp	r5, #0
   149c4:	d062      	beq.n	14a8c <nrfx_gpiote_output_configure+0x144>
   149c6:	7828      	ldrb	r0, [r5, #0]
   149c8:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   149ca:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   149cc:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   149ce:	3280      	adds	r2, #128	; 0x80
   149d0:	4934      	ldr	r1, [pc, #208]	; (14aa4 <nrfx_gpiote_output_configure+0x15c>)
   149d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   149d6:	4a34      	ldr	r2, [pc, #208]	; (14aa8 <nrfx_gpiote_output_configure+0x160>)
   149d8:	f104 0108 	add.w	r1, r4, #8
   149dc:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   149e0:	f043 0303 	orr.w	r3, r3, #3
   149e4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   149e8:	2e00      	cmp	r6, #0
   149ea:	d055      	beq.n	14a98 <nrfx_gpiote_output_configure+0x150>
        if (pin_is_input(pin))
   149ec:	4620      	mov	r0, r4
   149ee:	f004 f84a 	bl	18a86 <pin_is_input>
   149f2:	2800      	cmp	r0, #0
   149f4:	d152      	bne.n	14a9c <nrfx_gpiote_output_configure+0x154>
        uint32_t ch = p_task_config->task_ch;
   149f6:	7832      	ldrb	r2, [r6, #0]
    p_reg->CONFIG[idx] = 0;
   149f8:	4b2c      	ldr	r3, [pc, #176]	; (14aac <nrfx_gpiote_output_configure+0x164>)
   149fa:	f502 71a2 	add.w	r1, r2, #324	; 0x144
   149fe:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    p_reg->CONFIG[idx] = 0;
   14a02:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   14a06:	4928      	ldr	r1, [pc, #160]	; (14aa8 <nrfx_gpiote_output_configure+0x160>)
   14a08:	f104 0008 	add.w	r0, r4, #8
   14a0c:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
   14a10:	f023 0320 	bic.w	r3, r3, #32
   14a14:	04db      	lsls	r3, r3, #19
   14a16:	0cdb      	lsrs	r3, r3, #19
   14a18:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   14a1c:	7871      	ldrb	r1, [r6, #1]
   14a1e:	2900      	cmp	r1, #0
   14a20:	d03e      	beq.n	14aa0 <nrfx_gpiote_output_configure+0x158>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   14a22:	f896 c002 	ldrb.w	ip, [r6, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   14a26:	4d21      	ldr	r5, [pc, #132]	; (14aac <nrfx_gpiote_output_configure+0x164>)
   14a28:	f502 76a2 	add.w	r6, r2, #324	; 0x144
   14a2c:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   14a30:	f420 1098 	bic.w	r0, r0, #1245184	; 0x130000
   14a34:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
   14a38:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14a3c:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
   14a40:	0220      	lsls	r0, r4, #8
   14a42:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   14a46:	0409      	lsls	r1, r1, #16
   14a48:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14a4c:	4301      	orrs	r1, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   14a4e:	ea4f 500c 	mov.w	r0, ip, lsl #20
   14a52:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   14a56:	4301      	orrs	r1, r0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14a58:	4339      	orrs	r1, r7
   14a5a:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   14a5e:	0352      	lsls	r2, r2, #13
   14a60:	b292      	uxth	r2, r2
   14a62:	3408      	adds	r4, #8
   14a64:	431a      	orrs	r2, r3
   14a66:	f042 0220 	orr.w	r2, r2, #32
   14a6a:	4b0f      	ldr	r3, [pc, #60]	; (14aa8 <nrfx_gpiote_output_configure+0x160>)
   14a6c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    return NRFX_SUCCESS;
   14a70:	480f      	ldr	r0, [pc, #60]	; (14ab0 <nrfx_gpiote_output_configure+0x168>)
   14a72:	e012      	b.n	14a9a <nrfx_gpiote_output_configure+0x152>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   14a74:	2300      	movs	r3, #0
   14a76:	e789      	b.n	1498c <nrfx_gpiote_output_configure+0x44>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   14a78:	f04f 0c00 	mov.w	ip, #0
   14a7c:	e78c      	b.n	14998 <nrfx_gpiote_output_configure+0x50>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   14a7e:	f04f 0c00 	mov.w	ip, #0
   14a82:	e78f      	b.n	149a4 <nrfx_gpiote_output_configure+0x5c>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   14a84:	2300      	movs	r3, #0
   14a86:	e795      	b.n	149b4 <nrfx_gpiote_output_configure+0x6c>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   14a88:	2000      	movs	r0, #0
   14a8a:	e799      	b.n	149c0 <nrfx_gpiote_output_configure+0x78>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   14a8c:	2000      	movs	r0, #0
   14a8e:	e79c      	b.n	149ca <nrfx_gpiote_output_configure+0x82>
   14a90:	4808      	ldr	r0, [pc, #32]	; (14ab4 <nrfx_gpiote_output_configure+0x16c>)
   14a92:	e002      	b.n	14a9a <nrfx_gpiote_output_configure+0x152>
   14a94:	4807      	ldr	r0, [pc, #28]	; (14ab4 <nrfx_gpiote_output_configure+0x16c>)
   14a96:	e000      	b.n	14a9a <nrfx_gpiote_output_configure+0x152>
   14a98:	4805      	ldr	r0, [pc, #20]	; (14ab0 <nrfx_gpiote_output_configure+0x168>)
}
   14a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NRFX_ERROR_INVALID_PARAM;
   14a9c:	4805      	ldr	r0, [pc, #20]	; (14ab4 <nrfx_gpiote_output_configure+0x16c>)
   14a9e:	e7fc      	b.n	14a9a <nrfx_gpiote_output_configure+0x152>
    return NRFX_SUCCESS;
   14aa0:	4803      	ldr	r0, [pc, #12]	; (14ab0 <nrfx_gpiote_output_configure+0x168>)
   14aa2:	e7fa      	b.n	14a9a <nrfx_gpiote_output_configure+0x152>
   14aa4:	40842500 	.word	0x40842500
   14aa8:	2000c524 	.word	0x2000c524
   14aac:	40031000 	.word	0x40031000
   14ab0:	0bad0000 	.word	0x0bad0000
   14ab4:	0bad0004 	.word	0x0bad0004

00014ab8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   14ab8:	4b01      	ldr	r3, [pc, #4]	; (14ac0 <nrfx_gpiote_global_callback_set+0x8>)
   14aba:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   14abc:	60d9      	str	r1, [r3, #12]
}
   14abe:	4770      	bx	lr
   14ac0:	2000c524 	.word	0x2000c524

00014ac4 <nrfx_gpiote_channel_get>:
{
   14ac4:	b538      	push	{r3, r4, r5, lr}
   14ac6:	4604      	mov	r4, r0
   14ac8:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   14aca:	f7ff fcc1 	bl	14450 <pin_in_use_by_te>
   14ace:	b140      	cbz	r0, 14ae2 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   14ad0:	f104 0008 	add.w	r0, r4, #8
   14ad4:	4b04      	ldr	r3, [pc, #16]	; (14ae8 <nrfx_gpiote_channel_get+0x24>)
   14ad6:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   14ada:	0b5b      	lsrs	r3, r3, #13
   14adc:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   14ade:	4803      	ldr	r0, [pc, #12]	; (14aec <nrfx_gpiote_channel_get+0x28>)
}
   14ae0:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   14ae2:	4803      	ldr	r0, [pc, #12]	; (14af0 <nrfx_gpiote_channel_get+0x2c>)
   14ae4:	e7fc      	b.n	14ae0 <nrfx_gpiote_channel_get+0x1c>
   14ae6:	bf00      	nop
   14ae8:	2000c524 	.word	0x2000c524
   14aec:	0bad0000 	.word	0x0bad0000
   14af0:	0bad0004 	.word	0x0bad0004

00014af4 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   14af4:	4b0f      	ldr	r3, [pc, #60]	; (14b34 <nrfx_gpiote_init+0x40>)
   14af6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
   14afa:	b10b      	cbz	r3, 14b00 <nrfx_gpiote_init+0xc>
        return err_code;
   14afc:	480e      	ldr	r0, [pc, #56]	; (14b38 <nrfx_gpiote_init+0x44>)
}
   14afe:	4770      	bx	lr
{
   14b00:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   14b02:	4c0c      	ldr	r4, [pc, #48]	; (14b34 <nrfx_gpiote_init+0x40>)
   14b04:	2240      	movs	r2, #64	; 0x40
   14b06:	2100      	movs	r1, #0
   14b08:	f104 0010 	add.w	r0, r4, #16
   14b0c:	f003 faee 	bl	180ec <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   14b10:	2031      	movs	r0, #49	; 0x31
   14b12:	f7fd fe27 	bl	12764 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14b16:	4b09      	ldr	r3, [pc, #36]	; (14b3c <nrfx_gpiote_init+0x48>)
   14b18:	2200      	movs	r2, #0
   14b1a:	601a      	str	r2, [r3, #0]
   14b1c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   14b1e:	4b08      	ldr	r3, [pc, #32]	; (14b40 <nrfx_gpiote_init+0x4c>)
   14b20:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   14b24:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   14b28:	2301      	movs	r3, #1
   14b2a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   14b2e:	6563      	str	r3, [r4, #84]	; 0x54
    return err_code;
   14b30:	4804      	ldr	r0, [pc, #16]	; (14b44 <nrfx_gpiote_init+0x50>)
}
   14b32:	bd10      	pop	{r4, pc}
   14b34:	2000c524 	.word	0x2000c524
   14b38:	0bad0005 	.word	0x0bad0005
   14b3c:	4003117c 	.word	0x4003117c
   14b40:	40031000 	.word	0x40031000
   14b44:	0bad0000 	.word	0x0bad0000

00014b48 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   14b48:	4b03      	ldr	r3, [pc, #12]	; (14b58 <nrfx_gpiote_is_init+0x10>)
   14b4a:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   14b4e:	3800      	subs	r0, #0
   14b50:	bf18      	it	ne
   14b52:	2001      	movne	r0, #1
   14b54:	4770      	bx	lr
   14b56:	bf00      	nop
   14b58:	2000c524 	.word	0x2000c524

00014b5c <nrfx_gpiote_channel_free>:
{
   14b5c:	b508      	push	{r3, lr}
   14b5e:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   14b60:	4801      	ldr	r0, [pc, #4]	; (14b68 <nrfx_gpiote_channel_free+0xc>)
   14b62:	f7ff fb4b 	bl	141fc <nrfx_flag32_free>
}
   14b66:	bd08      	pop	{r3, pc}
   14b68:	2000c574 	.word	0x2000c574

00014b6c <nrfx_gpiote_channel_alloc>:
{
   14b6c:	b508      	push	{r3, lr}
   14b6e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   14b70:	4801      	ldr	r0, [pc, #4]	; (14b78 <nrfx_gpiote_channel_alloc+0xc>)
   14b72:	f7ff fb23 	bl	141bc <nrfx_flag32_alloc>
}
   14b76:	bd08      	pop	{r3, pc}
   14b78:	2000c574 	.word	0x2000c574

00014b7c <nrfx_gpiote_trigger_enable>:
{
   14b7c:	b538      	push	{r3, r4, r5, lr}
   14b7e:	4604      	mov	r4, r0
   14b80:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   14b82:	f7ff fc65 	bl	14450 <pin_in_use_by_te>
   14b86:	b320      	cbz	r0, 14bd2 <nrfx_gpiote_trigger_enable+0x56>
   14b88:	4620      	mov	r0, r4
   14b8a:	f003 ff7c 	bl	18a86 <pin_is_input>
   14b8e:	b300      	cbz	r0, 14bd2 <nrfx_gpiote_trigger_enable+0x56>
        uint8_t ch = pin_te_get(pin);
   14b90:	4620      	mov	r0, r4
   14b92:	f7ff fc7d 	bl	14490 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   14b96:	0083      	lsls	r3, r0, #2
   14b98:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
   14b9c:	b29b      	uxth	r3, r3
   14b9e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14ba2:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14ba6:	2200      	movs	r2, #0
   14ba8:	601a      	str	r2, [r3, #0]
   14baa:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   14bac:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   14bb0:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   14bb4:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   14bb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   14bbc:	f043 0301 	orr.w	r3, r3, #1
   14bc0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   14bc4:	b345      	cbz	r5, 14c18 <nrfx_gpiote_trigger_enable+0x9c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   14bc6:	2301      	movs	r3, #1
   14bc8:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
   14bcc:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
   14bd0:	e022      	b.n	14c18 <nrfx_gpiote_trigger_enable+0x9c>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   14bd2:	f104 0308 	add.w	r3, r4, #8
   14bd6:	4a13      	ldr	r2, [pc, #76]	; (14c24 <nrfx_gpiote_trigger_enable+0xa8>)
   14bd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   14bdc:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   14be0:	2b04      	cmp	r3, #4
   14be2:	d00c      	beq.n	14bfe <nrfx_gpiote_trigger_enable+0x82>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   14be4:	2b05      	cmp	r3, #5
   14be6:	d018      	beq.n	14c1a <nrfx_gpiote_trigger_enable+0x9e>
    *p_pin = pin_number & 0x1F;
   14be8:	f004 031f 	and.w	r3, r4, #31
    return p_reg->IN;
   14bec:	4a0e      	ldr	r2, [pc, #56]	; (14c28 <nrfx_gpiote_trigger_enable+0xac>)
   14bee:	6912      	ldr	r2, [r2, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   14bf0:	fa22 f303 	lsr.w	r3, r2, r3
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   14bf4:	f013 0f01 	tst.w	r3, #1
   14bf8:	d011      	beq.n	14c1e <nrfx_gpiote_trigger_enable+0xa2>
   14bfa:	2103      	movs	r1, #3
   14bfc:	e000      	b.n	14c00 <nrfx_gpiote_trigger_enable+0x84>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   14bfe:	2103      	movs	r1, #3
    *p_pin = pin_number & 0x1F;
   14c00:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14c04:	4a08      	ldr	r2, [pc, #32]	; (14c28 <nrfx_gpiote_trigger_enable+0xac>)
   14c06:	3480      	adds	r4, #128	; 0x80
   14c08:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
   14c0c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14c10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   14c14:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
   14c18:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   14c1a:	2102      	movs	r1, #2
   14c1c:	e7f0      	b.n	14c00 <nrfx_gpiote_trigger_enable+0x84>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   14c1e:	2102      	movs	r1, #2
   14c20:	e7ee      	b.n	14c00 <nrfx_gpiote_trigger_enable+0x84>
   14c22:	bf00      	nop
   14c24:	2000c524 	.word	0x2000c524
   14c28:	40842500 	.word	0x40842500

00014c2c <nrfx_gpiote_trigger_disable>:
{
   14c2c:	b510      	push	{r4, lr}
   14c2e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   14c30:	f7ff fc0e 	bl	14450 <pin_in_use_by_te>
   14c34:	b1a0      	cbz	r0, 14c60 <nrfx_gpiote_trigger_disable+0x34>
   14c36:	4620      	mov	r0, r4
   14c38:	f003 ff25 	bl	18a86 <pin_is_input>
   14c3c:	b180      	cbz	r0, 14c60 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   14c3e:	4620      	mov	r0, r4
   14c40:	f7ff fc26 	bl	14490 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   14c44:	2201      	movs	r2, #1
   14c46:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   14c48:	4b0b      	ldr	r3, [pc, #44]	; (14c78 <nrfx_gpiote_trigger_disable+0x4c>)
   14c4a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   14c4e:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   14c52:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   14c56:	f022 0203 	bic.w	r2, r2, #3
   14c5a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   14c5e:	e009      	b.n	14c74 <nrfx_gpiote_trigger_disable+0x48>
    *p_pin = pin_number & 0x1F;
   14c60:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14c64:	4a05      	ldr	r2, [pc, #20]	; (14c7c <nrfx_gpiote_trigger_disable+0x50>)
   14c66:	3480      	adds	r4, #128	; 0x80
   14c68:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
   14c6c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   14c70:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
   14c74:	bd10      	pop	{r4, pc}
   14c76:	bf00      	nop
   14c78:	40031000 	.word	0x40031000
   14c7c:	40842500 	.word	0x40842500

00014c80 <nrfx_gpiote_pin_uninit>:
{
   14c80:	b510      	push	{r4, lr}
   14c82:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   14c84:	f7ff fbda 	bl	1443c <pin_in_use>
   14c88:	b908      	cbnz	r0, 14c8e <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   14c8a:	4808      	ldr	r0, [pc, #32]	; (14cac <nrfx_gpiote_pin_uninit+0x2c>)
}
   14c8c:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   14c8e:	4620      	mov	r0, r4
   14c90:	f7ff ffcc 	bl	14c2c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   14c94:	4620      	mov	r0, r4
   14c96:	f7ff fce1 	bl	1465c <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
   14c9a:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
   14c9e:	3480      	adds	r4, #128	; 0x80
   14ca0:	4b03      	ldr	r3, [pc, #12]	; (14cb0 <nrfx_gpiote_pin_uninit+0x30>)
   14ca2:	2202      	movs	r2, #2
   14ca4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    return NRFX_SUCCESS;
   14ca8:	4802      	ldr	r0, [pc, #8]	; (14cb4 <nrfx_gpiote_pin_uninit+0x34>)
   14caa:	e7ef      	b.n	14c8c <nrfx_gpiote_pin_uninit+0xc>
   14cac:	0bad0004 	.word	0x0bad0004
   14cb0:	40842500 	.word	0x40842500
   14cb4:	0bad0000 	.word	0x0bad0000

00014cb8 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   14cb8:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   14cba:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   14cbc:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   14cc0:	2100      	movs	r1, #0
    uint32_t status = 0;
   14cc2:	460d      	mov	r5, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   14cc4:	e003      	b.n	14cce <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   14cc6:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   14cc8:	3304      	adds	r3, #4
   14cca:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   14ccc:	3101      	adds	r1, #1
   14cce:	2907      	cmp	r1, #7
   14cd0:	d814      	bhi.n	14cfc <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14cd2:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   14cd6:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   14cda:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   14cdc:	2a00      	cmp	r2, #0
   14cde:	d0f2      	beq.n	14cc6 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   14ce0:	4a0b      	ldr	r2, [pc, #44]	; (14d10 <nrfx_gpiote_irq_handler+0x58>)
   14ce2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   14ce6:	4210      	tst	r0, r2
   14ce8:	d0ed      	beq.n	14cc6 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   14cea:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   14cee:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14cf2:	2400      	movs	r4, #0
   14cf4:	6014      	str	r4, [r2, #0]
   14cf6:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   14cf8:	4305      	orrs	r5, r0
   14cfa:	e7e4      	b.n	14cc6 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14cfc:	4b05      	ldr	r3, [pc, #20]	; (14d14 <nrfx_gpiote_irq_handler+0x5c>)
   14cfe:	681b      	ldr	r3, [r3, #0]
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   14d00:	b91b      	cbnz	r3, 14d0a <nrfx_gpiote_irq_handler+0x52>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   14d02:	4628      	mov	r0, r5
   14d04:	f7ff fd4e 	bl	147a4 <gpiote_evt_handle>
}
   14d08:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   14d0a:	f7ff fcfb 	bl	14704 <port_event_handle>
   14d0e:	e7f8      	b.n	14d02 <nrfx_gpiote_irq_handler+0x4a>
   14d10:	40031000 	.word	0x40031000
   14d14:	4003117c 	.word	0x4003117c

00014d18 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   14d18:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(handler);
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   14d1a:	4b08      	ldr	r3, [pc, #32]	; (14d3c <nrfx_ipc_init+0x24>)
   14d1c:	791b      	ldrb	r3, [r3, #4]
   14d1e:	b10b      	cbz	r3, 14d24 <nrfx_ipc_init+0xc>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
   14d20:	4807      	ldr	r0, [pc, #28]	; (14d40 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
}
   14d22:	bd38      	pop	{r3, r4, r5, pc}
   14d24:	460d      	mov	r5, r1
   14d26:	4614      	mov	r4, r2
    NRFX_IRQ_ENABLE(IPC_IRQn);
   14d28:	202a      	movs	r0, #42	; 0x2a
   14d2a:	f7fd fd1b 	bl	12764 <arch_irq_enable>
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   14d2e:	4b03      	ldr	r3, [pc, #12]	; (14d3c <nrfx_ipc_init+0x24>)
   14d30:	2201      	movs	r2, #1
   14d32:	711a      	strb	r2, [r3, #4]
    m_ipc_cb.handler = handler;
   14d34:	601d      	str	r5, [r3, #0]
    m_ipc_cb.p_context = p_context;
   14d36:	609c      	str	r4, [r3, #8]
    return NRFX_SUCCESS;
   14d38:	4802      	ldr	r0, [pc, #8]	; (14d44 <nrfx_ipc_init+0x2c>)
   14d3a:	e7f2      	b.n	14d22 <nrfx_ipc_init+0xa>
   14d3c:	2000c960 	.word	0x2000c960
   14d40:	0bad000c 	.word	0x0bad000c
   14d44:	0bad0000 	.word	0x0bad0000

00014d48 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   14d48:	b410      	push	{r4}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   14d4a:	2300      	movs	r3, #0
   14d4c:	e008      	b.n	14d60 <nrfx_ipc_config_load+0x18>
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   14d4e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   14d52:	b2da      	uxtb	r2, r3
   14d54:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   14d58:	490d      	ldr	r1, [pc, #52]	; (14d90 <nrfx_ipc_config_load+0x48>)
   14d5a:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
    for (i = 0; i < IPC_CONF_NUM; ++i)
   14d5e:	3301      	adds	r3, #1
   14d60:	2b07      	cmp	r3, #7
   14d62:	d9f4      	bls.n	14d4e <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   14d64:	2300      	movs	r3, #0
   14d66:	e00a      	b.n	14d7e <nrfx_ipc_config_load+0x36>
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   14d68:	f103 0208 	add.w	r2, r3, #8
   14d6c:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   14d70:	b2da      	uxtb	r2, r3
   14d72:	f502 72b2 	add.w	r2, r2, #356	; 0x164
   14d76:	4906      	ldr	r1, [pc, #24]	; (14d90 <nrfx_ipc_config_load+0x48>)
   14d78:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
    for (i = 0; i < IPC_CONF_NUM; ++i)
   14d7c:	3301      	adds	r3, #1
   14d7e:	2b07      	cmp	r3, #7
   14d80:	d9f2      	bls.n	14d68 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   14d82:	6c02      	ldr	r2, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
   14d84:	4b02      	ldr	r3, [pc, #8]	; (14d90 <nrfx_ipc_config_load+0x48>)
   14d86:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   14d8a:	bc10      	pop	{r4}
   14d8c:	4770      	bx	lr
   14d8e:	bf00      	nop
   14d90:	4002a000 	.word	0x4002a000

00014d94 <nrfx_ipc_uninit>:
void nrfx_ipc_uninit(void)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   14d94:	2300      	movs	r3, #0
   14d96:	e007      	b.n	14da8 <nrfx_ipc_uninit+0x14>
    p_reg->SEND_CNF[index] = channels_mask;
   14d98:	b2da      	uxtb	r2, r3
   14d9a:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   14d9e:	490e      	ldr	r1, [pc, #56]	; (14dd8 <nrfx_ipc_uninit+0x44>)
   14da0:	2000      	movs	r0, #0
   14da2:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   14da6:	3301      	adds	r3, #1
   14da8:	2b07      	cmp	r3, #7
   14daa:	d9f5      	bls.n	14d98 <nrfx_ipc_uninit+0x4>
    {
        nrf_ipc_send_config_set(NRF_IPC, i, 0);
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   14dac:	2300      	movs	r3, #0
   14dae:	e007      	b.n	14dc0 <nrfx_ipc_uninit+0x2c>
    p_reg->RECEIVE_CNF[index] = channels_mask;
   14db0:	b2da      	uxtb	r2, r3
   14db2:	f502 72b2 	add.w	r2, r2, #356	; 0x164
   14db6:	4908      	ldr	r1, [pc, #32]	; (14dd8 <nrfx_ipc_uninit+0x44>)
   14db8:	2000      	movs	r0, #0
   14dba:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   14dbe:	3301      	adds	r3, #1
   14dc0:	2b07      	cmp	r3, #7
   14dc2:	d9f5      	bls.n	14db0 <nrfx_ipc_uninit+0x1c>
    p_reg->INTENCLR = mask;
   14dc4:	4b04      	ldr	r3, [pc, #16]	; (14dd8 <nrfx_ipc_uninit+0x44>)
   14dc6:	f04f 32ff 	mov.w	r2, #4294967295
   14dca:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   14dce:	4b03      	ldr	r3, [pc, #12]	; (14ddc <nrfx_ipc_uninit+0x48>)
   14dd0:	2200      	movs	r2, #0
   14dd2:	711a      	strb	r2, [r3, #4]
}
   14dd4:	4770      	bx	lr
   14dd6:	bf00      	nop
   14dd8:	4002a000 	.word	0x4002a000
   14ddc:	2000c960 	.word	0x2000c960

00014de0 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   14de0:	b508      	push	{r3, lr}
    return p_reg->INTPEND;
   14de2:	4b0c      	ldr	r3, [pc, #48]	; (14e14 <nrfx_ipc_irq_handler+0x34>)
   14de4:	f8d3 030c 	ldr.w	r0, [r3, #780]	; 0x30c
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
   14de8:	4602      	mov	r2, r0
    while (bitmask)
   14dea:	b16a      	cbz	r2, 14e08 <nrfx_ipc_irq_handler+0x28>
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   14dec:	fa92 f3a2 	rbit	r3, r2
   14df0:	fab3 f383 	clz	r3, r3
   14df4:	2101      	movs	r1, #1
   14df6:	4099      	lsls	r1, r3
   14df8:	ea22 0201 	bic.w	r2, r2, r1
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   14dfc:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14dfe:	4906      	ldr	r1, [pc, #24]	; (14e18 <nrfx_ipc_irq_handler+0x38>)
   14e00:	4419      	add	r1, r3
   14e02:	2300      	movs	r3, #0
   14e04:	600b      	str	r3, [r1, #0]
}
   14e06:	e7f0      	b.n	14dea <nrfx_ipc_irq_handler+0xa>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   14e08:	4b04      	ldr	r3, [pc, #16]	; (14e1c <nrfx_ipc_irq_handler+0x3c>)
   14e0a:	681a      	ldr	r2, [r3, #0]
   14e0c:	6899      	ldr	r1, [r3, #8]
   14e0e:	4790      	blx	r2
}
   14e10:	bd08      	pop	{r3, pc}
   14e12:	bf00      	nop
   14e14:	4002a000 	.word	0x4002a000
   14e18:	4002a100 	.word	0x4002a100
   14e1c:	2000c960 	.word	0x2000c960

00014e20 <rpc_handle_data_message>:
   14e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14e24:	4680      	mov	r8, r0
   14e26:	4604      	mov	r4, r0
   14e28:	2700      	movs	r7, #0
   14e2a:	f858 6b08 	ldr.w	r6, [r8], #8
   14e2e:	4d0c      	ldr	r5, [pc, #48]	; (14e60 <rpc_handle_data_message+0x40>)
   14e30:	b2f6      	uxtb	r6, r6
   14e32:	782b      	ldrb	r3, [r5, #0]
   14e34:	42b3      	cmp	r3, r6
   14e36:	d00a      	beq.n	14e4e <rpc_handle_data_message+0x2e>
   14e38:	3701      	adds	r7, #1
   14e3a:	2f04      	cmp	r7, #4
   14e3c:	f105 050c 	add.w	r5, r5, #12
   14e40:	d1f7      	bne.n	14e32 <rpc_handle_data_message+0x12>
   14e42:	68a0      	ldr	r0, [r4, #8]
   14e44:	b150      	cbz	r0, 14e5c <rpc_handle_data_message+0x3c>
   14e46:	f003 fe6e 	bl	18b26 <rpc_transport_peer_data_free>
   14e4a:	2000      	movs	r0, #0
   14e4c:	e006      	b.n	14e5c <rpc_handle_data_message+0x3c>
   14e4e:	6821      	ldr	r1, [r4, #0]
   14e50:	4640      	mov	r0, r8
   14e52:	686b      	ldr	r3, [r5, #4]
   14e54:	0c09      	lsrs	r1, r1, #16
   14e56:	4798      	blx	r3
   14e58:	2802      	cmp	r0, #2
   14e5a:	d0ed      	beq.n	14e38 <rpc_handle_data_message+0x18>
   14e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14e60:	0001978c 	.word	0x0001978c

00014e64 <trace_write>:
   14e64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e68:	4f53      	ldr	r7, [pc, #332]	; (14fb8 <trace_write+0x154>)
   14e6a:	4605      	mov	r5, r0
   14e6c:	2100      	movs	r1, #0
   14e6e:	6838      	ldr	r0, [r7, #0]
   14e70:	f003 fd86 	bl	18980 <nrf_modem_os_sem_take>
   14e74:	4604      	mov	r4, r0
   14e76:	2800      	cmp	r0, #0
   14e78:	d14c      	bne.n	14f14 <trace_write+0xb0>
   14e7a:	782b      	ldrb	r3, [r5, #0]
   14e7c:	f8d5 8008 	ldr.w	r8, [r5, #8]
   14e80:	2b62      	cmp	r3, #98	; 0x62
   14e82:	d043      	beq.n	14f0c <trace_write+0xa8>
   14e84:	2b63      	cmp	r3, #99	; 0x63
   14e86:	d043      	beq.n	14f10 <trace_write+0xac>
   14e88:	2b61      	cmp	r3, #97	; 0x61
   14e8a:	d102      	bne.n	14e92 <trace_write+0x2e>
   14e8c:	4b4b      	ldr	r3, [pc, #300]	; (14fbc <trace_write+0x158>)
   14e8e:	881c      	ldrh	r4, [r3, #0]
   14e90:	b2a4      	uxth	r4, r4
   14e92:	6838      	ldr	r0, [r7, #0]
   14e94:	f003 fd70 	bl	18978 <nrf_modem_os_sem_give>
   14e98:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   14e9c:	6929      	ldr	r1, [r5, #16]
   14e9e:	eba8 080a 	sub.w	r8, r8, sl
   14ea2:	eba1 030a 	sub.w	r3, r1, sl
   14ea6:	b29b      	uxth	r3, r3
   14ea8:	fa14 f488 	uxtah	r4, r4, r8
   14eac:	fbb4 f2f3 	udiv	r2, r4, r3
   14eb0:	fb03 4412 	mls	r4, r3, r2, r4
   14eb4:	686a      	ldr	r2, [r5, #4]
   14eb6:	eba2 020a 	sub.w	r2, r2, sl
   14eba:	fa13 f282 	uxtah	r2, r3, r2
   14ebe:	1b12      	subs	r2, r2, r4
   14ec0:	fb92 f0f3 	sdiv	r0, r2, r3
   14ec4:	fb03 2210 	mls	r2, r3, r0, r2
   14ec8:	fa1f f982 	uxth.w	r9, r2
   14ecc:	fa14 f282 	uxtah	r2, r4, r2
   14ed0:	4293      	cmp	r3, r2
   14ed2:	44a2      	add	sl, r4
   14ed4:	da22      	bge.n	14f1c <trace_write+0xb8>
   14ed6:	eba1 030a 	sub.w	r3, r1, sl
   14eda:	b29b      	uxth	r3, r3
   14edc:	eba9 0403 	sub.w	r4, r9, r3
   14ee0:	4699      	mov	r9, r3
   14ee2:	b2a4      	uxth	r4, r4
   14ee4:	f1b9 0f00 	cmp.w	r9, #0
   14ee8:	d064      	beq.n	14fb4 <trace_write+0x150>
   14eea:	2005      	movs	r0, #5
   14eec:	f7ff f8c8 	bl	14080 <nrf_modem_os_alloc>
   14ef0:	4680      	mov	r8, r0
   14ef2:	2800      	cmp	r0, #0
   14ef4:	d05e      	beq.n	14fb4 <trace_write+0x150>
   14ef6:	b19c      	cbz	r4, 14f20 <trace_write+0xbc>
   14ef8:	2005      	movs	r0, #5
   14efa:	f7ff f8c1 	bl	14080 <nrf_modem_os_alloc>
   14efe:	4606      	mov	r6, r0
   14f00:	b970      	cbnz	r0, 14f20 <trace_write+0xbc>
   14f02:	4640      	mov	r0, r8
   14f04:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f08:	f7ff b8c4 	b.w	14094 <nrf_modem_os_free>
   14f0c:	4b2c      	ldr	r3, [pc, #176]	; (14fc0 <trace_write+0x15c>)
   14f0e:	e7be      	b.n	14e8e <trace_write+0x2a>
   14f10:	4b2c      	ldr	r3, [pc, #176]	; (14fc4 <trace_write+0x160>)
   14f12:	e7bc      	b.n	14e8e <trace_write+0x2a>
   14f14:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f18:	f7ff b8a2 	b.w	14060 <nrf_modem_os_trace_irq_set>
   14f1c:	2400      	movs	r4, #0
   14f1e:	e7e1      	b.n	14ee4 <trace_write+0x80>
   14f20:	2100      	movs	r1, #0
   14f22:	6838      	ldr	r0, [r7, #0]
   14f24:	f003 fd2c 	bl	18980 <nrf_modem_os_sem_take>
   14f28:	b140      	cbz	r0, 14f3c <trace_write+0xd8>
   14f2a:	f7ff f899 	bl	14060 <nrf_modem_os_trace_irq_set>
   14f2e:	4640      	mov	r0, r8
   14f30:	f7ff f8b0 	bl	14094 <nrf_modem_os_free>
   14f34:	2c00      	cmp	r4, #0
   14f36:	d03d      	beq.n	14fb4 <trace_write+0x150>
   14f38:	4630      	mov	r0, r6
   14f3a:	e7e3      	b.n	14f04 <trace_write+0xa0>
   14f3c:	782b      	ldrb	r3, [r5, #0]
   14f3e:	2b62      	cmp	r3, #98	; 0x62
   14f40:	d034      	beq.n	14fac <trace_write+0x148>
   14f42:	2b63      	cmp	r3, #99	; 0x63
   14f44:	d034      	beq.n	14fb0 <trace_write+0x14c>
   14f46:	2b61      	cmp	r3, #97	; 0x61
   14f48:	d107      	bne.n	14f5a <trace_write+0xf6>
   14f4a:	4a1c      	ldr	r2, [pc, #112]	; (14fbc <trace_write+0x158>)
   14f4c:	8813      	ldrh	r3, [r2, #0]
   14f4e:	eb04 0109 	add.w	r1, r4, r9
   14f52:	fa11 f383 	uxtah	r3, r1, r3
   14f56:	b29b      	uxth	r3, r3
   14f58:	8013      	strh	r3, [r2, #0]
   14f5a:	6838      	ldr	r0, [r7, #0]
   14f5c:	f06f 0b10 	mvn.w	fp, #16
   14f60:	f06f 0741 	mvn.w	r7, #65	; 0x41
   14f64:	f003 fd08 	bl	18978 <nrf_modem_os_sem_give>
   14f68:	f888 b000 	strb.w	fp, [r8]
   14f6c:	f888 7001 	strb.w	r7, [r8, #1]
   14f70:	782b      	ldrb	r3, [r5, #0]
   14f72:	2105      	movs	r1, #5
   14f74:	4640      	mov	r0, r8
   14f76:	f888 3004 	strb.w	r3, [r8, #4]
   14f7a:	f8a8 9002 	strh.w	r9, [r8, #2]
   14f7e:	f003 fd31 	bl	189e4 <nrf_modem_os_trace_put>
   14f82:	4649      	mov	r1, r9
   14f84:	4650      	mov	r0, sl
   14f86:	f003 fd2d 	bl	189e4 <nrf_modem_os_trace_put>
   14f8a:	b19c      	cbz	r4, 14fb4 <trace_write+0x150>
   14f8c:	f886 b000 	strb.w	fp, [r6]
   14f90:	7077      	strb	r7, [r6, #1]
   14f92:	782b      	ldrb	r3, [r5, #0]
   14f94:	2105      	movs	r1, #5
   14f96:	4630      	mov	r0, r6
   14f98:	7133      	strb	r3, [r6, #4]
   14f9a:	8074      	strh	r4, [r6, #2]
   14f9c:	f003 fd22 	bl	189e4 <nrf_modem_os_trace_put>
   14fa0:	4621      	mov	r1, r4
   14fa2:	68e8      	ldr	r0, [r5, #12]
   14fa4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fa8:	f003 bd1c 	b.w	189e4 <nrf_modem_os_trace_put>
   14fac:	4a04      	ldr	r2, [pc, #16]	; (14fc0 <trace_write+0x15c>)
   14fae:	e7cd      	b.n	14f4c <trace_write+0xe8>
   14fb0:	4a04      	ldr	r2, [pc, #16]	; (14fc4 <trace_write+0x160>)
   14fb2:	e7cb      	b.n	14f4c <trace_write+0xe8>
   14fb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fb8:	2000c97c 	.word	0x2000c97c
   14fbc:	2000cbf0 	.word	0x2000cbf0
   14fc0:	2000cbec 	.word	0x2000cbec
   14fc4:	2000cbee 	.word	0x2000cbee

00014fc8 <ipc_trace_init>:
   14fc8:	2300      	movs	r3, #0
   14fca:	4a08      	ldr	r2, [pc, #32]	; (14fec <ipc_trace_init+0x24>)
   14fcc:	b510      	push	{r4, lr}
   14fce:	8013      	strh	r3, [r2, #0]
   14fd0:	4a07      	ldr	r2, [pc, #28]	; (14ff0 <ipc_trace_init+0x28>)
   14fd2:	4604      	mov	r4, r0
   14fd4:	8013      	strh	r3, [r2, #0]
   14fd6:	4a07      	ldr	r2, [pc, #28]	; (14ff4 <ipc_trace_init+0x2c>)
   14fd8:	4807      	ldr	r0, [pc, #28]	; (14ff8 <ipc_trace_init+0x30>)
   14fda:	8013      	strh	r3, [r2, #0]
   14fdc:	2201      	movs	r2, #1
   14fde:	4611      	mov	r1, r2
   14fe0:	f7ff f814 	bl	1400c <nrf_modem_os_sem_init>
   14fe4:	4b05      	ldr	r3, [pc, #20]	; (14ffc <ipc_trace_init+0x34>)
   14fe6:	601c      	str	r4, [r3, #0]
   14fe8:	bd10      	pop	{r4, pc}
   14fea:	bf00      	nop
   14fec:	2000cbf0 	.word	0x2000cbf0
   14ff0:	2000cbec 	.word	0x2000cbec
   14ff4:	2000cbee 	.word	0x2000cbee
   14ff8:	2000c97c 	.word	0x2000c97c
   14ffc:	2000c978 	.word	0x2000c978

00015000 <nrf_modem_trace_irq_handler>:
   15000:	b508      	push	{r3, lr}
   15002:	4b10      	ldr	r3, [pc, #64]	; (15044 <nrf_modem_trace_irq_handler+0x44>)
   15004:	781b      	ldrb	r3, [r3, #0]
   15006:	b90b      	cbnz	r3, 1500c <nrf_modem_trace_irq_handler+0xc>
   15008:	f7ff f832 	bl	14070 <nrf_modem_os_trace_irq_clear>
   1500c:	4b0e      	ldr	r3, [pc, #56]	; (15048 <nrf_modem_trace_irq_handler+0x48>)
   1500e:	6818      	ldr	r0, [r3, #0]
   15010:	6842      	ldr	r2, [r0, #4]
   15012:	6883      	ldr	r3, [r0, #8]
   15014:	429a      	cmp	r2, r3
   15016:	d001      	beq.n	1501c <nrf_modem_trace_irq_handler+0x1c>
   15018:	f7ff ff24 	bl	14e64 <trace_write>
   1501c:	4b0b      	ldr	r3, [pc, #44]	; (1504c <nrf_modem_trace_irq_handler+0x4c>)
   1501e:	6818      	ldr	r0, [r3, #0]
   15020:	6882      	ldr	r2, [r0, #8]
   15022:	6843      	ldr	r3, [r0, #4]
   15024:	429a      	cmp	r2, r3
   15026:	d001      	beq.n	1502c <nrf_modem_trace_irq_handler+0x2c>
   15028:	f7ff ff1c 	bl	14e64 <trace_write>
   1502c:	4b08      	ldr	r3, [pc, #32]	; (15050 <nrf_modem_trace_irq_handler+0x50>)
   1502e:	6818      	ldr	r0, [r3, #0]
   15030:	6882      	ldr	r2, [r0, #8]
   15032:	6843      	ldr	r3, [r0, #4]
   15034:	429a      	cmp	r2, r3
   15036:	d003      	beq.n	15040 <nrf_modem_trace_irq_handler+0x40>
   15038:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1503c:	f7ff bf12 	b.w	14e64 <trace_write>
   15040:	bd08      	pop	{r3, pc}
   15042:	bf00      	nop
   15044:	2000cbfd 	.word	0x2000cbfd
   15048:	2000c974 	.word	0x2000c974
   1504c:	2000c96c 	.word	0x2000c96c
   15050:	2000c970 	.word	0x2000c970

00015054 <ipc_trace_handle>:
   15054:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15058:	4b43      	ldr	r3, [pc, #268]	; (15168 <ipc_trace_handle+0x114>)
   1505a:	681b      	ldr	r3, [r3, #0]
   1505c:	6919      	ldr	r1, [r3, #16]
   1505e:	f8d3 a014 	ldr.w	sl, [r3, #20]
   15062:	7c1a      	ldrb	r2, [r3, #16]
   15064:	2200      	movs	r2, #0
   15066:	741a      	strb	r2, [r3, #16]
   15068:	7c58      	ldrb	r0, [r3, #17]
   1506a:	745a      	strb	r2, [r3, #17]
   1506c:	7c98      	ldrb	r0, [r3, #18]
   1506e:	749a      	strb	r2, [r3, #18]
   15070:	7cd8      	ldrb	r0, [r3, #19]
   15072:	74da      	strb	r2, [r3, #19]
   15074:	7d18      	ldrb	r0, [r3, #20]
   15076:	751a      	strb	r2, [r3, #20]
   15078:	7d58      	ldrb	r0, [r3, #21]
   1507a:	755a      	strb	r2, [r3, #21]
   1507c:	7d98      	ldrb	r0, [r3, #22]
   1507e:	759a      	strb	r2, [r3, #22]
   15080:	7dd8      	ldrb	r0, [r3, #23]
   15082:	75da      	strb	r2, [r3, #23]
   15084:	2900      	cmp	r1, #0
   15086:	d033      	beq.n	150f0 <ipc_trace_handle+0x9c>
   15088:	3901      	subs	r1, #1
   1508a:	2903      	cmp	r1, #3
   1508c:	d830      	bhi.n	150f0 <ipc_trace_handle+0x9c>
   1508e:	e8df f001 	tbb	[pc, r1]
   15092:	6502      	.short	0x6502
   15094:	534c      	.short	0x534c
   15096:	4a35      	ldr	r2, [pc, #212]	; (1516c <ipc_trace_handle+0x118>)
   15098:	7811      	ldrb	r1, [r2, #0]
   1509a:	b109      	cbz	r1, 150a0 <ipc_trace_handle+0x4c>
   1509c:	2100      	movs	r1, #0
   1509e:	7011      	strb	r1, [r2, #0]
   150a0:	2200      	movs	r2, #0
   150a2:	4691      	mov	r9, r2
   150a4:	4617      	mov	r7, r2
   150a6:	4614      	mov	r4, r2
   150a8:	4d31      	ldr	r5, [pc, #196]	; (15170 <ipc_trace_handle+0x11c>)
   150aa:	4932      	ldr	r1, [pc, #200]	; (15174 <ipc_trace_handle+0x120>)
   150ac:	4832      	ldr	r0, [pc, #200]	; (15178 <ipc_trace_handle+0x124>)
   150ae:	f8d5 e000 	ldr.w	lr, [r5]
   150b2:	f8d1 8000 	ldr.w	r8, [r1]
   150b6:	6806      	ldr	r6, [r0, #0]
   150b8:	f8da b008 	ldr.w	fp, [sl, #8]
   150bc:	9501      	str	r5, [sp, #4]
   150be:	45a3      	cmp	fp, r4
   150c0:	d119      	bne.n	150f6 <ipc_trace_handle+0xa2>
   150c2:	b107      	cbz	r7, 150c6 <ipc_trace_handle+0x72>
   150c4:	6006      	str	r6, [r0, #0]
   150c6:	f1b9 0f00 	cmp.w	r9, #0
   150ca:	d001      	beq.n	150d0 <ipc_trace_handle+0x7c>
   150cc:	f8c1 8000 	str.w	r8, [r1]
   150d0:	b112      	cbz	r2, 150d8 <ipc_trace_handle+0x84>
   150d2:	9a01      	ldr	r2, [sp, #4]
   150d4:	f8c2 e000 	str.w	lr, [r2]
   150d8:	7a1a      	ldrb	r2, [r3, #8]
   150da:	2101      	movs	r1, #1
   150dc:	2200      	movs	r2, #0
   150de:	7219      	strb	r1, [r3, #8]
   150e0:	7a59      	ldrb	r1, [r3, #9]
   150e2:	725a      	strb	r2, [r3, #9]
   150e4:	7a99      	ldrb	r1, [r3, #10]
   150e6:	729a      	strb	r2, [r3, #10]
   150e8:	7ada      	ldrb	r2, [r3, #11]
   150ea:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   150ee:	72da      	strb	r2, [r3, #11]
   150f0:	b003      	add	sp, #12
   150f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150f6:	1ca5      	adds	r5, r4, #2
   150f8:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
   150fc:	686d      	ldr	r5, [r5, #4]
   150fe:	f895 c000 	ldrb.w	ip, [r5]
   15102:	f1bc 0f62 	cmp.w	ip, #98	; 0x62
   15106:	d009      	beq.n	1511c <ipc_trace_handle+0xc8>
   15108:	f1bc 0f63 	cmp.w	ip, #99	; 0x63
   1510c:	d00a      	beq.n	15124 <ipc_trace_handle+0xd0>
   1510e:	f1bc 0f61 	cmp.w	ip, #97	; 0x61
   15112:	bf04      	itt	eq
   15114:	462e      	moveq	r6, r5
   15116:	2701      	moveq	r7, #1
   15118:	3401      	adds	r4, #1
   1511a:	e7d0      	b.n	150be <ipc_trace_handle+0x6a>
   1511c:	46a8      	mov	r8, r5
   1511e:	f04f 0901 	mov.w	r9, #1
   15122:	e7f9      	b.n	15118 <ipc_trace_handle+0xc4>
   15124:	46ae      	mov	lr, r5
   15126:	2201      	movs	r2, #1
   15128:	e7f6      	b.n	15118 <ipc_trace_handle+0xc4>
   1512a:	2101      	movs	r1, #1
   1512c:	4a0f      	ldr	r2, [pc, #60]	; (1516c <ipc_trace_handle+0x118>)
   1512e:	7011      	strb	r1, [r2, #0]
   15130:	7a1a      	ldrb	r2, [r3, #8]
   15132:	2103      	movs	r1, #3
   15134:	2200      	movs	r2, #0
   15136:	e7d2      	b.n	150de <ipc_trace_handle+0x8a>
   15138:	7a19      	ldrb	r1, [r3, #8]
   1513a:	2104      	movs	r1, #4
   1513c:	7219      	strb	r1, [r3, #8]
   1513e:	7a59      	ldrb	r1, [r3, #9]
   15140:	725a      	strb	r2, [r3, #9]
   15142:	7a99      	ldrb	r1, [r3, #10]
   15144:	729a      	strb	r2, [r3, #10]
   15146:	7ad9      	ldrb	r1, [r3, #11]
   15148:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   1514c:	72d9      	strb	r1, [r3, #11]
   1514e:	4b07      	ldr	r3, [pc, #28]	; (1516c <ipc_trace_handle+0x118>)
   15150:	701a      	strb	r2, [r3, #0]
   15152:	b003      	add	sp, #12
   15154:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15158:	f7ff bf52 	b.w	15000 <nrf_modem_trace_irq_handler>
   1515c:	b003      	add	sp, #12
   1515e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15162:	f7fe bf7d 	b.w	14060 <nrf_modem_os_trace_irq_set>
   15166:	bf00      	nop
   15168:	2000c978 	.word	0x2000c978
   1516c:	2000cbfd 	.word	0x2000cbfd
   15170:	2000c970 	.word	0x2000c970
   15174:	2000c96c 	.word	0x2000c96c
   15178:	2000c974 	.word	0x2000c974

0001517c <rpc_trace_coredump_in_progress>:
   1517c:	4b01      	ldr	r3, [pc, #4]	; (15184 <rpc_trace_coredump_in_progress+0x8>)
   1517e:	7818      	ldrb	r0, [r3, #0]
   15180:	4770      	bx	lr
   15182:	bf00      	nop
   15184:	2000cbfd 	.word	0x2000cbfd

00015188 <handle_modem_rpc_msg>:
   15188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1518c:	4606      	mov	r6, r0
   1518e:	460f      	mov	r7, r1
   15190:	2500      	movs	r5, #0
   15192:	f8df 8074 	ldr.w	r8, [pc, #116]	; 15208 <handle_modem_rpc_msg+0x80>
   15196:	6833      	ldr	r3, [r6, #0]
   15198:	42ab      	cmp	r3, r5
   1519a:	d801      	bhi.n	151a0 <handle_modem_rpc_msg+0x18>
   1519c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   151a0:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   151a4:	68a3      	ldr	r3, [r4, #8]
   151a6:	b1fb      	cbz	r3, 151e8 <handle_modem_rpc_msg+0x60>
   151a8:	6863      	ldr	r3, [r4, #4]
   151aa:	b2db      	uxtb	r3, r3
   151ac:	2b01      	cmp	r3, #1
   151ae:	d11b      	bne.n	151e8 <handle_modem_rpc_msg+0x60>
   151b0:	6862      	ldr	r2, [r4, #4]
   151b2:	f8b8 3000 	ldrh.w	r3, [r8]
   151b6:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   151ba:	d115      	bne.n	151e8 <handle_modem_rpc_msg+0x60>
   151bc:	2f02      	cmp	r7, #2
   151be:	68a0      	ldr	r0, [r4, #8]
   151c0:	d114      	bne.n	151ec <handle_modem_rpc_msg+0x64>
   151c2:	f7ff fe2d 	bl	14e20 <rpc_handle_data_message>
   151c6:	2802      	cmp	r0, #2
   151c8:	d00e      	beq.n	151e8 <handle_modem_rpc_msg+0x60>
   151ca:	2801      	cmp	r0, #1
   151cc:	d113      	bne.n	151f6 <handle_modem_rpc_msg+0x6e>
   151ce:	6863      	ldr	r3, [r4, #4]
   151d0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   151d4:	f043 0302 	orr.w	r3, r3, #2
   151d8:	6063      	str	r3, [r4, #4]
   151da:	f8b8 3000 	ldrh.w	r3, [r8]
   151de:	3301      	adds	r3, #1
   151e0:	f8a8 3000 	strh.w	r3, [r8]
   151e4:	f7fe ff2c 	bl	14040 <nrf_modem_os_application_irq_set>
   151e8:	3501      	adds	r5, #1
   151ea:	e7d4      	b.n	15196 <handle_modem_rpc_msg+0xe>
   151ec:	6801      	ldr	r1, [r0, #0]
   151ee:	0c09      	lsrs	r1, r1, #16
   151f0:	f003 fc57 	bl	18aa2 <rpc_handle_ctrl_message>
   151f4:	e7e7      	b.n	151c6 <handle_modem_rpc_msg+0x3e>
   151f6:	2800      	cmp	r0, #0
   151f8:	d1ef      	bne.n	151da <handle_modem_rpc_msg+0x52>
   151fa:	6863      	ldr	r3, [r4, #4]
   151fc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15200:	f043 0303 	orr.w	r3, r3, #3
   15204:	e7e8      	b.n	151d8 <handle_modem_rpc_msg+0x50>
   15206:	bf00      	nop
   15208:	2000cbf2 	.word	0x2000cbf2

0001520c <rpc_transport_ipc_msg_alloc>:
   1520c:	b570      	push	{r4, r5, r6, lr}
   1520e:	4616      	mov	r6, r2
   15210:	2400      	movs	r4, #0
   15212:	6803      	ldr	r3, [r0, #0]
   15214:	42a3      	cmp	r3, r4
   15216:	d101      	bne.n	1521c <rpc_transport_ipc_msg_alloc+0x10>
   15218:	2300      	movs	r3, #0
   1521a:	e01c      	b.n	15256 <rpc_transport_ipc_msg_alloc+0x4a>
   1521c:	eb00 02c4 	add.w	r2, r0, r4, lsl #3
   15220:	6855      	ldr	r5, [r2, #4]
   15222:	b2ed      	uxtb	r5, r5
   15224:	2d03      	cmp	r5, #3
   15226:	d118      	bne.n	1525a <rpc_transport_ipc_msg_alloc+0x4e>
   15228:	eb01 1384 	add.w	r3, r1, r4, lsl #6
   1522c:	6093      	str	r3, [r2, #8]
   1522e:	6851      	ldr	r1, [r2, #4]
   15230:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   15234:	6051      	str	r1, [r2, #4]
   15236:	490c      	ldr	r1, [pc, #48]	; (15268 <rpc_transport_ipc_msg_alloc+0x5c>)
   15238:	8808      	ldrh	r0, [r1, #0]
   1523a:	1c44      	adds	r4, r0, #1
   1523c:	800c      	strh	r4, [r1, #0]
   1523e:	6851      	ldr	r1, [r2, #4]
   15240:	b289      	uxth	r1, r1
   15242:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   15246:	6051      	str	r1, [r2, #4]
   15248:	4618      	mov	r0, r3
   1524a:	2240      	movs	r2, #64	; 0x40
   1524c:	2100      	movs	r1, #0
   1524e:	f002 ff4d 	bl	180ec <memset>
   15252:	4603      	mov	r3, r0
   15254:	6046      	str	r6, [r0, #4]
   15256:	4618      	mov	r0, r3
   15258:	bd70      	pop	{r4, r5, r6, pc}
   1525a:	b915      	cbnz	r5, 15262 <rpc_transport_ipc_msg_alloc+0x56>
   1525c:	6895      	ldr	r5, [r2, #8]
   1525e:	2d00      	cmp	r5, #0
   15260:	d0e2      	beq.n	15228 <rpc_transport_ipc_msg_alloc+0x1c>
   15262:	3401      	adds	r4, #1
   15264:	e7d6      	b.n	15214 <rpc_transport_ipc_msg_alloc+0x8>
   15266:	bf00      	nop
   15268:	2000cbf4 	.word	0x2000cbf4

0001526c <rpc_transport_ipc_data_msg_send>:
   1526c:	b508      	push	{r3, lr}
   1526e:	4b0b      	ldr	r3, [pc, #44]	; (1529c <rpc_transport_ipc_data_msg_send+0x30>)
   15270:	681b      	ldr	r3, [r3, #0]
   15272:	1ac0      	subs	r0, r0, r3
   15274:	4b0a      	ldr	r3, [pc, #40]	; (152a0 <rpc_transport_ipc_data_msg_send+0x34>)
   15276:	f3c0 1089 	ubfx	r0, r0, #6, #10
   1527a:	681b      	ldr	r3, [r3, #0]
   1527c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   15280:	6843      	ldr	r3, [r0, #4]
   15282:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15286:	f043 0301 	orr.w	r3, r3, #1
   1528a:	6043      	str	r3, [r0, #4]
   1528c:	2003      	movs	r0, #3
   1528e:	f003 fad3 	bl	18838 <nrf_modem_os_busywait>
   15292:	2201      	movs	r2, #1
   15294:	4b03      	ldr	r3, [pc, #12]	; (152a4 <rpc_transport_ipc_data_msg_send+0x38>)
   15296:	601a      	str	r2, [r3, #0]
   15298:	bd08      	pop	{r3, pc}
   1529a:	bf00      	nop
   1529c:	2000c998 	.word	0x2000c998
   152a0:	2000c99c 	.word	0x2000c99c
   152a4:	4002a00c 	.word	0x4002a00c

000152a8 <rpc_transport_ipc_ctrl_msg_send>:
   152a8:	b508      	push	{r3, lr}
   152aa:	4b0b      	ldr	r3, [pc, #44]	; (152d8 <rpc_transport_ipc_ctrl_msg_send+0x30>)
   152ac:	681b      	ldr	r3, [r3, #0]
   152ae:	1ac0      	subs	r0, r0, r3
   152b0:	4b0a      	ldr	r3, [pc, #40]	; (152dc <rpc_transport_ipc_ctrl_msg_send+0x34>)
   152b2:	f3c0 1089 	ubfx	r0, r0, #6, #10
   152b6:	681b      	ldr	r3, [r3, #0]
   152b8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   152bc:	6843      	ldr	r3, [r0, #4]
   152be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   152c2:	f043 0301 	orr.w	r3, r3, #1
   152c6:	6043      	str	r3, [r0, #4]
   152c8:	2003      	movs	r0, #3
   152ca:	f003 fab5 	bl	18838 <nrf_modem_os_busywait>
   152ce:	2201      	movs	r2, #1
   152d0:	4b03      	ldr	r3, [pc, #12]	; (152e0 <rpc_transport_ipc_ctrl_msg_send+0x38>)
   152d2:	601a      	str	r2, [r3, #0]
   152d4:	bd08      	pop	{r3, pc}
   152d6:	bf00      	nop
   152d8:	2000c990 	.word	0x2000c990
   152dc:	2000c994 	.word	0x2000c994
   152e0:	4002a004 	.word	0x4002a004

000152e4 <rpc_transport_ipc_data_msg_alloc>:
   152e4:	4b05      	ldr	r3, [pc, #20]	; (152fc <rpc_transport_ipc_data_msg_alloc+0x18>)
   152e6:	781b      	ldrb	r3, [r3, #0]
   152e8:	b933      	cbnz	r3, 152f8 <rpc_transport_ipc_data_msg_alloc+0x14>
   152ea:	4b05      	ldr	r3, [pc, #20]	; (15300 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   152ec:	2202      	movs	r2, #2
   152ee:	6819      	ldr	r1, [r3, #0]
   152f0:	4b04      	ldr	r3, [pc, #16]	; (15304 <rpc_transport_ipc_data_msg_alloc+0x20>)
   152f2:	6818      	ldr	r0, [r3, #0]
   152f4:	f7ff bf8a 	b.w	1520c <rpc_transport_ipc_msg_alloc>
   152f8:	2000      	movs	r0, #0
   152fa:	4770      	bx	lr
   152fc:	2000cbff 	.word	0x2000cbff
   15300:	2000c998 	.word	0x2000c998
   15304:	2000c99c 	.word	0x2000c99c

00015308 <rpc_transport_ipc_ctrl_msg_alloc>:
   15308:	230a      	movs	r3, #10
   1530a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1530c:	4c0c      	ldr	r4, [pc, #48]	; (15340 <rpc_transport_ipc_ctrl_msg_alloc+0x38>)
   1530e:	4d0d      	ldr	r5, [pc, #52]	; (15344 <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   15310:	9301      	str	r3, [sp, #4]
   15312:	2201      	movs	r2, #1
   15314:	6821      	ldr	r1, [r4, #0]
   15316:	6828      	ldr	r0, [r5, #0]
   15318:	f7ff ff78 	bl	1520c <rpc_transport_ipc_msg_alloc>
   1531c:	b968      	cbnz	r0, 1533a <rpc_transport_ipc_ctrl_msg_alloc+0x32>
   1531e:	f003 fb27 	bl	18970 <nrf_modem_os_is_in_isr>
   15322:	b918      	cbnz	r0, 1532c <rpc_transport_ipc_ctrl_msg_alloc+0x24>
   15324:	a901      	add	r1, sp, #4
   15326:	f003 fa8b 	bl	18840 <nrf_modem_os_timedwait>
   1532a:	e7f2      	b.n	15312 <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   1532c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   15330:	9b01      	ldr	r3, [sp, #4]
   15332:	4358      	muls	r0, r3
   15334:	f003 fa80 	bl	18838 <nrf_modem_os_busywait>
   15338:	e7eb      	b.n	15312 <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   1533a:	b003      	add	sp, #12
   1533c:	bd30      	pop	{r4, r5, pc}
   1533e:	bf00      	nop
   15340:	2000c990 	.word	0x2000c990
   15344:	2000c994 	.word	0x2000c994

00015348 <rpc_transport_ipc_data_alloc>:
   15348:	4b03      	ldr	r3, [pc, #12]	; (15358 <rpc_transport_ipc_data_alloc+0x10>)
   1534a:	781b      	ldrb	r3, [r3, #0]
   1534c:	b90b      	cbnz	r3, 15352 <rpc_transport_ipc_data_alloc+0xa>
   1534e:	f7fe bea9 	b.w	140a4 <nrf_modem_os_shm_tx_alloc>
   15352:	2000      	movs	r0, #0
   15354:	4770      	bx	lr
   15356:	bf00      	nop
   15358:	2000cbff 	.word	0x2000cbff

0001535c <nrf_modem_application_irq_handler>:
   1535c:	b510      	push	{r4, lr}
   1535e:	4c06      	ldr	r4, [pc, #24]	; (15378 <nrf_modem_application_irq_handler+0x1c>)
   15360:	f7fe fe76 	bl	14050 <nrf_modem_os_application_irq_clear>
   15364:	6820      	ldr	r0, [r4, #0]
   15366:	2101      	movs	r1, #1
   15368:	f7ff ff0e 	bl	15188 <handle_modem_rpc_msg>
   1536c:	6860      	ldr	r0, [r4, #4]
   1536e:	2102      	movs	r1, #2
   15370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15374:	f7ff bf08 	b.w	15188 <handle_modem_rpc_msg>
   15378:	2000c984 	.word	0x2000c984

0001537c <rpc_transport_ipc_msg_free>:
   1537c:	2300      	movs	r3, #0
   1537e:	4911      	ldr	r1, [pc, #68]	; (153c4 <rpc_transport_ipc_msg_free+0x48>)
   15380:	b530      	push	{r4, r5, lr}
   15382:	680a      	ldr	r2, [r1, #0]
   15384:	6814      	ldr	r4, [r2, #0]
   15386:	42a3      	cmp	r3, r4
   15388:	d10b      	bne.n	153a2 <rpc_transport_ipc_msg_free+0x26>
   1538a:	2300      	movs	r3, #0
   1538c:	684a      	ldr	r2, [r1, #4]
   1538e:	6811      	ldr	r1, [r2, #0]
   15390:	428b      	cmp	r3, r1
   15392:	d015      	beq.n	153c0 <rpc_transport_ipc_msg_free+0x44>
   15394:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   15398:	68a4      	ldr	r4, [r4, #8]
   1539a:	42a0      	cmp	r0, r4
   1539c:	d008      	beq.n	153b0 <rpc_transport_ipc_msg_free+0x34>
   1539e:	3301      	adds	r3, #1
   153a0:	e7f6      	b.n	15390 <rpc_transport_ipc_msg_free+0x14>
   153a2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   153a6:	68ad      	ldr	r5, [r5, #8]
   153a8:	42a8      	cmp	r0, r5
   153aa:	d001      	beq.n	153b0 <rpc_transport_ipc_msg_free+0x34>
   153ac:	3301      	adds	r3, #1
   153ae:	e7ea      	b.n	15386 <rpc_transport_ipc_msg_free+0xa>
   153b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   153b4:	685a      	ldr	r2, [r3, #4]
   153b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   153ba:	f042 0203 	orr.w	r2, r2, #3
   153be:	605a      	str	r2, [r3, #4]
   153c0:	bd30      	pop	{r4, r5, pc}
   153c2:	bf00      	nop
   153c4:	2000c984 	.word	0x2000c984

000153c8 <rpc_transport_ipc_init>:
   153c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153cc:	2200      	movs	r2, #0
   153ce:	b095      	sub	sp, #84	; 0x54
   153d0:	4605      	mov	r5, r0
   153d2:	494d      	ldr	r1, [pc, #308]	; (15508 <rpc_transport_ipc_init+0x140>)
   153d4:	7900      	ldrb	r0, [r0, #4]
   153d6:	f7ff fc9f 	bl	14d18 <nrfx_ipc_init>
   153da:	2238      	movs	r2, #56	; 0x38
   153dc:	2100      	movs	r1, #0
   153de:	a803      	add	r0, sp, #12
   153e0:	f002 fe84 	bl	180ec <memset>
   153e4:	2302      	movs	r3, #2
   153e6:	9304      	str	r3, [sp, #16]
   153e8:	2308      	movs	r3, #8
   153ea:	9306      	str	r3, [sp, #24]
   153ec:	2320      	movs	r3, #32
   153ee:	9308      	str	r3, [sp, #32]
   153f0:	2301      	movs	r3, #1
   153f2:	930b      	str	r3, [sp, #44]	; 0x2c
   153f4:	2304      	movs	r3, #4
   153f6:	930d      	str	r3, [sp, #52]	; 0x34
   153f8:	2310      	movs	r3, #16
   153fa:	f04f 0c40 	mov.w	ip, #64	; 0x40
   153fe:	930f      	str	r3, [sp, #60]	; 0x3c
   15400:	2380      	movs	r3, #128	; 0x80
   15402:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
   15406:	23d5      	movs	r3, #213	; 0xd5
   15408:	a803      	add	r0, sp, #12
   1540a:	9313      	str	r3, [sp, #76]	; 0x4c
   1540c:	f7ff fc9c 	bl	14d48 <nrfx_ipc_config_load>
   15410:	682b      	ldr	r3, [r5, #0]
   15412:	2100      	movs	r1, #0
   15414:	685a      	ldr	r2, [r3, #4]
   15416:	6818      	ldr	r0, [r3, #0]
   15418:	f002 fe68 	bl	180ec <memset>
   1541c:	682a      	ldr	r2, [r5, #0]
   1541e:	6814      	ldr	r4, [r2, #0]
   15420:	69d3      	ldr	r3, [r2, #28]
   15422:	f104 0660 	add.w	r6, r4, #96	; 0x60
   15426:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
   1542a:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
   1542e:	f504 7b3a 	add.w	fp, r4, #744	; 0x2e8
   15432:	f104 0920 	add.w	r9, r4, #32
   15436:	2b00      	cmp	r3, #0
   15438:	d060      	beq.n	154fc <rpc_transport_ipc_init+0x134>
   1543a:	f104 0840 	add.w	r8, r4, #64	; 0x40
   1543e:	4933      	ldr	r1, [pc, #204]	; (1550c <rpc_transport_ipc_init+0x144>)
   15440:	f8c1 9000 	str.w	r9, [r1]
   15444:	b13b      	cbz	r3, 15456 <rpc_transport_ipc_init+0x8e>
   15446:	6992      	ldr	r2, [r2, #24]
   15448:	4640      	mov	r0, r8
   1544a:	f8c8 2004 	str.w	r2, [r8, #4]
   1544e:	f8c8 3000 	str.w	r3, [r8]
   15452:	f7ff fdb9 	bl	14fc8 <ipc_trace_init>
   15456:	6828      	ldr	r0, [r5, #0]
   15458:	2300      	movs	r3, #0
   1545a:	6902      	ldr	r2, [r0, #16]
   1545c:	2101      	movs	r1, #1
   1545e:	6062      	str	r2, [r4, #4]
   15460:	6942      	ldr	r2, [r0, #20]
   15462:	70a1      	strb	r1, [r4, #2]
   15464:	60a2      	str	r2, [r4, #8]
   15466:	4a2a      	ldr	r2, [pc, #168]	; (15510 <rpc_transport_ipc_init+0x148>)
   15468:	7023      	strb	r3, [r4, #0]
   1546a:	6017      	str	r7, [r2, #0]
   1546c:	4a29      	ldr	r2, [pc, #164]	; (15514 <rpc_transport_ipc_init+0x14c>)
   1546e:	7063      	strb	r3, [r4, #1]
   15470:	6016      	str	r6, [r2, #0]
   15472:	2208      	movs	r2, #8
   15474:	70e3      	strb	r3, [r4, #3]
   15476:	60e6      	str	r6, [r4, #12]
   15478:	6127      	str	r7, [r4, #16]
   1547a:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
   1547e:	f8c4 9014 	str.w	r9, [r4, #20]
   15482:	f8c4 8018 	str.w	r8, [r4, #24]
   15486:	707b      	strb	r3, [r7, #1]
   15488:	70bb      	strb	r3, [r7, #2]
   1548a:	70fb      	strb	r3, [r7, #3]
   1548c:	2714      	movs	r7, #20
   1548e:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
   15492:	4a21      	ldr	r2, [pc, #132]	; (15518 <rpc_transport_ipc_init+0x150>)
   15494:	4d21      	ldr	r5, [pc, #132]	; (1551c <rpc_transport_ipc_init+0x154>)
   15496:	f8c2 b000 	str.w	fp, [r2]
   1549a:	4a21      	ldr	r2, [pc, #132]	; (15520 <rpc_transport_ipc_init+0x158>)
   1549c:	7073      	strb	r3, [r6, #1]
   1549e:	f8c2 a000 	str.w	sl, [r2]
   154a2:	4a20      	ldr	r2, [pc, #128]	; (15524 <rpc_transport_ipc_init+0x15c>)
   154a4:	70b3      	strb	r3, [r6, #2]
   154a6:	70f3      	strb	r3, [r6, #3]
   154a8:	f8c2 4610 	str.w	r4, [r2, #1552]	; 0x610
   154ac:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
   154b0:	4c1d      	ldr	r4, [pc, #116]	; (15528 <rpc_transport_ipc_init+0x160>)
   154b2:	7029      	strb	r1, [r5, #0]
   154b4:	491d      	ldr	r1, [pc, #116]	; (1552c <rpc_transport_ipc_init+0x164>)
   154b6:	6023      	str	r3, [r4, #0]
   154b8:	9302      	str	r3, [sp, #8]
   154ba:	600b      	str	r3, [r1, #0]
   154bc:	680b      	ldr	r3, [r1, #0]
   154be:	4e1c      	ldr	r6, [pc, #112]	; (15530 <rpc_transport_ipc_init+0x168>)
   154c0:	9302      	str	r3, [sp, #8]
   154c2:	9b02      	ldr	r3, [sp, #8]
   154c4:	2000      	movs	r0, #0
   154c6:	a901      	add	r1, sp, #4
   154c8:	9701      	str	r7, [sp, #4]
   154ca:	f003 f9b9 	bl	18840 <nrf_modem_os_timedwait>
   154ce:	9b01      	ldr	r3, [sp, #4]
   154d0:	3b14      	subs	r3, #20
   154d2:	441e      	add	r6, r3
   154d4:	782b      	ldrb	r3, [r5, #0]
   154d6:	2b01      	cmp	r3, #1
   154d8:	d104      	bne.n	154e4 <rpc_transport_ipc_init+0x11c>
   154da:	2e00      	cmp	r6, #0
   154dc:	d1f2      	bne.n	154c4 <rpc_transport_ipc_init+0xfc>
   154de:	f06f 0373 	mvn.w	r3, #115	; 0x73
   154e2:	6023      	str	r3, [r4, #0]
   154e4:	6824      	ldr	r4, [r4, #0]
   154e6:	b95c      	cbnz	r4, 15500 <rpc_transport_ipc_init+0x138>
   154e8:	4b12      	ldr	r3, [pc, #72]	; (15534 <rpc_transport_ipc_init+0x16c>)
   154ea:	701c      	strb	r4, [r3, #0]
   154ec:	4b12      	ldr	r3, [pc, #72]	; (15538 <rpc_transport_ipc_init+0x170>)
   154ee:	801c      	strh	r4, [r3, #0]
   154f0:	4b12      	ldr	r3, [pc, #72]	; (1553c <rpc_transport_ipc_init+0x174>)
   154f2:	801c      	strh	r4, [r3, #0]
   154f4:	4620      	mov	r0, r4
   154f6:	b015      	add	sp, #84	; 0x54
   154f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154fc:	4698      	mov	r8, r3
   154fe:	e79e      	b.n	1543e <rpc_transport_ipc_init+0x76>
   15500:	f7ff fc48 	bl	14d94 <nrfx_ipc_uninit>
   15504:	e7f6      	b.n	154f4 <rpc_transport_ipc_init+0x12c>
   15506:	bf00      	nop
   15508:	00015541 	.word	0x00015541
   1550c:	2000c98c 	.word	0x2000c98c
   15510:	2000c99c 	.word	0x2000c99c
   15514:	2000c994 	.word	0x2000c994
   15518:	2000c998 	.word	0x2000c998
   1551c:	2000cbfe 	.word	0x2000cbfe
   15520:	2000c990 	.word	0x2000c990
   15524:	4002a000 	.word	0x4002a000
   15528:	2000c980 	.word	0x2000c980
   1552c:	40005610 	.word	0x40005610
   15530:	000249f0 	.word	0x000249f0
   15534:	2000cbff 	.word	0x2000cbff
   15538:	2000cbf4 	.word	0x2000cbf4
   1553c:	2000cbf2 	.word	0x2000cbf2

00015540 <ipc_irq_handler>:
   15540:	b570      	push	{r4, r5, r6, lr}
   15542:	4604      	mov	r4, r0
   15544:	0620      	lsls	r0, r4, #24
   15546:	d50c      	bpl.n	15562 <ipc_irq_handler+0x22>
   15548:	f7ff fd84 	bl	15054 <ipc_trace_handle>
   1554c:	f7ff fe16 	bl	1517c <rpc_trace_coredump_in_progress>
   15550:	b138      	cbz	r0, 15562 <ipc_irq_handler+0x22>
   15552:	22e0      	movs	r2, #224	; 0xe0
   15554:	4b3e      	ldr	r3, [pc, #248]	; (15650 <ipc_irq_handler+0x110>)
   15556:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
   1555a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1555e:	605a      	str	r2, [r3, #4]
   15560:	bd70      	pop	{r4, r5, r6, pc}
   15562:	07e1      	lsls	r1, r4, #31
   15564:	d548      	bpl.n	155f8 <ipc_irq_handler+0xb8>
   15566:	f248 0202 	movw	r2, #32770	; 0x8002
   1556a:	4b3a      	ldr	r3, [pc, #232]	; (15654 <ipc_irq_handler+0x114>)
   1556c:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   15570:	4293      	cmp	r3, r2
   15572:	d035      	beq.n	155e0 <ipc_irq_handler+0xa0>
   15574:	d81b      	bhi.n	155ae <ipc_irq_handler+0x6e>
   15576:	f243 0232 	movw	r2, #12338	; 0x3032
   1557a:	4293      	cmp	r3, r2
   1557c:	d036      	beq.n	155ec <ipc_irq_handler+0xac>
   1557e:	d80b      	bhi.n	15598 <ipc_irq_handler+0x58>
   15580:	3b01      	subs	r3, #1
   15582:	2b01      	cmp	r3, #1
   15584:	d8ec      	bhi.n	15560 <ipc_irq_handler+0x20>
   15586:	2203      	movs	r2, #3
   15588:	200e      	movs	r0, #14
   1558a:	4b33      	ldr	r3, [pc, #204]	; (15658 <ipc_irq_handler+0x118>)
   1558c:	701a      	strb	r2, [r3, #0]
   1558e:	4b33      	ldr	r3, [pc, #204]	; (1565c <ipc_irq_handler+0x11c>)
   15590:	6018      	str	r0, [r3, #0]
   15592:	f003 fb54 	bl	18c3e <rpc_transport_ipc_fault_handler>
   15596:	e7e3      	b.n	15560 <ipc_irq_handler+0x20>
   15598:	f248 0201 	movw	r2, #32769	; 0x8001
   1559c:	4293      	cmp	r3, r2
   1559e:	d1df      	bne.n	15560 <ipc_irq_handler+0x20>
   155a0:	2203      	movs	r2, #3
   155a2:	4b2d      	ldr	r3, [pc, #180]	; (15658 <ipc_irq_handler+0x118>)
   155a4:	701a      	strb	r2, [r3, #0]
   155a6:	2216      	movs	r2, #22
   155a8:	4b2c      	ldr	r3, [pc, #176]	; (1565c <ipc_irq_handler+0x11c>)
   155aa:	601a      	str	r2, [r3, #0]
   155ac:	e7d8      	b.n	15560 <ipc_irq_handler+0x20>
   155ae:	4a2c      	ldr	r2, [pc, #176]	; (15660 <ipc_irq_handler+0x120>)
   155b0:	4293      	cmp	r3, r2
   155b2:	d80c      	bhi.n	155ce <ipc_irq_handler+0x8e>
   155b4:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   155b8:	d80c      	bhi.n	155d4 <ipc_irq_handler+0x94>
   155ba:	f248 0203 	movw	r2, #32771	; 0x8003
   155be:	4293      	cmp	r3, r2
   155c0:	d1ce      	bne.n	15560 <ipc_irq_handler+0x20>
   155c2:	2203      	movs	r2, #3
   155c4:	4b24      	ldr	r3, [pc, #144]	; (15658 <ipc_irq_handler+0x118>)
   155c6:	701a      	strb	r2, [r3, #0]
   155c8:	220c      	movs	r2, #12
   155ca:	4b24      	ldr	r3, [pc, #144]	; (1565c <ipc_irq_handler+0x11c>)
   155cc:	e7ed      	b.n	155aa <ipc_irq_handler+0x6a>
   155ce:	4a25      	ldr	r2, [pc, #148]	; (15664 <ipc_irq_handler+0x124>)
   155d0:	4293      	cmp	r3, r2
   155d2:	d1c5      	bne.n	15560 <ipc_irq_handler+0x20>
   155d4:	2103      	movs	r1, #3
   155d6:	4a20      	ldr	r2, [pc, #128]	; (15658 <ipc_irq_handler+0x118>)
   155d8:	7011      	strb	r1, [r2, #0]
   155da:	4a20      	ldr	r2, [pc, #128]	; (1565c <ipc_irq_handler+0x11c>)
   155dc:	6013      	str	r3, [r2, #0]
   155de:	e7bf      	b.n	15560 <ipc_irq_handler+0x20>
   155e0:	2203      	movs	r2, #3
   155e2:	4b1d      	ldr	r3, [pc, #116]	; (15658 <ipc_irq_handler+0x118>)
   155e4:	701a      	strb	r2, [r3, #0]
   155e6:	225f      	movs	r2, #95	; 0x5f
   155e8:	4b1c      	ldr	r3, [pc, #112]	; (1565c <ipc_irq_handler+0x11c>)
   155ea:	e7de      	b.n	155aa <ipc_irq_handler+0x6a>
   155ec:	2203      	movs	r2, #3
   155ee:	4b1a      	ldr	r3, [pc, #104]	; (15658 <ipc_irq_handler+0x118>)
   155f0:	701a      	strb	r2, [r3, #0]
   155f2:	2205      	movs	r2, #5
   155f4:	4b19      	ldr	r3, [pc, #100]	; (1565c <ipc_irq_handler+0x11c>)
   155f6:	e7d8      	b.n	155aa <ipc_irq_handler+0x6a>
   155f8:	f014 0540 	ands.w	r5, r4, #64	; 0x40
   155fc:	d003      	beq.n	15606 <ipc_irq_handler+0xc6>
   155fe:	2202      	movs	r2, #2
   15600:	4b15      	ldr	r3, [pc, #84]	; (15658 <ipc_irq_handler+0x118>)
   15602:	701a      	strb	r2, [r3, #0]
   15604:	e7ac      	b.n	15560 <ipc_irq_handler+0x20>
   15606:	0762      	lsls	r2, r4, #29
   15608:	d505      	bpl.n	15616 <ipc_irq_handler+0xd6>
   1560a:	4b13      	ldr	r3, [pc, #76]	; (15658 <ipc_irq_handler+0x118>)
   1560c:	781a      	ldrb	r2, [r3, #0]
   1560e:	461e      	mov	r6, r3
   15610:	b93a      	cbnz	r2, 15622 <ipc_irq_handler+0xe2>
   15612:	f7fe fd15 	bl	14040 <nrf_modem_os_application_irq_set>
   15616:	06e3      	lsls	r3, r4, #27
   15618:	d5a2      	bpl.n	15560 <ipc_irq_handler+0x20>
   1561a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1561e:	f7fe bd0f 	b.w	14040 <nrf_modem_os_application_irq_set>
   15622:	2a01      	cmp	r2, #1
   15624:	d1f7      	bne.n	15616 <ipc_irq_handler+0xd6>
   15626:	4a10      	ldr	r2, [pc, #64]	; (15668 <ipc_irq_handler+0x128>)
   15628:	4810      	ldr	r0, [pc, #64]	; (1566c <ipc_irq_handler+0x12c>)
   1562a:	6812      	ldr	r2, [r2, #0]
   1562c:	6891      	ldr	r1, [r2, #8]
   1562e:	6041      	str	r1, [r0, #4]
   15630:	6852      	ldr	r2, [r2, #4]
   15632:	6002      	str	r2, [r0, #0]
   15634:	b121      	cbz	r1, 15640 <ipc_irq_handler+0x100>
   15636:	b11a      	cbz	r2, 15640 <ipc_irq_handler+0x100>
   15638:	6809      	ldr	r1, [r1, #0]
   1563a:	b109      	cbz	r1, 15640 <ipc_irq_handler+0x100>
   1563c:	6812      	ldr	r2, [r2, #0]
   1563e:	b92a      	cbnz	r2, 1564c <ipc_irq_handler+0x10c>
   15640:	2303      	movs	r3, #3
   15642:	2205      	movs	r2, #5
   15644:	7033      	strb	r3, [r6, #0]
   15646:	4b05      	ldr	r3, [pc, #20]	; (1565c <ipc_irq_handler+0x11c>)
   15648:	601a      	str	r2, [r3, #0]
   1564a:	e7e4      	b.n	15616 <ipc_irq_handler+0xd6>
   1564c:	701d      	strb	r5, [r3, #0]
   1564e:	e7e2      	b.n	15616 <ipc_irq_handler+0xd6>
   15650:	e000e100 	.word	0xe000e100
   15654:	4002a000 	.word	0x4002a000
   15658:	2000cbfe 	.word	0x2000cbfe
   1565c:	2000c980 	.word	0x2000c980
   15660:	04400004 	.word	0x04400004
   15664:	05500001 	.word	0x05500001
   15668:	2000c98c 	.word	0x2000c98c
   1566c:	2000c984 	.word	0x2000c984

00015670 <interface_init>:
   15670:	b508      	push	{r3, lr}
   15672:	f44f 72b0 	mov.w	r2, #352	; 0x160
   15676:	2100      	movs	r1, #0
   15678:	4802      	ldr	r0, [pc, #8]	; (15684 <interface_init+0x14>)
   1567a:	f002 fd37 	bl	180ec <memset>
   1567e:	2000      	movs	r0, #0
   15680:	bd08      	pop	{r3, pc}
   15682:	bf00      	nop
   15684:	2000c9a0 	.word	0x2000c9a0

00015688 <interface_socket_wait>:
   15688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1568c:	4615      	mov	r5, r2
   1568e:	222c      	movs	r2, #44	; 0x2c
   15690:	4350      	muls	r0, r2
   15692:	461e      	mov	r6, r3
   15694:	4b0e      	ldr	r3, [pc, #56]	; (156d0 <interface_socket_wait+0x48>)
   15696:	460c      	mov	r4, r1
   15698:	181f      	adds	r7, r3, r0
   1569a:	581b      	ldr	r3, [r3, r0]
   1569c:	402b      	ands	r3, r5
   1569e:	428b      	cmp	r3, r1
   156a0:	d102      	bne.n	156a8 <interface_socket_wait+0x20>
   156a2:	2000      	movs	r0, #0
   156a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   156a8:	687b      	ldr	r3, [r7, #4]
   156aa:	2b00      	cmp	r3, #0
   156ac:	d1f9      	bne.n	156a2 <interface_socket_wait+0x1a>
   156ae:	46b8      	mov	r8, r7
   156b0:	f8d8 3000 	ldr.w	r3, [r8]
   156b4:	402b      	ands	r3, r5
   156b6:	42a3      	cmp	r3, r4
   156b8:	d0f3      	beq.n	156a2 <interface_socket_wait+0x1a>
   156ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
   156be:	2b00      	cmp	r3, #0
   156c0:	d1ef      	bne.n	156a2 <interface_socket_wait+0x1a>
   156c2:	4631      	mov	r1, r6
   156c4:	4638      	mov	r0, r7
   156c6:	f003 f8bb 	bl	18840 <nrf_modem_os_timedwait>
   156ca:	2800      	cmp	r0, #0
   156cc:	d0f0      	beq.n	156b0 <interface_socket_wait+0x28>
   156ce:	e7e9      	b.n	156a4 <interface_socket_wait+0x1c>
   156d0:	2000c9a0 	.word	0x2000c9a0

000156d4 <interface_sockets_aux_state_set>:
   156d4:	4a0d      	ldr	r2, [pc, #52]	; (1570c <interface_sockets_aux_state_set+0x38>)
   156d6:	b570      	push	{r4, r5, r6, lr}
   156d8:	2300      	movs	r3, #0
   156da:	4611      	mov	r1, r2
   156dc:	252c      	movs	r5, #44	; 0x2c
   156de:	fb05 f403 	mul.w	r4, r5, r3
   156e2:	590c      	ldr	r4, [r1, r4]
   156e4:	b15c      	cbz	r4, 156fe <interface_sockets_aux_state_set+0x2a>
   156e6:	68d4      	ldr	r4, [r2, #12]
   156e8:	f024 0608 	bic.w	r6, r4, #8
   156ec:	2e02      	cmp	r6, #2
   156ee:	d001      	beq.n	156f4 <interface_sockets_aux_state_set+0x20>
   156f0:	2c05      	cmp	r4, #5
   156f2:	d104      	bne.n	156fe <interface_sockets_aux_state_set+0x2a>
   156f4:	fb05 f603 	mul.w	r6, r5, r3
   156f8:	598c      	ldr	r4, [r1, r6]
   156fa:	4304      	orrs	r4, r0
   156fc:	518c      	str	r4, [r1, r6]
   156fe:	3301      	adds	r3, #1
   15700:	2b08      	cmp	r3, #8
   15702:	f102 022c 	add.w	r2, r2, #44	; 0x2c
   15706:	d1ea      	bne.n	156de <interface_sockets_aux_state_set+0xa>
   15708:	bd70      	pop	{r4, r5, r6, pc}
   1570a:	bf00      	nop
   1570c:	2000c9a0 	.word	0x2000c9a0

00015710 <interface_sockets_aux_state_clear>:
   15710:	4a0d      	ldr	r2, [pc, #52]	; (15748 <interface_sockets_aux_state_clear+0x38>)
   15712:	b570      	push	{r4, r5, r6, lr}
   15714:	2300      	movs	r3, #0
   15716:	4611      	mov	r1, r2
   15718:	252c      	movs	r5, #44	; 0x2c
   1571a:	43c0      	mvns	r0, r0
   1571c:	fb05 f403 	mul.w	r4, r5, r3
   15720:	590c      	ldr	r4, [r1, r4]
   15722:	b15c      	cbz	r4, 1573c <interface_sockets_aux_state_clear+0x2c>
   15724:	68d4      	ldr	r4, [r2, #12]
   15726:	f024 0608 	bic.w	r6, r4, #8
   1572a:	2e02      	cmp	r6, #2
   1572c:	d001      	beq.n	15732 <interface_sockets_aux_state_clear+0x22>
   1572e:	2c05      	cmp	r4, #5
   15730:	d104      	bne.n	1573c <interface_sockets_aux_state_clear+0x2c>
   15732:	fb05 f603 	mul.w	r6, r5, r3
   15736:	598c      	ldr	r4, [r1, r6]
   15738:	4004      	ands	r4, r0
   1573a:	518c      	str	r4, [r1, r6]
   1573c:	3301      	adds	r3, #1
   1573e:	2b08      	cmp	r3, #8
   15740:	f102 022c 	add.w	r2, r2, #44	; 0x2c
   15744:	d1ea      	bne.n	1571c <interface_sockets_aux_state_clear+0xc>
   15746:	bd70      	pop	{r4, r5, r6, pc}
   15748:	2000c9a0 	.word	0x2000c9a0

0001574c <interface_from_internal_id_search>:
   1574c:	4b0a      	ldr	r3, [pc, #40]	; (15778 <interface_from_internal_id_search+0x2c>)
   1574e:	4602      	mov	r2, r0
   15750:	b530      	push	{r4, r5, lr}
   15752:	2000      	movs	r0, #0
   15754:	461c      	mov	r4, r3
   15756:	212c      	movs	r1, #44	; 0x2c
   15758:	fb01 f500 	mul.w	r5, r1, r0
   1575c:	5965      	ldr	r5, [r4, r5]
   1575e:	b115      	cbz	r5, 15766 <interface_from_internal_id_search+0x1a>
   15760:	699d      	ldr	r5, [r3, #24]
   15762:	4295      	cmp	r5, r2
   15764:	d006      	beq.n	15774 <interface_from_internal_id_search+0x28>
   15766:	3001      	adds	r0, #1
   15768:	2808      	cmp	r0, #8
   1576a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
   1576e:	d1f3      	bne.n	15758 <interface_from_internal_id_search+0xc>
   15770:	f04f 30ff 	mov.w	r0, #4294967295
   15774:	bd30      	pop	{r4, r5, pc}
   15776:	bf00      	nop
   15778:	2000c9a0 	.word	0x2000c9a0

0001577c <interface_socket_from_handle_get>:
   1577c:	2807      	cmp	r0, #7
   1577e:	d808      	bhi.n	15792 <interface_socket_from_handle_get+0x16>
   15780:	232c      	movs	r3, #44	; 0x2c
   15782:	4343      	muls	r3, r0
   15784:	4a04      	ldr	r2, [pc, #16]	; (15798 <interface_socket_from_handle_get+0x1c>)
   15786:	18d0      	adds	r0, r2, r3
   15788:	58d3      	ldr	r3, [r2, r3]
   1578a:	2b00      	cmp	r3, #0
   1578c:	bf08      	it	eq
   1578e:	2000      	moveq	r0, #0
   15790:	4770      	bx	lr
   15792:	2000      	movs	r0, #0
   15794:	4770      	bx	lr
   15796:	bf00      	nop
   15798:	2000c9a0 	.word	0x2000c9a0

0001579c <rpc_error_to_nrf_errno>:
   1579c:	286a      	cmp	r0, #106	; 0x6a
   1579e:	bf9a      	itte	ls
   157a0:	4b01      	ldrls	r3, [pc, #4]	; (157a8 <rpc_error_to_nrf_errno+0xc>)
   157a2:	5c18      	ldrbls	r0, [r3, r0]
   157a4:	205f      	movhi	r0, #95	; 0x5f
   157a6:	4770      	bx	lr
   157a8:	00019824 	.word	0x00019824

000157ac <rpc_error_to_nrf_gai_errno>:
   157ac:	2805      	cmp	r0, #5
   157ae:	d013      	beq.n	157d8 <rpc_error_to_nrf_gai_errno+0x2c>
   157b0:	d807      	bhi.n	157c2 <rpc_error_to_nrf_gai_errno+0x16>
   157b2:	b170      	cbz	r0, 157d2 <rpc_error_to_nrf_gai_errno+0x26>
   157b4:	4b0b      	ldr	r3, [pc, #44]	; (157e4 <rpc_error_to_nrf_gai_errno+0x38>)
   157b6:	5c1b      	ldrb	r3, [r3, r0]
   157b8:	4a0b      	ldr	r2, [pc, #44]	; (157e8 <rpc_error_to_nrf_gai_errno+0x3c>)
   157ba:	f240 1015 	movw	r0, #277	; 0x115
   157be:	6013      	str	r3, [r2, #0]
   157c0:	4770      	bx	lr
   157c2:	2806      	cmp	r0, #6
   157c4:	d00b      	beq.n	157de <rpc_error_to_nrf_gai_errno+0x32>
   157c6:	280d      	cmp	r0, #13
   157c8:	d009      	beq.n	157de <rpc_error_to_nrf_gai_errno+0x32>
   157ca:	286a      	cmp	r0, #106	; 0x6a
   157cc:	d9f2      	bls.n	157b4 <rpc_error_to_nrf_gai_errno+0x8>
   157ce:	235f      	movs	r3, #95	; 0x5f
   157d0:	e7f2      	b.n	157b8 <rpc_error_to_nrf_gai_errno+0xc>
   157d2:	4b05      	ldr	r3, [pc, #20]	; (157e8 <rpc_error_to_nrf_gai_errno+0x3c>)
   157d4:	6018      	str	r0, [r3, #0]
   157d6:	4770      	bx	lr
   157d8:	f44f 708a 	mov.w	r0, #276	; 0x114
   157dc:	4770      	bx	lr
   157de:	f240 1011 	movw	r0, #273	; 0x111
   157e2:	4770      	bx	lr
   157e4:	00019824 	.word	0x00019824
   157e8:	2000cb08 	.word	0x2000cb08

000157ec <ip_interface_init>:
   157ec:	b510      	push	{r4, lr}
   157ee:	2400      	movs	r4, #0
   157f0:	4b06      	ldr	r3, [pc, #24]	; (1580c <ip_interface_init+0x20>)
   157f2:	2220      	movs	r2, #32
   157f4:	601c      	str	r4, [r3, #0]
   157f6:	4b06      	ldr	r3, [pc, #24]	; (15810 <ip_interface_init+0x24>)
   157f8:	4621      	mov	r1, r4
   157fa:	4806      	ldr	r0, [pc, #24]	; (15814 <ip_interface_init+0x28>)
   157fc:	601c      	str	r4, [r3, #0]
   157fe:	f002 fc75 	bl	180ec <memset>
   15802:	2201      	movs	r2, #1
   15804:	4b04      	ldr	r3, [pc, #16]	; (15818 <ip_interface_init+0x2c>)
   15806:	4620      	mov	r0, r4
   15808:	701a      	strb	r2, [r3, #0]
   1580a:	bd10      	pop	{r4, pc}
   1580c:	2000cb14 	.word	0x2000cb14
   15810:	2000cb10 	.word	0x2000cb10
   15814:	2000cb18 	.word	0x2000cb18
   15818:	2000cc01 	.word	0x2000cc01

0001581c <rpc_ip_event_handler>:
   1581c:	f248 030f 	movw	r3, #32783	; 0x800f
   15820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15824:	4299      	cmp	r1, r3
   15826:	4604      	mov	r4, r0
   15828:	460e      	mov	r6, r1
   1582a:	b089      	sub	sp, #36	; 0x24
   1582c:	f000 80a4 	beq.w	15978 <rpc_ip_event_handler+0x15c>
   15830:	f249 0304 	movw	r3, #36868	; 0x9004
   15834:	4299      	cmp	r1, r3
   15836:	f000 80ab 	beq.w	15990 <rpc_ip_event_handler+0x174>
   1583a:	f248 030d 	movw	r3, #32781	; 0x800d
   1583e:	4299      	cmp	r1, r3
   15840:	f040 80b8 	bne.w	159b4 <rpc_ip_event_handler+0x198>
   15844:	4bbc      	ldr	r3, [pc, #752]	; (15b38 <rpc_ip_event_handler+0x31c>)
   15846:	681a      	ldr	r2, [r3, #0]
   15848:	9303      	str	r3, [sp, #12]
   1584a:	2a01      	cmp	r2, #1
   1584c:	d12d      	bne.n	158aa <rpc_ip_event_handler+0x8e>
   1584e:	6940      	ldr	r0, [r0, #20]
   15850:	2800      	cmp	r0, #0
   15852:	f040 808c 	bne.w	1596e <rpc_ip_event_handler+0x152>
   15856:	f8d4 a018 	ldr.w	sl, [r4, #24]
   1585a:	f8d4 8000 	ldr.w	r8, [r4]
   1585e:	ea4f 134a 	mov.w	r3, sl, lsl #5
   15862:	4618      	mov	r0, r3
   15864:	9301      	str	r3, [sp, #4]
   15866:	f7fe fc0b 	bl	14080 <nrf_modem_os_alloc>
   1586a:	4607      	mov	r7, r0
   1586c:	b310      	cbz	r0, 158b4 <rpc_ip_event_handler+0x98>
   1586e:	2024      	movs	r0, #36	; 0x24
   15870:	fb00 f00a 	mul.w	r0, r0, sl
   15874:	f7fe fc04 	bl	14080 <nrf_modem_os_alloc>
   15878:	4605      	mov	r5, r0
   1587a:	b1e8      	cbz	r0, 158b8 <rpc_ip_event_handler+0x9c>
   1587c:	2604      	movs	r6, #4
   1587e:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
   15882:	f107 0920 	add.w	r9, r7, #32
   15886:	9302      	str	r3, [sp, #8]
   15888:	9b02      	ldr	r3, [sp, #8]
   1588a:	42ab      	cmp	r3, r5
   1588c:	d118      	bne.n	158c0 <rpc_ip_event_handler+0xa4>
   1588e:	f1ba 0f00 	cmp.w	sl, #0
   15892:	d005      	beq.n	158a0 <rpc_ip_event_handler+0x84>
   15894:	9b01      	ldr	r3, [sp, #4]
   15896:	443b      	add	r3, r7
   15898:	4699      	mov	r9, r3
   1589a:	2300      	movs	r3, #0
   1589c:	f849 3c04 	str.w	r3, [r9, #-4]
   158a0:	4ba6      	ldr	r3, [pc, #664]	; (15b3c <rpc_ip_event_handler+0x320>)
   158a2:	601f      	str	r7, [r3, #0]
   158a4:	2302      	movs	r3, #2
   158a6:	9a03      	ldr	r2, [sp, #12]
   158a8:	6013      	str	r3, [r2, #0]
   158aa:	6820      	ldr	r0, [r4, #0]
   158ac:	2800      	cmp	r0, #0
   158ae:	f040 81c7 	bne.w	15c40 <rpc_ip_event_handler+0x424>
   158b2:	e1c7      	b.n	15c44 <rpc_ip_event_handler+0x428>
   158b4:	f7fe fbee 	bl	14094 <nrf_modem_os_free>
   158b8:	220c      	movs	r2, #12
   158ba:	4ba1      	ldr	r3, [pc, #644]	; (15b40 <rpc_ip_event_handler+0x324>)
   158bc:	601a      	str	r2, [r3, #0]
   158be:	e7ef      	b.n	158a0 <rpc_ip_event_handler+0x84>
   158c0:	f858 2006 	ldr.w	r2, [r8, r6]
   158c4:	eb08 0106 	add.w	r1, r8, r6
   158c8:	f849 2c20 	str.w	r2, [r9, #-32]
   158cc:	eb08 0206 	add.w	r2, r8, r6
   158d0:	6852      	ldr	r2, [r2, #4]
   158d2:	f8b1 b012 	ldrh.w	fp, [r1, #18]
   158d6:	3a01      	subs	r2, #1
   158d8:	2a04      	cmp	r2, #4
   158da:	bf8c      	ite	hi
   158dc:	2200      	movhi	r2, #0
   158de:	4b99      	ldrls	r3, [pc, #612]	; (15b44 <rpc_ip_event_handler+0x328>)
   158e0:	f106 0614 	add.w	r6, r6, #20
   158e4:	bf98      	it	ls
   158e6:	569a      	ldrsbls	r2, [r3, r2]
   158e8:	4b97      	ldr	r3, [pc, #604]	; (15b48 <rpc_ip_event_handler+0x32c>)
   158ea:	f849 2c1c 	str.w	r2, [r9, #-28]
   158ee:	681a      	ldr	r2, [r3, #0]
   158f0:	4b96      	ldr	r3, [pc, #600]	; (15b4c <rpc_ip_event_handler+0x330>)
   158f2:	f849 2c18 	str.w	r2, [r9, #-24]
   158f6:	681a      	ldr	r2, [r3, #0]
   158f8:	f849 2c14 	str.w	r2, [r9, #-20]
   158fc:	8a0a      	ldrh	r2, [r1, #16]
   158fe:	4994      	ldr	r1, [pc, #592]	; (15b50 <rpc_ip_event_handler+0x334>)
   15900:	2a04      	cmp	r2, #4
   15902:	8808      	ldrh	r0, [r1, #0]
   15904:	f849 2c10 	str.w	r2, [r9, #-16]
   15908:	f849 5c0c 	str.w	r5, [r9, #-12]
   1590c:	eb08 0106 	add.w	r1, r8, r6
   15910:	d121      	bne.n	15956 <rpc_ip_event_handler+0x13a>
   15912:	2202      	movs	r2, #2
   15914:	606a      	str	r2, [r5, #4]
   15916:	2210      	movs	r2, #16
   15918:	8128      	strh	r0, [r5, #8]
   1591a:	702a      	strb	r2, [r5, #0]
   1591c:	680a      	ldr	r2, [r1, #0]
   1591e:	60ea      	str	r2, [r5, #12]
   15920:	f859 2c10 	ldr.w	r2, [r9, #-16]
   15924:	f10b 0001 	add.w	r0, fp, #1
   15928:	4416      	add	r6, r2
   1592a:	f7fe fba9 	bl	14080 <nrf_modem_os_alloc>
   1592e:	f849 0c08 	str.w	r0, [r9, #-8]
   15932:	b148      	cbz	r0, 15948 <rpc_ip_event_handler+0x12c>
   15934:	465a      	mov	r2, fp
   15936:	eb08 0106 	add.w	r1, r8, r6
   1593a:	f002 fbb3 	bl	180a4 <memcpy>
   1593e:	2100      	movs	r1, #0
   15940:	f859 2c08 	ldr.w	r2, [r9, #-8]
   15944:	f802 100b 	strb.w	r1, [r2, fp]
   15948:	f849 9c04 	str.w	r9, [r9, #-4]
   1594c:	445e      	add	r6, fp
   1594e:	f109 0920 	add.w	r9, r9, #32
   15952:	3508      	adds	r5, #8
   15954:	e798      	b.n	15888 <rpc_ip_event_handler+0x6c>
   15956:	230a      	movs	r3, #10
   15958:	f04f 0c24 	mov.w	ip, #36	; 0x24
   1595c:	8128      	strh	r0, [r5, #8]
   1595e:	606b      	str	r3, [r5, #4]
   15960:	f885 c000 	strb.w	ip, [r5]
   15964:	f105 0010 	add.w	r0, r5, #16
   15968:	f002 fb9c 	bl	180a4 <memcpy>
   1596c:	e7d8      	b.n	15920 <rpc_ip_event_handler+0x104>
   1596e:	f7ff ff1d 	bl	157ac <rpc_error_to_nrf_gai_errno>
   15972:	4b73      	ldr	r3, [pc, #460]	; (15b40 <rpc_ip_event_handler+0x324>)
   15974:	6018      	str	r0, [r3, #0]
   15976:	e795      	b.n	158a4 <rpc_ip_event_handler+0x88>
   15978:	6943      	ldr	r3, [r0, #20]
   1597a:	2b6a      	cmp	r3, #106	; 0x6a
   1597c:	bf8e      	itee	hi
   1597e:	235f      	movhi	r3, #95	; 0x5f
   15980:	4a74      	ldrls	r2, [pc, #464]	; (15b54 <rpc_ip_event_handler+0x338>)
   15982:	5cd3      	ldrbls	r3, [r2, r3]
   15984:	4a74      	ldr	r2, [pc, #464]	; (15b58 <rpc_ip_event_handler+0x33c>)
   15986:	6013      	str	r3, [r2, #0]
   15988:	4b74      	ldr	r3, [pc, #464]	; (15b5c <rpc_ip_event_handler+0x340>)
   1598a:	2201      	movs	r2, #1
   1598c:	701a      	strb	r2, [r3, #0]
   1598e:	e159      	b.n	15c44 <rpc_ip_event_handler+0x428>
   15990:	6903      	ldr	r3, [r0, #16]
   15992:	2b03      	cmp	r3, #3
   15994:	d807      	bhi.n	159a6 <rpc_ip_event_handler+0x18a>
   15996:	e8df f003 	tbb	[pc, r3]
   1599a:	0802      	.short	0x0802
   1599c:	0802      	.short	0x0802
   1599e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   159a2:	f7ff fe97 	bl	156d4 <interface_sockets_aux_state_set>
   159a6:	4b6e      	ldr	r3, [pc, #440]	; (15b60 <rpc_ip_event_handler+0x344>)
   159a8:	e7ef      	b.n	1598a <rpc_ip_event_handler+0x16e>
   159aa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   159ae:	f7ff feaf 	bl	15710 <interface_sockets_aux_state_clear>
   159b2:	e7f8      	b.n	159a6 <rpc_ip_event_handler+0x18a>
   159b4:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   159b8:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   159bc:	68c0      	ldr	r0, [r0, #12]
   159be:	d13b      	bne.n	15a38 <rpc_ip_event_handler+0x21c>
   159c0:	f7ff fec4 	bl	1574c <interface_from_internal_id_search>
   159c4:	4607      	mov	r7, r0
   159c6:	4638      	mov	r0, r7
   159c8:	f7ff fed8 	bl	1577c <interface_socket_from_handle_get>
   159cc:	4605      	mov	r5, r0
   159ce:	2800      	cmp	r0, #0
   159d0:	f43f af6b 	beq.w	158aa <rpc_ip_event_handler+0x8e>
   159d4:	4601      	mov	r1, r0
   159d6:	4633      	mov	r3, r6
   159d8:	4622      	mov	r2, r4
   159da:	4638      	mov	r0, r7
   159dc:	f000 f9f4 	bl	15dc8 <tls_rpc_ip_event_handler>
   159e0:	2800      	cmp	r0, #0
   159e2:	f000 812f 	beq.w	15c44 <rpc_ip_event_handler+0x428>
   159e6:	f248 030c 	movw	r3, #32780	; 0x800c
   159ea:	429e      	cmp	r6, r3
   159ec:	d826      	bhi.n	15a3c <rpc_ip_event_handler+0x220>
   159ee:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   159f2:	f67f af5a 	bls.w	158aa <rpc_ip_event_handler+0x8e>
   159f6:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   159fa:	3e01      	subs	r6, #1
   159fc:	2e0b      	cmp	r6, #11
   159fe:	f63f af54 	bhi.w	158aa <rpc_ip_event_handler+0x8e>
   15a02:	a301      	add	r3, pc, #4	; (adr r3, 15a08 <rpc_ip_event_handler+0x1ec>)
   15a04:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   15a08:	00015acd 	.word	0x00015acd
   15a0c:	00015b81 	.word	0x00015b81
   15a10:	00015c9d 	.word	0x00015c9d
   15a14:	00015cbb 	.word	0x00015cbb
   15a18:	00015b65 	.word	0x00015b65
   15a1c:	00015c4d 	.word	0x00015c4d
   15a20:	00015c4d 	.word	0x00015c4d
   15a24:	00015bc5 	.word	0x00015bc5
   15a28:	00015ae7 	.word	0x00015ae7
   15a2c:	000158ab 	.word	0x000158ab
   15a30:	000158ab 	.word	0x000158ab
   15a34:	00015bef 	.word	0x00015bef
   15a38:	0c07      	lsrs	r7, r0, #16
   15a3a:	e7c4      	b.n	159c6 <rpc_ip_event_handler+0x1aa>
   15a3c:	f249 0302 	movw	r3, #36866	; 0x9002
   15a40:	429e      	cmp	r6, r3
   15a42:	f000 80cc 	beq.w	15bde <rpc_ip_event_handler+0x3c2>
   15a46:	f249 0303 	movw	r3, #36867	; 0x9003
   15a4a:	429e      	cmp	r6, r3
   15a4c:	d05b      	beq.n	15b06 <rpc_ip_event_handler+0x2ea>
   15a4e:	f249 0301 	movw	r3, #36865	; 0x9001
   15a52:	429e      	cmp	r6, r3
   15a54:	f47f af29 	bne.w	158aa <rpc_ip_event_handler+0x8e>
   15a58:	682e      	ldr	r6, [r5, #0]
   15a5a:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   15a5e:	f000 80ee 	beq.w	15c3e <rpc_ip_event_handler+0x422>
   15a62:	68a3      	ldr	r3, [r4, #8]
   15a64:	2b04      	cmp	r3, #4
   15a66:	f240 80e7 	bls.w	15c38 <rpc_ip_event_handler+0x41c>
   15a6a:	8a63      	ldrh	r3, [r4, #18]
   15a6c:	2b00      	cmp	r3, #0
   15a6e:	f000 80e4 	beq.w	15c3a <rpc_ip_event_handler+0x41e>
   15a72:	2b10      	cmp	r3, #16
   15a74:	f040 80cc 	bne.w	15c10 <rpc_ip_event_handler+0x3f4>
   15a78:	2024      	movs	r0, #36	; 0x24
   15a7a:	f7fe fb01 	bl	14080 <nrf_modem_os_alloc>
   15a7e:	b318      	cbz	r0, 15ac8 <rpc_ip_event_handler+0x2ac>
   15a80:	230a      	movs	r3, #10
   15a82:	6043      	str	r3, [r0, #4]
   15a84:	2324      	movs	r3, #36	; 0x24
   15a86:	7003      	strb	r3, [r0, #0]
   15a88:	7c62      	ldrb	r2, [r4, #17]
   15a8a:	7c23      	ldrb	r3, [r4, #16]
   15a8c:	f104 0124 	add.w	r1, r4, #36	; 0x24
   15a90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15a94:	8103      	strh	r3, [r0, #8]
   15a96:	f100 0210 	add.w	r2, r0, #16
   15a9a:	f104 0314 	add.w	r3, r4, #20
   15a9e:	f853 6b04 	ldr.w	r6, [r3], #4
   15aa2:	428b      	cmp	r3, r1
   15aa4:	f842 6b04 	str.w	r6, [r2], #4
   15aa8:	d1f9      	bne.n	15a9e <rpc_ip_event_handler+0x282>
   15aaa:	2324      	movs	r3, #36	; 0x24
   15aac:	6822      	ldr	r2, [r4, #0]
   15aae:	9307      	str	r3, [sp, #28]
   15ab0:	9204      	str	r2, [sp, #16]
   15ab2:	6862      	ldr	r2, [r4, #4]
   15ab4:	a904      	add	r1, sp, #16
   15ab6:	e9cd 2005 	strd	r2, r0, [sp, #20]
   15aba:	69e8      	ldr	r0, [r5, #28]
   15abc:	6803      	ldr	r3, [r0, #0]
   15abe:	685b      	ldr	r3, [r3, #4]
   15ac0:	4798      	blx	r3
   15ac2:	3001      	adds	r0, #1
   15ac4:	f040 808f 	bne.w	15be6 <rpc_ip_event_handler+0x3ca>
   15ac8:	2002      	movs	r0, #2
   15aca:	e0bc      	b.n	15c46 <rpc_ip_event_handler+0x42a>
   15acc:	682b      	ldr	r3, [r5, #0]
   15ace:	2b01      	cmp	r3, #1
   15ad0:	f040 80b8 	bne.w	15c44 <rpc_ip_event_handler+0x428>
   15ad4:	6960      	ldr	r0, [r4, #20]
   15ad6:	2800      	cmp	r0, #0
   15ad8:	f040 80e9 	bne.w	15cae <rpc_ip_event_handler+0x492>
   15adc:	2302      	movs	r3, #2
   15ade:	602b      	str	r3, [r5, #0]
   15ae0:	69a3      	ldr	r3, [r4, #24]
   15ae2:	61ab      	str	r3, [r5, #24]
   15ae4:	e0af      	b.n	15c46 <rpc_ip_event_handler+0x42a>
   15ae6:	682b      	ldr	r3, [r5, #0]
   15ae8:	b29b      	uxth	r3, r3
   15aea:	2b0d      	cmp	r3, #13
   15aec:	f040 80aa 	bne.w	15c44 <rpc_ip_event_handler+0x428>
   15af0:	6960      	ldr	r0, [r4, #20]
   15af2:	2800      	cmp	r0, #0
   15af4:	f040 80db 	bne.w	15cae <rpc_ip_event_handler+0x492>
   15af8:	682b      	ldr	r3, [r5, #0]
   15afa:	0c1b      	lsrs	r3, r3, #16
   15afc:	041b      	lsls	r3, r3, #16
   15afe:	f043 030e 	orr.w	r3, r3, #14
   15b02:	602b      	str	r3, [r5, #0]
   15b04:	e09f      	b.n	15c46 <rpc_ip_event_handler+0x42a>
   15b06:	682b      	ldr	r3, [r5, #0]
   15b08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   15b0c:	602b      	str	r3, [r5, #0]
   15b0e:	682b      	ldr	r3, [r5, #0]
   15b10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   15b14:	602b      	str	r3, [r5, #0]
   15b16:	6923      	ldr	r3, [r4, #16]
   15b18:	2b6c      	cmp	r3, #108	; 0x6c
   15b1a:	d107      	bne.n	15b2c <rpc_ip_event_handler+0x310>
   15b1c:	682b      	ldr	r3, [r5, #0]
   15b1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   15b22:	602b      	str	r3, [r5, #0]
   15b24:	2380      	movs	r3, #128	; 0x80
   15b26:	606b      	str	r3, [r5, #4]
   15b28:	60ab      	str	r3, [r5, #8]
   15b2a:	e08b      	b.n	15c44 <rpc_ip_event_handler+0x428>
   15b2c:	2b6a      	cmp	r3, #106	; 0x6a
   15b2e:	bf96      	itet	ls
   15b30:	4a08      	ldrls	r2, [pc, #32]	; (15b54 <rpc_ip_event_handler+0x338>)
   15b32:	235f      	movhi	r3, #95	; 0x5f
   15b34:	5cd3      	ldrbls	r3, [r2, r3]
   15b36:	e7f6      	b.n	15b26 <rpc_ip_event_handler+0x30a>
   15b38:	2000cb10 	.word	0x2000cb10
   15b3c:	2000cb14 	.word	0x2000cb14
   15b40:	2000cb0c 	.word	0x2000cb0c
   15b44:	0001981f 	.word	0x0001981f
   15b48:	2000cb04 	.word	0x2000cb04
   15b4c:	2000cb00 	.word	0x2000cb00
   15b50:	2000cbf6 	.word	0x2000cbf6
   15b54:	00019824 	.word	0x00019824
   15b58:	2000cb38 	.word	0x2000cb38
   15b5c:	2000cc02 	.word	0x2000cc02
   15b60:	2000cc00 	.word	0x2000cc00
   15b64:	682b      	ldr	r3, [r5, #0]
   15b66:	b29b      	uxth	r3, r3
   15b68:	2b03      	cmp	r3, #3
   15b6a:	d16b      	bne.n	15c44 <rpc_ip_event_handler+0x428>
   15b6c:	6960      	ldr	r0, [r4, #20]
   15b6e:	2800      	cmp	r0, #0
   15b70:	f040 809d 	bne.w	15cae <rpc_ip_event_handler+0x492>
   15b74:	682b      	ldr	r3, [r5, #0]
   15b76:	0c1b      	lsrs	r3, r3, #16
   15b78:	041b      	lsls	r3, r3, #16
   15b7a:	f043 0304 	orr.w	r3, r3, #4
   15b7e:	e7c0      	b.n	15b02 <rpc_ip_event_handler+0x2e6>
   15b80:	682b      	ldr	r3, [r5, #0]
   15b82:	0099      	lsls	r1, r3, #2
   15b84:	d55e      	bpl.n	15c44 <rpc_ip_event_handler+0x428>
   15b86:	682b      	ldr	r3, [r5, #0]
   15b88:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   15b8c:	602b      	str	r3, [r5, #0]
   15b8e:	6960      	ldr	r0, [r4, #20]
   15b90:	b968      	cbnz	r0, 15bae <rpc_ip_event_handler+0x392>
   15b92:	682b      	ldr	r3, [r5, #0]
   15b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   15b98:	602b      	str	r3, [r5, #0]
   15b9a:	682b      	ldr	r3, [r5, #0]
   15b9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   15ba0:	602b      	str	r3, [r5, #0]
   15ba2:	682b      	ldr	r3, [r5, #0]
   15ba4:	0c1b      	lsrs	r3, r3, #16
   15ba6:	041b      	lsls	r3, r3, #16
   15ba8:	f043 0305 	orr.w	r3, r3, #5
   15bac:	e7a9      	b.n	15b02 <rpc_ip_event_handler+0x2e6>
   15bae:	286a      	cmp	r0, #106	; 0x6a
   15bb0:	bf8e      	itee	hi
   15bb2:	235f      	movhi	r3, #95	; 0x5f
   15bb4:	4b4c      	ldrls	r3, [pc, #304]	; (15ce8 <rpc_ip_event_handler+0x4cc>)
   15bb6:	5c1b      	ldrbls	r3, [r3, r0]
   15bb8:	606b      	str	r3, [r5, #4]
   15bba:	682b      	ldr	r3, [r5, #0]
   15bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   15bc0:	602b      	str	r3, [r5, #0]
   15bc2:	e03f      	b.n	15c44 <rpc_ip_event_handler+0x428>
   15bc4:	682b      	ldr	r3, [r5, #0]
   15bc6:	b29b      	uxth	r3, r3
   15bc8:	2b06      	cmp	r3, #6
   15bca:	d13b      	bne.n	15c44 <rpc_ip_event_handler+0x428>
   15bcc:	6960      	ldr	r0, [r4, #20]
   15bce:	2800      	cmp	r0, #0
   15bd0:	d16d      	bne.n	15cae <rpc_ip_event_handler+0x492>
   15bd2:	682b      	ldr	r3, [r5, #0]
   15bd4:	0c1b      	lsrs	r3, r3, #16
   15bd6:	041b      	lsls	r3, r3, #16
   15bd8:	f043 0307 	orr.w	r3, r3, #7
   15bdc:	e791      	b.n	15b02 <rpc_ip_event_handler+0x2e6>
   15bde:	682b      	ldr	r3, [r5, #0]
   15be0:	b29b      	uxth	r3, r3
   15be2:	2b07      	cmp	r3, #7
   15be4:	d12e      	bne.n	15c44 <rpc_ip_event_handler+0x428>
   15be6:	682b      	ldr	r3, [r5, #0]
   15be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   15bec:	e7e8      	b.n	15bc0 <rpc_ip_event_handler+0x3a4>
   15bee:	682b      	ldr	r3, [r5, #0]
   15bf0:	b29b      	uxth	r3, r3
   15bf2:	2b08      	cmp	r3, #8
   15bf4:	d126      	bne.n	15c44 <rpc_ip_event_handler+0x428>
   15bf6:	6963      	ldr	r3, [r4, #20]
   15bf8:	2b00      	cmp	r3, #0
   15bfa:	d16d      	bne.n	15cd8 <rpc_ip_event_handler+0x4bc>
   15bfc:	4b3b      	ldr	r3, [pc, #236]	; (15cec <rpc_ip_event_handler+0x4d0>)
   15bfe:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   15c02:	682b      	ldr	r3, [r5, #0]
   15c04:	0c1b      	lsrs	r3, r3, #16
   15c06:	041b      	lsls	r3, r3, #16
   15c08:	f043 0309 	orr.w	r3, r3, #9
   15c0c:	602b      	str	r3, [r5, #0]
   15c0e:	e032      	b.n	15c76 <rpc_ip_event_handler+0x45a>
   15c10:	2b04      	cmp	r3, #4
   15c12:	d114      	bne.n	15c3e <rpc_ip_event_handler+0x422>
   15c14:	2010      	movs	r0, #16
   15c16:	f7fe fa33 	bl	14080 <nrf_modem_os_alloc>
   15c1a:	2800      	cmp	r0, #0
   15c1c:	f43f af54 	beq.w	15ac8 <rpc_ip_event_handler+0x2ac>
   15c20:	2302      	movs	r3, #2
   15c22:	6043      	str	r3, [r0, #4]
   15c24:	2310      	movs	r3, #16
   15c26:	7003      	strb	r3, [r0, #0]
   15c28:	7c22      	ldrb	r2, [r4, #16]
   15c2a:	7c61      	ldrb	r1, [r4, #17]
   15c2c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   15c30:	8102      	strh	r2, [r0, #8]
   15c32:	6962      	ldr	r2, [r4, #20]
   15c34:	60c2      	str	r2, [r0, #12]
   15c36:	e739      	b.n	15aac <rpc_ip_event_handler+0x290>
   15c38:	2300      	movs	r3, #0
   15c3a:	4618      	mov	r0, r3
   15c3c:	e736      	b.n	15aac <rpc_ip_event_handler+0x290>
   15c3e:	6820      	ldr	r0, [r4, #0]
   15c40:	f002 ff9b 	bl	18b7a <rpc_client_data_free>
   15c44:	2000      	movs	r0, #0
   15c46:	b009      	add	sp, #36	; 0x24
   15c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c4c:	4b27      	ldr	r3, [pc, #156]	; (15cec <rpc_ip_event_handler+0x4d0>)
   15c4e:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   15c52:	6963      	ldr	r3, [r4, #20]
   15c54:	b17b      	cbz	r3, 15c76 <rpc_ip_event_handler+0x45a>
   15c56:	2b6b      	cmp	r3, #107	; 0x6b
   15c58:	d10f      	bne.n	15c7a <rpc_ip_event_handler+0x45e>
   15c5a:	6928      	ldr	r0, [r5, #16]
   15c5c:	220c      	movs	r2, #12
   15c5e:	2801      	cmp	r0, #1
   15c60:	682b      	ldr	r3, [r5, #0]
   15c62:	d104      	bne.n	15c6e <rpc_ip_event_handler+0x452>
   15c64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   15c68:	602b      	str	r3, [r5, #0]
   15c6a:	606a      	str	r2, [r5, #4]
   15c6c:	e7eb      	b.n	15c46 <rpc_ip_event_handler+0x42a>
   15c6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   15c72:	602b      	str	r3, [r5, #0]
   15c74:	606a      	str	r2, [r5, #4]
   15c76:	2001      	movs	r0, #1
   15c78:	e7e5      	b.n	15c46 <rpc_ip_event_handler+0x42a>
   15c7a:	f023 0002 	bic.w	r0, r3, #2
   15c7e:	2801      	cmp	r0, #1
   15c80:	d102      	bne.n	15c88 <rpc_ip_event_handler+0x46c>
   15c82:	230c      	movs	r3, #12
   15c84:	606b      	str	r3, [r5, #4]
   15c86:	e7de      	b.n	15c46 <rpc_ip_event_handler+0x42a>
   15c88:	2b6a      	cmp	r3, #106	; 0x6a
   15c8a:	bf8e      	itee	hi
   15c8c:	235f      	movhi	r3, #95	; 0x5f
   15c8e:	4a16      	ldrls	r2, [pc, #88]	; (15ce8 <rpc_ip_event_handler+0x4cc>)
   15c90:	5cd3      	ldrbls	r3, [r2, r3]
   15c92:	606b      	str	r3, [r5, #4]
   15c94:	682b      	ldr	r3, [r5, #0]
   15c96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   15c9a:	e7b7      	b.n	15c0c <rpc_ip_event_handler+0x3f0>
   15c9c:	682b      	ldr	r3, [r5, #0]
   15c9e:	025a      	lsls	r2, r3, #9
   15ca0:	d5d0      	bpl.n	15c44 <rpc_ip_event_handler+0x428>
   15ca2:	6960      	ldr	r0, [r4, #20]
   15ca4:	b918      	cbnz	r0, 15cae <rpc_ip_event_handler+0x492>
   15ca6:	682b      	ldr	r3, [r5, #0]
   15ca8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   15cac:	e729      	b.n	15b02 <rpc_ip_event_handler+0x2e6>
   15cae:	286a      	cmp	r0, #106	; 0x6a
   15cb0:	d817      	bhi.n	15ce2 <rpc_ip_event_handler+0x4c6>
   15cb2:	4b0d      	ldr	r3, [pc, #52]	; (15ce8 <rpc_ip_event_handler+0x4cc>)
   15cb4:	5c1b      	ldrb	r3, [r3, r0]
   15cb6:	606b      	str	r3, [r5, #4]
   15cb8:	e7c4      	b.n	15c44 <rpc_ip_event_handler+0x428>
   15cba:	682b      	ldr	r3, [r5, #0]
   15cbc:	01db      	lsls	r3, r3, #7
   15cbe:	d5c1      	bpl.n	15c44 <rpc_ip_event_handler+0x428>
   15cc0:	6963      	ldr	r3, [r4, #20]
   15cc2:	b94b      	cbnz	r3, 15cd8 <rpc_ip_event_handler+0x4bc>
   15cc4:	6820      	ldr	r0, [r4, #0]
   15cc6:	b118      	cbz	r0, 15cd0 <rpc_ip_event_handler+0x4b4>
   15cc8:	2001      	movs	r0, #1
   15cca:	4b08      	ldr	r3, [pc, #32]	; (15cec <rpc_ip_event_handler+0x4d0>)
   15ccc:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   15cd0:	682b      	ldr	r3, [r5, #0]
   15cd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   15cd6:	e714      	b.n	15b02 <rpc_ip_event_handler+0x2e6>
   15cd8:	2b6a      	cmp	r3, #106	; 0x6a
   15cda:	d802      	bhi.n	15ce2 <rpc_ip_event_handler+0x4c6>
   15cdc:	4a02      	ldr	r2, [pc, #8]	; (15ce8 <rpc_ip_event_handler+0x4cc>)
   15cde:	5cd3      	ldrb	r3, [r2, r3]
   15ce0:	e7e9      	b.n	15cb6 <rpc_ip_event_handler+0x49a>
   15ce2:	235f      	movs	r3, #95	; 0x5f
   15ce4:	e7e7      	b.n	15cb6 <rpc_ip_event_handler+0x49a>
   15ce6:	bf00      	nop
   15ce8:	00019824 	.word	0x00019824
   15cec:	2000cb18 	.word	0x2000cb18

00015cf0 <hostname_free>:
   15cf0:	b538      	push	{r3, r4, r5, lr}
   15cf2:	4c07      	ldr	r4, [pc, #28]	; (15d10 <hostname_free+0x20>)
   15cf4:	4605      	mov	r5, r0
   15cf6:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
   15cfa:	b138      	cbz	r0, 15d0c <hostname_free+0x1c>
   15cfc:	f7fe f9ca 	bl	14094 <nrf_modem_os_free>
   15d00:	2300      	movs	r3, #0
   15d02:	f844 3035 	str.w	r3, [r4, r5, lsl #3]
   15d06:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   15d0a:	6063      	str	r3, [r4, #4]
   15d0c:	bd38      	pop	{r3, r4, r5, pc}
   15d0e:	bf00      	nop
   15d10:	2000cb3c 	.word	0x2000cb3c

00015d14 <secure_socket_attach_initiate>:
   15d14:	f04f 33ff 	mov.w	r3, #4294967295
   15d18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   15d1c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 15db4 <secure_socket_attach_initiate+0xa0>
   15d20:	9301      	str	r3, [sp, #4]
   15d22:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   15d26:	460d      	mov	r5, r1
   15d28:	4616      	mov	r6, r2
   15d2a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   15d2e:	f247 0281 	movw	r2, #28801	; 0x7081
   15d32:	6989      	ldr	r1, [r1, #24]
   15d34:	4607      	mov	r7, r0
   15d36:	f002 ff22 	bl	18b7e <ip_interface_request_create>
   15d3a:	4604      	mov	r4, r0
   15d3c:	b398      	cbz	r0, 15da6 <secure_socket_attach_initiate+0x92>
   15d3e:	f8d9 2004 	ldr.w	r2, [r9, #4]
   15d42:	b122      	cbz	r2, 15d4e <secure_socket_attach_initiate+0x3a>
   15d44:	f858 1037 	ldr.w	r1, [r8, r7, lsl #3]
   15d48:	6800      	ldr	r0, [r0, #0]
   15d4a:	f002 f9ab 	bl	180a4 <memcpy>
   15d4e:	2324      	movs	r3, #36	; 0x24
   15d50:	4a17      	ldr	r2, [pc, #92]	; (15db0 <secure_socket_attach_initiate+0x9c>)
   15d52:	fb03 2307 	mla	r3, r3, r7, r2
   15d56:	f104 0214 	add.w	r2, r4, #20
   15d5a:	f103 0124 	add.w	r1, r3, #36	; 0x24
   15d5e:	f853 0b04 	ldr.w	r0, [r3], #4
   15d62:	428b      	cmp	r3, r1
   15d64:	f842 0b04 	str.w	r0, [r2], #4
   15d68:	d1f9      	bne.n	15d5e <secure_socket_attach_initiate+0x4a>
   15d6a:	68a3      	ldr	r3, [r4, #8]
   15d6c:	4622      	mov	r2, r4
   15d6e:	3324      	adds	r3, #36	; 0x24
   15d70:	60a3      	str	r3, [r4, #8]
   15d72:	682b      	ldr	r3, [r5, #0]
   15d74:	f247 0181 	movw	r1, #28801	; 0x7081
   15d78:	0c1b      	lsrs	r3, r3, #16
   15d7a:	041b      	lsls	r3, r3, #16
   15d7c:	f043 030a 	orr.w	r3, r3, #10
   15d80:	602b      	str	r3, [r5, #0]
   15d82:	2004      	movs	r0, #4
   15d84:	f002 fef2 	bl	18b6c <rpc_client_request_send>
   15d88:	682b      	ldr	r3, [r5, #0]
   15d8a:	00db      	lsls	r3, r3, #3
   15d8c:	d40d      	bmi.n	15daa <secure_socket_attach_initiate+0x96>
   15d8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15d92:	210b      	movs	r1, #11
   15d94:	4638      	mov	r0, r7
   15d96:	ab01      	add	r3, sp, #4
   15d98:	f002 ff04 	bl	18ba4 <ip_interface_wait>
   15d9c:	b100      	cbz	r0, 15da0 <secure_socket_attach_initiate+0x8c>
   15d9e:	602e      	str	r6, [r5, #0]
   15da0:	b003      	add	sp, #12
   15da2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15da6:	200c      	movs	r0, #12
   15da8:	e7fa      	b.n	15da0 <secure_socket_attach_initiate+0x8c>
   15daa:	2077      	movs	r0, #119	; 0x77
   15dac:	e7f8      	b.n	15da0 <secure_socket_attach_initiate+0x8c>
   15dae:	bf00      	nop
   15db0:	2000cc04 	.word	0x2000cc04
   15db4:	2000cb3c 	.word	0x2000cb3c

00015db8 <tls_interface_init>:
   15db8:	2201      	movs	r2, #1
   15dba:	4b02      	ldr	r3, [pc, #8]	; (15dc4 <tls_interface_init+0xc>)
   15dbc:	2000      	movs	r0, #0
   15dbe:	701a      	strb	r2, [r3, #0]
   15dc0:	4770      	bx	lr
   15dc2:	bf00      	nop
   15dc4:	2000cc03 	.word	0x2000cc03

00015dc8 <tls_rpc_ip_event_handler>:
   15dc8:	b570      	push	{r4, r5, r6, lr}
   15dca:	460c      	mov	r4, r1
   15dcc:	f248 0181 	movw	r1, #32897	; 0x8081
   15dd0:	428b      	cmp	r3, r1
   15dd2:	4606      	mov	r6, r0
   15dd4:	d035      	beq.n	15e42 <tls_rpc_ip_event_handler+0x7a>
   15dd6:	f249 0182 	movw	r1, #36994	; 0x9082
   15dda:	428b      	cmp	r3, r1
   15ddc:	d040      	beq.n	15e60 <tls_rpc_ip_event_handler+0x98>
   15dde:	f248 0102 	movw	r1, #32770	; 0x8002
   15de2:	428b      	cmp	r3, r1
   15de4:	d161      	bne.n	15eaa <tls_rpc_ip_event_handler+0xe2>
   15de6:	2c00      	cmp	r4, #0
   15de8:	d05f      	beq.n	15eaa <tls_rpc_ip_event_handler+0xe2>
   15dea:	6963      	ldr	r3, [r4, #20]
   15dec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   15df0:	d002      	beq.n	15df8 <tls_rpc_ip_event_handler+0x30>
   15df2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   15df6:	d158      	bne.n	15eaa <tls_rpc_ip_event_handler+0xe2>
   15df8:	6823      	ldr	r3, [r4, #0]
   15dfa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   15dfe:	6023      	str	r3, [r4, #0]
   15e00:	6955      	ldr	r5, [r2, #20]
   15e02:	2d00      	cmp	r5, #0
   15e04:	d14d      	bne.n	15ea2 <tls_rpc_ip_event_handler+0xda>
   15e06:	6823      	ldr	r3, [r4, #0]
   15e08:	0c1b      	lsrs	r3, r3, #16
   15e0a:	041b      	lsls	r3, r3, #16
   15e0c:	f043 0305 	orr.w	r3, r3, #5
   15e10:	6023      	str	r3, [r4, #0]
   15e12:	6823      	ldr	r3, [r4, #0]
   15e14:	00db      	lsls	r3, r3, #3
   15e16:	d401      	bmi.n	15e1c <tls_rpc_ip_event_handler+0x54>
   15e18:	2000      	movs	r0, #0
   15e1a:	e020      	b.n	15e5e <tls_rpc_ip_event_handler+0x96>
   15e1c:	2324      	movs	r3, #36	; 0x24
   15e1e:	4373      	muls	r3, r6
   15e20:	4a23      	ldr	r2, [pc, #140]	; (15eb0 <tls_rpc_ip_event_handler+0xe8>)
   15e22:	5cd3      	ldrb	r3, [r2, r3]
   15e24:	2b02      	cmp	r3, #2
   15e26:	d1f7      	bne.n	15e18 <tls_rpc_ip_event_handler+0x50>
   15e28:	4621      	mov	r1, r4
   15e2a:	4630      	mov	r0, r6
   15e2c:	f002 feca 	bl	18bc4 <secure_client_socket>
   15e30:	2800      	cmp	r0, #0
   15e32:	d0f1      	beq.n	15e18 <tls_rpc_ip_event_handler+0x50>
   15e34:	2877      	cmp	r0, #119	; 0x77
   15e36:	d0ef      	beq.n	15e18 <tls_rpc_ip_event_handler+0x50>
   15e38:	6060      	str	r0, [r4, #4]
   15e3a:	6823      	ldr	r3, [r4, #0]
   15e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   15e40:	e02d      	b.n	15e9e <tls_rpc_ip_event_handler+0xd6>
   15e42:	2c00      	cmp	r4, #0
   15e44:	d0e8      	beq.n	15e18 <tls_rpc_ip_event_handler+0x50>
   15e46:	6823      	ldr	r3, [r4, #0]
   15e48:	b29b      	uxth	r3, r3
   15e4a:	2b0a      	cmp	r3, #10
   15e4c:	d1e4      	bne.n	15e18 <tls_rpc_ip_event_handler+0x50>
   15e4e:	6950      	ldr	r0, [r2, #20]
   15e50:	bb40      	cbnz	r0, 15ea4 <tls_rpc_ip_event_handler+0xdc>
   15e52:	6823      	ldr	r3, [r4, #0]
   15e54:	0c1b      	lsrs	r3, r3, #16
   15e56:	041b      	lsls	r3, r3, #16
   15e58:	f043 030b 	orr.w	r3, r3, #11
   15e5c:	6023      	str	r3, [r4, #0]
   15e5e:	bd70      	pop	{r4, r5, r6, pc}
   15e60:	2c00      	cmp	r4, #0
   15e62:	d0d9      	beq.n	15e18 <tls_rpc_ip_event_handler+0x50>
   15e64:	6823      	ldr	r3, [r4, #0]
   15e66:	b29b      	uxth	r3, r3
   15e68:	2b0b      	cmp	r3, #11
   15e6a:	d1d5      	bne.n	15e18 <tls_rpc_ip_event_handler+0x50>
   15e6c:	6915      	ldr	r5, [r2, #16]
   15e6e:	b9c5      	cbnz	r5, 15ea2 <tls_rpc_ip_event_handler+0xda>
   15e70:	6823      	ldr	r3, [r4, #0]
   15e72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   15e76:	6023      	str	r3, [r4, #0]
   15e78:	f7ff ff3a 	bl	15cf0 <hostname_free>
   15e7c:	6823      	ldr	r3, [r4, #0]
   15e7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   15e82:	6023      	str	r3, [r4, #0]
   15e84:	6823      	ldr	r3, [r4, #0]
   15e86:	0c1b      	lsrs	r3, r3, #16
   15e88:	041b      	lsls	r3, r3, #16
   15e8a:	f043 030c 	orr.w	r3, r3, #12
   15e8e:	6023      	str	r3, [r4, #0]
   15e90:	6823      	ldr	r3, [r4, #0]
   15e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   15e96:	6023      	str	r3, [r4, #0]
   15e98:	6823      	ldr	r3, [r4, #0]
   15e9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   15e9e:	6023      	str	r3, [r4, #0]
   15ea0:	e7ba      	b.n	15e18 <tls_rpc_ip_event_handler+0x50>
   15ea2:	4628      	mov	r0, r5
   15ea4:	f7ff fc7a 	bl	1579c <rpc_error_to_nrf_errno>
   15ea8:	e7c6      	b.n	15e38 <tls_rpc_ip_event_handler+0x70>
   15eaa:	2001      	movs	r0, #1
   15eac:	e7d7      	b.n	15e5e <tls_rpc_ip_event_handler+0x96>
   15eae:	bf00      	nop
   15eb0:	2000cc04 	.word	0x2000cc04

00015eb4 <at_cmd_send>:
   15eb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15eb6:	4615      	mov	r5, r2
   15eb8:	f06f 0258 	mvn.w	r2, #88	; 0x58
   15ebc:	2300      	movs	r3, #0
   15ebe:	7302      	strb	r2, [r0, #12]
   15ec0:	2204      	movs	r2, #4
   15ec2:	4c0d      	ldr	r4, [pc, #52]	; (15ef8 <at_cmd_send+0x44>)
   15ec4:	7343      	strb	r3, [r0, #13]
   15ec6:	7383      	strb	r3, [r0, #14]
   15ec8:	73c3      	strb	r3, [r0, #15]
   15eca:	7202      	strb	r2, [r0, #8]
   15ecc:	7243      	strb	r3, [r0, #9]
   15ece:	7283      	strb	r3, [r0, #10]
   15ed0:	72c3      	strb	r3, [r0, #11]
   15ed2:	4602      	mov	r2, r0
   15ed4:	b289      	uxth	r1, r1
   15ed6:	2003      	movs	r0, #3
   15ed8:	7023      	strb	r3, [r4, #0]
   15eda:	f002 fe47 	bl	18b6c <rpc_client_request_send>
   15ede:	f04f 33ff 	mov.w	r3, #4294967295
   15ee2:	9301      	str	r3, [sp, #4]
   15ee4:	7823      	ldrb	r3, [r4, #0]
   15ee6:	42ab      	cmp	r3, r5
   15ee8:	d101      	bne.n	15eee <at_cmd_send+0x3a>
   15eea:	b003      	add	sp, #12
   15eec:	bd30      	pop	{r4, r5, pc}
   15eee:	a901      	add	r1, sp, #4
   15ef0:	2000      	movs	r0, #0
   15ef2:	f002 fca5 	bl	18840 <nrf_modem_os_timedwait>
   15ef6:	e7f5      	b.n	15ee4 <at_cmd_send+0x30>
   15ef8:	2000cd24 	.word	0x2000cd24

00015efc <nrf_modem_at_init>:
   15efc:	2201      	movs	r2, #1
   15efe:	b508      	push	{r3, lr}
   15f00:	4611      	mov	r1, r2
   15f02:	4808      	ldr	r0, [pc, #32]	; (15f24 <nrf_modem_at_init+0x28>)
   15f04:	f7fe f882 	bl	1400c <nrf_modem_os_sem_init>
   15f08:	2000      	movs	r0, #0
   15f0a:	f002 fe29 	bl	18b60 <rpc_client_request_alloc>
   15f0e:	b128      	cbz	r0, 15f1c <nrf_modem_at_init+0x20>
   15f10:	2201      	movs	r2, #1
   15f12:	2105      	movs	r1, #5
   15f14:	f7ff ffce 	bl	15eb4 <at_cmd_send>
   15f18:	2000      	movs	r0, #0
   15f1a:	bd08      	pop	{r3, pc}
   15f1c:	f06f 000b 	mvn.w	r0, #11
   15f20:	e7fb      	b.n	15f1a <nrf_modem_at_init+0x1e>
   15f22:	bf00      	nop
   15f24:	2000cb7c 	.word	0x2000cb7c

00015f28 <rpc_at_event_handler>:
   15f28:	b570      	push	{r4, r5, r6, lr}
   15f2a:	68c3      	ldr	r3, [r0, #12]
   15f2c:	4605      	mov	r5, r0
   15f2e:	2ba7      	cmp	r3, #167	; 0xa7
   15f30:	d003      	beq.n	15f3a <rpc_at_event_handler+0x12>
   15f32:	6828      	ldr	r0, [r5, #0]
   15f34:	f002 fe21 	bl	18b7a <rpc_client_data_free>
   15f38:	e008      	b.n	15f4c <rpc_at_event_handler+0x24>
   15f3a:	2903      	cmp	r1, #3
   15f3c:	d008      	beq.n	15f50 <rpc_at_event_handler+0x28>
   15f3e:	2904      	cmp	r1, #4
   15f40:	d019      	beq.n	15f76 <rpc_at_event_handler+0x4e>
   15f42:	2902      	cmp	r1, #2
   15f44:	d102      	bne.n	15f4c <rpc_at_event_handler+0x24>
   15f46:	2201      	movs	r2, #1
   15f48:	4b0e      	ldr	r3, [pc, #56]	; (15f84 <rpc_at_event_handler+0x5c>)
   15f4a:	701a      	strb	r2, [r3, #0]
   15f4c:	2000      	movs	r0, #0
   15f4e:	e00a      	b.n	15f66 <rpc_at_event_handler+0x3e>
   15f50:	4e0d      	ldr	r6, [pc, #52]	; (15f88 <rpc_at_event_handler+0x60>)
   15f52:	6833      	ldr	r3, [r6, #0]
   15f54:	b143      	cbz	r3, 15f68 <rpc_at_event_handler+0x40>
   15f56:	2400      	movs	r4, #0
   15f58:	6800      	ldr	r0, [r0, #0]
   15f5a:	4798      	blx	r3
   15f5c:	6828      	ldr	r0, [r5, #0]
   15f5e:	6034      	str	r4, [r6, #0]
   15f60:	f002 fe0b 	bl	18b7a <rpc_client_data_free>
   15f64:	b2e0      	uxtb	r0, r4
   15f66:	bd70      	pop	{r4, r5, r6, pc}
   15f68:	2202      	movs	r2, #2
   15f6a:	4b08      	ldr	r3, [pc, #32]	; (15f8c <rpc_at_event_handler+0x64>)
   15f6c:	2401      	movs	r4, #1
   15f6e:	6018      	str	r0, [r3, #0]
   15f70:	4b04      	ldr	r3, [pc, #16]	; (15f84 <rpc_at_event_handler+0x5c>)
   15f72:	701a      	strb	r2, [r3, #0]
   15f74:	e7f6      	b.n	15f64 <rpc_at_event_handler+0x3c>
   15f76:	4b06      	ldr	r3, [pc, #24]	; (15f90 <rpc_at_event_handler+0x68>)
   15f78:	681b      	ldr	r3, [r3, #0]
   15f7a:	2b00      	cmp	r3, #0
   15f7c:	d0d9      	beq.n	15f32 <rpc_at_event_handler+0xa>
   15f7e:	6800      	ldr	r0, [r0, #0]
   15f80:	4798      	blx	r3
   15f82:	e7d6      	b.n	15f32 <rpc_at_event_handler+0xa>
   15f84:	2000cd24 	.word	0x2000cd24
   15f88:	2000cb88 	.word	0x2000cb88
   15f8c:	2000cb84 	.word	0x2000cb84
   15f90:	2000cb80 	.word	0x2000cb80

00015f94 <rpc_dfu_event_handler>:
   15f94:	b510      	push	{r4, lr}
   15f96:	4604      	mov	r4, r0
   15f98:	6800      	ldr	r0, [r0, #0]
   15f9a:	b108      	cbz	r0, 15fa0 <rpc_dfu_event_handler+0xc>
   15f9c:	f002 fded 	bl	18b7a <rpc_client_data_free>
   15fa0:	4b05      	ldr	r3, [pc, #20]	; (15fb8 <rpc_dfu_event_handler+0x24>)
   15fa2:	68e2      	ldr	r2, [r4, #12]
   15fa4:	429a      	cmp	r2, r3
   15fa6:	bf05      	ittet	eq
   15fa8:	2001      	moveq	r0, #1
   15faa:	4b04      	ldreq	r3, [pc, #16]	; (15fbc <rpc_dfu_event_handler+0x28>)
   15fac:	2000      	movne	r0, #0
   15fae:	7018      	strbeq	r0, [r3, #0]
   15fb0:	bf04      	itt	eq
   15fb2:	4b03      	ldreq	r3, [pc, #12]	; (15fc0 <rpc_dfu_event_handler+0x2c>)
   15fb4:	601c      	streq	r4, [r3, #0]
   15fb6:	bd10      	pop	{r4, pc}
   15fb8:	15abe11a 	.word	0x15abe11a
   15fbc:	2000cd25 	.word	0x2000cd25
   15fc0:	2000cb8c 	.word	0x2000cb8c

00015fc4 <rpc_gnss_event_handler>:
   15fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15fc8:	6804      	ldr	r4, [r0, #0]
   15fca:	4607      	mov	r7, r0
   15fcc:	460d      	mov	r5, r1
   15fce:	2c00      	cmp	r4, #0
   15fd0:	f000 8086 	beq.w	160e0 <rpc_gnss_event_handler+0x11c>
   15fd4:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   15fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   15fdc:	d142      	bne.n	16064 <rpc_gnss_event_handler+0xa0>
   15fde:	4b5f      	ldr	r3, [pc, #380]	; (1615c <rpc_gnss_event_handler+0x198>)
   15fe0:	781a      	ldrb	r2, [r3, #0]
   15fe2:	4698      	mov	r8, r3
   15fe4:	2a01      	cmp	r2, #1
   15fe6:	d131      	bne.n	1604c <rpc_gnss_event_handler+0x88>
   15fe8:	4a5d      	ldr	r2, [pc, #372]	; (16160 <rpc_gnss_event_handler+0x19c>)
   15fea:	6821      	ldr	r1, [r4, #0]
   15fec:	8812      	ldrh	r2, [r2, #0]
   15fee:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   15ff2:	d12b      	bne.n	1604c <rpc_gnss_event_handler+0x88>
   15ff4:	6862      	ldr	r2, [r4, #4]
   15ff6:	bb6a      	cbnz	r2, 16054 <rpc_gnss_event_handler+0x90>
   15ff8:	4b5a      	ldr	r3, [pc, #360]	; (16164 <rpc_gnss_event_handler+0x1a0>)
   15ffa:	681e      	ldr	r6, [r3, #0]
   15ffc:	b31e      	cbz	r6, 16046 <rpc_gnss_event_handler+0x82>
   15ffe:	f242 0309 	movw	r3, #8201	; 0x2009
   16002:	429d      	cmp	r5, r3
   16004:	d11f      	bne.n	16046 <rpc_gnss_event_handler+0x82>
   16006:	4630      	mov	r0, r6
   16008:	8923      	ldrh	r3, [r4, #8]
   1600a:	2280      	movs	r2, #128	; 0x80
   1600c:	f840 3b04 	str.w	r3, [r0], #4
   16010:	f104 010a 	add.w	r1, r4, #10
   16014:	f002 f846 	bl	180a4 <memcpy>
   16018:	2280      	movs	r2, #128	; 0x80
   1601a:	f104 018a 	add.w	r1, r4, #138	; 0x8a
   1601e:	f106 0084 	add.w	r0, r6, #132	; 0x84
   16022:	f002 f83f 	bl	180a4 <memcpy>
   16026:	f8d4 310a 	ldr.w	r3, [r4, #266]	; 0x10a
   1602a:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
   1602e:	f8d4 310e 	ldr.w	r3, [r4, #270]	; 0x10e
   16032:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
   16036:	f8d4 3112 	ldr.w	r3, [r4, #274]	; 0x112
   1603a:	f8c6 310c 	str.w	r3, [r6, #268]	; 0x10c
   1603e:	f8d4 3116 	ldr.w	r3, [r4, #278]	; 0x116
   16042:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   16046:	2300      	movs	r3, #0
   16048:	f888 3000 	strb.w	r3, [r8]
   1604c:	6838      	ldr	r0, [r7, #0]
   1604e:	f002 fd94 	bl	18b7a <rpc_client_data_free>
   16052:	e045      	b.n	160e0 <rpc_gnss_event_handler+0x11c>
   16054:	f647 71ff 	movw	r1, #32767	; 0x7fff
   16058:	428a      	cmp	r2, r1
   1605a:	bf0c      	ite	eq
   1605c:	2203      	moveq	r2, #3
   1605e:	2202      	movne	r2, #2
   16060:	701a      	strb	r2, [r3, #0]
   16062:	e7f3      	b.n	1604c <rpc_gnss_event_handler+0x88>
   16064:	4e40      	ldr	r6, [pc, #256]	; (16168 <rpc_gnss_event_handler+0x1a4>)
   16066:	6833      	ldr	r3, [r6, #0]
   16068:	2b00      	cmp	r3, #0
   1606a:	d0ef      	beq.n	1604c <rpc_gnss_event_handler+0x88>
   1606c:	f244 0204 	movw	r2, #16388	; 0x4004
   16070:	4291      	cmp	r1, r2
   16072:	d80b      	bhi.n	1608c <rpc_gnss_event_handler+0xc8>
   16074:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   16078:	d9e8      	bls.n	1604c <rpc_gnss_event_handler+0x88>
   1607a:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
   1607e:	3a02      	subs	r2, #2
   16080:	2a02      	cmp	r2, #2
   16082:	d80b      	bhi.n	1609c <rpc_gnss_event_handler+0xd8>
   16084:	e8df f002 	tbb	[pc, r2]
   16088:	4f45      	.short	0x4f45
   1608a:	59          	.byte	0x59
   1608b:	00          	.byte	0x00
   1608c:	f244 1301 	movw	r3, #16641	; 0x4101
   16090:	4299      	cmp	r1, r3
   16092:	d003      	beq.n	1609c <rpc_gnss_event_handler+0xd8>
   16094:	f244 2301 	movw	r3, #16897	; 0x4201
   16098:	4299      	cmp	r1, r3
   1609a:	d1d7      	bne.n	1604c <rpc_gnss_event_handler+0x88>
   1609c:	4f33      	ldr	r7, [pc, #204]	; (1616c <rpc_gnss_event_handler+0x1a8>)
   1609e:	6838      	ldr	r0, [r7, #0]
   160a0:	b108      	cbz	r0, 160a6 <rpc_gnss_event_handler+0xe2>
   160a2:	f002 fd6a 	bl	18b7a <rpc_client_data_free>
   160a6:	f244 2301 	movw	r3, #16897	; 0x4201
   160aa:	429d      	cmp	r5, r3
   160ac:	4b30      	ldr	r3, [pc, #192]	; (16170 <rpc_gnss_event_handler+0x1ac>)
   160ae:	d11a      	bne.n	160e6 <rpc_gnss_event_handler+0x122>
   160b0:	2202      	movs	r2, #2
   160b2:	603c      	str	r4, [r7, #0]
   160b4:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
   160b8:	701a      	strb	r2, [r3, #0]
   160ba:	07e3      	lsls	r3, r4, #31
   160bc:	d502      	bpl.n	160c4 <rpc_gnss_event_handler+0x100>
   160be:	2002      	movs	r0, #2
   160c0:	6833      	ldr	r3, [r6, #0]
   160c2:	4798      	blx	r3
   160c4:	4d2b      	ldr	r5, [pc, #172]	; (16174 <rpc_gnss_event_handler+0x1b0>)
   160c6:	f014 0418 	ands.w	r4, r4, #24
   160ca:	6833      	ldr	r3, [r6, #0]
   160cc:	782a      	ldrb	r2, [r5, #0]
   160ce:	d01a      	beq.n	16106 <rpc_gnss_event_handler+0x142>
   160d0:	b91a      	cbnz	r2, 160da <rpc_gnss_event_handler+0x116>
   160d2:	2005      	movs	r0, #5
   160d4:	4798      	blx	r3
   160d6:	2301      	movs	r3, #1
   160d8:	702b      	strb	r3, [r5, #0]
   160da:	2001      	movs	r0, #1
   160dc:	6833      	ldr	r3, [r6, #0]
   160de:	4798      	blx	r3
   160e0:	2000      	movs	r0, #0
   160e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   160e6:	f244 1201 	movw	r2, #16641	; 0x4101
   160ea:	4295      	cmp	r5, r2
   160ec:	bf0b      	itete	eq
   160ee:	2201      	moveq	r2, #1
   160f0:	2200      	movne	r2, #0
   160f2:	603c      	streq	r4, [r7, #0]
   160f4:	603c      	strne	r4, [r7, #0]
   160f6:	bf0b      	itete	eq
   160f8:	f894 4041 	ldrbeq.w	r4, [r4, #65]	; 0x41
   160fc:	f894 403d 	ldrbne.w	r4, [r4, #61]	; 0x3d
   16100:	701a      	strbeq	r2, [r3, #0]
   16102:	701a      	strbne	r2, [r3, #0]
   16104:	e7d9      	b.n	160ba <rpc_gnss_event_handler+0xf6>
   16106:	2a00      	cmp	r2, #0
   16108:	d0e7      	beq.n	160da <rpc_gnss_event_handler+0x116>
   1610a:	2006      	movs	r0, #6
   1610c:	4798      	blx	r3
   1610e:	702c      	strb	r4, [r5, #0]
   16110:	e7e3      	b.n	160da <rpc_gnss_event_handler+0x116>
   16112:	4c19      	ldr	r4, [pc, #100]	; (16178 <rpc_gnss_event_handler+0x1b4>)
   16114:	6820      	ldr	r0, [r4, #0]
   16116:	b108      	cbz	r0, 1611c <rpc_gnss_event_handler+0x158>
   16118:	f002 fd2f 	bl	18b7a <rpc_client_data_free>
   1611c:	683b      	ldr	r3, [r7, #0]
   1611e:	2003      	movs	r0, #3
   16120:	6023      	str	r3, [r4, #0]
   16122:	6833      	ldr	r3, [r6, #0]
   16124:	e7db      	b.n	160de <rpc_gnss_event_handler+0x11a>
   16126:	4c15      	ldr	r4, [pc, #84]	; (1617c <rpc_gnss_event_handler+0x1b8>)
   16128:	6820      	ldr	r0, [r4, #0]
   1612a:	b108      	cbz	r0, 16130 <rpc_gnss_event_handler+0x16c>
   1612c:	f002 fd25 	bl	18b7a <rpc_client_data_free>
   16130:	683b      	ldr	r3, [r7, #0]
   16132:	2004      	movs	r0, #4
   16134:	6023      	str	r3, [r4, #0]
   16136:	6833      	ldr	r3, [r6, #0]
   16138:	e7d1      	b.n	160de <rpc_gnss_event_handler+0x11a>
   1613a:	7822      	ldrb	r2, [r4, #0]
   1613c:	2a03      	cmp	r2, #3
   1613e:	d885      	bhi.n	1604c <rpc_gnss_event_handler+0x88>
   16140:	e8df f002 	tbb	[pc, r2]
   16144:	09070502 	.word	0x09070502
   16148:	2007      	movs	r0, #7
   1614a:	4798      	blx	r3
   1614c:	e77e      	b.n	1604c <rpc_gnss_event_handler+0x88>
   1614e:	2008      	movs	r0, #8
   16150:	e7fb      	b.n	1614a <rpc_gnss_event_handler+0x186>
   16152:	2009      	movs	r0, #9
   16154:	e7f9      	b.n	1614a <rpc_gnss_event_handler+0x186>
   16156:	200a      	movs	r0, #10
   16158:	e7f7      	b.n	1614a <rpc_gnss_event_handler+0x186>
   1615a:	bf00      	nop
   1615c:	2000cd28 	.word	0x2000cd28
   16160:	2000cbf8 	.word	0x2000cbf8
   16164:	2000cba0 	.word	0x2000cba0
   16168:	2000cb90 	.word	0x2000cb90
   1616c:	2000cb94 	.word	0x2000cb94
   16170:	2000cd27 	.word	0x2000cd27
   16174:	2000cd26 	.word	0x2000cd26
   16178:	2000cb9c 	.word	0x2000cb9c
   1617c:	2000cb98 	.word	0x2000cb98

00016180 <full_dfu_ipc_irq_handler>:
   16180:	2301      	movs	r3, #1
   16182:	4a03      	ldr	r2, [pc, #12]	; (16190 <full_dfu_ipc_irq_handler+0x10>)
   16184:	6013      	str	r3, [r2, #0]
   16186:	07c2      	lsls	r2, r0, #31
   16188:	bf44      	itt	mi
   1618a:	4a02      	ldrmi	r2, [pc, #8]	; (16194 <full_dfu_ipc_irq_handler+0x14>)
   1618c:	7013      	strbmi	r3, [r2, #0]
   1618e:	4770      	bx	lr
   16190:	2000cba4 	.word	0x2000cba4
   16194:	2000cd29 	.word	0x2000cd29

00016198 <modem_ipc_wait_for_event>:
   16198:	b538      	push	{r3, r4, r5, lr}
   1619a:	2300      	movs	r3, #0
   1619c:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
   161a0:	4c0b      	ldr	r4, [pc, #44]	; (161d0 <modem_ipc_wait_for_event+0x38>)
   161a2:	6023      	str	r3, [r4, #0]
   161a4:	6823      	ldr	r3, [r4, #0]
   161a6:	b92b      	cbnz	r3, 161b4 <modem_ipc_wait_for_event+0x1c>
   161a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   161ac:	f002 fb44 	bl	18838 <nrf_modem_os_busywait>
   161b0:	3d01      	subs	r5, #1
   161b2:	d1f7      	bne.n	161a4 <modem_ipc_wait_for_event+0xc>
   161b4:	6823      	ldr	r3, [r4, #0]
   161b6:	b913      	cbnz	r3, 161be <modem_ipc_wait_for_event+0x26>
   161b8:	f06f 0073 	mvn.w	r0, #115	; 0x73
   161bc:	e006      	b.n	161cc <modem_ipc_wait_for_event+0x34>
   161be:	4b05      	ldr	r3, [pc, #20]	; (161d4 <modem_ipc_wait_for_event+0x3c>)
   161c0:	781b      	ldrb	r3, [r3, #0]
   161c2:	2b01      	cmp	r3, #1
   161c4:	bf14      	ite	ne
   161c6:	2000      	movne	r0, #0
   161c8:	f06f 0004 	mvneq.w	r0, #4
   161cc:	bd38      	pop	{r3, r4, r5, pc}
   161ce:	bf00      	nop
   161d0:	2000cba4 	.word	0x2000cba4
   161d4:	2000cd29 	.word	0x2000cd29

000161d8 <nrf_modem_full_dfu_setup>:
   161d8:	2200      	movs	r2, #0
   161da:	2300      	movs	r3, #0
   161dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   161de:	4d2b      	ldr	r5, [pc, #172]	; (1628c <nrf_modem_full_dfu_setup+0xb4>)
   161e0:	4e2b      	ldr	r6, [pc, #172]	; (16290 <nrf_modem_full_dfu_setup+0xb8>)
   161e2:	e9c5 2302 	strd	r2, r3, [r5, #8]
   161e6:	e9c5 2304 	strd	r2, r3, [r5, #16]
   161ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   161ee:	4b29      	ldr	r3, [pc, #164]	; (16294 <nrf_modem_full_dfu_setup+0xbc>)
   161f0:	2400      	movs	r4, #0
   161f2:	601a      	str	r2, [r3, #0]
   161f4:	f100 031c 	add.w	r3, r0, #28
   161f8:	6033      	str	r3, [r6, #0]
   161fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   161fe:	6043      	str	r3, [r0, #4]
   16200:	231c      	movs	r3, #28
   16202:	7203      	strb	r3, [r0, #8]
   16204:	2320      	movs	r3, #32
   16206:	2701      	movs	r7, #1
   16208:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   1620c:	7243      	strb	r3, [r0, #9]
   1620e:	4b22      	ldr	r3, [pc, #136]	; (16298 <nrf_modem_full_dfu_setup+0xc0>)
   16210:	7004      	strb	r4, [r0, #0]
   16212:	7044      	strb	r4, [r0, #1]
   16214:	70c2      	strb	r2, [r0, #3]
   16216:	7284      	strb	r4, [r0, #10]
   16218:	72c4      	strb	r4, [r0, #11]
   1621a:	7087      	strb	r7, [r0, #2]
   1621c:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   16220:	702c      	strb	r4, [r5, #0]
   16222:	f8c3 0610 	str.w	r0, [r3, #1552]	; 0x610
   16226:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
   1622a:	4b1c      	ldr	r3, [pc, #112]	; (1629c <nrf_modem_full_dfu_setup+0xc4>)
   1622c:	b093      	sub	sp, #76	; 0x4c
   1622e:	4622      	mov	r2, r4
   16230:	4620      	mov	r0, r4
   16232:	491b      	ldr	r1, [pc, #108]	; (162a0 <nrf_modem_full_dfu_setup+0xc8>)
   16234:	701c      	strb	r4, [r3, #0]
   16236:	f7fe fd6f 	bl	14d18 <nrfx_ipc_init>
   1623a:	4621      	mov	r1, r4
   1623c:	2240      	movs	r2, #64	; 0x40
   1623e:	a801      	add	r0, sp, #4
   16240:	f001 ff54 	bl	180ec <memset>
   16244:	2302      	movs	r3, #2
   16246:	9302      	str	r3, [sp, #8]
   16248:	2304      	movs	r3, #4
   1624a:	930b      	str	r3, [sp, #44]	; 0x2c
   1624c:	2305      	movs	r3, #5
   1624e:	a801      	add	r0, sp, #4
   16250:	9311      	str	r3, [sp, #68]	; 0x44
   16252:	9709      	str	r7, [sp, #36]	; 0x24
   16254:	f7fe fd78 	bl	14d48 <nrfx_ipc_config_load>
   16258:	4b12      	ldr	r3, [pc, #72]	; (162a4 <nrf_modem_full_dfu_setup+0xcc>)
   1625a:	9400      	str	r4, [sp, #0]
   1625c:	6836      	ldr	r6, [r6, #0]
   1625e:	601c      	str	r4, [r3, #0]
   16260:	681b      	ldr	r3, [r3, #0]
   16262:	9300      	str	r3, [sp, #0]
   16264:	9b00      	ldr	r3, [sp, #0]
   16266:	f7ff ff97 	bl	16198 <modem_ipc_wait_for_event>
   1626a:	4604      	mov	r4, r0
   1626c:	b130      	cbz	r0, 1627c <nrf_modem_full_dfu_setup+0xa4>
   1626e:	2303      	movs	r3, #3
   16270:	702b      	strb	r3, [r5, #0]
   16272:	f7fe fd8f 	bl	14d94 <nrfx_ipc_uninit>
   16276:	4620      	mov	r0, r4
   16278:	b013      	add	sp, #76	; 0x4c
   1627a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1627c:	6832      	ldr	r2, [r6, #0]
   1627e:	4b0a      	ldr	r3, [pc, #40]	; (162a8 <nrf_modem_full_dfu_setup+0xd0>)
   16280:	429a      	cmp	r2, r3
   16282:	d0f8      	beq.n	16276 <nrf_modem_full_dfu_setup+0x9e>
   16284:	f06f 0404 	mvn.w	r4, #4
   16288:	e7f3      	b.n	16272 <nrf_modem_full_dfu_setup+0x9a>
   1628a:	bf00      	nop
   1628c:	2000c5d0 	.word	0x2000c5d0
   16290:	2000cba8 	.word	0x2000cba8
   16294:	2000cbac 	.word	0x2000cbac
   16298:	4002a000 	.word	0x4002a000
   1629c:	2000cd29 	.word	0x2000cd29
   162a0:	00016181 	.word	0x00016181
   162a4:	40005610 	.word	0x40005610
   162a8:	a5000001 	.word	0xa5000001

000162ac <modem_off>:
   162ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   162ae:	2501      	movs	r5, #1
   162b0:	4c07      	ldr	r4, [pc, #28]	; (162d0 <modem_off+0x24>)
   162b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   162b6:	6065      	str	r5, [r4, #4]
   162b8:	f002 fabe 	bl	18838 <nrf_modem_os_busywait>
   162bc:	2300      	movs	r3, #0
   162be:	6063      	str	r3, [r4, #4]
   162c0:	9301      	str	r3, [sp, #4]
   162c2:	6025      	str	r5, [r4, #0]
   162c4:	6823      	ldr	r3, [r4, #0]
   162c6:	9301      	str	r3, [sp, #4]
   162c8:	9b01      	ldr	r3, [sp, #4]
   162ca:	b003      	add	sp, #12
   162cc:	bd30      	pop	{r4, r5, pc}
   162ce:	bf00      	nop
   162d0:	40005610 	.word	0x40005610

000162d4 <nrf_modem_init>:
   162d4:	b570      	push	{r4, r5, r6, lr}
   162d6:	460d      	mov	r5, r1
   162d8:	b300      	cbz	r0, 1631c <nrf_modem_init+0x48>
   162da:	4e15      	ldr	r6, [pc, #84]	; (16330 <nrf_modem_init+0x5c>)
   162dc:	7832      	ldrb	r2, [r6, #0]
   162de:	bb02      	cbnz	r2, 16322 <nrf_modem_init+0x4e>
   162e0:	2901      	cmp	r1, #1
   162e2:	d113      	bne.n	1630c <nrf_modem_init+0x38>
   162e4:	68c1      	ldr	r1, [r0, #12]
   162e6:	6842      	ldr	r2, [r0, #4]
   162e8:	440a      	add	r2, r1
   162ea:	6941      	ldr	r1, [r0, #20]
   162ec:	440a      	add	r2, r1
   162ee:	69c1      	ldr	r1, [r0, #28]
   162f0:	440a      	add	r2, r1
   162f2:	f242 011b 	movw	r1, #8219	; 0x201b
   162f6:	428a      	cmp	r2, r1
   162f8:	d916      	bls.n	16328 <nrf_modem_init+0x54>
   162fa:	6800      	ldr	r0, [r0, #0]
   162fc:	f7ff ff6c 	bl	161d8 <nrf_modem_full_dfu_setup>
   16300:	4604      	mov	r4, r0
   16302:	b130      	cbz	r0, 16312 <nrf_modem_init+0x3e>
   16304:	f7ff ffd2 	bl	162ac <modem_off>
   16308:	4620      	mov	r0, r4
   1630a:	bd70      	pop	{r4, r5, r6, pc}
   1630c:	f002 fc99 	bl	18c42 <nrf_modem_platform_init>
   16310:	e7f6      	b.n	16300 <nrf_modem_init+0x2c>
   16312:	4b08      	ldr	r3, [pc, #32]	; (16334 <nrf_modem_init+0x60>)
   16314:	701d      	strb	r5, [r3, #0]
   16316:	2301      	movs	r3, #1
   16318:	7033      	strb	r3, [r6, #0]
   1631a:	e7f5      	b.n	16308 <nrf_modem_init+0x34>
   1631c:	f06f 040d 	mvn.w	r4, #13
   16320:	e7f2      	b.n	16308 <nrf_modem_init+0x34>
   16322:	f04f 34ff 	mov.w	r4, #4294967295
   16326:	e7ef      	b.n	16308 <nrf_modem_init+0x34>
   16328:	f06f 040b 	mvn.w	r4, #11
   1632c:	e7ec      	b.n	16308 <nrf_modem_init+0x34>
   1632e:	bf00      	nop
   16330:	2000cd2a 	.word	0x2000cd2a
   16334:	2000cd2b 	.word	0x2000cd2b

00016338 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   16338:	4b03      	ldr	r3, [pc, #12]	; (16348 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   1633a:	4a04      	ldr	r2, [pc, #16]	; (1634c <z_device_state_init+0x14>)
   1633c:	4293      	cmp	r3, r2
   1633e:	d201      	bcs.n	16344 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
   16340:	3318      	adds	r3, #24
   16342:	e7fa      	b.n	1633a <z_device_state_init+0x2>
	}
}
   16344:	4770      	bx	lr
   16346:	bf00      	nop
   16348:	00019288 	.word	0x00019288
   1634c:	000192e8 	.word	0x000192e8

00016350 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   16350:	b570      	push	{r4, r5, r6, lr}
   16352:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   16354:	4b11      	ldr	r3, [pc, #68]	; (1639c <z_sys_init_run_level+0x4c>)
   16356:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1635a:	e009      	b.n	16370 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   1635c:	4240      	negs	r0, r0
   1635e:	e017      	b.n	16390 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   16360:	68eb      	ldr	r3, [r5, #12]
   16362:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   16364:	68ea      	ldr	r2, [r5, #12]
   16366:	7853      	ldrb	r3, [r2, #1]
   16368:	f043 0301 	orr.w	r3, r3, #1
   1636c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1636e:	3408      	adds	r4, #8
   16370:	1c73      	adds	r3, r6, #1
   16372:	4a0a      	ldr	r2, [pc, #40]	; (1639c <z_sys_init_run_level+0x4c>)
   16374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16378:	42a3      	cmp	r3, r4
   1637a:	d90d      	bls.n	16398 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   1637c:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   1637e:	6823      	ldr	r3, [r4, #0]
   16380:	4628      	mov	r0, r5
   16382:	4798      	blx	r3
		if (dev != NULL) {
   16384:	2d00      	cmp	r5, #0
   16386:	d0f2      	beq.n	1636e <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   16388:	2800      	cmp	r0, #0
   1638a:	d0eb      	beq.n	16364 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   1638c:	2800      	cmp	r0, #0
   1638e:	dbe5      	blt.n	1635c <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   16390:	28ff      	cmp	r0, #255	; 0xff
   16392:	dde5      	ble.n	16360 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   16394:	20ff      	movs	r0, #255	; 0xff
   16396:	e7e3      	b.n	16360 <z_sys_init_run_level+0x10>
		}
	}
}
   16398:	bd70      	pop	{r4, r5, r6, pc}
   1639a:	bf00      	nop
   1639c:	000197bc 	.word	0x000197bc

000163a0 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   163a0:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   163a2:	4605      	mov	r5, r0
   163a4:	b328      	cbz	r0, 163f2 <z_impl_device_get_binding+0x52>
   163a6:	7803      	ldrb	r3, [r0, #0]
   163a8:	b32b      	cbz	r3, 163f6 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   163aa:	4c14      	ldr	r4, [pc, #80]	; (163fc <z_impl_device_get_binding+0x5c>)
   163ac:	e000      	b.n	163b0 <z_impl_device_get_binding+0x10>
   163ae:	3418      	adds	r4, #24
   163b0:	4b13      	ldr	r3, [pc, #76]	; (16400 <z_impl_device_get_binding+0x60>)
   163b2:	429c      	cmp	r4, r3
   163b4:	d008      	beq.n	163c8 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
   163b6:	4620      	mov	r0, r4
   163b8:	f002 fc5d 	bl	18c76 <z_device_ready>
   163bc:	2800      	cmp	r0, #0
   163be:	d0f6      	beq.n	163ae <z_impl_device_get_binding+0xe>
   163c0:	6823      	ldr	r3, [r4, #0]
   163c2:	42ab      	cmp	r3, r5
   163c4:	d1f3      	bne.n	163ae <z_impl_device_get_binding+0xe>
   163c6:	e012      	b.n	163ee <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   163c8:	4c0c      	ldr	r4, [pc, #48]	; (163fc <z_impl_device_get_binding+0x5c>)
   163ca:	e000      	b.n	163ce <z_impl_device_get_binding+0x2e>
   163cc:	3418      	adds	r4, #24
   163ce:	4b0c      	ldr	r3, [pc, #48]	; (16400 <z_impl_device_get_binding+0x60>)
   163d0:	429c      	cmp	r4, r3
   163d2:	d00b      	beq.n	163ec <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   163d4:	4620      	mov	r0, r4
   163d6:	f002 fc4e 	bl	18c76 <z_device_ready>
   163da:	2800      	cmp	r0, #0
   163dc:	d0f6      	beq.n	163cc <z_impl_device_get_binding+0x2c>
   163de:	6821      	ldr	r1, [r4, #0]
   163e0:	4628      	mov	r0, r5
   163e2:	f001 fe3e 	bl	18062 <strcmp>
   163e6:	2800      	cmp	r0, #0
   163e8:	d1f0      	bne.n	163cc <z_impl_device_get_binding+0x2c>
   163ea:	e000      	b.n	163ee <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
   163ec:	2400      	movs	r4, #0
}
   163ee:	4620      	mov	r0, r4
   163f0:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   163f2:	4604      	mov	r4, r0
   163f4:	e7fb      	b.n	163ee <z_impl_device_get_binding+0x4e>
   163f6:	2400      	movs	r4, #0
   163f8:	e7f9      	b.n	163ee <z_impl_device_get_binding+0x4e>
   163fa:	bf00      	nop
   163fc:	00019288 	.word	0x00019288
   16400:	000192e8 	.word	0x000192e8

00016404 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   16404:	b5f0      	push	{r4, r5, r6, r7, lr}
   16406:	b089      	sub	sp, #36	; 0x24
   16408:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
   1640a:	4b15      	ldr	r3, [pc, #84]	; (16460 <init_idle_thread+0x5c>)
   1640c:	25b0      	movs	r5, #176	; 0xb0
   1640e:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
   16412:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   16416:	4e13      	ldr	r6, [pc, #76]	; (16464 <init_idle_thread+0x60>)
   16418:	eb06 1683 	add.w	r6, r6, r3, lsl #6

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   1641c:	af06      	add	r7, sp, #24
   1641e:	4603      	mov	r3, r0
   16420:	4a11      	ldr	r2, [pc, #68]	; (16468 <init_idle_thread+0x64>)
   16422:	2108      	movs	r1, #8
   16424:	4638      	mov	r0, r7
   16426:	f001 f900 	bl	1762a <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1642a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1642e:	480f      	ldr	r0, [pc, #60]	; (1646c <init_idle_thread+0x68>)
   16430:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
   16434:	9705      	str	r7, [sp, #20]
   16436:	2301      	movs	r3, #1
   16438:	9304      	str	r3, [sp, #16]
   1643a:	230f      	movs	r3, #15
   1643c:	9303      	str	r3, [sp, #12]
   1643e:	2300      	movs	r3, #0
   16440:	9302      	str	r3, [sp, #8]
   16442:	9301      	str	r3, [sp, #4]
   16444:	9400      	str	r4, [sp, #0]
   16446:	4b0a      	ldr	r3, [pc, #40]	; (16470 <init_idle_thread+0x6c>)
   16448:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1644c:	4631      	mov	r1, r6
   1644e:	4628      	mov	r0, r5
   16450:	f000 f90e 	bl	16670 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   16454:	7b6b      	ldrb	r3, [r5, #13]
   16456:	f023 0304 	bic.w	r3, r3, #4
   1645a:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   1645c:	b009      	add	sp, #36	; 0x24
   1645e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16460:	2000c5e8 	.word	0x2000c5e8
   16464:	2000d530 	.word	0x2000d530
   16468:	000197d4 	.word	0x000197d4
   1646c:	2000cbb0 	.word	0x2000cbb0
   16470:	000167d5 	.word	0x000167d5

00016474 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
   16474:	b570      	push	{r4, r5, r6, lr}
   16476:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
   16478:	f000 fdd0 	bl	1701c <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
   1647c:	4d1a      	ldr	r5, [pc, #104]	; (164e8 <prepare_multithreading+0x74>)
   1647e:	4b1b      	ldr	r3, [pc, #108]	; (164ec <prepare_multithreading+0x78>)
   16480:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16482:	4b1b      	ldr	r3, [pc, #108]	; (164f0 <prepare_multithreading+0x7c>)
   16484:	9305      	str	r3, [sp, #20]
   16486:	2301      	movs	r3, #1
   16488:	9304      	str	r3, [sp, #16]
   1648a:	2400      	movs	r4, #0
   1648c:	9403      	str	r4, [sp, #12]
   1648e:	9402      	str	r4, [sp, #8]
   16490:	9401      	str	r4, [sp, #4]
   16492:	9400      	str	r4, [sp, #0]
   16494:	4b17      	ldr	r3, [pc, #92]	; (164f4 <prepare_multithreading+0x80>)
   16496:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1649a:	4917      	ldr	r1, [pc, #92]	; (164f8 <prepare_multithreading+0x84>)
   1649c:	4628      	mov	r0, r5
   1649e:	f000 f8e7 	bl	16670 <z_setup_new_thread>
   164a2:	4606      	mov	r6, r0
   164a4:	7b6b      	ldrb	r3, [r5, #13]
   164a6:	f023 0304 	bic.w	r3, r3, #4
   164aa:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
   164ac:	4628      	mov	r0, r5
   164ae:	f002 fd2c 	bl	18f0a <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   164b2:	2c00      	cmp	r4, #0
   164b4:	dd02      	ble.n	164bc <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
   164b6:	4630      	mov	r0, r6
   164b8:	b006      	add	sp, #24
   164ba:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
   164bc:	4620      	mov	r0, r4
   164be:	f7ff ffa1 	bl	16404 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   164c2:	4b0e      	ldr	r3, [pc, #56]	; (164fc <prepare_multithreading+0x88>)
   164c4:	22b0      	movs	r2, #176	; 0xb0
   164c6:	fb02 3204 	mla	r2, r2, r4, r3
   164ca:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   164ce:	4b07      	ldr	r3, [pc, #28]	; (164ec <prepare_multithreading+0x78>)
   164d0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   164d4:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
   164d6:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
   164d8:	4a09      	ldr	r2, [pc, #36]	; (16500 <prepare_multithreading+0x8c>)
   164da:	eb02 22c4 	add.w	r2, r2, r4, lsl #11
   164de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
		_kernel.cpus[i].irq_stack =
   164e2:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   164e4:	3401      	adds	r4, #1
   164e6:	e7e4      	b.n	164b2 <prepare_multithreading+0x3e>
   164e8:	2000c698 	.word	0x2000c698
   164ec:	2000cbb0 	.word	0x2000cbb0
   164f0:	000197e0 	.word	0x000197e0
   164f4:	00016505 	.word	0x00016505
   164f8:	2000d130 	.word	0x2000d130
   164fc:	2000c5e8 	.word	0x2000c5e8
   16500:	2000d670 	.word	0x2000d670

00016504 <bg_thread_main>:
{
   16504:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   16506:	4b0a      	ldr	r3, [pc, #40]	; (16530 <bg_thread_main+0x2c>)
   16508:	2201      	movs	r2, #1
   1650a:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1650c:	2002      	movs	r0, #2
   1650e:	f7ff ff1f 	bl	16350 <z_sys_init_run_level>
	boot_banner();
   16512:	f001 f80b 	bl	1752c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   16516:	2003      	movs	r0, #3
   16518:	f7ff ff1a 	bl	16350 <z_sys_init_run_level>
	z_init_static_threads();
   1651c:	f000 f90c 	bl	16738 <z_init_static_threads>
	main();
   16520:	f7fa fecc 	bl	112bc <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   16524:	4a03      	ldr	r2, [pc, #12]	; (16534 <bg_thread_main+0x30>)
   16526:	7b13      	ldrb	r3, [r2, #12]
   16528:	f023 0301 	bic.w	r3, r3, #1
   1652c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1652e:	bd08      	pop	{r3, pc}
   16530:	2000cd2c 	.word	0x2000cd2c
   16534:	2000c698 	.word	0x2000c698

00016538 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   16538:	b508      	push	{r3, lr}
   1653a:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1653c:	4a01      	ldr	r2, [pc, #4]	; (16544 <switch_to_main_thread+0xc>)
   1653e:	4802      	ldr	r0, [pc, #8]	; (16548 <switch_to_main_thread+0x10>)
   16540:	f7fc f9f6 	bl	12930 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   16544:	00016505 	.word	0x00016505
   16548:	2000c698 	.word	0x2000c698

0001654c <z_bss_zero>:
{
   1654c:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1654e:	4803      	ldr	r0, [pc, #12]	; (1655c <z_bss_zero+0x10>)
   16550:	4a03      	ldr	r2, [pc, #12]	; (16560 <z_bss_zero+0x14>)
   16552:	1a12      	subs	r2, r2, r0
   16554:	2100      	movs	r1, #0
   16556:	f001 fdc9 	bl	180ec <memset>
}
   1655a:	bd08      	pop	{r3, pc}
   1655c:	2000c5b0 	.word	0x2000c5b0
   16560:	2000cd30 	.word	0x2000cd30

00016564 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   16564:	b500      	push	{lr}
   16566:	b0ad      	sub	sp, #180	; 0xb4
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   16568:	4b1c      	ldr	r3, [pc, #112]	; (165dc <z_cstart+0x78>)
	uint32_t msp =
   1656a:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1656e:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   16572:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16576:	4c1a      	ldr	r4, [pc, #104]	; (165e0 <z_cstart+0x7c>)
   16578:	23e0      	movs	r3, #224	; 0xe0
   1657a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1657e:	2500      	movs	r5, #0
   16580:	77e5      	strb	r5, [r4, #31]
   16582:	7625      	strb	r5, [r4, #24]
   16584:	7665      	strb	r5, [r4, #25]
   16586:	76a5      	strb	r5, [r4, #26]
   16588:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1658c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1658e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   16592:	6263      	str	r3, [r4, #36]	; 0x24
   16594:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   16598:	f7fc fb12 	bl	12bc0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1659c:	f7fc f8c4 	bl	12728 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   165a0:	f04f 33ff 	mov.w	r3, #4294967295
   165a4:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   165a6:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   165a8:	f7fc fcf0 	bl	12f8c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   165ac:	f7fc fb78 	bl	12ca0 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   165b0:	2401      	movs	r4, #1
   165b2:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   165b6:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   165ba:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
   165bc:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   165be:	4b09      	ldr	r3, [pc, #36]	; (165e4 <z_cstart+0x80>)
   165c0:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   165c4:	f7ff feb8 	bl	16338 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   165c8:	4628      	mov	r0, r5
   165ca:	f7ff fec1 	bl	16350 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   165ce:	4620      	mov	r0, r4
   165d0:	f7ff febe 	bl	16350 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   165d4:	f7ff ff4e 	bl	16474 <prepare_multithreading>
   165d8:	f7ff ffae 	bl	16538 <switch_to_main_thread>
   165dc:	2000d670 	.word	0x2000d670
   165e0:	e000ed00 	.word	0xe000ed00
   165e4:	2000cbb0 	.word	0x2000cbb0

000165e8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   165e8:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   165ea:	4c06      	ldr	r4, [pc, #24]	; (16604 <statics_init+0x1c>)
   165ec:	4b06      	ldr	r3, [pc, #24]	; (16608 <statics_init+0x20>)
   165ee:	429c      	cmp	r4, r3
   165f0:	d206      	bcs.n	16600 <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   165f2:	68a2      	ldr	r2, [r4, #8]
   165f4:	6861      	ldr	r1, [r4, #4]
   165f6:	4620      	mov	r0, r4
   165f8:	f002 fb64 	bl	18cc4 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   165fc:	3414      	adds	r4, #20
   165fe:	e7f5      	b.n	165ec <statics_init+0x4>
		}
	}
	return 0;
}
   16600:	2000      	movs	r0, #0
   16602:	bd10      	pop	{r4, pc}
   16604:	2000c598 	.word	0x2000c598
   16608:	2000c5ac 	.word	0x2000c5ac

0001660c <z_thread_monitor_exit>:
	__asm__ volatile(
   1660c:	f04f 0320 	mov.w	r3, #32
   16610:	f3ef 8111 	mrs	r1, BASEPRI
   16614:	f383 8812 	msr	BASEPRI_MAX, r3
   16618:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   1661c:	4b0a      	ldr	r3, [pc, #40]	; (16648 <z_thread_monitor_exit+0x3c>)
   1661e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16620:	4283      	cmp	r3, r0
   16622:	d104      	bne.n	1662e <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   16624:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16626:	4b08      	ldr	r3, [pc, #32]	; (16648 <z_thread_monitor_exit+0x3c>)
   16628:	629a      	str	r2, [r3, #40]	; 0x28
   1662a:	e007      	b.n	1663c <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   1662c:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   1662e:	b113      	cbz	r3, 16636 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   16630:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
   16632:	4282      	cmp	r2, r0
   16634:	d1fa      	bne.n	1662c <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   16636:	b10b      	cbz	r3, 1663c <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   16638:	6f02      	ldr	r2, [r0, #112]	; 0x70
   1663a:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
   1663c:	f381 8811 	msr	BASEPRI, r1
   16640:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   16644:	4770      	bx	lr
   16646:	bf00      	nop
   16648:	2000cbb0 	.word	0x2000cbb0

0001664c <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   1664c:	b538      	push	{r3, r4, r5, lr}
   1664e:	4614      	mov	r4, r2
   16650:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   16652:	ea54 0305 	orrs.w	r3, r4, r5
   16656:	d102      	bne.n	1665e <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
   16658:	f002 fbc1 	bl	18dde <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   1665c:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1665e:	462b      	mov	r3, r5
   16660:	4902      	ldr	r1, [pc, #8]	; (1666c <schedule_new_thread+0x20>)
   16662:	3018      	adds	r0, #24
   16664:	f000 fe36 	bl	172d4 <z_add_timeout>
   16668:	e7f8      	b.n	1665c <schedule_new_thread+0x10>
   1666a:	bf00      	nop
   1666c:	00018f43 	.word	0x00018f43

00016670 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   16670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16674:	b085      	sub	sp, #20
   16676:	4604      	mov	r4, r0
   16678:	460f      	mov	r7, r1
   1667a:	4615      	mov	r5, r2
   1667c:	461e      	mov	r6, r3
   1667e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   16682:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   16686:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   1668a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1668e:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   16692:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   16694:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   16696:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16698:	2204      	movs	r2, #4
   1669a:	9911      	ldr	r1, [sp, #68]	; 0x44
   1669c:	f002 fba3 	bl	18de6 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   166a0:	462a      	mov	r2, r5
   166a2:	4639      	mov	r1, r7
   166a4:	4620      	mov	r0, r4
   166a6:	f002 fb88 	bl	18dba <setup_thread_stack>
   166aa:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   166ac:	f8cd 8008 	str.w	r8, [sp, #8]
   166b0:	f8cd 9004 	str.w	r9, [sp, #4]
   166b4:	f8cd a000 	str.w	sl, [sp]
   166b8:	4633      	mov	r3, r6
   166ba:	4602      	mov	r2, r0
   166bc:	4639      	mov	r1, r7
   166be:	4620      	mov	r0, r4
   166c0:	f7fc f916 	bl	128f0 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   166c4:	2300      	movs	r3, #0
   166c6:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   166c8:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
   166ca:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
   166ce:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
   166d2:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
   166d6:	f04f 0320 	mov.w	r3, #32
   166da:	f3ef 8211 	mrs	r2, BASEPRI
   166de:	f383 8812 	msr	BASEPRI_MAX, r3
   166e2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   166e6:	4b13      	ldr	r3, [pc, #76]	; (16734 <z_setup_new_thread+0xc4>)
   166e8:	6a99      	ldr	r1, [r3, #40]	; 0x28
   166ea:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
   166ec:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
   166ee:	f382 8811 	msr	BASEPRI, r2
   166f2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   166f6:	f1bb 0f00 	cmp.w	fp, #0
   166fa:	d013      	beq.n	16724 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
   166fc:	221f      	movs	r2, #31
   166fe:	4659      	mov	r1, fp
   16700:	f104 0074 	add.w	r0, r4, #116	; 0x74
   16704:	f001 fc81 	bl	1800a <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   16708:	2300      	movs	r3, #0
   1670a:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1670e:	4b09      	ldr	r3, [pc, #36]	; (16734 <z_setup_new_thread+0xc4>)
   16710:	689b      	ldr	r3, [r3, #8]
   16712:	b15b      	cbz	r3, 1672c <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   16714:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   16718:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   1671c:	4628      	mov	r0, r5
   1671e:	b005      	add	sp, #20
   16720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   16724:	2300      	movs	r3, #0
   16726:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   1672a:	e7f0      	b.n	1670e <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   1672c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
   16730:	e7f4      	b.n	1671c <z_setup_new_thread+0xac>
   16732:	bf00      	nop
   16734:	2000cbb0 	.word	0x2000cbb0

00016738 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   16738:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1673c:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   1673e:	4c23      	ldr	r4, [pc, #140]	; (167cc <z_init_static_threads+0x94>)
   16740:	4b23      	ldr	r3, [pc, #140]	; (167d0 <z_init_static_threads+0x98>)
   16742:	429c      	cmp	r4, r3
   16744:	d215      	bcs.n	16772 <z_init_static_threads+0x3a>
		z_setup_new_thread(
   16746:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   16748:	9305      	str	r3, [sp, #20]
   1674a:	6a23      	ldr	r3, [r4, #32]
   1674c:	9304      	str	r3, [sp, #16]
   1674e:	69e3      	ldr	r3, [r4, #28]
   16750:	9303      	str	r3, [sp, #12]
   16752:	69a3      	ldr	r3, [r4, #24]
   16754:	9302      	str	r3, [sp, #8]
   16756:	6963      	ldr	r3, [r4, #20]
   16758:	9301      	str	r3, [sp, #4]
   1675a:	6923      	ldr	r3, [r4, #16]
   1675c:	9300      	str	r3, [sp, #0]
   1675e:	68e3      	ldr	r3, [r4, #12]
   16760:	68a2      	ldr	r2, [r4, #8]
   16762:	6861      	ldr	r1, [r4, #4]
   16764:	6820      	ldr	r0, [r4, #0]
   16766:	f7ff ff83 	bl	16670 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   1676a:	6823      	ldr	r3, [r4, #0]
   1676c:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1676e:	3430      	adds	r4, #48	; 0x30
   16770:	e7e6      	b.n	16740 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   16772:	f000 f9e1 	bl	16b38 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   16776:	4c15      	ldr	r4, [pc, #84]	; (167cc <z_init_static_threads+0x94>)
   16778:	e01b      	b.n	167b2 <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
   1677a:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   1677c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   16780:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
   16784:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   16788:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   1678c:	03d8      	lsls	r0, r3, #15
   1678e:	f240 35e7 	movw	r5, #999	; 0x3e7
   16792:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16796:	2300      	movs	r3, #0
   16798:	1940      	adds	r0, r0, r5
   1679a:	f04f 0500 	mov.w	r5, #0
   1679e:	eb45 0101 	adc.w	r1, r5, r1
   167a2:	f7fa fa77 	bl	10c94 <__aeabi_uldivmod>
   167a6:	4602      	mov	r2, r0
   167a8:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   167aa:	4630      	mov	r0, r6
   167ac:	f7ff ff4e 	bl	1664c <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   167b0:	3430      	adds	r4, #48	; 0x30
   167b2:	4b07      	ldr	r3, [pc, #28]	; (167d0 <z_init_static_threads+0x98>)
   167b4:	429c      	cmp	r4, r3
   167b6:	d204      	bcs.n	167c2 <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   167b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   167ba:	f1b3 3fff 	cmp.w	r3, #4294967295
   167be:	d0f7      	beq.n	167b0 <z_init_static_threads+0x78>
   167c0:	e7db      	b.n	1677a <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
   167c2:	f000 fbb7 	bl	16f34 <k_sched_unlock>
}
   167c6:	b006      	add	sp, #24
   167c8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   167cc:	2000c598 	.word	0x2000c598
   167d0:	2000c598 	.word	0x2000c598

000167d4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   167d4:	b508      	push	{r3, lr}
   167d6:	e001      	b.n	167dc <idle+0x8>
	arch_cpu_idle();
   167d8:	f7fb ffac 	bl	12734 <arch_cpu_idle>
	__asm__ volatile(
   167dc:	f04f 0220 	mov.w	r2, #32
   167e0:	f3ef 8311 	mrs	r3, BASEPRI
   167e4:	f382 8812 	msr	BASEPRI_MAX, r2
   167e8:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   167ec:	f002 fc9d 	bl	1912a <z_get_next_timeout_expiry>
   167f0:	4b03      	ldr	r3, [pc, #12]	; (16800 <idle+0x2c>)
   167f2:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   167f4:	f7fb fed4 	bl	125a0 <pm_system_suspend>
   167f8:	2800      	cmp	r0, #0
   167fa:	d1ef      	bne.n	167dc <idle+0x8>
   167fc:	e7ec      	b.n	167d8 <idle+0x4>
   167fe:	bf00      	nop
   16800:	2000cbb0 	.word	0x2000cbb0

00016804 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   16804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16808:	b083      	sub	sp, #12
   1680a:	4604      	mov	r4, r0
   1680c:	461d      	mov	r5, r3
   1680e:	f04f 0320 	mov.w	r3, #32
   16812:	f3ef 8711 	mrs	r7, BASEPRI
   16816:	f383 8812 	msr	BASEPRI_MAX, r3
   1681a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1681e:	68c1      	ldr	r1, [r0, #12]
   16820:	b999      	cbnz	r1, 1684a <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   16822:	2900      	cmp	r1, #0
   16824:	d14f      	bne.n	168c6 <z_impl_k_mutex_lock+0xc2>
   16826:	4b3a      	ldr	r3, [pc, #232]	; (16910 <z_impl_k_mutex_lock+0x10c>)
   16828:	689b      	ldr	r3, [r3, #8]
   1682a:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1682e:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   16830:	3101      	adds	r1, #1
   16832:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   16834:	4b36      	ldr	r3, [pc, #216]	; (16910 <z_impl_k_mutex_lock+0x10c>)
   16836:	689b      	ldr	r3, [r3, #8]
   16838:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   1683a:	f387 8811 	msr	BASEPRI, r7
   1683e:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   16842:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   16844:	b003      	add	sp, #12
   16846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1684a:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1684c:	6882      	ldr	r2, [r0, #8]
   1684e:	4b30      	ldr	r3, [pc, #192]	; (16910 <z_impl_k_mutex_lock+0x10c>)
   16850:	689b      	ldr	r3, [r3, #8]
   16852:	429a      	cmp	r2, r3
   16854:	d0e5      	beq.n	16822 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   16856:	ea55 0106 	orrs.w	r1, r5, r6
   1685a:	bf0c      	ite	eq
   1685c:	f04f 0801 	moveq.w	r8, #1
   16860:	f04f 0800 	movne.w	r8, #0
   16864:	d031      	beq.n	168ca <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
   16866:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1686a:	4649      	mov	r1, r9
   1686c:	f993 000e 	ldrsb.w	r0, [r3, #14]
   16870:	f002 faca 	bl	18e08 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   16874:	4581      	cmp	r9, r0
   16876:	dc2f      	bgt.n	168d8 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
   16878:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1687c:	9600      	str	r6, [sp, #0]
   1687e:	9501      	str	r5, [sp, #4]
   16880:	4622      	mov	r2, r4
   16882:	4639      	mov	r1, r7
   16884:	4823      	ldr	r0, [pc, #140]	; (16914 <z_impl_k_mutex_lock+0x110>)
   16886:	f000 fa9f 	bl	16dc8 <z_pend_curr>
	if (got_mutex == 0) {
   1688a:	2800      	cmp	r0, #0
   1688c:	d0da      	beq.n	16844 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
   1688e:	f04f 0320 	mov.w	r3, #32
   16892:	f3ef 8511 	mrs	r5, BASEPRI
   16896:	f383 8812 	msr	BASEPRI_MAX, r3
   1689a:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1689e:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   168a0:	429c      	cmp	r4, r3
   168a2:	d01f      	beq.n	168e4 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   168a4:	b1f3      	cbz	r3, 168e4 <z_impl_k_mutex_lock+0xe0>
   168a6:	6921      	ldr	r1, [r4, #16]
   168a8:	f993 000e 	ldrsb.w	r0, [r3, #14]
   168ac:	f002 faac 	bl	18e08 <new_prio_for_inheritance>
   168b0:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   168b2:	4620      	mov	r0, r4
   168b4:	f002 fab3 	bl	18e1e <adjust_owner_prio>
   168b8:	b9b0      	cbnz	r0, 168e8 <z_impl_k_mutex_lock+0xe4>
   168ba:	f1b9 0f00 	cmp.w	r9, #0
   168be:	d015      	beq.n	168ec <z_impl_k_mutex_lock+0xe8>
   168c0:	f04f 0801 	mov.w	r8, #1
   168c4:	e012      	b.n	168ec <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   168c6:	6923      	ldr	r3, [r4, #16]
   168c8:	e7b1      	b.n	1682e <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
   168ca:	f387 8811 	msr	BASEPRI, r7
   168ce:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   168d2:	f06f 000f 	mvn.w	r0, #15
   168d6:	e7b5      	b.n	16844 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
   168d8:	4601      	mov	r1, r0
   168da:	4620      	mov	r0, r4
   168dc:	f002 fa9f 	bl	18e1e <adjust_owner_prio>
   168e0:	4681      	mov	r9, r0
   168e2:	e7cb      	b.n	1687c <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   168e4:	6921      	ldr	r1, [r4, #16]
   168e6:	e7e4      	b.n	168b2 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   168e8:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   168ec:	f1b8 0f00 	cmp.w	r8, #0
   168f0:	d106      	bne.n	16900 <z_impl_k_mutex_lock+0xfc>
   168f2:	f385 8811 	msr	BASEPRI, r5
   168f6:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   168fa:	f06f 000a 	mvn.w	r0, #10
   168fe:	e7a1      	b.n	16844 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
   16900:	4629      	mov	r1, r5
   16902:	4804      	ldr	r0, [pc, #16]	; (16914 <z_impl_k_mutex_lock+0x110>)
   16904:	f000 f8fc 	bl	16b00 <z_reschedule>
	return -EAGAIN;
   16908:	f06f 000a 	mvn.w	r0, #10
   1690c:	e79a      	b.n	16844 <z_impl_k_mutex_lock+0x40>
   1690e:	bf00      	nop
   16910:	2000cbb0 	.word	0x2000cbb0
   16914:	2000cbdc 	.word	0x2000cbdc

00016918 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   16918:	6882      	ldr	r2, [r0, #8]
   1691a:	2a00      	cmp	r2, #0
   1691c:	d035      	beq.n	1698a <z_impl_k_mutex_unlock+0x72>
{
   1691e:	b538      	push	{r3, r4, r5, lr}
   16920:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   16922:	4b1d      	ldr	r3, [pc, #116]	; (16998 <z_impl_k_mutex_unlock+0x80>)
   16924:	689b      	ldr	r3, [r3, #8]
   16926:	429a      	cmp	r2, r3
   16928:	d132      	bne.n	16990 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1692a:	7bda      	ldrb	r2, [r3, #15]
   1692c:	3a01      	subs	r2, #1
   1692e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   16930:	68c3      	ldr	r3, [r0, #12]
   16932:	2b01      	cmp	r3, #1
   16934:	d905      	bls.n	16942 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   16936:	3b01      	subs	r3, #1
   16938:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1693a:	f000 fafb 	bl	16f34 <k_sched_unlock>

	return 0;
   1693e:	2000      	movs	r0, #0
}
   16940:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   16942:	f04f 0320 	mov.w	r3, #32
   16946:	f3ef 8511 	mrs	r5, BASEPRI
   1694a:	f383 8812 	msr	BASEPRI_MAX, r3
   1694e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   16952:	6901      	ldr	r1, [r0, #16]
   16954:	f002 fa63 	bl	18e1e <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   16958:	4620      	mov	r0, r4
   1695a:	f002 fb71 	bl	19040 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1695e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   16960:	b160      	cbz	r0, 1697c <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   16962:	f990 300e 	ldrsb.w	r3, [r0, #14]
   16966:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   16968:	2300      	movs	r3, #0
   1696a:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
   1696e:	f002 facc 	bl	18f0a <z_ready_thread>
		z_reschedule(&lock, key);
   16972:	4629      	mov	r1, r5
   16974:	4809      	ldr	r0, [pc, #36]	; (1699c <z_impl_k_mutex_unlock+0x84>)
   16976:	f000 f8c3 	bl	16b00 <z_reschedule>
   1697a:	e7de      	b.n	1693a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1697c:	2300      	movs	r3, #0
   1697e:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
   16980:	f385 8811 	msr	BASEPRI, r5
   16984:	f3bf 8f6f 	isb	sy
   16988:	e7d7      	b.n	1693a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1698a:	f06f 0015 	mvn.w	r0, #21
}
   1698e:	4770      	bx	lr
		return -EPERM;
   16990:	f04f 30ff 	mov.w	r0, #4294967295
   16994:	e7d4      	b.n	16940 <z_impl_k_mutex_unlock+0x28>
   16996:	bf00      	nop
   16998:	2000cbb0 	.word	0x2000cbb0
   1699c:	2000cbdc 	.word	0x2000cbdc

000169a0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   169a0:	b538      	push	{r3, r4, r5, lr}
   169a2:	4604      	mov	r4, r0
	__asm__ volatile(
   169a4:	f04f 0320 	mov.w	r3, #32
   169a8:	f3ef 8511 	mrs	r5, BASEPRI
   169ac:	f383 8812 	msr	BASEPRI_MAX, r3
   169b0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   169b4:	f002 fb44 	bl	19040 <z_unpend_first_thread>

	if (thread != NULL) {
   169b8:	b148      	cbz	r0, 169ce <z_impl_k_sem_give+0x2e>
   169ba:	2200      	movs	r2, #0
   169bc:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   169c0:	f002 faa3 	bl	18f0a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   169c4:	4629      	mov	r1, r5
   169c6:	4807      	ldr	r0, [pc, #28]	; (169e4 <z_impl_k_sem_give+0x44>)
   169c8:	f000 f89a 	bl	16b00 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   169cc:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   169ce:	68a3      	ldr	r3, [r4, #8]
   169d0:	68e2      	ldr	r2, [r4, #12]
   169d2:	4293      	cmp	r3, r2
   169d4:	d003      	beq.n	169de <z_impl_k_sem_give+0x3e>
   169d6:	2201      	movs	r2, #1
   169d8:	4413      	add	r3, r2
   169da:	60a3      	str	r3, [r4, #8]
}
   169dc:	e7f2      	b.n	169c4 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   169de:	2200      	movs	r2, #0
   169e0:	e7fa      	b.n	169d8 <z_impl_k_sem_give+0x38>
   169e2:	bf00      	nop
   169e4:	2000cbdc 	.word	0x2000cbdc

000169e8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   169e8:	b530      	push	{r4, r5, lr}
   169ea:	b083      	sub	sp, #12
   169ec:	461d      	mov	r5, r3
   169ee:	f04f 0320 	mov.w	r3, #32
   169f2:	f3ef 8111 	mrs	r1, BASEPRI
   169f6:	f383 8812 	msr	BASEPRI_MAX, r3
   169fa:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   169fe:	6883      	ldr	r3, [r0, #8]
   16a00:	b143      	cbz	r3, 16a14 <z_impl_k_sem_take+0x2c>
		sem->count--;
   16a02:	3b01      	subs	r3, #1
   16a04:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   16a06:	f381 8811 	msr	BASEPRI, r1
   16a0a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   16a0e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   16a10:	b003      	add	sp, #12
   16a12:	bd30      	pop	{r4, r5, pc}
   16a14:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   16a16:	ea54 0305 	orrs.w	r3, r4, r5
   16a1a:	d006      	beq.n	16a2a <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   16a1c:	e9cd 4500 	strd	r4, r5, [sp]
   16a20:	4602      	mov	r2, r0
   16a22:	4805      	ldr	r0, [pc, #20]	; (16a38 <z_impl_k_sem_take+0x50>)
   16a24:	f000 f9d0 	bl	16dc8 <z_pend_curr>
	return ret;
   16a28:	e7f2      	b.n	16a10 <z_impl_k_sem_take+0x28>
   16a2a:	f381 8811 	msr	BASEPRI, r1
   16a2e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   16a32:	f06f 000f 	mvn.w	r0, #15
   16a36:	e7eb      	b.n	16a10 <z_impl_k_sem_take+0x28>
   16a38:	2000cbdc 	.word	0x2000cbdc

00016a3c <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
   16a3c:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
   16a42:	bf08      	it	eq
   16a44:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   16a48:	d100      	bne.n	16a4c <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
   16a4a:	bd38      	pop	{r3, r4, r5, pc}
   16a4c:	4902      	ldr	r1, [pc, #8]	; (16a58 <add_thread_timeout+0x1c>)
   16a4e:	3018      	adds	r0, #24
   16a50:	f000 fc40 	bl	172d4 <z_add_timeout>
   16a54:	e7f9      	b.n	16a4a <add_thread_timeout+0xe>
   16a56:	bf00      	nop
   16a58:	00018f43 	.word	0x00018f43

00016a5c <z_reset_time_slice>:
{
   16a5c:	b508      	push	{r3, lr}
	if (slice_time != 0) {
   16a5e:	4b08      	ldr	r3, [pc, #32]	; (16a80 <z_reset_time_slice+0x24>)
   16a60:	681b      	ldr	r3, [r3, #0]
   16a62:	b903      	cbnz	r3, 16a66 <z_reset_time_slice+0xa>
}
   16a64:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   16a66:	f7fd f9bf 	bl	13de8 <sys_clock_elapsed>
   16a6a:	4603      	mov	r3, r0
   16a6c:	4a04      	ldr	r2, [pc, #16]	; (16a80 <z_reset_time_slice+0x24>)
   16a6e:	6810      	ldr	r0, [r2, #0]
   16a70:	4403      	add	r3, r0
   16a72:	4a04      	ldr	r2, [pc, #16]	; (16a84 <z_reset_time_slice+0x28>)
   16a74:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   16a76:	2100      	movs	r1, #0
   16a78:	f002 fb6d 	bl	19156 <z_set_timeout_expiry>
}
   16a7c:	e7f2      	b.n	16a64 <z_reset_time_slice+0x8>
   16a7e:	bf00      	nop
   16a80:	2000cbe4 	.word	0x2000cbe4
   16a84:	2000cbb0 	.word	0x2000cbb0

00016a88 <k_sched_time_slice_set>:
{
   16a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16a8c:	4606      	mov	r6, r0
   16a8e:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
   16a90:	2300      	movs	r3, #0
	__asm__ volatile(
   16a92:	f04f 0220 	mov.w	r2, #32
   16a96:	f3ef 8711 	mrs	r7, BASEPRI
   16a9a:	f382 8812 	msr	BASEPRI_MAX, r2
   16a9e:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   16aa2:	e009      	b.n	16ab8 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
   16aa4:	4b13      	ldr	r3, [pc, #76]	; (16af4 <k_sched_time_slice_set+0x6c>)
   16aa6:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
   16aaa:	f7ff ffd7 	bl	16a5c <z_reset_time_slice>
	__asm__ volatile(
   16aae:	f387 8811 	msr	BASEPRI, r7
   16ab2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   16ab6:	2301      	movs	r3, #1
   16ab8:	b9cb      	cbnz	r3, 16aee <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
   16aba:	2300      	movs	r3, #0
   16abc:	4a0e      	ldr	r2, [pc, #56]	; (16af8 <k_sched_time_slice_set+0x70>)
   16abe:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   16ac0:	0c75      	lsrs	r5, r6, #17
   16ac2:	03f4      	lsls	r4, r6, #15
   16ac4:	f240 30e7 	movw	r0, #999	; 0x3e7
   16ac8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16acc:	2300      	movs	r3, #0
   16ace:	1820      	adds	r0, r4, r0
   16ad0:	f04f 0100 	mov.w	r1, #0
   16ad4:	eb45 0101 	adc.w	r1, r5, r1
   16ad8:	f7fa f8dc 	bl	10c94 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   16adc:	4b07      	ldr	r3, [pc, #28]	; (16afc <k_sched_time_slice_set+0x74>)
   16ade:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   16ae0:	2e00      	cmp	r6, #0
   16ae2:	dddf      	ble.n	16aa4 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
   16ae4:	2802      	cmp	r0, #2
   16ae6:	bfb8      	it	lt
   16ae8:	2002      	movlt	r0, #2
   16aea:	6018      	str	r0, [r3, #0]
   16aec:	e7da      	b.n	16aa4 <k_sched_time_slice_set+0x1c>
}
   16aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16af2:	bf00      	nop
   16af4:	2000cbe0 	.word	0x2000cbe0
   16af8:	2000cbb0 	.word	0x2000cbb0
   16afc:	2000cbe4 	.word	0x2000cbe4

00016b00 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   16b00:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   16b02:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   16b04:	b921      	cbnz	r1, 16b10 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   16b06:	f3ef 8305 	mrs	r3, IPSR
   16b0a:	b913      	cbnz	r3, 16b12 <z_reschedule+0x12>
   16b0c:	2101      	movs	r1, #1
   16b0e:	e000      	b.n	16b12 <z_reschedule+0x12>
   16b10:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   16b12:	f011 0f01 	tst.w	r1, #1
   16b16:	d007      	beq.n	16b28 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
   16b18:	4b06      	ldr	r3, [pc, #24]	; (16b34 <z_reschedule+0x34>)
   16b1a:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   16b1c:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   16b1e:	429a      	cmp	r2, r3
   16b20:	d002      	beq.n	16b28 <z_reschedule+0x28>
	ret = arch_swap(key);
   16b22:	f7fb fe8b 	bl	1283c <arch_swap>
		z_swap(lock, key);
   16b26:	e003      	b.n	16b30 <z_reschedule+0x30>
   16b28:	f380 8811 	msr	BASEPRI, r0
   16b2c:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
   16b30:	bd08      	pop	{r3, pc}
   16b32:	bf00      	nop
   16b34:	2000cbb0 	.word	0x2000cbb0

00016b38 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   16b38:	2300      	movs	r3, #0
	__asm__ volatile(
   16b3a:	f04f 0220 	mov.w	r2, #32
   16b3e:	f3ef 8111 	mrs	r1, BASEPRI
   16b42:	f382 8812 	msr	BASEPRI_MAX, r2
   16b46:	f3bf 8f6f 	isb	sy
   16b4a:	b953      	cbnz	r3, 16b62 <k_sched_lock+0x2a>
   16b4c:	4b05      	ldr	r3, [pc, #20]	; (16b64 <k_sched_lock+0x2c>)
   16b4e:	689a      	ldr	r2, [r3, #8]
   16b50:	7bd3      	ldrb	r3, [r2, #15]
   16b52:	3b01      	subs	r3, #1
   16b54:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   16b56:	f381 8811 	msr	BASEPRI, r1
   16b5a:	f3bf 8f6f 	isb	sy
   16b5e:	2301      	movs	r3, #1
   16b60:	e7f3      	b.n	16b4a <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   16b62:	4770      	bx	lr
   16b64:	2000cbb0 	.word	0x2000cbb0

00016b68 <update_cache>:
{
   16b68:	b538      	push	{r3, r4, r5, lr}
   16b6a:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   16b6c:	480f      	ldr	r0, [pc, #60]	; (16bac <update_cache+0x44>)
   16b6e:	f002 f9c5 	bl	18efc <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   16b72:	4605      	mov	r5, r0
   16b74:	b170      	cbz	r0, 16b94 <update_cache+0x2c>
	if (preempt_ok != 0) {
   16b76:	b984      	cbnz	r4, 16b9a <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   16b78:	4b0d      	ldr	r3, [pc, #52]	; (16bb0 <update_cache+0x48>)
   16b7a:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   16b7c:	7b5a      	ldrb	r2, [r3, #13]
   16b7e:	f012 0f1f 	tst.w	r2, #31
   16b82:	d10a      	bne.n	16b9a <update_cache+0x32>
	return node->next != NULL;
   16b84:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   16b86:	b942      	cbnz	r2, 16b9a <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   16b88:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   16b8a:	2a7f      	cmp	r2, #127	; 0x7f
   16b8c:	d905      	bls.n	16b9a <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   16b8e:	4a08      	ldr	r2, [pc, #32]	; (16bb0 <update_cache+0x48>)
   16b90:	61d3      	str	r3, [r2, #28]
   16b92:	e00a      	b.n	16baa <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   16b94:	4b06      	ldr	r3, [pc, #24]	; (16bb0 <update_cache+0x48>)
   16b96:	68dd      	ldr	r5, [r3, #12]
   16b98:	e7ed      	b.n	16b76 <update_cache+0xe>
		if (thread != _current) {
   16b9a:	4b05      	ldr	r3, [pc, #20]	; (16bb0 <update_cache+0x48>)
   16b9c:	689b      	ldr	r3, [r3, #8]
   16b9e:	42ab      	cmp	r3, r5
   16ba0:	d001      	beq.n	16ba6 <update_cache+0x3e>
			z_reset_time_slice();
   16ba2:	f7ff ff5b 	bl	16a5c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   16ba6:	4b02      	ldr	r3, [pc, #8]	; (16bb0 <update_cache+0x48>)
   16ba8:	61dd      	str	r5, [r3, #28]
}
   16baa:	bd38      	pop	{r3, r4, r5, pc}
   16bac:	2000cbd0 	.word	0x2000cbd0
   16bb0:	2000cbb0 	.word	0x2000cbb0

00016bb4 <move_thread_to_end_of_prio_q>:
{
   16bb4:	b538      	push	{r3, r4, r5, lr}
   16bb6:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   16bb8:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   16bba:	f990 300d 	ldrsb.w	r3, [r0, #13]
   16bbe:	2b00      	cmp	r3, #0
   16bc0:	db28      	blt.n	16c14 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
   16bc2:	7b6b      	ldrb	r3, [r5, #13]
   16bc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   16bc8:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   16bca:	4b1a      	ldr	r3, [pc, #104]	; (16c34 <move_thread_to_end_of_prio_q+0x80>)
   16bcc:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16bd0:	429c      	cmp	r4, r3
   16bd2:	d02d      	beq.n	16c30 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16bd4:	b16c      	cbz	r4, 16bf2 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   16bd6:	4621      	mov	r1, r4
   16bd8:	4628      	mov	r0, r5
   16bda:	f002 f945 	bl	18e68 <z_sched_prio_cmp>
   16bde:	2800      	cmp	r0, #0
   16be0:	dc20      	bgt.n	16c24 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16be2:	b134      	cbz	r4, 16bf2 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   16be4:	4b13      	ldr	r3, [pc, #76]	; (16c34 <move_thread_to_end_of_prio_q+0x80>)
   16be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16be8:	429c      	cmp	r4, r3
   16bea:	d002      	beq.n	16bf2 <move_thread_to_end_of_prio_q+0x3e>
   16bec:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16bee:	2c00      	cmp	r4, #0
   16bf0:	d1f0      	bne.n	16bd4 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
   16bf2:	4b10      	ldr	r3, [pc, #64]	; (16c34 <move_thread_to_end_of_prio_q+0x80>)
   16bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
   16bf6:	f103 0120 	add.w	r1, r3, #32
   16bfa:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   16bfc:	606a      	str	r2, [r5, #4]

	tail->next = node;
   16bfe:	6015      	str	r5, [r2, #0]
	list->tail = node;
   16c00:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   16c02:	4b0c      	ldr	r3, [pc, #48]	; (16c34 <move_thread_to_end_of_prio_q+0x80>)
   16c04:	6898      	ldr	r0, [r3, #8]
   16c06:	42a8      	cmp	r0, r5
   16c08:	bf14      	ite	ne
   16c0a:	2000      	movne	r0, #0
   16c0c:	2001      	moveq	r0, #1
   16c0e:	f7ff ffab 	bl	16b68 <update_cache>
}
   16c12:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16c14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16c18:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   16c1a:	4601      	mov	r1, r0
   16c1c:	4806      	ldr	r0, [pc, #24]	; (16c38 <move_thread_to_end_of_prio_q+0x84>)
   16c1e:	f002 f942 	bl	18ea6 <z_priq_dumb_remove>
}
   16c22:	e7ce      	b.n	16bc2 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   16c24:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   16c26:	606b      	str	r3, [r5, #4]
	node->next = successor;
   16c28:	602c      	str	r4, [r5, #0]
	prev->next = node;
   16c2a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   16c2c:	6065      	str	r5, [r4, #4]
}
   16c2e:	e7e8      	b.n	16c02 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16c30:	2400      	movs	r4, #0
   16c32:	e7cf      	b.n	16bd4 <move_thread_to_end_of_prio_q+0x20>
   16c34:	2000cbb0 	.word	0x2000cbb0
   16c38:	2000cbd0 	.word	0x2000cbd0

00016c3c <z_time_slice>:
{
   16c3c:	b510      	push	{r4, lr}
	__asm__ volatile(
   16c3e:	f04f 0320 	mov.w	r3, #32
   16c42:	f3ef 8411 	mrs	r4, BASEPRI
   16c46:	f383 8812 	msr	BASEPRI_MAX, r3
   16c4a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   16c4e:	4b1c      	ldr	r3, [pc, #112]	; (16cc0 <z_time_slice+0x84>)
   16c50:	689b      	ldr	r3, [r3, #8]
   16c52:	4a1c      	ldr	r2, [pc, #112]	; (16cc4 <z_time_slice+0x88>)
   16c54:	6812      	ldr	r2, [r2, #0]
   16c56:	4293      	cmp	r3, r2
   16c58:	d01d      	beq.n	16c96 <z_time_slice+0x5a>
	pending_current = NULL;
   16c5a:	4a1a      	ldr	r2, [pc, #104]	; (16cc4 <z_time_slice+0x88>)
   16c5c:	2100      	movs	r1, #0
   16c5e:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   16c60:	4a19      	ldr	r2, [pc, #100]	; (16cc8 <z_time_slice+0x8c>)
   16c62:	6812      	ldr	r2, [r2, #0]
   16c64:	b322      	cbz	r2, 16cb0 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   16c66:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   16c68:	2a7f      	cmp	r2, #127	; 0x7f
   16c6a:	d821      	bhi.n	16cb0 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
   16c6c:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   16c6e:	f012 0f1f 	tst.w	r2, #31
   16c72:	d11d      	bne.n	16cb0 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   16c74:	f993 100e 	ldrsb.w	r1, [r3, #14]
   16c78:	4a14      	ldr	r2, [pc, #80]	; (16ccc <z_time_slice+0x90>)
   16c7a:	6812      	ldr	r2, [r2, #0]
   16c7c:	4291      	cmp	r1, r2
   16c7e:	db17      	blt.n	16cb0 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
   16c80:	4a13      	ldr	r2, [pc, #76]	; (16cd0 <z_time_slice+0x94>)
   16c82:	4293      	cmp	r3, r2
   16c84:	d014      	beq.n	16cb0 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
   16c86:	4a0e      	ldr	r2, [pc, #56]	; (16cc0 <z_time_slice+0x84>)
   16c88:	6912      	ldr	r2, [r2, #16]
   16c8a:	4282      	cmp	r2, r0
   16c8c:	dd0a      	ble.n	16ca4 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
   16c8e:	1a10      	subs	r0, r2, r0
   16c90:	4b0b      	ldr	r3, [pc, #44]	; (16cc0 <z_time_slice+0x84>)
   16c92:	6118      	str	r0, [r3, #16]
   16c94:	e00f      	b.n	16cb6 <z_time_slice+0x7a>
		z_reset_time_slice();
   16c96:	f7ff fee1 	bl	16a5c <z_reset_time_slice>
	__asm__ volatile(
   16c9a:	f384 8811 	msr	BASEPRI, r4
   16c9e:	f3bf 8f6f 	isb	sy
		return;
   16ca2:	e00c      	b.n	16cbe <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
   16ca4:	4618      	mov	r0, r3
   16ca6:	f7ff ff85 	bl	16bb4 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
   16caa:	f7ff fed7 	bl	16a5c <z_reset_time_slice>
   16cae:	e002      	b.n	16cb6 <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
   16cb0:	4b03      	ldr	r3, [pc, #12]	; (16cc0 <z_time_slice+0x84>)
   16cb2:	2200      	movs	r2, #0
   16cb4:	611a      	str	r2, [r3, #16]
   16cb6:	f384 8811 	msr	BASEPRI, r4
   16cba:	f3bf 8f6f 	isb	sy
}
   16cbe:	bd10      	pop	{r4, pc}
   16cc0:	2000cbb0 	.word	0x2000cbb0
   16cc4:	2000cbdc 	.word	0x2000cbdc
   16cc8:	2000cbe4 	.word	0x2000cbe4
   16ccc:	2000cbe0 	.word	0x2000cbe0
   16cd0:	2000c5e8 	.word	0x2000c5e8

00016cd4 <ready_thread>:
{
   16cd4:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   16cd6:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   16cd8:	f990 200d 	ldrsb.w	r2, [r0, #13]
   16cdc:	2a00      	cmp	r2, #0
   16cde:	db2d      	blt.n	16d3c <ready_thread+0x68>
   16ce0:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   16ce2:	f013 0f1f 	tst.w	r3, #31
   16ce6:	d105      	bne.n	16cf4 <ready_thread+0x20>
	return node->next != NULL;
   16ce8:	6982      	ldr	r2, [r0, #24]
   16cea:	b10a      	cbz	r2, 16cf0 <ready_thread+0x1c>
   16cec:	2200      	movs	r2, #0
   16cee:	e002      	b.n	16cf6 <ready_thread+0x22>
   16cf0:	2201      	movs	r2, #1
   16cf2:	e000      	b.n	16cf6 <ready_thread+0x22>
   16cf4:	2200      	movs	r2, #0
   16cf6:	b30a      	cbz	r2, 16d3c <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
   16cf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   16cfc:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   16cfe:	4b14      	ldr	r3, [pc, #80]	; (16d50 <ready_thread+0x7c>)
   16d00:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16d04:	429d      	cmp	r5, r3
   16d06:	d020      	beq.n	16d4a <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16d08:	b16d      	cbz	r5, 16d26 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
   16d0a:	4629      	mov	r1, r5
   16d0c:	4620      	mov	r0, r4
   16d0e:	f002 f8ab 	bl	18e68 <z_sched_prio_cmp>
   16d12:	2800      	cmp	r0, #0
   16d14:	dc13      	bgt.n	16d3e <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16d16:	b135      	cbz	r5, 16d26 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
   16d18:	4b0d      	ldr	r3, [pc, #52]	; (16d50 <ready_thread+0x7c>)
   16d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16d1c:	429d      	cmp	r5, r3
   16d1e:	d002      	beq.n	16d26 <ready_thread+0x52>
   16d20:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16d22:	2d00      	cmp	r5, #0
   16d24:	d1f0      	bne.n	16d08 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
   16d26:	4b0a      	ldr	r3, [pc, #40]	; (16d50 <ready_thread+0x7c>)
   16d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   16d2a:	f103 0120 	add.w	r1, r3, #32
   16d2e:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   16d30:	6062      	str	r2, [r4, #4]
	tail->next = node;
   16d32:	6014      	str	r4, [r2, #0]
	list->tail = node;
   16d34:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   16d36:	2000      	movs	r0, #0
   16d38:	f7ff ff16 	bl	16b68 <update_cache>
}
   16d3c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
   16d3e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   16d40:	6063      	str	r3, [r4, #4]
	node->next = successor;
   16d42:	6025      	str	r5, [r4, #0]
	prev->next = node;
   16d44:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   16d46:	606c      	str	r4, [r5, #4]
}
   16d48:	e7f5      	b.n	16d36 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16d4a:	2500      	movs	r5, #0
   16d4c:	e7dc      	b.n	16d08 <ready_thread+0x34>
   16d4e:	bf00      	nop
   16d50:	2000cbb0 	.word	0x2000cbb0

00016d54 <z_sched_start>:
{
   16d54:	b510      	push	{r4, lr}
	__asm__ volatile(
   16d56:	f04f 0320 	mov.w	r3, #32
   16d5a:	f3ef 8411 	mrs	r4, BASEPRI
   16d5e:	f383 8812 	msr	BASEPRI_MAX, r3
   16d62:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   16d66:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   16d68:	f013 0f04 	tst.w	r3, #4
   16d6c:	d104      	bne.n	16d78 <z_sched_start+0x24>
	__asm__ volatile(
   16d6e:	f384 8811 	msr	BASEPRI, r4
   16d72:	f3bf 8f6f 	isb	sy
}
   16d76:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   16d78:	f023 0304 	bic.w	r3, r3, #4
   16d7c:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   16d7e:	f7ff ffa9 	bl	16cd4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   16d82:	4621      	mov	r1, r4
   16d84:	4801      	ldr	r0, [pc, #4]	; (16d8c <z_sched_start+0x38>)
   16d86:	f7ff febb 	bl	16b00 <z_reschedule>
   16d8a:	e7f4      	b.n	16d76 <z_sched_start+0x22>
   16d8c:	2000cbe0 	.word	0x2000cbe0

00016d90 <unready_thread>:
{
   16d90:	b510      	push	{r4, lr}
   16d92:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   16d94:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   16d96:	f990 300d 	ldrsb.w	r3, [r0, #13]
   16d9a:	2b00      	cmp	r3, #0
   16d9c:	db08      	blt.n	16db0 <unready_thread+0x20>
	update_cache(thread == _current);
   16d9e:	4b08      	ldr	r3, [pc, #32]	; (16dc0 <unready_thread+0x30>)
   16da0:	6898      	ldr	r0, [r3, #8]
   16da2:	42a0      	cmp	r0, r4
   16da4:	bf14      	ite	ne
   16da6:	2000      	movne	r0, #0
   16da8:	2001      	moveq	r0, #1
   16daa:	f7ff fedd 	bl	16b68 <update_cache>
}
   16dae:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16db0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16db4:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   16db6:	4601      	mov	r1, r0
   16db8:	4802      	ldr	r0, [pc, #8]	; (16dc4 <unready_thread+0x34>)
   16dba:	f002 f874 	bl	18ea6 <z_priq_dumb_remove>
}
   16dbe:	e7ee      	b.n	16d9e <unready_thread+0xe>
   16dc0:	2000cbb0 	.word	0x2000cbb0
   16dc4:	2000cbd0 	.word	0x2000cbd0

00016dc8 <z_pend_curr>:
{
   16dc8:	b510      	push	{r4, lr}
   16dca:	460c      	mov	r4, r1
   16dcc:	4611      	mov	r1, r2
	pending_current = _current;
   16dce:	4b06      	ldr	r3, [pc, #24]	; (16de8 <z_pend_curr+0x20>)
   16dd0:	6898      	ldr	r0, [r3, #8]
   16dd2:	4b06      	ldr	r3, [pc, #24]	; (16dec <z_pend_curr+0x24>)
   16dd4:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   16dd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   16dda:	f002 f910 	bl	18ffe <pend>
   16dde:	4620      	mov	r0, r4
   16de0:	f7fb fd2c 	bl	1283c <arch_swap>
}
   16de4:	bd10      	pop	{r4, pc}
   16de6:	bf00      	nop
   16de8:	2000cbb0 	.word	0x2000cbb0
   16dec:	2000cbdc 	.word	0x2000cbdc

00016df0 <z_set_prio>:
{
   16df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16df4:	4604      	mov	r4, r0
   16df6:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   16df8:	2300      	movs	r3, #0
	__asm__ volatile(
   16dfa:	f04f 0220 	mov.w	r2, #32
   16dfe:	f3ef 8611 	mrs	r6, BASEPRI
   16e02:	f382 8812 	msr	BASEPRI_MAX, r2
   16e06:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   16e0a:	4698      	mov	r8, r3
   16e0c:	e008      	b.n	16e20 <z_set_prio+0x30>
		if (need_sched) {
   16e0e:	f012 0801 	ands.w	r8, r2, #1
   16e12:	d111      	bne.n	16e38 <z_set_prio+0x48>
			thread->base.prio = prio;
   16e14:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
   16e16:	f386 8811 	msr	BASEPRI, r6
   16e1a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   16e1e:	2301      	movs	r3, #1
   16e20:	461a      	mov	r2, r3
   16e22:	2b00      	cmp	r3, #0
   16e24:	d13d      	bne.n	16ea2 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
   16e26:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   16e28:	f013 0f1f 	tst.w	r3, #31
   16e2c:	d1ef      	bne.n	16e0e <z_set_prio+0x1e>
	return node->next != NULL;
   16e2e:	69a1      	ldr	r1, [r4, #24]
   16e30:	2900      	cmp	r1, #0
   16e32:	d1ec      	bne.n	16e0e <z_set_prio+0x1e>
   16e34:	2201      	movs	r2, #1
   16e36:	e7ea      	b.n	16e0e <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   16e3c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   16e3e:	f8df 906c 	ldr.w	r9, [pc, #108]	; 16eac <z_set_prio+0xbc>
   16e42:	4621      	mov	r1, r4
   16e44:	4648      	mov	r0, r9
   16e46:	f002 f82e 	bl	18ea6 <z_priq_dumb_remove>
				thread->base.prio = prio;
   16e4a:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   16e4c:	7b63      	ldrb	r3, [r4, #13]
   16e4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   16e52:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   16e54:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16e58:	454d      	cmp	r5, r9
   16e5a:	d020      	beq.n	16e9e <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16e5c:	b16d      	cbz	r5, 16e7a <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   16e5e:	4629      	mov	r1, r5
   16e60:	4620      	mov	r0, r4
   16e62:	f002 f801 	bl	18e68 <z_sched_prio_cmp>
   16e66:	2800      	cmp	r0, #0
   16e68:	dc13      	bgt.n	16e92 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16e6a:	b135      	cbz	r5, 16e7a <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
   16e6c:	4b0e      	ldr	r3, [pc, #56]	; (16ea8 <z_set_prio+0xb8>)
   16e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16e70:	429d      	cmp	r5, r3
   16e72:	d002      	beq.n	16e7a <z_set_prio+0x8a>
   16e74:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16e76:	2d00      	cmp	r5, #0
   16e78:	d1f0      	bne.n	16e5c <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
   16e7a:	4b0b      	ldr	r3, [pc, #44]	; (16ea8 <z_set_prio+0xb8>)
   16e7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   16e7e:	f103 0120 	add.w	r1, r3, #32
   16e82:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   16e84:	6062      	str	r2, [r4, #4]
	tail->next = node;
   16e86:	6014      	str	r4, [r2, #0]
	list->tail = node;
   16e88:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
   16e8a:	2001      	movs	r0, #1
   16e8c:	f7ff fe6c 	bl	16b68 <update_cache>
   16e90:	e7c1      	b.n	16e16 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
   16e92:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   16e94:	6063      	str	r3, [r4, #4]
	node->next = successor;
   16e96:	6025      	str	r5, [r4, #0]
	prev->next = node;
   16e98:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   16e9a:	606c      	str	r4, [r5, #4]
}
   16e9c:	e7f5      	b.n	16e8a <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16e9e:	2500      	movs	r5, #0
   16ea0:	e7dc      	b.n	16e5c <z_set_prio+0x6c>
}
   16ea2:	4640      	mov	r0, r8
   16ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16ea8:	2000cbb0 	.word	0x2000cbb0
   16eac:	2000cbd0 	.word	0x2000cbd0

00016eb0 <z_impl_k_thread_suspend>:
{
   16eb0:	b538      	push	{r3, r4, r5, lr}
   16eb2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   16eb4:	3018      	adds	r0, #24
   16eb6:	f002 f91a 	bl	190ee <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   16eba:	2300      	movs	r3, #0
	__asm__ volatile(
   16ebc:	f04f 0220 	mov.w	r2, #32
   16ec0:	f3ef 8511 	mrs	r5, BASEPRI
   16ec4:	f382 8812 	msr	BASEPRI_MAX, r2
   16ec8:	f3bf 8f6f 	isb	sy
   16ecc:	e010      	b.n	16ef0 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   16ece:	7b63      	ldrb	r3, [r4, #13]
   16ed0:	f043 0310 	orr.w	r3, r3, #16
   16ed4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   16ed6:	4b15      	ldr	r3, [pc, #84]	; (16f2c <z_impl_k_thread_suspend+0x7c>)
   16ed8:	6898      	ldr	r0, [r3, #8]
   16eda:	42a0      	cmp	r0, r4
   16edc:	bf14      	ite	ne
   16ede:	2000      	movne	r0, #0
   16ee0:	2001      	moveq	r0, #1
   16ee2:	f7ff fe41 	bl	16b68 <update_cache>
	__asm__ volatile(
   16ee6:	f385 8811 	msr	BASEPRI, r5
   16eea:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   16eee:	2301      	movs	r3, #1
   16ef0:	b963      	cbnz	r3, 16f0c <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   16ef2:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   16ef4:	f994 300d 	ldrsb.w	r3, [r4, #13]
   16ef8:	2b00      	cmp	r3, #0
   16efa:	dae8      	bge.n	16ece <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16efc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16f00:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   16f02:	4621      	mov	r1, r4
   16f04:	480a      	ldr	r0, [pc, #40]	; (16f30 <z_impl_k_thread_suspend+0x80>)
   16f06:	f001 ffce 	bl	18ea6 <z_priq_dumb_remove>
}
   16f0a:	e7e0      	b.n	16ece <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   16f0c:	4b07      	ldr	r3, [pc, #28]	; (16f2c <z_impl_k_thread_suspend+0x7c>)
   16f0e:	689b      	ldr	r3, [r3, #8]
   16f10:	42a3      	cmp	r3, r4
   16f12:	d000      	beq.n	16f16 <z_impl_k_thread_suspend+0x66>
}
   16f14:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   16f16:	f04f 0320 	mov.w	r3, #32
   16f1a:	f3ef 8011 	mrs	r0, BASEPRI
   16f1e:	f383 8812 	msr	BASEPRI_MAX, r3
   16f22:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   16f26:	f001 ffa9 	bl	18e7c <z_reschedule_irqlock>
   16f2a:	e7f3      	b.n	16f14 <z_impl_k_thread_suspend+0x64>
   16f2c:	2000cbb0 	.word	0x2000cbb0
   16f30:	2000cbd0 	.word	0x2000cbd0

00016f34 <k_sched_unlock>:

void k_sched_unlock(void)
{
   16f34:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   16f36:	2300      	movs	r3, #0
   16f38:	f04f 0220 	mov.w	r2, #32
   16f3c:	f3ef 8411 	mrs	r4, BASEPRI
   16f40:	f382 8812 	msr	BASEPRI_MAX, r2
   16f44:	f3bf 8f6f 	isb	sy
   16f48:	b96b      	cbnz	r3, 16f66 <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   16f4a:	4b0c      	ldr	r3, [pc, #48]	; (16f7c <k_sched_unlock+0x48>)
   16f4c:	689a      	ldr	r2, [r3, #8]
   16f4e:	7bd3      	ldrb	r3, [r2, #15]
   16f50:	3301      	adds	r3, #1
   16f52:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   16f54:	2000      	movs	r0, #0
   16f56:	f7ff fe07 	bl	16b68 <update_cache>
	__asm__ volatile(
   16f5a:	f384 8811 	msr	BASEPRI, r4
   16f5e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   16f62:	2301      	movs	r3, #1
   16f64:	e7f0      	b.n	16f48 <k_sched_unlock+0x14>
	__asm__ volatile(
   16f66:	f04f 0320 	mov.w	r3, #32
   16f6a:	f3ef 8011 	mrs	r0, BASEPRI
   16f6e:	f383 8812 	msr	BASEPRI_MAX, r3
   16f72:	f3bf 8f6f 	isb	sy
   16f76:	f001 ff81 	bl	18e7c <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   16f7a:	bd10      	pop	{r4, pc}
   16f7c:	2000cbb0 	.word	0x2000cbb0

00016f80 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
   16f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   16f82:	7b43      	ldrb	r3, [r0, #13]
   16f84:	f013 0f08 	tst.w	r3, #8
   16f88:	d145      	bne.n	17016 <end_thread+0x96>
   16f8a:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   16f8c:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
   16f90:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   16f94:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   16f96:	f013 0f80 	tst.w	r3, #128	; 0x80
   16f9a:	d114      	bne.n	16fc6 <end_thread+0x46>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   16f9c:	68ab      	ldr	r3, [r5, #8]
   16f9e:	b15b      	cbz	r3, 16fb8 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   16fa0:	4628      	mov	r0, r5
   16fa2:	f001 ff5f 	bl	18e64 <pended_on_thread>
   16fa6:	4629      	mov	r1, r5
   16fa8:	f001 ff7d 	bl	18ea6 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   16fac:	7b6b      	ldrb	r3, [r5, #13]
   16fae:	f023 0302 	bic.w	r3, r3, #2
   16fb2:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   16fb4:	2300      	movs	r3, #0
   16fb6:	60ab      	str	r3, [r5, #8]
   16fb8:	f105 0018 	add.w	r0, r5, #24
   16fbc:	f002 f897 	bl	190ee <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   16fc0:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   16fc4:	e01c      	b.n	17000 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   16fca:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   16fcc:	4601      	mov	r1, r0
   16fce:	4812      	ldr	r0, [pc, #72]	; (17018 <end_thread+0x98>)
   16fd0:	f001 ff69 	bl	18ea6 <z_priq_dumb_remove>
}
   16fd4:	e7e2      	b.n	16f9c <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   16fd6:	4620      	mov	r0, r4
   16fd8:	f001 ff44 	bl	18e64 <pended_on_thread>
   16fdc:	4621      	mov	r1, r4
   16fde:	f001 ff62 	bl	18ea6 <z_priq_dumb_remove>
   16fe2:	7b63      	ldrb	r3, [r4, #13]
   16fe4:	f023 0302 	bic.w	r3, r3, #2
   16fe8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   16fea:	2600      	movs	r6, #0
   16fec:	60a6      	str	r6, [r4, #8]
   16fee:	f104 0018 	add.w	r0, r4, #24
   16ff2:	f002 f87c 	bl	190ee <z_abort_timeout>
   16ff6:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
   16ffa:	4620      	mov	r0, r4
   16ffc:	f7ff fe6a 	bl	16cd4 <ready_thread>
	return list->head == list;
   17000:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17002:	42bc      	cmp	r4, r7
   17004:	d001      	beq.n	1700a <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   17006:	2c00      	cmp	r4, #0
   17008:	d1e5      	bne.n	16fd6 <end_thread+0x56>
		update_cache(1);
   1700a:	2001      	movs	r0, #1
   1700c:	f7ff fdac 	bl	16b68 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   17010:	4628      	mov	r0, r5
   17012:	f7ff fafb 	bl	1660c <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   17016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17018:	2000cbd0 	.word	0x2000cbd0

0001701c <z_sched_init>:
{
   1701c:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   1701e:	4804      	ldr	r0, [pc, #16]	; (17030 <z_sched_init+0x14>)
   17020:	f002 f84a 	bl	190b8 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   17024:	2100      	movs	r1, #0
   17026:	4608      	mov	r0, r1
   17028:	f7ff fd2e 	bl	16a88 <k_sched_time_slice_set>
}
   1702c:	bd08      	pop	{r3, pc}
   1702e:	bf00      	nop
   17030:	2000cbcc 	.word	0x2000cbcc

00017034 <z_impl_k_yield>:
{
   17034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17036:	f04f 0320 	mov.w	r3, #32
   1703a:	f3ef 8611 	mrs	r6, BASEPRI
   1703e:	f383 8812 	msr	BASEPRI_MAX, r3
   17042:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   17046:	4c1c      	ldr	r4, [pc, #112]	; (170b8 <z_impl_k_yield+0x84>)
   17048:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1704a:	7b4b      	ldrb	r3, [r1, #13]
   1704c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17050:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   17052:	f104 0720 	add.w	r7, r4, #32
   17056:	4638      	mov	r0, r7
   17058:	f001 ff25 	bl	18ea6 <z_priq_dumb_remove>
	queue_thread(_current);
   1705c:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1705e:	7b6b      	ldrb	r3, [r5, #13]
   17060:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17064:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   17066:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17068:	42bc      	cmp	r4, r7
   1706a:	d023      	beq.n	170b4 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1706c:	b16c      	cbz	r4, 1708a <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1706e:	4621      	mov	r1, r4
   17070:	4628      	mov	r0, r5
   17072:	f001 fef9 	bl	18e68 <z_sched_prio_cmp>
   17076:	2800      	cmp	r0, #0
   17078:	dc16      	bgt.n	170a8 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1707a:	b134      	cbz	r4, 1708a <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
   1707c:	4b0e      	ldr	r3, [pc, #56]	; (170b8 <z_impl_k_yield+0x84>)
   1707e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17080:	429c      	cmp	r4, r3
   17082:	d002      	beq.n	1708a <z_impl_k_yield+0x56>
   17084:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17086:	2c00      	cmp	r4, #0
   17088:	d1f0      	bne.n	1706c <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
   1708a:	4b0b      	ldr	r3, [pc, #44]	; (170b8 <z_impl_k_yield+0x84>)
   1708c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1708e:	f103 0120 	add.w	r1, r3, #32
   17092:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   17094:	606a      	str	r2, [r5, #4]
	tail->next = node;
   17096:	6015      	str	r5, [r2, #0]
	list->tail = node;
   17098:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   1709a:	2001      	movs	r0, #1
   1709c:	f7ff fd64 	bl	16b68 <update_cache>
   170a0:	4630      	mov	r0, r6
   170a2:	f7fb fbcb 	bl	1283c <arch_swap>
}
   170a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
   170a8:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   170aa:	606b      	str	r3, [r5, #4]
	node->next = successor;
   170ac:	602c      	str	r4, [r5, #0]
	prev->next = node;
   170ae:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   170b0:	6065      	str	r5, [r4, #4]
}
   170b2:	e7f2      	b.n	1709a <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   170b4:	2400      	movs	r4, #0
   170b6:	e7d9      	b.n	1706c <z_impl_k_yield+0x38>
   170b8:	2000cbb0 	.word	0x2000cbb0

000170bc <z_tick_sleep>:
{
   170bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   170c0:	4604      	mov	r4, r0
   170c2:	460d      	mov	r5, r1
	if (ticks == 0) {
   170c4:	ea54 0105 	orrs.w	r1, r4, r5
   170c8:	d037      	beq.n	1713a <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   170ca:	f06f 0101 	mvn.w	r1, #1
   170ce:	1a0a      	subs	r2, r1, r0
   170d0:	f04f 31ff 	mov.w	r1, #4294967295
   170d4:	eb61 0305 	sbc.w	r3, r1, r5
   170d8:	2a01      	cmp	r2, #1
   170da:	f173 0300 	sbcs.w	r3, r3, #0
   170de:	db30      	blt.n	17142 <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   170e0:	f06f 0601 	mvn.w	r6, #1
   170e4:	1a36      	subs	r6, r6, r0
   170e6:	f04f 0320 	mov.w	r3, #32
   170ea:	f3ef 8811 	mrs	r8, BASEPRI
   170ee:	f383 8812 	msr	BASEPRI_MAX, r3
   170f2:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   170f6:	4f16      	ldr	r7, [pc, #88]	; (17150 <z_tick_sleep+0x94>)
   170f8:	68b8      	ldr	r0, [r7, #8]
   170fa:	4b16      	ldr	r3, [pc, #88]	; (17154 <z_tick_sleep+0x98>)
   170fc:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   170fe:	f7ff fe47 	bl	16d90 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   17102:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   17104:	4622      	mov	r2, r4
   17106:	462b      	mov	r3, r5
   17108:	4913      	ldr	r1, [pc, #76]	; (17158 <z_tick_sleep+0x9c>)
   1710a:	3018      	adds	r0, #24
   1710c:	f000 f8e2 	bl	172d4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   17110:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   17112:	7b53      	ldrb	r3, [r2, #13]
   17114:	f043 0310 	orr.w	r3, r3, #16
   17118:	7353      	strb	r3, [r2, #13]
   1711a:	4640      	mov	r0, r8
   1711c:	f7fb fb8e 	bl	1283c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   17120:	2500      	movs	r5, #0
   17122:	f002 f843 	bl	191ac <sys_clock_tick_get_32>
   17126:	1a34      	subs	r4, r6, r0
   17128:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
   1712c:	2c01      	cmp	r4, #1
   1712e:	f175 0300 	sbcs.w	r3, r5, #0
   17132:	da0a      	bge.n	1714a <z_tick_sleep+0x8e>
	return 0;
   17134:	2000      	movs	r0, #0
}
   17136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   1713a:	f7ff ff7b 	bl	17034 <z_impl_k_yield>
		return 0;
   1713e:	2000      	movs	r0, #0
   17140:	e7f9      	b.n	17136 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   17142:	f002 f833 	bl	191ac <sys_clock_tick_get_32>
   17146:	1906      	adds	r6, r0, r4
   17148:	e7cd      	b.n	170e6 <z_tick_sleep+0x2a>
		return ticks;
   1714a:	4620      	mov	r0, r4
   1714c:	e7f3      	b.n	17136 <z_tick_sleep+0x7a>
   1714e:	bf00      	nop
   17150:	2000cbb0 	.word	0x2000cbb0
   17154:	2000cbdc 	.word	0x2000cbdc
   17158:	00018f43 	.word	0x00018f43

0001715c <z_impl_k_sleep>:
{
   1715c:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1715e:	f1b1 3fff 	cmp.w	r1, #4294967295
   17162:	bf08      	it	eq
   17164:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   17168:	d01a      	beq.n	171a0 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
   1716a:	f7ff ffa7 	bl	170bc <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   1716e:	4604      	mov	r4, r0
   17170:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
   17172:	0169      	lsls	r1, r5, #5
   17174:	0143      	lsls	r3, r0, #5
   17176:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
   1717a:	1a18      	subs	r0, r3, r0
   1717c:	eb62 0305 	sbc.w	r3, r2, r5
   17180:	009a      	lsls	r2, r3, #2
   17182:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   17186:	0081      	lsls	r1, r0, #2
   17188:	4613      	mov	r3, r2
   1718a:	1908      	adds	r0, r1, r4
   1718c:	eb45 0303 	adc.w	r3, r5, r3
   17190:	00da      	lsls	r2, r3, #3
   17192:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
   17196:	00c1      	lsls	r1, r0, #3
   17198:	0bc8      	lsrs	r0, r1, #15
   1719a:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
   1719e:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
   171a0:	4b03      	ldr	r3, [pc, #12]	; (171b0 <z_impl_k_sleep+0x54>)
   171a2:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   171a4:	f7ff fe84 	bl	16eb0 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   171a8:	f04f 30ff 	mov.w	r0, #4294967295
   171ac:	e7f7      	b.n	1719e <z_impl_k_sleep+0x42>
   171ae:	bf00      	nop
   171b0:	2000cbb0 	.word	0x2000cbb0

000171b4 <z_impl_z_current_get>:
}
   171b4:	4b01      	ldr	r3, [pc, #4]	; (171bc <z_impl_z_current_get+0x8>)
   171b6:	6898      	ldr	r0, [r3, #8]
   171b8:	4770      	bx	lr
   171ba:	bf00      	nop
   171bc:	2000cbb0 	.word	0x2000cbb0

000171c0 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   171c0:	b538      	push	{r3, r4, r5, lr}
   171c2:	f04f 0320 	mov.w	r3, #32
   171c6:	f3ef 8511 	mrs	r5, BASEPRI
   171ca:	f383 8812 	msr	BASEPRI_MAX, r3
   171ce:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   171d2:	7b43      	ldrb	r3, [r0, #13]
   171d4:	f013 0f08 	tst.w	r3, #8
   171d8:	d004      	beq.n	171e4 <z_thread_abort+0x24>
	__asm__ volatile(
   171da:	f385 8811 	msr	BASEPRI, r5
   171de:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   171e2:	bd38      	pop	{r3, r4, r5, pc}
   171e4:	4604      	mov	r4, r0
	end_thread(thread);
   171e6:	f7ff fecb 	bl	16f80 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   171ea:	4b08      	ldr	r3, [pc, #32]	; (1720c <z_thread_abort+0x4c>)
   171ec:	689b      	ldr	r3, [r3, #8]
   171ee:	42a3      	cmp	r3, r4
   171f0:	d004      	beq.n	171fc <z_thread_abort+0x3c>
   171f2:	f385 8811 	msr	BASEPRI, r5
   171f6:	f3bf 8f6f 	isb	sy
   171fa:	e7f2      	b.n	171e2 <z_thread_abort+0x22>
   171fc:	f3ef 8305 	mrs	r3, IPSR
   17200:	2b00      	cmp	r3, #0
   17202:	d1f6      	bne.n	171f2 <z_thread_abort+0x32>
   17204:	4628      	mov	r0, r5
   17206:	f7fb fb19 	bl	1283c <arch_swap>
	return ret;
   1720a:	e7f2      	b.n	171f2 <z_thread_abort+0x32>
   1720c:	2000cbb0 	.word	0x2000cbb0

00017210 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   17210:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   17212:	4806      	ldr	r0, [pc, #24]	; (1722c <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   17214:	4a06      	ldr	r2, [pc, #24]	; (17230 <z_data_copy+0x20>)
   17216:	1a12      	subs	r2, r2, r0
   17218:	4906      	ldr	r1, [pc, #24]	; (17234 <z_data_copy+0x24>)
   1721a:	f000 ff43 	bl	180a4 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1721e:	4a06      	ldr	r2, [pc, #24]	; (17238 <z_data_copy+0x28>)
   17220:	4906      	ldr	r1, [pc, #24]	; (1723c <z_data_copy+0x2c>)
   17222:	4807      	ldr	r0, [pc, #28]	; (17240 <z_data_copy+0x30>)
   17224:	f000 ff3e 	bl	180a4 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   17228:	bd08      	pop	{r3, pc}
   1722a:	bf00      	nop
   1722c:	2000c500 	.word	0x2000c500
   17230:	2000c5ac 	.word	0x2000c5ac
   17234:	000198ac 	.word	0x000198ac
   17238:	00000000 	.word	0x00000000
   1723c:	00019894 	.word	0x00019894
   17240:	2000c500 	.word	0x2000c500

00017244 <first>:
	return list->head == list;
   17244:	4b03      	ldr	r3, [pc, #12]	; (17254 <first+0x10>)
   17246:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17248:	4298      	cmp	r0, r3
   1724a:	d000      	beq.n	1724e <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   1724c:	4770      	bx	lr
   1724e:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   17250:	e7fc      	b.n	1724c <first+0x8>
   17252:	bf00      	nop
   17254:	2000c580 	.word	0x2000c580

00017258 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   17258:	b130      	cbz	r0, 17268 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   1725a:	4a04      	ldr	r2, [pc, #16]	; (1726c <next+0x14>)
   1725c:	6852      	ldr	r2, [r2, #4]
   1725e:	4290      	cmp	r0, r2
   17260:	d001      	beq.n	17266 <next+0xe>
   17262:	6800      	ldr	r0, [r0, #0]
   17264:	4770      	bx	lr
   17266:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   17268:	4770      	bx	lr
   1726a:	bf00      	nop
   1726c:	2000c580 	.word	0x2000c580

00017270 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   17270:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   17272:	4b04      	ldr	r3, [pc, #16]	; (17284 <elapsed+0x14>)
   17274:	681b      	ldr	r3, [r3, #0]
   17276:	b10b      	cbz	r3, 1727c <elapsed+0xc>
   17278:	2000      	movs	r0, #0
}
   1727a:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1727c:	f7fc fdb4 	bl	13de8 <sys_clock_elapsed>
   17280:	e7fb      	b.n	1727a <elapsed+0xa>
   17282:	bf00      	nop
   17284:	2000cbe8 	.word	0x2000cbe8

00017288 <next_timeout>:

static int32_t next_timeout(void)
{
   17288:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   1728a:	f7ff ffdb 	bl	17244 <first>
   1728e:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   17290:	f7ff ffee 	bl	17270 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   17294:	b18c      	cbz	r4, 172ba <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   17296:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1729a:	1a12      	subs	r2, r2, r0
   1729c:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   172a0:	2a01      	cmp	r2, #1
   172a2:	f173 0100 	sbcs.w	r1, r3, #0
   172a6:	db11      	blt.n	172cc <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   172a8:	4610      	mov	r0, r2
   172aa:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   172ae:	f173 0300 	sbcs.w	r3, r3, #0
   172b2:	db04      	blt.n	172be <next_timeout+0x36>
   172b4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   172b8:	e001      	b.n	172be <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
   172ba:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   172be:	4b04      	ldr	r3, [pc, #16]	; (172d0 <next_timeout+0x48>)
   172c0:	691b      	ldr	r3, [r3, #16]
   172c2:	b113      	cbz	r3, 172ca <next_timeout+0x42>
   172c4:	4283      	cmp	r3, r0
   172c6:	da00      	bge.n	172ca <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
   172c8:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   172ca:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   172cc:	2000      	movs	r0, #0
   172ce:	e7f6      	b.n	172be <next_timeout+0x36>
   172d0:	2000cbb0 	.word	0x2000cbb0

000172d4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   172d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172d8:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   172da:	f1b3 3fff 	cmp.w	r3, #4294967295
   172de:	bf08      	it	eq
   172e0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   172e4:	f000 8096 	beq.w	17414 <z_add_timeout+0x140>
   172e8:	4682      	mov	sl, r0
   172ea:	4614      	mov	r4, r2
   172ec:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   172ee:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   172f0:	2300      	movs	r3, #0
	__asm__ volatile(
   172f2:	f04f 0220 	mov.w	r2, #32
   172f6:	f3ef 8b11 	mrs	fp, BASEPRI
   172fa:	f382 8812 	msr	BASEPRI_MAX, r2
   172fe:	f3bf 8f6f 	isb	sy
   17302:	e02e      	b.n	17362 <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
   17304:	2201      	movs	r2, #1
   17306:	2300      	movs	r3, #0
   17308:	e04b      	b.n	173a2 <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1730a:	f7ff ffb1 	bl	17270 <elapsed>
   1730e:	1822      	adds	r2, r4, r0
   17310:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
   17314:	3201      	adds	r2, #1
   17316:	f143 0300 	adc.w	r3, r3, #0
   1731a:	f8ca 2010 	str.w	r2, [sl, #16]
   1731e:	f8ca 3014 	str.w	r3, [sl, #20]
   17322:	e042      	b.n	173aa <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   17324:	9b00      	ldr	r3, [sp, #0]
   17326:	1ac2      	subs	r2, r0, r3
   17328:	9b01      	ldr	r3, [sp, #4]
   1732a:	eb61 0303 	sbc.w	r3, r1, r3
   1732e:	f8cc 2010 	str.w	r2, [ip, #16]
   17332:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
   17336:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
   1733a:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
   1733e:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
   17342:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
   17346:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   1734a:	f1bc 0f00 	cmp.w	ip, #0
   1734e:	d049      	beq.n	173e4 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   17350:	f7ff ff78 	bl	17244 <first>
   17354:	4582      	cmp	sl, r0
   17356:	d050      	beq.n	173fa <z_add_timeout+0x126>
	__asm__ volatile(
   17358:	f38b 8811 	msr	BASEPRI, fp
   1735c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   17360:	2301      	movs	r3, #1
   17362:	2b00      	cmp	r3, #0
   17364:	d156      	bne.n	17414 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   17366:	f06f 0301 	mvn.w	r3, #1
   1736a:	ebb3 0804 	subs.w	r8, r3, r4
   1736e:	f04f 30ff 	mov.w	r0, #4294967295
   17372:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   17376:	f1b8 0f00 	cmp.w	r8, #0
   1737a:	f179 0300 	sbcs.w	r3, r9, #0
   1737e:	dbc4      	blt.n	1730a <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   17380:	4a26      	ldr	r2, [pc, #152]	; (1741c <z_add_timeout+0x148>)
   17382:	6813      	ldr	r3, [r2, #0]
   17384:	6852      	ldr	r2, [r2, #4]
   17386:	18e3      	adds	r3, r4, r3
   17388:	eb45 0202 	adc.w	r2, r5, r2
   1738c:	f06f 0101 	mvn.w	r1, #1
   17390:	1ace      	subs	r6, r1, r3
   17392:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
   17396:	4632      	mov	r2, r6
   17398:	463b      	mov	r3, r7
   1739a:	2e01      	cmp	r6, #1
   1739c:	f177 0100 	sbcs.w	r1, r7, #0
   173a0:	dbb0      	blt.n	17304 <z_add_timeout+0x30>
   173a2:	f8ca 2010 	str.w	r2, [sl, #16]
   173a6:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   173aa:	f7ff ff4b 	bl	17244 <first>
   173ae:	4684      	mov	ip, r0
   173b0:	f1bc 0f00 	cmp.w	ip, #0
   173b4:	d0c9      	beq.n	1734a <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
   173b6:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
   173ba:	e9da 2304 	ldrd	r2, r3, [sl, #16]
   173be:	e9cd 2300 	strd	r2, r3, [sp]
   173c2:	4282      	cmp	r2, r0
   173c4:	418b      	sbcs	r3, r1
   173c6:	dbad      	blt.n	17324 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
   173c8:	9b00      	ldr	r3, [sp, #0]
   173ca:	1a1a      	subs	r2, r3, r0
   173cc:	9b01      	ldr	r3, [sp, #4]
   173ce:	eb63 0301 	sbc.w	r3, r3, r1
   173d2:	f8ca 2010 	str.w	r2, [sl, #16]
   173d6:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   173da:	4660      	mov	r0, ip
   173dc:	f7ff ff3c 	bl	17258 <next>
   173e0:	4684      	mov	ip, r0
   173e2:	e7e5      	b.n	173b0 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
   173e4:	4b0e      	ldr	r3, [pc, #56]	; (17420 <z_add_timeout+0x14c>)
   173e6:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   173e8:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
   173ec:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
   173f0:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   173f4:	f8c3 a004 	str.w	sl, [r3, #4]
}
   173f8:	e7aa      	b.n	17350 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   173fa:	f7ff ff45 	bl	17288 <next_timeout>

			if (next_time == 0 ||
   173fe:	4603      	mov	r3, r0
   17400:	b118      	cbz	r0, 1740a <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
   17402:	4a08      	ldr	r2, [pc, #32]	; (17424 <z_add_timeout+0x150>)
   17404:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   17406:	4282      	cmp	r2, r0
   17408:	d0a6      	beq.n	17358 <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
   1740a:	2100      	movs	r1, #0
   1740c:	4618      	mov	r0, r3
   1740e:	f7fc fcb7 	bl	13d80 <sys_clock_set_timeout>
   17412:	e7a1      	b.n	17358 <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   17414:	b003      	add	sp, #12
   17416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1741a:	bf00      	nop
   1741c:	2000c748 	.word	0x2000c748
   17420:	2000c580 	.word	0x2000c580
   17424:	2000cbb0 	.word	0x2000cbb0

00017428 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   17428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1742a:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1742c:	f7ff fc06 	bl	16c3c <z_time_slice>
	__asm__ volatile(
   17430:	f04f 0320 	mov.w	r3, #32
   17434:	f3ef 8511 	mrs	r5, BASEPRI
   17438:	f383 8812 	msr	BASEPRI_MAX, r3
   1743c:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   17440:	4b28      	ldr	r3, [pc, #160]	; (174e4 <sys_clock_announce+0xbc>)
   17442:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   17444:	f7ff fefe 	bl	17244 <first>
   17448:	4604      	mov	r4, r0
   1744a:	b350      	cbz	r0, 174a2 <sys_clock_announce+0x7a>
   1744c:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   17450:	4b24      	ldr	r3, [pc, #144]	; (174e4 <sys_clock_announce+0xbc>)
   17452:	681b      	ldr	r3, [r3, #0]
   17454:	17d9      	asrs	r1, r3, #31
   17456:	42b3      	cmp	r3, r6
   17458:	eb71 0207 	sbcs.w	r2, r1, r7
   1745c:	db21      	blt.n	174a2 <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1745e:	4a22      	ldr	r2, [pc, #136]	; (174e8 <sys_clock_announce+0xc0>)
   17460:	e9d2 0100 	ldrd	r0, r1, [r2]
   17464:	1980      	adds	r0, r0, r6
   17466:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   1746a:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
   1746e:	1b9b      	subs	r3, r3, r6
   17470:	4a1c      	ldr	r2, [pc, #112]	; (174e4 <sys_clock_announce+0xbc>)
   17472:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
   17474:	2200      	movs	r2, #0
   17476:	2300      	movs	r3, #0
   17478:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   1747c:	4620      	mov	r0, r4
   1747e:	f001 fe1f 	bl	190c0 <remove_timeout>
	__asm__ volatile(
   17482:	f385 8811 	msr	BASEPRI, r5
   17486:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   1748a:	68a3      	ldr	r3, [r4, #8]
   1748c:	4620      	mov	r0, r4
   1748e:	4798      	blx	r3
	__asm__ volatile(
   17490:	f04f 0320 	mov.w	r3, #32
   17494:	f3ef 8511 	mrs	r5, BASEPRI
   17498:	f383 8812 	msr	BASEPRI_MAX, r3
   1749c:	f3bf 8f6f 	isb	sy
   174a0:	e7d0      	b.n	17444 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   174a2:	b144      	cbz	r4, 174b6 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   174a4:	4b0f      	ldr	r3, [pc, #60]	; (174e4 <sys_clock_announce+0xbc>)
   174a6:	6819      	ldr	r1, [r3, #0]
   174a8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   174ac:	1a52      	subs	r2, r2, r1
   174ae:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   174b2:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
   174b6:	480c      	ldr	r0, [pc, #48]	; (174e8 <sys_clock_announce+0xc0>)
   174b8:	490a      	ldr	r1, [pc, #40]	; (174e4 <sys_clock_announce+0xbc>)
   174ba:	680c      	ldr	r4, [r1, #0]
   174bc:	e9d0 2300 	ldrd	r2, r3, [r0]
   174c0:	1912      	adds	r2, r2, r4
   174c2:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
   174c6:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   174ca:	2400      	movs	r4, #0
   174cc:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
   174ce:	f7ff fedb 	bl	17288 <next_timeout>
   174d2:	4621      	mov	r1, r4
   174d4:	f7fc fc54 	bl	13d80 <sys_clock_set_timeout>
	__asm__ volatile(
   174d8:	f385 8811 	msr	BASEPRI, r5
   174dc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   174e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   174e2:	bf00      	nop
   174e4:	2000cbe8 	.word	0x2000cbe8
   174e8:	2000c748 	.word	0x2000c748

000174ec <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   174ec:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   174ee:	2100      	movs	r1, #0
	__asm__ volatile(
   174f0:	f04f 0320 	mov.w	r3, #32
   174f4:	f3ef 8411 	mrs	r4, BASEPRI
   174f8:	f383 8812 	msr	BASEPRI_MAX, r3
   174fc:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   17500:	2200      	movs	r2, #0
   17502:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
   17504:	b969      	cbnz	r1, 17522 <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
   17506:	f7fc fc6f 	bl	13de8 <sys_clock_elapsed>
   1750a:	4b07      	ldr	r3, [pc, #28]	; (17528 <sys_clock_tick_get+0x3c>)
   1750c:	e9d3 2300 	ldrd	r2, r3, [r3]
   17510:	1812      	adds	r2, r2, r0
   17512:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   17516:	f384 8811 	msr	BASEPRI, r4
   1751a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1751e:	2101      	movs	r1, #1
   17520:	e7f0      	b.n	17504 <sys_clock_tick_get+0x18>
	}
	return t;
}
   17522:	4610      	mov	r0, r2
   17524:	4619      	mov	r1, r3
   17526:	bd10      	pop	{r4, pc}
   17528:	2000c748 	.word	0x2000c748

0001752c <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   1752c:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1752e:	4a03      	ldr	r2, [pc, #12]	; (1753c <boot_banner+0x10>)
   17530:	4903      	ldr	r1, [pc, #12]	; (17540 <boot_banner+0x14>)
   17532:	4804      	ldr	r0, [pc, #16]	; (17544 <boot_banner+0x18>)
   17534:	f000 f86b 	bl	1760e <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   17538:	bd08      	pop	{r3, pc}
   1753a:	bf00      	nop
   1753c:	00019754 	.word	0x00019754
   17540:	000197e8 	.word	0x000197e8
   17544:	000197f8 	.word	0x000197f8

00017548 <z_impl_gpio_pin_configure>:
{
   17548:	b570      	push	{r4, r5, r6, lr}
   1754a:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
   1754c:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
   1754e:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   17550:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   17554:	d007      	beq.n	17566 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   17556:	f412 6f40 	tst.w	r2, #3072	; 0xc00
   1755a:	d004      	beq.n	17566 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1755c:	f012 0f01 	tst.w	r2, #1
   17560:	d001      	beq.n	17566 <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   17562:	f482 6340 	eor.w	r3, r2, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   17566:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1756a:	f013 0f01 	tst.w	r3, #1
   1756e:	d008      	beq.n	17582 <z_impl_gpio_pin_configure+0x3a>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   17570:	2301      	movs	r3, #1
   17572:	fa03 f601 	lsl.w	r6, r3, r1
   17576:	6823      	ldr	r3, [r4, #0]
   17578:	4333      	orrs	r3, r6
   1757a:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   1757c:	682b      	ldr	r3, [r5, #0]
   1757e:	4798      	blx	r3
}
   17580:	bd70      	pop	{r4, r5, r6, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   17582:	2301      	movs	r3, #1
   17584:	fa03 f601 	lsl.w	r6, r3, r1
   17588:	6823      	ldr	r3, [r4, #0]
   1758a:	ea23 0306 	bic.w	r3, r3, r6
   1758e:	6023      	str	r3, [r4, #0]
   17590:	e7f4      	b.n	1757c <z_impl_gpio_pin_configure+0x34>

00017592 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   17592:	4602      	mov	r2, r0
   17594:	b158      	cbz	r0, 175ae <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   17596:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   17598:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1759c:	2b01      	cmp	r3, #1
   1759e:	d003      	beq.n	175a8 <sys_notify_validate+0x16>
   175a0:	2b03      	cmp	r3, #3
   175a2:	d107      	bne.n	175b4 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   175a4:	6803      	ldr	r3, [r0, #0]
   175a6:	b143      	cbz	r3, 175ba <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   175a8:	2000      	movs	r0, #0
   175aa:	6090      	str	r0, [r2, #8]
   175ac:	4770      	bx	lr
		return -EINVAL;
   175ae:	f06f 0015 	mvn.w	r0, #21
   175b2:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
   175b4:	f06f 0015 	mvn.w	r0, #21
   175b8:	4770      	bx	lr
			rv = -EINVAL;
   175ba:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   175be:	4770      	bx	lr

000175c0 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   175c0:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   175c2:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   175c4:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   175c8:	6081      	str	r1, [r0, #8]
	switch (method) {
   175ca:	2a03      	cmp	r2, #3
   175cc:	d103      	bne.n	175d6 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   175ce:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   175d0:	2200      	movs	r2, #0
   175d2:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   175d4:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
   175d6:	2000      	movs	r0, #0
   175d8:	e7fa      	b.n	175d0 <sys_notify_finalize+0x10>

000175da <arch_printk_char_out>:
}
   175da:	2000      	movs	r0, #0
   175dc:	4770      	bx	lr

000175de <str_out>:
{
   175de:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   175e0:	680c      	ldr	r4, [r1, #0]
   175e2:	b154      	cbz	r4, 175fa <str_out+0x1c>
   175e4:	688a      	ldr	r2, [r1, #8]
   175e6:	684b      	ldr	r3, [r1, #4]
   175e8:	429a      	cmp	r2, r3
   175ea:	da06      	bge.n	175fa <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   175ec:	3b01      	subs	r3, #1
   175ee:	429a      	cmp	r2, r3
   175f0:	d008      	beq.n	17604 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   175f2:	1c53      	adds	r3, r2, #1
   175f4:	608b      	str	r3, [r1, #8]
   175f6:	54a0      	strb	r0, [r4, r2]
   175f8:	e002      	b.n	17600 <str_out+0x22>
		ctx->count++;
   175fa:	688b      	ldr	r3, [r1, #8]
   175fc:	3301      	adds	r3, #1
   175fe:	608b      	str	r3, [r1, #8]
}
   17600:	bc10      	pop	{r4}
   17602:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   17604:	1c53      	adds	r3, r2, #1
   17606:	608b      	str	r3, [r1, #8]
   17608:	2300      	movs	r3, #0
   1760a:	54a3      	strb	r3, [r4, r2]
   1760c:	e7f8      	b.n	17600 <str_out+0x22>

0001760e <printk>:
{
   1760e:	b40f      	push	{r0, r1, r2, r3}
   17610:	b500      	push	{lr}
   17612:	b083      	sub	sp, #12
   17614:	a904      	add	r1, sp, #16
   17616:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1761a:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1761c:	f7f9 feb6 	bl	1138c <vprintk>
}
   17620:	b003      	add	sp, #12
   17622:	f85d eb04 	ldr.w	lr, [sp], #4
   17626:	b004      	add	sp, #16
   17628:	4770      	bx	lr

0001762a <snprintk>:
{
   1762a:	b40c      	push	{r2, r3}
   1762c:	b500      	push	{lr}
   1762e:	b083      	sub	sp, #12
   17630:	ab04      	add	r3, sp, #16
   17632:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   17636:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   17638:	f7f9 feb8 	bl	113ac <vsnprintk>
}
   1763c:	b003      	add	sp, #12
   1763e:	f85d eb04 	ldr.w	lr, [sp], #4
   17642:	b002      	add	sp, #8
   17644:	4770      	bx	lr

00017646 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   17646:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1764a:	8b01      	ldrh	r1, [r0, #24]
   1764c:	f021 0107 	bic.w	r1, r1, #7
   17650:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   17652:	8301      	strh	r1, [r0, #24]
}
   17654:	4770      	bx	lr

00017656 <notify_monitors>:
{
   17656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1765a:	4606      	mov	r6, r0
   1765c:	460f      	mov	r7, r1
   1765e:	4690      	mov	r8, r2
	return list->head;
   17660:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   17662:	b119      	cbz	r1, 1766c <notify_monitors+0x16>
   17664:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   17666:	b131      	cbz	r1, 17676 <notify_monitors+0x20>
	return node->next;
   17668:	680c      	ldr	r4, [r1, #0]
   1766a:	e004      	b.n	17676 <notify_monitors+0x20>
   1766c:	460c      	mov	r4, r1
   1766e:	e002      	b.n	17676 <notify_monitors+0x20>
   17670:	4623      	mov	r3, r4
   17672:	4621      	mov	r1, r4
   17674:	461c      	mov	r4, r3
   17676:	b159      	cbz	r1, 17690 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   17678:	684d      	ldr	r5, [r1, #4]
   1767a:	4643      	mov	r3, r8
   1767c:	463a      	mov	r2, r7
   1767e:	4630      	mov	r0, r6
   17680:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   17682:	2c00      	cmp	r4, #0
   17684:	d0f4      	beq.n	17670 <notify_monitors+0x1a>
   17686:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   17688:	2c00      	cmp	r4, #0
   1768a:	d0f2      	beq.n	17672 <notify_monitors+0x1c>
	return node->next;
   1768c:	6823      	ldr	r3, [r4, #0]
   1768e:	e7f0      	b.n	17672 <notify_monitors+0x1c>
}
   17690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017694 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   17694:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   17696:	f013 0307 	ands.w	r3, r3, #7
   1769a:	d103      	bne.n	176a4 <process_recheck+0x10>
	return list->head;
   1769c:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   1769e:	b10a      	cbz	r2, 176a4 <process_recheck+0x10>
		evt = EVT_START;
   176a0:	2003      	movs	r0, #3
   176a2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   176a4:	2b02      	cmp	r3, #2
   176a6:	d003      	beq.n	176b0 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   176a8:	2b01      	cmp	r3, #1
   176aa:	d006      	beq.n	176ba <process_recheck+0x26>
	int evt = EVT_NOP;
   176ac:	2000      	movs	r0, #0
   176ae:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   176b0:	8b42      	ldrh	r2, [r0, #26]
   176b2:	2a00      	cmp	r2, #0
   176b4:	d1f8      	bne.n	176a8 <process_recheck+0x14>
		evt = EVT_STOP;
   176b6:	2004      	movs	r0, #4
   176b8:	4770      	bx	lr
   176ba:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   176bc:	b10b      	cbz	r3, 176c2 <process_recheck+0x2e>
		evt = EVT_RESET;
   176be:	2005      	movs	r0, #5
}
   176c0:	4770      	bx	lr
	int evt = EVT_NOP;
   176c2:	2000      	movs	r0, #0
   176c4:	4770      	bx	lr

000176c6 <process_complete>:
{
   176c6:	b538      	push	{r3, r4, r5, lr}
   176c8:	4604      	mov	r4, r0
   176ca:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   176cc:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   176ce:	2a00      	cmp	r2, #0
   176d0:	db07      	blt.n	176e2 <process_complete+0x1c>
   176d2:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   176d6:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   176d8:	2a01      	cmp	r2, #1
   176da:	d90e      	bls.n	176fa <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   176dc:	2b04      	cmp	r3, #4
   176de:	d032      	beq.n	17746 <process_complete+0x80>
}
   176e0:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   176e2:	e9d0 0100 	ldrd	r0, r1, [r0]
   176e6:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   176ea:	2300      	movs	r3, #0
   176ec:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   176ee:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   176f0:	2101      	movs	r1, #1
   176f2:	4620      	mov	r0, r4
   176f4:	f7ff ffa7 	bl	17646 <set_state>
   176f8:	e7f2      	b.n	176e0 <process_complete+0x1a>
		*clients = mgr->clients;
   176fa:	e9d0 0100 	ldrd	r0, r1, [r0]
   176fe:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   17702:	2200      	movs	r2, #0
   17704:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   17706:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   17708:	2b06      	cmp	r3, #6
   1770a:	d117      	bne.n	1773c <process_complete+0x76>
	return list->head;
   1770c:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1770e:	b13b      	cbz	r3, 17720 <process_complete+0x5a>
				mgr->refs += 1U;
   17710:	8b62      	ldrh	r2, [r4, #26]
   17712:	3201      	adds	r2, #1
   17714:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
   17716:	2b00      	cmp	r3, #0
   17718:	d0f9      	beq.n	1770e <process_complete+0x48>
	return node->next;
   1771a:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1771c:	2b00      	cmp	r3, #0
   1771e:	d1f6      	bne.n	1770e <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
   17720:	2102      	movs	r1, #2
   17722:	4620      	mov	r0, r4
   17724:	f7ff ff8f 	bl	17646 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   17728:	4620      	mov	r0, r4
   1772a:	f7ff ffb3 	bl	17694 <process_recheck>
   1772e:	2800      	cmp	r0, #0
   17730:	d0d6      	beq.n	176e0 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   17732:	8b23      	ldrh	r3, [r4, #24]
   17734:	f043 0320 	orr.w	r3, r3, #32
   17738:	8323      	strh	r3, [r4, #24]
   1773a:	e7d1      	b.n	176e0 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   1773c:	2100      	movs	r1, #0
   1773e:	4620      	mov	r0, r4
   17740:	f7ff ff81 	bl	17646 <set_state>
   17744:	e7f0      	b.n	17728 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
   17746:	2100      	movs	r1, #0
   17748:	f7ff ff7d 	bl	17646 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   1774c:	4620      	mov	r0, r4
   1774e:	f7ff ffa1 	bl	17694 <process_recheck>
   17752:	2800      	cmp	r0, #0
   17754:	d0c4      	beq.n	176e0 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   17756:	8b23      	ldrh	r3, [r4, #24]
   17758:	f043 0320 	orr.w	r3, r3, #32
   1775c:	8323      	strh	r3, [r4, #24]
}
   1775e:	e7bf      	b.n	176e0 <process_complete+0x1a>

00017760 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   17760:	b158      	cbz	r0, 1777a <validate_args+0x1a>
{
   17762:	b510      	push	{r4, lr}
   17764:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   17766:	b159      	cbz	r1, 17780 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   17768:	1d08      	adds	r0, r1, #4
   1776a:	f7ff ff12 	bl	17592 <sys_notify_validate>
	if ((rv == 0)
   1776e:	b918      	cbnz	r0, 17778 <validate_args+0x18>
	    && ((cli->notify.flags
   17770:	68a3      	ldr	r3, [r4, #8]
   17772:	f033 0303 	bics.w	r3, r3, #3
   17776:	d106      	bne.n	17786 <validate_args+0x26>
}
   17778:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1777a:	f06f 0015 	mvn.w	r0, #21
}
   1777e:	4770      	bx	lr
		return -EINVAL;
   17780:	f06f 0015 	mvn.w	r0, #21
   17784:	e7f8      	b.n	17778 <validate_args+0x18>
		rv = -EINVAL;
   17786:	f06f 0015 	mvn.w	r0, #21
   1778a:	e7f5      	b.n	17778 <validate_args+0x18>

0001778c <notify_one>:
{
   1778c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17790:	4607      	mov	r7, r0
   17792:	460c      	mov	r4, r1
   17794:	4616      	mov	r6, r2
   17796:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   17798:	4619      	mov	r1, r3
   1779a:	1d20      	adds	r0, r4, #4
   1779c:	f7ff ff10 	bl	175c0 <sys_notify_finalize>
	if (cb) {
   177a0:	b128      	cbz	r0, 177ae <notify_one+0x22>
   177a2:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   177a4:	462b      	mov	r3, r5
   177a6:	4632      	mov	r2, r6
   177a8:	4621      	mov	r1, r4
   177aa:	4638      	mov	r0, r7
   177ac:	47c0      	blx	r8
}
   177ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000177b2 <notify_all>:
{
   177b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   177b6:	4681      	mov	r9, r0
   177b8:	460c      	mov	r4, r1
   177ba:	4690      	mov	r8, r2
   177bc:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   177be:	e005      	b.n	177cc <notify_all+0x1a>
	list->tail = node;
   177c0:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   177c2:	463b      	mov	r3, r7
   177c4:	4642      	mov	r2, r8
   177c6:	4648      	mov	r0, r9
   177c8:	f7ff ffe0 	bl	1778c <notify_one>
	return list->head;
   177cc:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   177ce:	b129      	cbz	r1, 177dc <notify_all+0x2a>
	return node->next;
   177d0:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   177d2:	6025      	str	r5, [r4, #0]
	return list->tail;
   177d4:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   177d6:	428e      	cmp	r6, r1
   177d8:	d1f3      	bne.n	177c2 <notify_all+0x10>
   177da:	e7f1      	b.n	177c0 <notify_all+0xe>
}
   177dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000177e0 <transition_complete>:
{
   177e0:	b510      	push	{r4, lr}
	__asm__ volatile(
   177e2:	f04f 0420 	mov.w	r4, #32
   177e6:	f3ef 8211 	mrs	r2, BASEPRI
   177ea:	f384 8812 	msr	BASEPRI_MAX, r4
   177ee:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   177f2:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   177f4:	2101      	movs	r1, #1
   177f6:	f7f9 fdef 	bl	113d8 <process_event>
}
   177fa:	bd10      	pop	{r4, pc}

000177fc <onoff_manager_init>:
	if ((mgr == NULL)
   177fc:	4603      	mov	r3, r0
   177fe:	b168      	cbz	r0, 1781c <onoff_manager_init+0x20>
	    || (transitions == NULL)
   17800:	b179      	cbz	r1, 17822 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   17802:	680a      	ldr	r2, [r1, #0]
   17804:	b182      	cbz	r2, 17828 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   17806:	684a      	ldr	r2, [r1, #4]
   17808:	b18a      	cbz	r2, 1782e <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1780a:	2000      	movs	r0, #0
   1780c:	6018      	str	r0, [r3, #0]
   1780e:	6058      	str	r0, [r3, #4]
   17810:	6098      	str	r0, [r3, #8]
   17812:	60d8      	str	r0, [r3, #12]
   17814:	6158      	str	r0, [r3, #20]
   17816:	6198      	str	r0, [r3, #24]
   17818:	6119      	str	r1, [r3, #16]
	return 0;
   1781a:	4770      	bx	lr
		return -EINVAL;
   1781c:	f06f 0015 	mvn.w	r0, #21
   17820:	4770      	bx	lr
   17822:	f06f 0015 	mvn.w	r0, #21
   17826:	4770      	bx	lr
   17828:	f06f 0015 	mvn.w	r0, #21
   1782c:	4770      	bx	lr
   1782e:	f06f 0015 	mvn.w	r0, #21
}
   17832:	4770      	bx	lr

00017834 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   17834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17836:	4604      	mov	r4, r0
   17838:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1783a:	f7ff ff91 	bl	17760 <validate_args>

	if (rv < 0) {
   1783e:	1e06      	subs	r6, r0, #0
   17840:	db37      	blt.n	178b2 <onoff_request+0x7e>
   17842:	f04f 0320 	mov.w	r3, #32
   17846:	f3ef 8211 	mrs	r2, BASEPRI
   1784a:	f383 8812 	msr	BASEPRI_MAX, r3
   1784e:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   17852:	8b25      	ldrh	r5, [r4, #24]
   17854:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   17858:	8b63      	ldrh	r3, [r4, #26]
   1785a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1785e:	428b      	cmp	r3, r1
   17860:	d02f      	beq.n	178c2 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   17862:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   17864:	2d02      	cmp	r5, #2
   17866:	d00c      	beq.n	17882 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   17868:	b18d      	cbz	r5, 1788e <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   1786a:	2d04      	cmp	r5, #4
   1786c:	d00f      	beq.n	1788e <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   1786e:	2d06      	cmp	r5, #6
   17870:	d00d      	beq.n	1788e <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   17872:	2d05      	cmp	r5, #5
   17874:	d01f      	beq.n	178b6 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   17876:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   1787a:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1787c:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1787e:	4608      	mov	r0, r1
   17880:	e00a      	b.n	17898 <onoff_request+0x64>
		mgr->refs += 1U;
   17882:	3301      	adds	r3, #1
   17884:	8363      	strh	r3, [r4, #26]
		notify = true;
   17886:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   17888:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   1788a:	4618      	mov	r0, r3
   1788c:	e004      	b.n	17898 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   1788e:	fab5 f385 	clz	r3, r5
   17892:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   17894:	2100      	movs	r1, #0
		add_client = true;
   17896:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   17898:	b128      	cbz	r0, 178a6 <onoff_request+0x72>
	parent->next = child;
   1789a:	2000      	movs	r0, #0
   1789c:	6038      	str	r0, [r7, #0]
	return list->tail;
   1789e:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   178a0:	b1a8      	cbz	r0, 178ce <onoff_request+0x9a>
	parent->next = child;
   178a2:	6007      	str	r7, [r0, #0]
	list->tail = node;
   178a4:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   178a6:	b9ab      	cbnz	r3, 178d4 <onoff_request+0xa0>
	__asm__ volatile(
   178a8:	f382 8811 	msr	BASEPRI, r2
   178ac:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   178b0:	b9a9      	cbnz	r1, 178de <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   178b2:	4630      	mov	r0, r6
   178b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   178b6:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   178ba:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   178bc:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   178be:	4608      	mov	r0, r1
   178c0:	e7ea      	b.n	17898 <onoff_request+0x64>
		rv = -EAGAIN;
   178c2:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   178c6:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   178c8:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   178ca:	4608      	mov	r0, r1
   178cc:	e7e4      	b.n	17898 <onoff_request+0x64>
   178ce:	6067      	str	r7, [r4, #4]
	list->head = node;
   178d0:	6027      	str	r7, [r4, #0]
}
   178d2:	e7e8      	b.n	178a6 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   178d4:	2102      	movs	r1, #2
   178d6:	4620      	mov	r0, r4
   178d8:	f7f9 fd7e 	bl	113d8 <process_event>
   178dc:	e7e9      	b.n	178b2 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   178de:	2300      	movs	r3, #0
   178e0:	462a      	mov	r2, r5
   178e2:	4639      	mov	r1, r7
   178e4:	4620      	mov	r0, r4
   178e6:	f7ff ff51 	bl	1778c <notify_one>
   178ea:	e7e2      	b.n	178b2 <onoff_request+0x7e>

000178ec <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   178ec:	b508      	push	{r3, lr}
   178ee:	4604      	mov	r4, r0
   178f0:	4608      	mov	r0, r1
   178f2:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   178f4:	461a      	mov	r2, r3
   178f6:	47a0      	blx	r4
	return z_impl_z_current_get();
   178f8:	f7ff fc5c 	bl	171b4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   178fc:	f7fb f9ba 	bl	12c74 <z_impl_k_thread_abort>

00017900 <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   17900:	00c9      	lsls	r1, r1, #3
   17902:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   17904:	4408      	add	r0, r1
   17906:	4770      	bx	lr

00017908 <free_list_remove_bidx>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   17908:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   1790c:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
   1790e:	4299      	cmp	r1, r3
   17910:	d00e      	beq.n	17930 <free_list_remove_bidx+0x28>
{
   17912:	b410      	push	{r4}
   17914:	00cc      	lsls	r4, r1, #3
   17916:	4404      	add	r4, r0
   17918:	88a1      	ldrh	r1, [r4, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   1791a:	3204      	adds	r2, #4
   1791c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   17920:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   17922:	3206      	adds	r2, #6
   17924:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   17926:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   17928:	3304      	adds	r3, #4
   1792a:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   1792c:	bc10      	pop	{r4}
   1792e:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   17930:	2301      	movs	r3, #1
   17932:	fa03 f102 	lsl.w	r1, r3, r2
   17936:	68c3      	ldr	r3, [r0, #12]
   17938:	ea23 0301 	bic.w	r3, r3, r1
   1793c:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1793e:	3204      	adds	r2, #4
   17940:	2300      	movs	r3, #0
   17942:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   17946:	4770      	bx	lr

00017948 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   17948:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   1794a:	1d13      	adds	r3, r2, #4
   1794c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   17950:	b984      	cbnz	r4, 17974 <free_list_add_bidx+0x2c>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
   17952:	2301      	movs	r3, #1
   17954:	fa03 f402 	lsl.w	r4, r3, r2
   17958:	68c3      	ldr	r3, [r0, #12]
   1795a:	4323      	orrs	r3, r4
   1795c:	60c3      	str	r3, [r0, #12]
		b->next = c;
   1795e:	3204      	adds	r2, #4
   17960:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   17964:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   17966:	1d1a      	adds	r2, r3, #4
   17968:	b289      	uxth	r1, r1
   1796a:	5281      	strh	r1, [r0, r2]
   1796c:	3306      	adds	r3, #6
   1796e:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   17970:	bc70      	pop	{r4, r5, r6}
   17972:	4770      	bx	lr
	void *cmem = &buf[c];
   17974:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   17976:	3204      	adds	r2, #4
   17978:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   1797a:	00cd      	lsls	r5, r1, #3
		((uint16_t *)cmem)[f] = val;
   1797c:	1d2e      	adds	r6, r5, #4
   1797e:	5383      	strh	r3, [r0, r6]
   17980:	3506      	adds	r5, #6
   17982:	5344      	strh	r4, [r0, r5]
	void *cmem = &buf[c];
   17984:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   17986:	3306      	adds	r3, #6
   17988:	b289      	uxth	r1, r1
   1798a:	52c1      	strh	r1, [r0, r3]
   1798c:	5281      	strh	r1, [r0, r2]
   1798e:	e7ef      	b.n	17970 <free_list_add_bidx+0x28>

00017990 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   17990:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   17992:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   17994:	3302      	adds	r3, #2
   17996:	5ac4      	ldrh	r4, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   17998:	1a55      	subs	r5, r2, r1
	chunksz_t rsz = sz0 - lsz;
   1799a:	1a89      	subs	r1, r1, r2
   1799c:	eb01 0154 	add.w	r1, r1, r4, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   179a0:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   179a2:	52c4      	strh	r4, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   179a4:	004b      	lsls	r3, r1, #1
	void *cmem = &buf[c];
   179a6:	00d4      	lsls	r4, r2, #3
		((uint16_t *)cmem)[f] = val;
   179a8:	3402      	adds	r4, #2
   179aa:	5303      	strh	r3, [r0, r4]
   179ac:	f820 5032 	strh.w	r5, [r0, r2, lsl #3]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   179b0:	f3c3 034e 	ubfx	r3, r3, #1, #15
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   179b4:	441a      	add	r2, r3
		((uint16_t *)cmem)[f] = val;
   179b6:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   179ba:	bc30      	pop	{r4, r5}
   179bc:	4770      	bx	lr

000179be <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   179be:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   179c0:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   179c2:	3102      	adds	r1, #2
   179c4:	5a45      	ldrh	r5, [r0, r1]
	void *cmem = &buf[c];
   179c6:	00d4      	lsls	r4, r2, #3
		return ((uint16_t *)cmem)[f];
   179c8:	3402      	adds	r4, #2
   179ca:	5b03      	ldrh	r3, [r0, r4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   179cc:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   179ce:	eb03 0355 	add.w	r3, r3, r5, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   179d2:	005d      	lsls	r5, r3, #1
		((uint16_t *)cmem)[f] = val;
   179d4:	5245      	strh	r5, [r0, r1]
		return ((uint16_t *)cmem)[f];
   179d6:	5b01      	ldrh	r1, [r0, r4]
	return c + chunk_size(h, c);
   179d8:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   179dc:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   179e0:	bc30      	pop	{r4, r5}
   179e2:	4770      	bx	lr

000179e4 <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   179e4:	3904      	subs	r1, #4
   179e6:	1a08      	subs	r0, r1, r0
}
   179e8:	08c0      	lsrs	r0, r0, #3
   179ea:	4770      	bx	lr

000179ec <free_list_remove>:
{
   179ec:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   179ee:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   179f2:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   179f4:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   179f6:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   179fa:	f1c2 021f 	rsb	r2, r2, #31
   179fe:	f7ff ff83 	bl	17908 <free_list_remove_bidx>
}
   17a02:	bd08      	pop	{r3, pc}

00017a04 <free_list_add>:
{
   17a04:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   17a06:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   17a0a:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   17a0c:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   17a0e:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   17a12:	f1c2 021f 	rsb	r2, r2, #31
   17a16:	f7ff ff97 	bl	17948 <free_list_add_bidx>
}
   17a1a:	bd08      	pop	{r3, pc}

00017a1c <free_chunk>:
{
   17a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17a1e:	4604      	mov	r4, r0
   17a20:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   17a22:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   17a24:	1cb7      	adds	r7, r6, #2
   17a26:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   17a28:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   17a2c:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   17a30:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   17a32:	f013 0f01 	tst.w	r3, #1
   17a36:	d00c      	beq.n	17a52 <free_chunk+0x36>
   17a38:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   17a3a:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   17a3c:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   17a40:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   17a42:	f013 0f01 	tst.w	r3, #1
   17a46:	d00e      	beq.n	17a66 <free_chunk+0x4a>
	free_list_add(h, c);
   17a48:	4629      	mov	r1, r5
   17a4a:	4620      	mov	r0, r4
   17a4c:	f7ff ffda 	bl	17a04 <free_list_add>
}
   17a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   17a52:	f7ff ffcb 	bl	179ec <free_list_remove>
   17a56:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   17a58:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   17a5c:	4629      	mov	r1, r5
   17a5e:	4620      	mov	r0, r4
   17a60:	f7ff ffad 	bl	179be <merge_chunks>
   17a64:	e7e8      	b.n	17a38 <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   17a66:	4620      	mov	r0, r4
   17a68:	f7ff ffc0 	bl	179ec <free_list_remove>
   17a6c:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   17a6e:	462a      	mov	r2, r5
   17a70:	1a69      	subs	r1, r5, r1
   17a72:	4620      	mov	r0, r4
   17a74:	f7ff ffa3 	bl	179be <merge_chunks>
   17a78:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   17a7a:	1aed      	subs	r5, r5, r3
   17a7c:	e7e4      	b.n	17a48 <free_chunk+0x2c>

00017a7e <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   17a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return 31 - __builtin_clz(usable_sz);
   17a80:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   17a84:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   17a88:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
   17a8c:	b1b7      	cbz	r7, 17abc <alloc_chunk+0x3e>
   17a8e:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   17a92:	2603      	movs	r6, #3
		do {
			chunkid_t c = b->next;
   17a94:	1d14      	adds	r4, r2, #4
   17a96:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   17a9a:	00e5      	lsls	r5, r4, #3
		return ((uint16_t *)cmem)[f];
   17a9c:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
   17aa0:	f8bc c002 	ldrh.w	ip, [ip, #2]
			if (chunk_size(h, c) >= sz) {
   17aa4:	ebb1 0f5c 	cmp.w	r1, ip, lsr #1
   17aa8:	d912      	bls.n	17ad0 <alloc_chunk+0x52>
   17aaa:	4405      	add	r5, r0
   17aac:	88ec      	ldrh	r4, [r5, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
   17aae:	1d15      	adds	r5, r2, #4
   17ab0:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   17ab4:	3e01      	subs	r6, #1
   17ab6:	d001      	beq.n	17abc <alloc_chunk+0x3e>
   17ab8:	42a7      	cmp	r7, r4
   17aba:	d1eb      	bne.n	17a94 <alloc_chunk+0x16>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   17abc:	68c4      	ldr	r4, [r0, #12]
   17abe:	f1c3 0220 	rsb	r2, r3, #32
   17ac2:	2301      	movs	r3, #1
   17ac4:	4093      	lsls	r3, r2
   17ac6:	425b      	negs	r3, r3

	if (bmask != 0U) {
   17ac8:	401c      	ands	r4, r3
   17aca:	d105      	bne.n	17ad8 <alloc_chunk+0x5a>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   17acc:	4620      	mov	r0, r4
   17ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				free_list_remove_bidx(h, c, bi);
   17ad0:	4621      	mov	r1, r4
   17ad2:	f7ff ff19 	bl	17908 <free_list_remove_bidx>
				return c;
   17ad6:	e7f9      	b.n	17acc <alloc_chunk+0x4e>
		int minbucket = __builtin_ctz(bmask);
   17ad8:	fa94 f2a4 	rbit	r2, r4
   17adc:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   17ae0:	1d13      	adds	r3, r2, #4
   17ae2:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   17ae6:	4621      	mov	r1, r4
   17ae8:	f7ff ff0e 	bl	17908 <free_list_remove_bidx>
		return c;
   17aec:	e7ee      	b.n	17acc <alloc_chunk+0x4e>

00017aee <sys_heap_free>:
	if (mem == NULL) {
   17aee:	b179      	cbz	r1, 17b10 <sys_heap_free+0x22>
{
   17af0:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   17af2:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   17af4:	4620      	mov	r0, r4
   17af6:	f7ff ff75 	bl	179e4 <mem_to_chunkid>
   17afa:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   17afc:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   17b00:	8853      	ldrh	r3, [r2, #2]
   17b02:	f023 0301 	bic.w	r3, r3, #1
   17b06:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
   17b08:	4620      	mov	r0, r4
   17b0a:	f7ff ff87 	bl	17a1c <free_chunk>
}
   17b0e:	bd10      	pop	{r4, pc}
   17b10:	4770      	bx	lr

00017b12 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   17b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   17b14:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   17b16:	b341      	cbz	r1, 17b6a <sys_heap_alloc+0x58>
   17b18:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   17b1a:	68aa      	ldr	r2, [r5, #8]
   17b1c:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   17b20:	d925      	bls.n	17b6e <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   17b22:	330b      	adds	r3, #11
   17b24:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   17b26:	4621      	mov	r1, r4
   17b28:	4628      	mov	r0, r5
   17b2a:	f7ff ffa8 	bl	17a7e <alloc_chunk>
	if (c == 0U) {
   17b2e:	4607      	mov	r7, r0
   17b30:	b1f8      	cbz	r0, 17b72 <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   17b32:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   17b34:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   17b38:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   17b3a:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   17b3e:	d309      	bcc.n	17b54 <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   17b40:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   17b42:	885a      	ldrh	r2, [r3, #2]
   17b44:	f042 0201 	orr.w	r2, r2, #1
   17b48:	805a      	strh	r2, [r3, #2]

	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return chunk_mem(h, c);
   17b4a:	4639      	mov	r1, r7
   17b4c:	4628      	mov	r0, r5
   17b4e:	f7ff fed7 	bl	17900 <chunk_mem>
}
   17b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   17b54:	4404      	add	r4, r0
   17b56:	4622      	mov	r2, r4
   17b58:	4601      	mov	r1, r0
   17b5a:	4628      	mov	r0, r5
   17b5c:	f7ff ff18 	bl	17990 <split_chunks>
		free_list_add(h, c + chunk_sz);
   17b60:	4621      	mov	r1, r4
   17b62:	4628      	mov	r0, r5
   17b64:	f7ff ff4e 	bl	17a04 <free_list_add>
   17b68:	e7ea      	b.n	17b40 <sys_heap_alloc+0x2e>
		return NULL;
   17b6a:	2000      	movs	r0, #0
   17b6c:	e7f1      	b.n	17b52 <sys_heap_alloc+0x40>
   17b6e:	2000      	movs	r0, #0
   17b70:	e7ef      	b.n	17b52 <sys_heap_alloc+0x40>
		return NULL;
   17b72:	2000      	movs	r0, #0
   17b74:	e7ed      	b.n	17b52 <sys_heap_alloc+0x40>

00017b76 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   17b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17b7a:	460d      	mov	r5, r1
   17b7c:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   17b7e:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   17b80:	424b      	negs	r3, r1
   17b82:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   17b86:	ea31 0303 	bics.w	r3, r1, r3
   17b8a:	d03e      	beq.n	17c0a <sys_heap_aligned_alloc+0x94>
		align -= rew;
   17b8c:	eba1 0508 	sub.w	r5, r1, r8
		gap = MIN(rew, chunk_header_bytes(h));
   17b90:	f1b8 0f03 	cmp.w	r8, #3
   17b94:	d844      	bhi.n	17c20 <sys_heap_aligned_alloc+0xaa>
   17b96:	4642      	mov	r2, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   17b98:	2c00      	cmp	r4, #0
   17b9a:	d057      	beq.n	17c4c <sys_heap_aligned_alloc+0xd6>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   17b9c:	68b3      	ldr	r3, [r6, #8]
   17b9e:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   17ba2:	d955      	bls.n	17c50 <sys_heap_aligned_alloc+0xda>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   17ba4:	1929      	adds	r1, r5, r4
   17ba6:	1a89      	subs	r1, r1, r2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   17ba8:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   17baa:	08c9      	lsrs	r1, r1, #3
   17bac:	4630      	mov	r0, r6
   17bae:	f7ff ff66 	bl	17a7e <alloc_chunk>

	if (c0 == 0) {
   17bb2:	4607      	mov	r7, r0
   17bb4:	2800      	cmp	r0, #0
   17bb6:	d04d      	beq.n	17c54 <sys_heap_aligned_alloc+0xde>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   17bb8:	4601      	mov	r1, r0
   17bba:	4630      	mov	r0, r6
   17bbc:	f7ff fea0 	bl	17900 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   17bc0:	4440      	add	r0, r8
   17bc2:	4428      	add	r0, r5
   17bc4:	3801      	subs	r0, #1
   17bc6:	426d      	negs	r5, r5
   17bc8:	4005      	ands	r5, r0
   17bca:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   17bce:	442c      	add	r4, r5
   17bd0:	3407      	adds	r4, #7
   17bd2:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   17bd6:	4629      	mov	r1, r5
   17bd8:	4630      	mov	r0, r6
   17bda:	f7ff ff03 	bl	179e4 <mem_to_chunkid>
   17bde:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   17be0:	1ba4      	subs	r4, r4, r6
   17be2:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   17be4:	4287      	cmp	r7, r0
   17be6:	d31d      	bcc.n	17c24 <sys_heap_aligned_alloc+0xae>
	void *cmem = &buf[c];
   17be8:	ea4f 07c8 	mov.w	r7, r8, lsl #3
		return ((uint16_t *)cmem)[f];
   17bec:	eb06 03c8 	add.w	r3, r6, r8, lsl #3
   17bf0:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   17bf2:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   17bf6:	429c      	cmp	r4, r3
   17bf8:	d31e      	bcc.n	17c38 <sys_heap_aligned_alloc+0xc2>
	void *cmem = &buf[c];
   17bfa:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   17bfc:	8873      	ldrh	r3, [r6, #2]
   17bfe:	f043 0301 	orr.w	r3, r3, #1
   17c02:	8073      	strh	r3, [r6, #2]
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
   17c04:	4628      	mov	r0, r5
   17c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (align <= chunk_header_bytes(h)) {
   17c0a:	2904      	cmp	r1, #4
   17c0c:	d903      	bls.n	17c16 <sys_heap_aligned_alloc+0xa0>
		rew = 0;
   17c0e:	f04f 0800 	mov.w	r8, #0
		gap = chunk_header_bytes(h);
   17c12:	2204      	movs	r2, #4
   17c14:	e7c0      	b.n	17b98 <sys_heap_aligned_alloc+0x22>
			return sys_heap_alloc(heap, bytes);
   17c16:	4611      	mov	r1, r2
   17c18:	f7ff ff7b 	bl	17b12 <sys_heap_alloc>
   17c1c:	4605      	mov	r5, r0
   17c1e:	e7f1      	b.n	17c04 <sys_heap_aligned_alloc+0x8e>
		gap = MIN(rew, chunk_header_bytes(h));
   17c20:	2204      	movs	r2, #4
   17c22:	e7b9      	b.n	17b98 <sys_heap_aligned_alloc+0x22>
		split_chunks(h, c0, c);
   17c24:	4602      	mov	r2, r0
   17c26:	4639      	mov	r1, r7
   17c28:	4630      	mov	r0, r6
   17c2a:	f7ff feb1 	bl	17990 <split_chunks>
		free_list_add(h, c0);
   17c2e:	4639      	mov	r1, r7
   17c30:	4630      	mov	r0, r6
   17c32:	f7ff fee7 	bl	17a04 <free_list_add>
   17c36:	e7d7      	b.n	17be8 <sys_heap_aligned_alloc+0x72>
		split_chunks(h, c, c_end);
   17c38:	4622      	mov	r2, r4
   17c3a:	4641      	mov	r1, r8
   17c3c:	4630      	mov	r0, r6
   17c3e:	f7ff fea7 	bl	17990 <split_chunks>
		free_list_add(h, c_end);
   17c42:	4621      	mov	r1, r4
   17c44:	4630      	mov	r0, r6
   17c46:	f7ff fedd 	bl	17a04 <free_list_add>
   17c4a:	e7d6      	b.n	17bfa <sys_heap_aligned_alloc+0x84>
		return NULL;
   17c4c:	2500      	movs	r5, #0
   17c4e:	e7d9      	b.n	17c04 <sys_heap_aligned_alloc+0x8e>
   17c50:	2500      	movs	r5, #0
   17c52:	e7d7      	b.n	17c04 <sys_heap_aligned_alloc+0x8e>
		return NULL;
   17c54:	2500      	movs	r5, #0
   17c56:	e7d5      	b.n	17c04 <sys_heap_aligned_alloc+0x8e>

00017c58 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   17c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17c5a:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   17c5c:	1f15      	subs	r5, r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   17c5e:	1dc8      	adds	r0, r1, #7
   17c60:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   17c64:	440d      	add	r5, r1
   17c66:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   17c6a:	1a2d      	subs	r5, r5, r0
   17c6c:	ea4f 0ed5 	mov.w	lr, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
   17c70:	4607      	mov	r7, r0
	heap->heap = h;
   17c72:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   17c74:	f8c0 e008 	str.w	lr, [r0, #8]
	h->avail_buckets = 0;
   17c78:	2300      	movs	r3, #0
   17c7a:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   17c7c:	fabe f28e 	clz	r2, lr
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   17c80:	f1c2 0620 	rsb	r6, r2, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   17c84:	f1c2 0224 	rsb	r2, r2, #36	; 0x24
   17c88:	0092      	lsls	r2, r2, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   17c8a:	f102 0c07 	add.w	ip, r2, #7
   17c8e:	ea4f 01dc 	mov.w	r1, ip, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   17c92:	42b3      	cmp	r3, r6
   17c94:	da05      	bge.n	17ca2 <sys_heap_init+0x4a>
		h->buckets[i].next = 0;
   17c96:	1d1a      	adds	r2, r3, #4
   17c98:	2400      	movs	r4, #0
   17c9a:	f847 4022 	str.w	r4, [r7, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   17c9e:	3301      	adds	r3, #1
   17ca0:	e7f7      	b.n	17c92 <sys_heap_init+0x3a>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   17ca2:	004b      	lsls	r3, r1, #1
		((uint16_t *)cmem)[f] = val;
   17ca4:	b29b      	uxth	r3, r3
   17ca6:	2200      	movs	r2, #0
   17ca8:	8002      	strh	r2, [r0, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   17caa:	f043 0301 	orr.w	r3, r3, #1
   17cae:	8043      	strh	r3, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   17cb0:	ebae 0301 	sub.w	r3, lr, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   17cb4:	005e      	lsls	r6, r3, #1
	void *cmem = &buf[c];
   17cb6:	f02c 0207 	bic.w	r2, ip, #7
		((uint16_t *)cmem)[f] = val;
   17cba:	1c94      	adds	r4, r2, #2
   17cbc:	5306      	strh	r6, [r0, r4]
   17cbe:	5281      	strh	r1, [r0, r2]
	void *cmem = &buf[c];
   17cc0:	f025 0207 	bic.w	r2, r5, #7
		((uint16_t *)cmem)[f] = val;
   17cc4:	4405      	add	r5, r0
   17cc6:	5283      	strh	r3, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   17cc8:	2301      	movs	r3, #1
   17cca:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   17ccc:	f7ff fe9a 	bl	17a04 <free_list_add>
}
   17cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00017cd2 <extract_decimal>:
{
   17cd2:	b410      	push	{r4}
   17cd4:	4604      	mov	r4, r0
	const char *sp = *str;
   17cd6:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   17cd8:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   17cda:	7813      	ldrb	r3, [r2, #0]
   17cdc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   17ce0:	2909      	cmp	r1, #9
   17ce2:	d806      	bhi.n	17cf2 <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
   17ce4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17ce8:	3201      	adds	r2, #1
   17cea:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   17cee:	3830      	subs	r0, #48	; 0x30
   17cf0:	e7f3      	b.n	17cda <extract_decimal+0x8>
	*str = sp;
   17cf2:	6022      	str	r2, [r4, #0]
}
   17cf4:	bc10      	pop	{r4}
   17cf6:	4770      	bx	lr

00017cf8 <_ldiv5>:
{
   17cf8:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t v_lo = *v;
   17cfa:	6806      	ldr	r6, [r0, #0]
   17cfc:	6845      	ldr	r5, [r0, #4]
	uint32_t v_hi = *v >> 32;
   17cfe:	f04f 0c00 	mov.w	ip, #0
	__asm__ ("" : "+r" (m));
   17d02:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
	result = ((uint64_t)m << 32) | m;
   17d06:	4611      	mov	r1, r2
	result += (uint64_t)v_lo * m;
   17d08:	fba6 6702 	umull	r6, r7, r6, r2
   17d0c:	1871      	adds	r1, r6, r1
   17d0e:	eb47 0102 	adc.w	r1, r7, r2
	result >>= 32;
   17d12:	4664      	mov	r4, ip
	result += (uint64_t)v_lo * m;
   17d14:	1871      	adds	r1, r6, r1
   17d16:	eb47 0404 	adc.w	r4, r7, r4
	result += (uint64_t)v_hi * m;
   17d1a:	fba5 2302 	umull	r2, r3, r5, r2
   17d1e:	1851      	adds	r1, r2, r1
   17d20:	eb43 0404 	adc.w	r4, r3, r4
	result >>= 32;
   17d24:	4665      	mov	r5, ip
	result += (uint64_t)v_hi * m;
   17d26:	1911      	adds	r1, r2, r4
   17d28:	eb43 0505 	adc.w	r5, r3, r5
	*v = result;
   17d2c:	6001      	str	r1, [r0, #0]
   17d2e:	6045      	str	r5, [r0, #4]
}
   17d30:	bcf0      	pop	{r4, r5, r6, r7}
   17d32:	4770      	bx	lr

00017d34 <_ldiv10>:
{
   17d34:	b508      	push	{r3, lr}
	*v >>= 1;
   17d36:	6802      	ldr	r2, [r0, #0]
   17d38:	6841      	ldr	r1, [r0, #4]
   17d3a:	0852      	lsrs	r2, r2, #1
   17d3c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   17d40:	0849      	lsrs	r1, r1, #1
   17d42:	6002      	str	r2, [r0, #0]
   17d44:	6041      	str	r1, [r0, #4]
	_ldiv5(v);
   17d46:	f7ff ffd7 	bl	17cf8 <_ldiv5>
}
   17d4a:	bd08      	pop	{r3, pc}

00017d4c <_get_digit>:
	if (*digit_count > 0) {
   17d4c:	680b      	ldr	r3, [r1, #0]
   17d4e:	2b00      	cmp	r3, #0
   17d50:	dd16      	ble.n	17d80 <_get_digit+0x34>
{
   17d52:	b430      	push	{r4, r5}
   17d54:	4604      	mov	r4, r0
		--*digit_count;
   17d56:	3b01      	subs	r3, #1
   17d58:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   17d5a:	6801      	ldr	r1, [r0, #0]
   17d5c:	6840      	ldr	r0, [r0, #4]
   17d5e:	0085      	lsls	r5, r0, #2
   17d60:	008b      	lsls	r3, r1, #2
   17d62:	ea45 7291 	orr.w	r2, r5, r1, lsr #30
   17d66:	185b      	adds	r3, r3, r1
   17d68:	eb40 0202 	adc.w	r2, r0, r2
   17d6c:	18db      	adds	r3, r3, r3
   17d6e:	4152      	adcs	r2, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   17d70:	0f10      	lsrs	r0, r2, #28
   17d72:	3030      	adds	r0, #48	; 0x30
		*fr &= (BIT64(60) - 1U);
   17d74:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   17d78:	6023      	str	r3, [r4, #0]
   17d7a:	6062      	str	r2, [r4, #4]
}
   17d7c:	bc30      	pop	{r4, r5}
   17d7e:	4770      	bx	lr
		rval = '0';
   17d80:	2030      	movs	r0, #48	; 0x30
}
   17d82:	4770      	bx	lr

00017d84 <encode_uint>:
{
   17d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d88:	b083      	sub	sp, #12
   17d8a:	4604      	mov	r4, r0
   17d8c:	460d      	mov	r5, r1
   17d8e:	9201      	str	r2, [sp, #4]
   17d90:	469a      	mov	sl, r3
   17d92:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
   17d96:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   17d98:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   17d9c:	2b6f      	cmp	r3, #111	; 0x6f
   17d9e:	d00f      	beq.n	17dc0 <encode_uint+0x3c>
   17da0:	d906      	bls.n	17db0 <encode_uint+0x2c>
   17da2:	2b70      	cmp	r3, #112	; 0x70
   17da4:	d00f      	beq.n	17dc6 <encode_uint+0x42>
   17da6:	2b78      	cmp	r3, #120	; 0x78
   17da8:	d110      	bne.n	17dcc <encode_uint+0x48>
		return 16;
   17daa:	f04f 0910 	mov.w	r9, #16
   17dae:	e026      	b.n	17dfe <encode_uint+0x7a>
	switch (specifier) {
   17db0:	2b58      	cmp	r3, #88	; 0x58
   17db2:	d002      	beq.n	17dba <encode_uint+0x36>
   17db4:	f04f 090a 	mov.w	r9, #10
   17db8:	e021      	b.n	17dfe <encode_uint+0x7a>
		return 16;
   17dba:	f04f 0910 	mov.w	r9, #16
   17dbe:	e01e      	b.n	17dfe <encode_uint+0x7a>
		return 8;
   17dc0:	f04f 0908 	mov.w	r9, #8
   17dc4:	e01b      	b.n	17dfe <encode_uint+0x7a>
		return 16;
   17dc6:	f04f 0910 	mov.w	r9, #16
   17dca:	e018      	b.n	17dfe <encode_uint+0x7a>
	switch (specifier) {
   17dcc:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
   17dd0:	e015      	b.n	17dfe <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   17dd2:	f1bb 0f19 	cmp.w	fp, #25
   17dd6:	d820      	bhi.n	17e1a <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   17dd8:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   17dda:	3237      	adds	r2, #55	; 0x37
   17ddc:	b2d2      	uxtb	r2, r2
   17dde:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
   17de2:	4632      	mov	r2, r6
   17de4:	463b      	mov	r3, r7
   17de6:	4620      	mov	r0, r4
   17de8:	4629      	mov	r1, r5
   17dea:	f7f8 ff53 	bl	10c94 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   17dee:	42bd      	cmp	r5, r7
   17df0:	bf08      	it	eq
   17df2:	42b4      	cmpeq	r4, r6
   17df4:	d315      	bcc.n	17e22 <encode_uint+0x9e>
   17df6:	45d0      	cmp	r8, sl
   17df8:	d913      	bls.n	17e22 <encode_uint+0x9e>
		value /= radix;
   17dfa:	4604      	mov	r4, r0
   17dfc:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   17dfe:	464e      	mov	r6, r9
   17e00:	2700      	movs	r7, #0
   17e02:	464a      	mov	r2, r9
   17e04:	463b      	mov	r3, r7
   17e06:	4620      	mov	r0, r4
   17e08:	4629      	mov	r1, r5
   17e0a:	f7f8 ff43 	bl	10c94 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   17e0e:	2a09      	cmp	r2, #9
   17e10:	d8df      	bhi.n	17dd2 <encode_uint+0x4e>
   17e12:	b2d2      	uxtb	r2, r2
   17e14:	3230      	adds	r2, #48	; 0x30
   17e16:	b2d2      	uxtb	r2, r2
   17e18:	e7e1      	b.n	17dde <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   17e1a:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   17e1c:	3257      	adds	r2, #87	; 0x57
   17e1e:	b2d2      	uxtb	r2, r2
   17e20:	e7dd      	b.n	17dde <encode_uint+0x5a>
	if (conv->flag_hash) {
   17e22:	9b01      	ldr	r3, [sp, #4]
   17e24:	781b      	ldrb	r3, [r3, #0]
   17e26:	f013 0f20 	tst.w	r3, #32
   17e2a:	d005      	beq.n	17e38 <encode_uint+0xb4>
		if (radix == 8) {
   17e2c:	f1b9 0f08 	cmp.w	r9, #8
   17e30:	d006      	beq.n	17e40 <encode_uint+0xbc>
		} else if (radix == 16) {
   17e32:	f1b9 0f10 	cmp.w	r9, #16
   17e36:	d009      	beq.n	17e4c <encode_uint+0xc8>
}
   17e38:	4640      	mov	r0, r8
   17e3a:	b003      	add	sp, #12
   17e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   17e40:	9a01      	ldr	r2, [sp, #4]
   17e42:	7893      	ldrb	r3, [r2, #2]
   17e44:	f043 0308 	orr.w	r3, r3, #8
   17e48:	7093      	strb	r3, [r2, #2]
   17e4a:	e7f5      	b.n	17e38 <encode_uint+0xb4>
			conv->altform_0c = true;
   17e4c:	9a01      	ldr	r2, [sp, #4]
   17e4e:	7893      	ldrb	r3, [r2, #2]
   17e50:	f043 0310 	orr.w	r3, r3, #16
   17e54:	7093      	strb	r3, [r2, #2]
   17e56:	e7ef      	b.n	17e38 <encode_uint+0xb4>

00017e58 <outs>:
{
   17e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17e5c:	4607      	mov	r7, r0
   17e5e:	460e      	mov	r6, r1
   17e60:	4614      	mov	r4, r2
   17e62:	4698      	mov	r8, r3
	size_t count = 0;
   17e64:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   17e66:	e006      	b.n	17e76 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   17e68:	4631      	mov	r1, r6
   17e6a:	f814 0b01 	ldrb.w	r0, [r4], #1
   17e6e:	47b8      	blx	r7
		if (rc < 0) {
   17e70:	2800      	cmp	r0, #0
   17e72:	db09      	blt.n	17e88 <outs+0x30>
		++count;
   17e74:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   17e76:	4544      	cmp	r4, r8
   17e78:	d3f6      	bcc.n	17e68 <outs+0x10>
   17e7a:	f1b8 0f00 	cmp.w	r8, #0
   17e7e:	d102      	bne.n	17e86 <outs+0x2e>
   17e80:	7823      	ldrb	r3, [r4, #0]
   17e82:	2b00      	cmp	r3, #0
   17e84:	d1f0      	bne.n	17e68 <outs+0x10>
	return (int)count;
   17e86:	4628      	mov	r0, r5
}
   17e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017e8c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   17e8c:	4770      	bx	lr

00017e8e <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   17e8e:	b084      	sub	sp, #16
   17e90:	ab04      	add	r3, sp, #16
   17e92:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   17e96:	f89d 3004 	ldrb.w	r3, [sp, #4]
   17e9a:	2b06      	cmp	r3, #6
   17e9c:	d001      	beq.n	17ea2 <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   17e9e:	b004      	add	sp, #16
   17ea0:	4770      	bx	lr
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   17ea2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   17ea6:	2201      	movs	r2, #1
   17ea8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   17eac:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   17eb0:	bf20      	wfe
    while (true)
   17eb2:	e7fd      	b.n	17eb0 <pm_power_state_set+0x22>

00017eb4 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   17eb4:	b084      	sub	sp, #16
   17eb6:	ab04      	add	r3, sp, #16
   17eb8:	e903 0007 	stmdb	r3, {r0, r1, r2}
   17ebc:	2300      	movs	r3, #0
   17ebe:	f383 8811 	msr	BASEPRI, r3
   17ec2:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   17ec6:	b004      	add	sp, #16
   17ec8:	4770      	bx	lr

00017eca <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   17eca:	2200      	movs	r2, #0
   17ecc:	6002      	str	r2, [r0, #0]
   17ece:	6042      	str	r2, [r0, #4]
   17ed0:	6082      	str	r2, [r0, #8]
}
   17ed2:	4770      	bx	lr

00017ed4 <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   17ed4:	b510      	push	{r4, lr}
   17ed6:	b40f      	push	{r0, r1, r2, r3}
   17ed8:	f7fa fc12 	bl	12700 <before_nse>
   17edc:	bc0f      	pop	{r0, r1, r2, r3}
   17ede:	f7f8 f883 	bl	ffe8 <spm_request_random_number_nse>
   17ee2:	b40f      	push	{r0, r1, r2, r3}
   17ee4:	f7fa fc16 	bl	12714 <after_nse>
   17ee8:	bc0f      	pop	{r0, r1, r2, r3}
   17eea:	bd10      	pop	{r4, pc}

00017eec <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   17eec:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   17eee:	f000 fecf 	bl	18c90 <z_fatal_error>
}
   17ef2:	bd08      	pop	{r3, pc}

00017ef4 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   17ef4:	b508      	push	{r3, lr}
   17ef6:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   17ef8:	6800      	ldr	r0, [r0, #0]
   17efa:	f7ff fff7 	bl	17eec <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   17efe:	bd08      	pop	{r3, pc}

00017f00 <z_irq_spurious>:
{
   17f00:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   17f02:	2100      	movs	r1, #0
   17f04:	2001      	movs	r0, #1
   17f06:	f7ff fff1 	bl	17eec <z_arm_fatal_error>
}
   17f0a:	bd08      	pop	{r3, pc}

00017f0c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   17f0c:	b508      	push	{r3, lr}
	handler();
   17f0e:	f7fa fc6d 	bl	127ec <z_SysNmiOnReset>
	z_arm_int_exit();
   17f12:	f7fa fd43 	bl	1299c <z_arm_exc_exit>
}
   17f16:	bd08      	pop	{r3, pc}

00017f18 <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
   17f18:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   17f1c:	f383 880b 	msr	PSPLIM, r3
}
   17f20:	4770      	bx	lr

00017f22 <memory_fault_recoverable>:
}
   17f22:	2000      	movs	r0, #0
   17f24:	4770      	bx	lr

00017f26 <debug_monitor>:
	*recoverable = false;
   17f26:	2300      	movs	r3, #0
   17f28:	700b      	strb	r3, [r1, #0]
}
   17f2a:	4770      	bx	lr

00017f2c <fault_handle>:
{
   17f2c:	b508      	push	{r3, lr}
	*recoverable = false;
   17f2e:	2300      	movs	r3, #0
   17f30:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   17f32:	1ecb      	subs	r3, r1, #3
   17f34:	2b09      	cmp	r3, #9
   17f36:	d81a      	bhi.n	17f6e <fault_handle+0x42>
   17f38:	e8df f003 	tbb	[pc, r3]
   17f3c:	110d0905 	.word	0x110d0905
   17f40:	19191919 	.word	0x19191919
   17f44:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   17f46:	4611      	mov	r1, r2
   17f48:	f7fa fda4 	bl	12a94 <hard_fault>
		break;
   17f4c:	e010      	b.n	17f70 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
   17f4e:	2100      	movs	r1, #0
   17f50:	f7fa fd32 	bl	129b8 <mem_manage_fault>
		break;
   17f54:	e00c      	b.n	17f70 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
   17f56:	2100      	movs	r1, #0
   17f58:	f7fa fd5a 	bl	12a10 <bus_fault>
		break;
   17f5c:	e008      	b.n	17f70 <fault_handle+0x44>
		reason = usage_fault(esf);
   17f5e:	f7fa fd81 	bl	12a64 <usage_fault>
		break;
   17f62:	e005      	b.n	17f70 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
   17f64:	4611      	mov	r1, r2
   17f66:	f7ff ffde 	bl	17f26 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   17f6a:	2000      	movs	r0, #0
		break;
   17f6c:	e000      	b.n	17f70 <fault_handle+0x44>
	*recoverable = false;
   17f6e:	2000      	movs	r0, #0
}
   17f70:	bd08      	pop	{r3, pc}

00017f72 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   17f72:	4770      	bx	lr

00017f74 <z_arm_restore_fp_context>:
			"vldmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);
	}
#endif
}
   17f74:	4770      	bx	lr

00017f76 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   17f76:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   17f7a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   17f7e:	d001      	beq.n	17f84 <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
   17f80:	b2c0      	uxtb	r0, r0
   17f82:	4770      	bx	lr
	}

	return -EINVAL;
   17f84:	f06f 0015 	mvn.w	r0, #21
}
   17f88:	4770      	bx	lr

00017f8a <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
   17f8a:	6843      	ldr	r3, [r0, #4]
		&&
   17f8c:	2b1f      	cmp	r3, #31
   17f8e:	d90a      	bls.n	17fa6 <mpu_partition_is_valid+0x1c>
		&&
   17f90:	f013 0f1f 	tst.w	r3, #31
   17f94:	d001      	beq.n	17f9a <mpu_partition_is_valid+0x10>
		&&
   17f96:	2000      	movs	r0, #0
   17f98:	4770      	bx	lr
		((part->start &
   17f9a:	6803      	ldr	r3, [r0, #0]
		&&
   17f9c:	f013 0f1f 	tst.w	r3, #31
   17fa0:	d003      	beq.n	17faa <mpu_partition_is_valid+0x20>
   17fa2:	2000      	movs	r0, #0
   17fa4:	4770      	bx	lr
   17fa6:	2000      	movs	r0, #0
   17fa8:	4770      	bx	lr
   17faa:	2001      	movs	r0, #1
}
   17fac:	4770      	bx	lr

00017fae <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
   17fae:	280f      	cmp	r0, #15
   17fb0:	d805      	bhi.n	17fbe <region_allocate_and_init+0x10>
{
   17fb2:	b510      	push	{r4, lr}
   17fb4:	4604      	mov	r4, r0
	region_init(index, region_conf);
   17fb6:	f7fa fe99 	bl	12cec <region_init>
	return index;
   17fba:	4620      	mov	r0, r4
}
   17fbc:	bd10      	pop	{r4, pc}
		return -EINVAL;
   17fbe:	f06f 0015 	mvn.w	r0, #21
}
   17fc2:	4770      	bx	lr

00017fc4 <mpu_configure_region>:
{
   17fc4:	b530      	push	{r4, r5, lr}
   17fc6:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   17fc8:	680b      	ldr	r3, [r1, #0]
   17fca:	9300      	str	r3, [sp, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   17fcc:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
   17fce:	890d      	ldrh	r5, [r1, #8]
   17fd0:	f89d 2008 	ldrb.w	r2, [sp, #8]
   17fd4:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   17fd8:	7a89      	ldrb	r1, [r1, #10]
   17fda:	f361 1247 	bfi	r2, r1, #5, #3
   17fde:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   17fe2:	f023 031f 	bic.w	r3, r3, #31
   17fe6:	4423      	add	r3, r4
   17fe8:	3b01      	subs	r3, #1
   17fea:	f023 031f 	bic.w	r3, r3, #31
   17fee:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   17ff0:	4669      	mov	r1, sp
   17ff2:	f7ff ffdc 	bl	17fae <region_allocate_and_init>
}
   17ff6:	b005      	add	sp, #20
   17ff8:	bd30      	pop	{r4, r5, pc}

00017ffa <arm_core_mpu_configure_static_mpu_regions>:
{
   17ffa:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   17ffc:	f7fa ff54 	bl	12ea8 <mpu_configure_static_mpu_regions>
}
   18000:	bd08      	pop	{r3, pc}

00018002 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   18002:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   18004:	f7fa ff5a 	bl	12ebc <mpu_mark_areas_for_dynamic_regions>
}
   18008:	bd08      	pop	{r3, pc}

0001800a <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1800a:	4603      	mov	r3, r0
   1800c:	b1a2      	cbz	r2, 18038 <strncpy+0x2e>
{
   1800e:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   18010:	780c      	ldrb	r4, [r1, #0]
   18012:	b12c      	cbz	r4, 18020 <strncpy+0x16>
		*d = *s;
   18014:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   18018:	3101      	adds	r1, #1
		d++;
		n--;
   1801a:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   1801c:	2a00      	cmp	r2, #0
   1801e:	d1f7      	bne.n	18010 <strncpy+0x6>
	}

	while (n > 0) {
   18020:	b122      	cbz	r2, 1802c <strncpy+0x22>
		*d = '\0';
   18022:	2100      	movs	r1, #0
   18024:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   18028:	3a01      	subs	r2, #1
   1802a:	e7f9      	b.n	18020 <strncpy+0x16>
	}

	return dest;
}
   1802c:	bc10      	pop	{r4}
   1802e:	4770      	bx	lr
		*d = '\0';
   18030:	2100      	movs	r1, #0
   18032:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   18036:	3a01      	subs	r2, #1
	while (n > 0) {
   18038:	2a00      	cmp	r2, #0
   1803a:	d1f9      	bne.n	18030 <strncpy+0x26>
   1803c:	4770      	bx	lr

0001803e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1803e:	4603      	mov	r3, r0
	size_t n = 0;
   18040:	2000      	movs	r0, #0

	while (*s != '\0') {
   18042:	781a      	ldrb	r2, [r3, #0]
   18044:	b112      	cbz	r2, 1804c <strlen+0xe>
		s++;
   18046:	3301      	adds	r3, #1
		n++;
   18048:	3001      	adds	r0, #1
   1804a:	e7fa      	b.n	18042 <strlen+0x4>
	}

	return n;
}
   1804c:	4770      	bx	lr

0001804e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1804e:	4603      	mov	r3, r0
	size_t n = 0;
   18050:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   18052:	781a      	ldrb	r2, [r3, #0]
   18054:	b122      	cbz	r2, 18060 <strnlen+0x12>
   18056:	4288      	cmp	r0, r1
   18058:	d202      	bcs.n	18060 <strnlen+0x12>
		s++;
   1805a:	3301      	adds	r3, #1
		n++;
   1805c:	3001      	adds	r0, #1
   1805e:	e7f8      	b.n	18052 <strnlen+0x4>
	}

	return n;
}
   18060:	4770      	bx	lr

00018062 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   18062:	7803      	ldrb	r3, [r0, #0]
   18064:	780a      	ldrb	r2, [r1, #0]
   18066:	4293      	cmp	r3, r2
   18068:	d103      	bne.n	18072 <strcmp+0x10>
   1806a:	b113      	cbz	r3, 18072 <strcmp+0x10>
		s1++;
   1806c:	3001      	adds	r0, #1
		s2++;
   1806e:	3101      	adds	r1, #1
   18070:	e7f7      	b.n	18062 <strcmp>
	}

	return *s1 - *s2;
}
   18072:	1a98      	subs	r0, r3, r2
   18074:	4770      	bx	lr

00018076 <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   18076:	b17a      	cbz	r2, 18098 <memcmp+0x22>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   18078:	1e53      	subs	r3, r2, #1
   1807a:	d00f      	beq.n	1809c <memcmp+0x26>
{
   1807c:	b410      	push	{r4}
	while ((--n > 0) && (*c1 == *c2)) {
   1807e:	7804      	ldrb	r4, [r0, #0]
   18080:	780a      	ldrb	r2, [r1, #0]
   18082:	4294      	cmp	r4, r2
   18084:	d103      	bne.n	1808e <memcmp+0x18>
		c1++;
   18086:	3001      	adds	r0, #1
		c2++;
   18088:	3101      	adds	r1, #1
	while ((--n > 0) && (*c1 == *c2)) {
   1808a:	3b01      	subs	r3, #1
   1808c:	d1f7      	bne.n	1807e <memcmp+0x8>
	}

	return *c1 - *c2;
   1808e:	7800      	ldrb	r0, [r0, #0]
   18090:	780b      	ldrb	r3, [r1, #0]
   18092:	1ac0      	subs	r0, r0, r3
}
   18094:	bc10      	pop	{r4}
   18096:	4770      	bx	lr
		return 0;
   18098:	2000      	movs	r0, #0
   1809a:	4770      	bx	lr
	return *c1 - *c2;
   1809c:	7800      	ldrb	r0, [r0, #0]
   1809e:	780b      	ldrb	r3, [r1, #0]
   180a0:	1ac0      	subs	r0, r0, r3
}
   180a2:	4770      	bx	lr

000180a4 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   180a4:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   180a6:	ea80 0301 	eor.w	r3, r0, r1
   180aa:	f013 0f03 	tst.w	r3, #3
   180ae:	d001      	beq.n	180b4 <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
   180b0:	4603      	mov	r3, r0
   180b2:	e017      	b.n	180e4 <memcpy+0x40>
   180b4:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   180b6:	f013 0f03 	tst.w	r3, #3
   180ba:	d00b      	beq.n	180d4 <memcpy+0x30>
			if (n == 0) {
   180bc:	b1a2      	cbz	r2, 180e8 <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   180be:	f811 4b01 	ldrb.w	r4, [r1], #1
   180c2:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   180c6:	3a01      	subs	r2, #1
   180c8:	e7f5      	b.n	180b6 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
   180ca:	f851 4b04 	ldr.w	r4, [r1], #4
   180ce:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   180d2:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   180d4:	2a03      	cmp	r2, #3
   180d6:	d8f8      	bhi.n	180ca <memcpy+0x26>
   180d8:	e004      	b.n	180e4 <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   180da:	f811 4b01 	ldrb.w	r4, [r1], #1
   180de:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   180e2:	3a01      	subs	r2, #1
	while (n > 0) {
   180e4:	2a00      	cmp	r2, #0
   180e6:	d1f8      	bne.n	180da <memcpy+0x36>
	}

	return d;
}
   180e8:	bc10      	pop	{r4}
   180ea:	4770      	bx	lr

000180ec <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   180ec:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   180ee:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
   180f0:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   180f2:	f013 0f03 	tst.w	r3, #3
   180f6:	d004      	beq.n	18102 <memset+0x16>
		if (n == 0) {
   180f8:	b19a      	cbz	r2, 18122 <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
   180fa:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   180fe:	3a01      	subs	r2, #1
   18100:	e7f7      	b.n	180f2 <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   18102:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   18104:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   18108:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1810c:	2a03      	cmp	r2, #3
   1810e:	d906      	bls.n	1811e <memset+0x32>
		*(d_word++) = c_word;
   18110:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   18114:	3a04      	subs	r2, #4
   18116:	e7f9      	b.n	1810c <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   18118:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   1811c:	3a01      	subs	r2, #1
	while (n > 0) {
   1811e:	2a00      	cmp	r2, #0
   18120:	d1fa      	bne.n	18118 <memset+0x2c>
	}

	return buf;
}
   18122:	bc10      	pop	{r4}
   18124:	4770      	bx	lr

00018126 <_stdout_hook_default>:
}
   18126:	f04f 30ff 	mov.w	r0, #4294967295
   1812a:	4770      	bx	lr

0001812c <fputc>:
}
#include <syscalls/zephyr_fputc_mrsh.c>
#endif

int fputc(int c, FILE *stream)
{
   1812c:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
   1812e:	f7fa ff55 	bl	12fdc <z_impl_zephyr_fputc>
	return zephyr_fputc(c, stream);
}
   18132:	bd08      	pop	{r3, pc}

00018134 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   18134:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   18136:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1813a:	0089      	lsls	r1, r1, #2
   1813c:	3138      	adds	r1, #56	; 0x38
}
   1813e:	4408      	add	r0, r1
   18140:	4770      	bx	lr

00018142 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   18142:	6840      	ldr	r0, [r0, #4]
}
   18144:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   18148:	4770      	bx	lr

0001814a <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   1814a:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   1814c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   18150:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   18154:	4770      	bx	lr

00018156 <get_status>:
{
   18156:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   18158:	b2c9      	uxtb	r1, r1
   1815a:	f7ff ffeb 	bl	18134 <get_sub_data>
   1815e:	6880      	ldr	r0, [r0, #8]
}
   18160:	f000 0007 	and.w	r0, r0, #7
   18164:	bd08      	pop	{r3, pc}

00018166 <set_off_state>:
	__asm__ volatile(
   18166:	f04f 0320 	mov.w	r3, #32
   1816a:	f3ef 8211 	mrs	r2, BASEPRI
   1816e:	f383 8812 	msr	BASEPRI_MAX, r3
   18172:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   18176:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   18178:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1817c:	d001      	beq.n	18182 <set_off_state+0x1c>
   1817e:	428b      	cmp	r3, r1
   18180:	d107      	bne.n	18192 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   18182:	2301      	movs	r3, #1
   18184:	6003      	str	r3, [r0, #0]
	int err = 0;
   18186:	2000      	movs	r0, #0
	__asm__ volatile(
   18188:	f382 8811 	msr	BASEPRI, r2
   1818c:	f3bf 8f6f 	isb	sy
}
   18190:	4770      	bx	lr
		err = -EPERM;
   18192:	f04f 30ff 	mov.w	r0, #4294967295
   18196:	e7f7      	b.n	18188 <set_off_state+0x22>

00018198 <set_starting_state>:
{
   18198:	b410      	push	{r4}
	__asm__ volatile(
   1819a:	f04f 0320 	mov.w	r3, #32
   1819e:	f3ef 8211 	mrs	r2, BASEPRI
   181a2:	f383 8812 	msr	BASEPRI_MAX, r3
   181a6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   181aa:	6803      	ldr	r3, [r0, #0]
   181ac:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   181b0:	f003 0307 	and.w	r3, r3, #7
   181b4:	2b01      	cmp	r3, #1
   181b6:	d009      	beq.n	181cc <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   181b8:	428c      	cmp	r4, r1
   181ba:	d00a      	beq.n	181d2 <set_starting_state+0x3a>
		err = -EPERM;
   181bc:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   181c0:	f382 8811 	msr	BASEPRI, r2
   181c4:	f3bf 8f6f 	isb	sy
}
   181c8:	bc10      	pop	{r4}
   181ca:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   181cc:	6001      	str	r1, [r0, #0]
	int err = 0;
   181ce:	2000      	movs	r0, #0
   181d0:	e7f6      	b.n	181c0 <set_starting_state+0x28>
		err = -EALREADY;
   181d2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   181d6:	e7f3      	b.n	181c0 <set_starting_state+0x28>

000181d8 <set_on_state>:
	__asm__ volatile(
   181d8:	f04f 0320 	mov.w	r3, #32
   181dc:	f3ef 8211 	mrs	r2, BASEPRI
   181e0:	f383 8812 	msr	BASEPRI_MAX, r3
   181e4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   181e8:	6803      	ldr	r3, [r0, #0]
   181ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   181ee:	f043 0302 	orr.w	r3, r3, #2
   181f2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   181f4:	f382 8811 	msr	BASEPRI, r2
   181f8:	f3bf 8f6f 	isb	sy
}
   181fc:	4770      	bx	lr

000181fe <clkstarted_handle>:
{
   181fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18200:	4606      	mov	r6, r0
   18202:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   18204:	f7ff ff96 	bl	18134 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   18208:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   1820a:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   1820c:	2300      	movs	r3, #0
   1820e:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   18212:	f7ff ffe1 	bl	181d8 <set_on_state>
	if (callback) {
   18216:	b11d      	cbz	r5, 18220 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   18218:	463a      	mov	r2, r7
   1821a:	4621      	mov	r1, r4
   1821c:	4630      	mov	r0, r6
   1821e:	47a8      	blx	r5
}
   18220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018222 <stop>:
{
   18222:	b570      	push	{r4, r5, r6, lr}
   18224:	4606      	mov	r6, r0
   18226:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   18228:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1822a:	4621      	mov	r1, r4
   1822c:	f7ff ff82 	bl	18134 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   18230:	4629      	mov	r1, r5
   18232:	3008      	adds	r0, #8
   18234:	f7ff ff97 	bl	18166 <set_off_state>
	if (err < 0) {
   18238:	2800      	cmp	r0, #0
   1823a:	db06      	blt.n	1824a <stop+0x28>
	get_sub_config(dev, type)->stop();
   1823c:	4621      	mov	r1, r4
   1823e:	4630      	mov	r0, r6
   18240:	f7ff ff7f 	bl	18142 <get_sub_config>
   18244:	6843      	ldr	r3, [r0, #4]
   18246:	4798      	blx	r3
	return 0;
   18248:	2000      	movs	r0, #0
}
   1824a:	bd70      	pop	{r4, r5, r6, pc}

0001824c <api_stop>:
{
   1824c:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   1824e:	2280      	movs	r2, #128	; 0x80
   18250:	f7ff ffe7 	bl	18222 <stop>
}
   18254:	bd08      	pop	{r3, pc}

00018256 <async_start>:
{
   18256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1825a:	4606      	mov	r6, r0
   1825c:	4690      	mov	r8, r2
   1825e:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   18260:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   18262:	4629      	mov	r1, r5
   18264:	f7ff ff66 	bl	18134 <get_sub_data>
   18268:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   1826a:	9906      	ldr	r1, [sp, #24]
   1826c:	3008      	adds	r0, #8
   1826e:	f7ff ff93 	bl	18198 <set_starting_state>
	if (err < 0) {
   18272:	2800      	cmp	r0, #0
   18274:	db09      	blt.n	1828a <async_start+0x34>
	subdata->cb = cb;
   18276:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   1827a:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   1827c:	4629      	mov	r1, r5
   1827e:	4630      	mov	r0, r6
   18280:	f7ff ff5f 	bl	18142 <get_sub_config>
   18284:	6803      	ldr	r3, [r0, #0]
   18286:	4798      	blx	r3
	return 0;
   18288:	2000      	movs	r0, #0
}
   1828a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001828e <api_start>:
{
   1828e:	b510      	push	{r4, lr}
   18290:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   18292:	2480      	movs	r4, #128	; 0x80
   18294:	9400      	str	r4, [sp, #0]
   18296:	f7ff ffde 	bl	18256 <async_start>
}
   1829a:	b002      	add	sp, #8
   1829c:	bd10      	pop	{r4, pc}

0001829e <onoff_started_callback>:
{
   1829e:	b510      	push	{r4, lr}
   182a0:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   182a2:	b2c9      	uxtb	r1, r1
   182a4:	f7ff ff51 	bl	1814a <get_onoff_manager>
	notify(mgr, 0);
   182a8:	2100      	movs	r1, #0
   182aa:	47a0      	blx	r4
}
   182ac:	bd10      	pop	{r4, pc}

000182ae <hfclk_start>:
{
   182ae:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   182b0:	2001      	movs	r0, #1
   182b2:	f7fb ffd5 	bl	14260 <nrfx_clock_start>
}
   182b6:	bd08      	pop	{r3, pc}

000182b8 <lfclk_start>:
{
   182b8:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   182ba:	2000      	movs	r0, #0
   182bc:	f7fb ffd0 	bl	14260 <nrfx_clock_start>
}
   182c0:	bd08      	pop	{r3, pc}

000182c2 <hfclk_stop>:
{
   182c2:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   182c4:	2001      	movs	r0, #1
   182c6:	f7fc f801 	bl	142cc <nrfx_clock_stop>
}
   182ca:	bd08      	pop	{r3, pc}

000182cc <lfclk_stop>:
{
   182cc:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   182ce:	2000      	movs	r0, #0
   182d0:	f7fb fffc 	bl	142cc <nrfx_clock_stop>
}
   182d4:	bd08      	pop	{r3, pc}

000182d6 <blocking_start_callback>:
{
   182d6:	b508      	push	{r3, lr}
   182d8:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   182da:	f7fe fb61 	bl	169a0 <z_impl_k_sem_give>
}
   182de:	bd08      	pop	{r3, pc}

000182e0 <get_pull>:
	if (flags & GPIO_PULL_UP) {
   182e0:	f010 0f10 	tst.w	r0, #16
   182e4:	d104      	bne.n	182f0 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   182e6:	f010 0f20 	tst.w	r0, #32
   182ea:	d103      	bne.n	182f4 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   182ec:	2000      	movs	r0, #0
   182ee:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   182f0:	2003      	movs	r0, #3
   182f2:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   182f4:	2001      	movs	r0, #1
}
   182f6:	4770      	bx	lr

000182f8 <gpio_nrfx_port_get_raw>:
	return port->config;
   182f8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   182fa:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   182fc:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   182fe:	600b      	str	r3, [r1, #0]
}
   18300:	2000      	movs	r0, #0
   18302:	4770      	bx	lr

00018304 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   18304:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   18306:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   18308:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1830a:	4042      	eors	r2, r0
   1830c:	400a      	ands	r2, r1
   1830e:	4042      	eors	r2, r0
    p_reg->OUT = value;
   18310:	605a      	str	r2, [r3, #4]
}
   18312:	2000      	movs	r0, #0
   18314:	4770      	bx	lr

00018316 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   18316:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   18318:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1831a:	6099      	str	r1, [r3, #8]
}
   1831c:	2000      	movs	r0, #0
   1831e:	4770      	bx	lr

00018320 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   18320:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   18322:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   18324:	60d9      	str	r1, [r3, #12]
}
   18326:	2000      	movs	r0, #0
   18328:	4770      	bx	lr

0001832a <gpio_nrfx_port_toggle_bits>:
	return port->config;
   1832a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1832c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1832e:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   18330:	404b      	eors	r3, r1
    p_reg->OUT = value;
   18332:	6053      	str	r3, [r2, #4]
}
   18334:	2000      	movs	r0, #0
   18336:	4770      	bx	lr

00018338 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   18338:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   1833c:	d007      	beq.n	1834e <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1833e:	f5b1 2fc0 	cmp.w	r1, #393216	; 0x60000
   18342:	d00d      	beq.n	18360 <get_trigger+0x28>
   18344:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   18348:	d008      	beq.n	1835c <get_trigger+0x24>
   1834a:	2001      	movs	r0, #1
}
   1834c:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1834e:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   18352:	d001      	beq.n	18358 <get_trigger+0x20>
   18354:	2005      	movs	r0, #5
   18356:	4770      	bx	lr
   18358:	2004      	movs	r0, #4
   1835a:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1835c:	2002      	movs	r0, #2
   1835e:	4770      	bx	lr
   18360:	2003      	movs	r0, #3
   18362:	4770      	bx	lr

00018364 <gpio_nrfx_manage_callback>:
{
   18364:	b470      	push	{r4, r5, r6}
	return port->data;
   18366:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   18368:	1d05      	adds	r5, r0, #4
	return list->head;
   1836a:	6843      	ldr	r3, [r0, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   1836c:	b1db      	cbz	r3, 183a6 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   1836e:	460e      	mov	r6, r1
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18370:	2400      	movs	r4, #0
   18372:	e00a      	b.n	1838a <gpio_nrfx_manage_callback+0x26>
	return node->next;
   18374:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   18376:	6043      	str	r3, [r0, #4]
	return list->tail;
   18378:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   1837a:	42a1      	cmp	r1, r4
   1837c:	d10f      	bne.n	1839e <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   1837e:	606b      	str	r3, [r5, #4]
}
   18380:	e00d      	b.n	1839e <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   18382:	606c      	str	r4, [r5, #4]
}
   18384:	e00b      	b.n	1839e <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18386:	461c      	mov	r4, r3
   18388:	681b      	ldr	r3, [r3, #0]
   1838a:	b15b      	cbz	r3, 183a4 <gpio_nrfx_manage_callback+0x40>
   1838c:	429e      	cmp	r6, r3
   1838e:	d1fa      	bne.n	18386 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
   18390:	2c00      	cmp	r4, #0
   18392:	d0ef      	beq.n	18374 <gpio_nrfx_manage_callback+0x10>
	return node->next;
   18394:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   18396:	6023      	str	r3, [r4, #0]
	return list->tail;
   18398:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   1839a:	4299      	cmp	r1, r3
   1839c:	d0f1      	beq.n	18382 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
   1839e:	2300      	movs	r3, #0
   183a0:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   183a2:	e000      	b.n	183a6 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
   183a4:	b152      	cbz	r2, 183bc <gpio_nrfx_manage_callback+0x58>
				return -EINVAL;
			}
		}
	}

	if (set) {
   183a6:	b162      	cbz	r2, 183c2 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
   183a8:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
   183aa:	600b      	str	r3, [r1, #0]
	list->head = node;
   183ac:	6041      	str	r1, [r0, #4]
	return list->tail;
   183ae:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   183b0:	b10b      	cbz	r3, 183b6 <gpio_nrfx_manage_callback+0x52>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   183b2:	2000      	movs	r0, #0
   183b4:	e006      	b.n	183c4 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   183b6:	6069      	str	r1, [r5, #4]
   183b8:	2000      	movs	r0, #0
}
   183ba:	e003      	b.n	183c4 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
   183bc:	f06f 0015 	mvn.w	r0, #21
   183c0:	e000      	b.n	183c4 <gpio_nrfx_manage_callback+0x60>
	return 0;
   183c2:	2000      	movs	r0, #0
}
   183c4:	bc70      	pop	{r4, r5, r6}
   183c6:	4770      	bx	lr

000183c8 <nrfx_gpio_handler>:
{
   183c8:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
   183ca:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   183ce:	0940      	lsrs	r0, r0, #5
   183d0:	f7fb f826 	bl	13420 <get_dev>
	if (port == NULL) {
   183d4:	b1d8      	cbz	r0, 1840e <nrfx_gpio_handler+0x46>
   183d6:	4606      	mov	r6, r0
	return port->data;
   183d8:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   183da:	2501      	movs	r5, #1
   183dc:	40a5      	lsls	r5, r4
	return list->head;
   183de:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   183e0:	b119      	cbz	r1, 183ea <nrfx_gpio_handler+0x22>
   183e2:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   183e4:	b149      	cbz	r1, 183fa <nrfx_gpio_handler+0x32>
	return node->next;
   183e6:	680c      	ldr	r4, [r1, #0]
   183e8:	e007      	b.n	183fa <nrfx_gpio_handler+0x32>
   183ea:	460c      	mov	r4, r1
   183ec:	e005      	b.n	183fa <nrfx_gpio_handler+0x32>
   183ee:	b164      	cbz	r4, 1840a <nrfx_gpio_handler+0x42>
   183f0:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   183f2:	b104      	cbz	r4, 183f6 <nrfx_gpio_handler+0x2e>
	return node->next;
   183f4:	6823      	ldr	r3, [r4, #0]
   183f6:	4621      	mov	r1, r4
   183f8:	461c      	mov	r4, r3
   183fa:	b141      	cbz	r1, 1840e <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
   183fc:	688a      	ldr	r2, [r1, #8]
   183fe:	402a      	ands	r2, r5
   18400:	d0f5      	beq.n	183ee <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   18402:	684b      	ldr	r3, [r1, #4]
   18404:	4630      	mov	r0, r6
   18406:	4798      	blx	r3
   18408:	e7f1      	b.n	183ee <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1840a:	4623      	mov	r3, r4
   1840c:	e7f3      	b.n	183f6 <nrfx_gpio_handler+0x2e>
}
   1840e:	bd70      	pop	{r4, r5, r6, pc}

00018410 <endtx_isr>:
	return dev->config;
   18410:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   18412:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   18414:	f04f 0120 	mov.w	r1, #32
   18418:	f3ef 8211 	mrs	r2, BASEPRI
   1841c:	f381 8812 	msr	BASEPRI_MAX, r1
   18420:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18424:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   18428:	b131      	cbz	r1, 18438 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1842a:	2100      	movs	r1, #0
   1842c:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   18430:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18434:	2101      	movs	r1, #1
   18436:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   18438:	f382 8811 	msr	BASEPRI, r2
   1843c:	f3bf 8f6f 	isb	sy
}
   18440:	4770      	bx	lr

00018442 <uarte_nrfx_isr_int>:
{
   18442:	b538      	push	{r3, r4, r5, lr}
   18444:	4604      	mov	r4, r0
	return dev->config;
   18446:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   18448:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   1844a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1844e:	f413 7f80 	tst.w	r3, #256	; 0x100
   18452:	d002      	beq.n	1845a <uarte_nrfx_isr_int+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18454:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   18458:	b9db      	cbnz	r3, 18492 <uarte_nrfx_isr_int+0x50>
	return dev->config;
   1845a:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1845c:	685b      	ldr	r3, [r3, #4]
   1845e:	f013 0f10 	tst.w	r3, #16
   18462:	d015      	beq.n	18490 <uarte_nrfx_isr_int+0x4e>
	__asm__ volatile(
   18464:	f04f 0220 	mov.w	r2, #32
   18468:	f3ef 8311 	mrs	r3, BASEPRI
   1846c:	f382 8812 	msr	BASEPRI_MAX, r2
   18470:	f3bf 8f6f 	isb	sy
   18474:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   18478:	b112      	cbz	r2, 18480 <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1847a:	2200      	movs	r2, #0
   1847c:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   18480:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   18484:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
   18488:	f383 8811 	msr	BASEPRI, r3
   1848c:	f3bf 8f6f 	isb	sy
}
   18490:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   18492:	f7ff ffbd 	bl	18410 <endtx_isr>
   18496:	e7e0      	b.n	1845a <uarte_nrfx_isr_int+0x18>

00018498 <uarte_nrfx_configure>:
{
   18498:	b570      	push	{r4, r5, r6, lr}
   1849a:	b082      	sub	sp, #8
   1849c:	4605      	mov	r5, r0
   1849e:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   184a0:	794b      	ldrb	r3, [r1, #5]
   184a2:	2b01      	cmp	r3, #1
   184a4:	d006      	beq.n	184b4 <uarte_nrfx_configure+0x1c>
   184a6:	2b03      	cmp	r3, #3
   184a8:	d011      	beq.n	184ce <uarte_nrfx_configure+0x36>
   184aa:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   184ae:	4618      	mov	r0, r3
   184b0:	b002      	add	sp, #8
   184b2:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   184b4:	2300      	movs	r3, #0
   184b6:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   184ba:	79a3      	ldrb	r3, [r4, #6]
   184bc:	2b03      	cmp	r3, #3
   184be:	d138      	bne.n	18532 <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
   184c0:	79e3      	ldrb	r3, [r4, #7]
   184c2:	b143      	cbz	r3, 184d6 <uarte_nrfx_configure+0x3e>
   184c4:	2b01      	cmp	r3, #1
   184c6:	d010      	beq.n	184ea <uarte_nrfx_configure+0x52>
   184c8:	f06f 0385 	mvn.w	r3, #133	; 0x85
   184cc:	e7ef      	b.n	184ae <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   184ce:	2310      	movs	r3, #16
   184d0:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   184d4:	e7f1      	b.n	184ba <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   184d6:	2300      	movs	r3, #0
   184d8:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   184dc:	7923      	ldrb	r3, [r4, #4]
   184de:	b143      	cbz	r3, 184f2 <uarte_nrfx_configure+0x5a>
   184e0:	2b02      	cmp	r3, #2
   184e2:	d022      	beq.n	1852a <uarte_nrfx_configure+0x92>
   184e4:	f06f 0385 	mvn.w	r3, #133	; 0x85
   184e8:	e7e1      	b.n	184ae <uarte_nrfx_configure+0x16>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   184ea:	2301      	movs	r3, #1
   184ec:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   184f0:	e7f4      	b.n	184dc <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   184f2:	2300      	movs	r3, #0
   184f4:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   184f8:	6821      	ldr	r1, [r4, #0]
   184fa:	4628      	mov	r0, r5
   184fc:	f7fb f93e 	bl	1377c <baudrate_set>
   18500:	4603      	mov	r3, r0
   18502:	b9c8      	cbnz	r0, 18538 <uarte_nrfx_configure+0xa0>
	return dev->config;
   18504:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   18506:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   18508:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   1850c:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   18510:	f89d 2004 	ldrb.w	r2, [sp, #4]
   18514:	4331      	orrs	r1, r6
   18516:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   18518:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
   1851c:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   1851e:	3204      	adds	r2, #4
   18520:	e894 0003 	ldmia.w	r4, {r0, r1}
   18524:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
   18528:	e7c1      	b.n	184ae <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1852a:	230e      	movs	r3, #14
   1852c:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   18530:	e7e2      	b.n	184f8 <uarte_nrfx_configure+0x60>
		return -ENOTSUP;
   18532:	f06f 0385 	mvn.w	r3, #133	; 0x85
   18536:	e7ba      	b.n	184ae <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   18538:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1853c:	e7b7      	b.n	184ae <uarte_nrfx_configure+0x16>

0001853e <uarte_nrfx_config_get>:
{
   1853e:	460b      	mov	r3, r1
	return dev->data;
   18540:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   18542:	6891      	ldr	r1, [r2, #8]
   18544:	6850      	ldr	r0, [r2, #4]
   18546:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1854a:	2000      	movs	r0, #0
   1854c:	4770      	bx	lr

0001854e <uarte_nrfx_err_check>:
	return dev->config;
   1854e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   18550:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   18552:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   18556:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1855a:	4770      	bx	lr

0001855c <is_tx_ready>:
	return dev->config;
   1855c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1855e:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   18560:	685b      	ldr	r3, [r3, #4]
   18562:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18566:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1856a:	b929      	cbnz	r1, 18578 <is_tx_ready+0x1c>
   1856c:	b933      	cbnz	r3, 1857c <is_tx_ready+0x20>
   1856e:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   18572:	b92b      	cbnz	r3, 18580 <is_tx_ready+0x24>
   18574:	2000      	movs	r0, #0
   18576:	4770      	bx	lr
   18578:	2001      	movs	r0, #1
   1857a:	4770      	bx	lr
   1857c:	2000      	movs	r0, #0
   1857e:	4770      	bx	lr
   18580:	2001      	movs	r0, #1
}
   18582:	4770      	bx	lr

00018584 <uarte_enable>:
	return dev->config;
   18584:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   18586:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   18588:	2208      	movs	r2, #8
   1858a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   1858e:	4770      	bx	lr

00018590 <tx_start>:
{
   18590:	b510      	push	{r4, lr}
	return dev->config;
   18592:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   18594:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   18596:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1859a:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1859e:	2300      	movs	r3, #0
   185a0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   185a4:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   185a8:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   185ac:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   185b0:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   185b2:	685b      	ldr	r3, [r3, #4]
   185b4:	f013 0f10 	tst.w	r3, #16
   185b8:	d102      	bne.n	185c0 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   185ba:	2301      	movs	r3, #1
   185bc:	60a3      	str	r3, [r4, #8]
}
   185be:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   185c0:	2101      	movs	r1, #1
   185c2:	f7ff ffdf 	bl	18584 <uarte_enable>
    p_reg->INTENSET = mask;
   185c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   185ca:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   185ce:	e7f4      	b.n	185ba <tx_start+0x2a>

000185d0 <uarte_nrfx_poll_in>:
{
   185d0:	b410      	push	{r4}
	return dev->data;
   185d2:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   185d4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   185d6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   185d8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   185dc:	b152      	cbz	r2, 185f4 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
   185de:	7c62      	ldrb	r2, [r4, #17]
   185e0:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   185e2:	2000      	movs	r0, #0
   185e4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   185e8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   185ec:	2201      	movs	r2, #1
   185ee:	601a      	str	r2, [r3, #0]
}
   185f0:	bc10      	pop	{r4}
   185f2:	4770      	bx	lr
		return -1;
   185f4:	f04f 30ff 	mov.w	r0, #4294967295
   185f8:	e7fa      	b.n	185f0 <uarte_nrfx_poll_in+0x20>

000185fa <wait_tx_ready>:
{
   185fa:	b570      	push	{r4, r5, r6, lr}
   185fc:	4606      	mov	r6, r0
   185fe:	e014      	b.n	1862a <wait_tx_ready+0x30>
		if (res) {
   18600:	b17d      	cbz	r5, 18622 <wait_tx_ready+0x28>
	__asm__ volatile(
   18602:	f04f 0320 	mov.w	r3, #32
   18606:	f3ef 8411 	mrs	r4, BASEPRI
   1860a:	f383 8812 	msr	BASEPRI_MAX, r3
   1860e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   18612:	4630      	mov	r0, r6
   18614:	f7ff ffa2 	bl	1855c <is_tx_ready>
   18618:	b9a0      	cbnz	r0, 18644 <wait_tx_ready+0x4a>
	__asm__ volatile(
   1861a:	f384 8811 	msr	BASEPRI, r4
   1861e:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   18622:	2021      	movs	r0, #33	; 0x21
   18624:	2100      	movs	r1, #0
   18626:	f7fe fd99 	bl	1715c <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1862a:	2464      	movs	r4, #100	; 0x64
   1862c:	4630      	mov	r0, r6
   1862e:	f7ff ff95 	bl	1855c <is_tx_ready>
   18632:	4605      	mov	r5, r0
   18634:	2800      	cmp	r0, #0
   18636:	d1e3      	bne.n	18600 <wait_tx_ready+0x6>
   18638:	2001      	movs	r0, #1
   1863a:	f000 fa07 	bl	18a4c <nrfx_busy_wait>
   1863e:	3c01      	subs	r4, #1
   18640:	d1f4      	bne.n	1862c <wait_tx_ready+0x32>
   18642:	e7dd      	b.n	18600 <wait_tx_ready+0x6>
}
   18644:	4620      	mov	r0, r4
   18646:	bd70      	pop	{r4, r5, r6, pc}

00018648 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   18648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1864a:	4604      	mov	r4, r0
	return dev->config;
   1864c:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
   1864e:	6835      	ldr	r5, [r6, #0]
	return dev->data;
   18650:	6907      	ldr	r7, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   18652:	2100      	movs	r1, #0
   18654:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   18658:	6038      	str	r0, [r7, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
   1865a:	f7fb f809 	bl	13670 <uarte_nrfx_pins_configure>
	return dev->data;
   1865e:	6921      	ldr	r1, [r4, #16]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   18660:	3104      	adds	r1, #4
   18662:	4620      	mov	r0, r4
   18664:	f7ff ff18 	bl	18498 <uarte_nrfx_configure>
	if (err) {
   18668:	4604      	mov	r4, r0
   1866a:	bb68      	cbnz	r0, 186c8 <uarte_instance_init+0x80>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1866c:	6873      	ldr	r3, [r6, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1866e:	f013 0f02 	tst.w	r3, #2
   18672:	d12b      	bne.n	186cc <uarte_instance_init+0x84>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   18674:	2308      	movs	r3, #8
   18676:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   1867a:	7a33      	ldrb	r3, [r6, #8]
   1867c:	b95b      	cbnz	r3, 18696 <uarte_instance_init+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1867e:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   18682:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   18686:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1868a:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1868e:	2301      	movs	r3, #1
   18690:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18694:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   18696:	6873      	ldr	r3, [r6, #4]
   18698:	f013 0f02 	tst.w	r3, #2
   1869c:	d103      	bne.n	186a6 <uarte_instance_init+0x5e>
    p_reg->INTENSET = mask;
   1869e:	f44f 7380 	mov.w	r3, #256	; 0x100
   186a2:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   186a6:	6873      	ldr	r3, [r6, #4]
   186a8:	f013 0f10 	tst.w	r3, #16
   186ac:	d003      	beq.n	186b6 <uarte_instance_init+0x6e>
   186ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   186b2:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   186b6:	3710      	adds	r7, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   186b8:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   186bc:	2300      	movs	r3, #0
   186be:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   186c2:	2301      	movs	r3, #1
   186c4:	60ab      	str	r3, [r5, #8]
   186c6:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   186c8:	4620      	mov	r0, r4
   186ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   186cc:	4639      	mov	r1, r7
   186ce:	4628      	mov	r0, r5
   186d0:	f7fb f934 	bl	1393c <endtx_stoptx_ppi_init>
		if (err < 0) {
   186d4:	2800      	cmp	r0, #0
   186d6:	dacd      	bge.n	18674 <uarte_instance_init+0x2c>
			return err;
   186d8:	4604      	mov	r4, r0
   186da:	e7f5      	b.n	186c8 <uarte_instance_init+0x80>

000186dc <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   186dc:	b510      	push	{r4, lr}
   186de:	4604      	mov	r4, r0
   186e0:	2200      	movs	r2, #0
   186e2:	2101      	movs	r1, #1
   186e4:	2008      	movs	r0, #8
   186e6:	f7fa f85b 	bl	127a0 <z_arm_irq_priority_set>
   186ea:	2008      	movs	r0, #8
   186ec:	f7fa f83a 	bl	12764 <arch_irq_enable>
   186f0:	2100      	movs	r1, #0
   186f2:	4620      	mov	r0, r4
   186f4:	f7ff ffa8 	bl	18648 <uarte_instance_init>
   186f8:	bd10      	pop	{r4, pc}

000186fa <entropy_cc3xx_rng_init>:
			return -EINVAL;
		}
	#endif

	return 0;
}
   186fa:	2000      	movs	r0, #0
   186fc:	4770      	bx	lr

000186fe <entropy_cc3xx_rng_get_entropy>:
{
   186fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   18700:	b083      	sub	sp, #12
   18702:	460f      	mov	r7, r1
   18704:	4616      	mov	r6, r2
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   18706:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   1870a:	2400      	movs	r4, #0
	int res = -EINVAL;
   1870c:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
   18710:	e009      	b.n	18726 <entropy_cc3xx_rng_get_entropy+0x28>
			res = spm_request_random_number(buffer + offset,
   18712:	aa01      	add	r2, sp, #4
   18714:	4629      	mov	r1, r5
   18716:	1938      	adds	r0, r7, r4
   18718:	f7ff fbdc 	bl	17ed4 <spm_request_random_number>
		if (olen != chunk_size) {
   1871c:	9b01      	ldr	r3, [sp, #4]
   1871e:	42ab      	cmp	r3, r5
   18720:	d109      	bne.n	18736 <entropy_cc3xx_rng_get_entropy+0x38>
		if (res != 0) {
   18722:	b950      	cbnz	r0, 1873a <entropy_cc3xx_rng_get_entropy+0x3c>
		offset += chunk_size;
   18724:	442c      	add	r4, r5
	while (offset < length) {
   18726:	42a6      	cmp	r6, r4
   18728:	d907      	bls.n	1873a <entropy_cc3xx_rng_get_entropy+0x3c>
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1872a:	1b33      	subs	r3, r6, r4
   1872c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   18730:	d2ef      	bcs.n	18712 <entropy_cc3xx_rng_get_entropy+0x14>
			chunk_size = length - offset;
   18732:	461d      	mov	r5, r3
   18734:	e7ed      	b.n	18712 <entropy_cc3xx_rng_get_entropy+0x14>
			return -EINVAL;
   18736:	f06f 0015 	mvn.w	r0, #21
}
   1873a:	b003      	add	sp, #12
   1873c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001873e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1873e:	4770      	bx	lr

00018740 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   18740:	1a40      	subs	r0, r0, r1
}
   18742:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18746:	4770      	bx	lr

00018748 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   18748:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1874c:	009b      	lsls	r3, r3, #2
   1874e:	b29b      	uxth	r3, r3
   18750:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18754:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   18758:	2200      	movs	r2, #0
   1875a:	601a      	str	r2, [r3, #0]
   1875c:	681b      	ldr	r3, [r3, #0]
}
   1875e:	4770      	bx	lr

00018760 <absolute_time_to_cc>:
}
   18760:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18764:	4770      	bx	lr

00018766 <full_int_lock>:
	__asm__ volatile(
   18766:	f04f 0320 	mov.w	r3, #32
   1876a:	f3ef 8011 	mrs	r0, BASEPRI
   1876e:	f383 8812 	msr	BASEPRI_MAX, r3
   18772:	f3bf 8f6f 	isb	sy
}
   18776:	4770      	bx	lr

00018778 <full_int_unlock>:
	__asm__ volatile(
   18778:	f380 8811 	msr	BASEPRI, r0
   1877c:	f3bf 8f6f 	isb	sy
}
   18780:	4770      	bx	lr

00018782 <set_absolute_alarm>:
{
   18782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18784:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   18786:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   1878a:	f7fb f901 	bl	13990 <get_comparator>
   1878e:	4607      	mov	r7, r0
   18790:	e019      	b.n	187c6 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   18792:	2013      	movs	r0, #19
   18794:	f000 fd12 	bl	191bc <z_impl_k_busy_wait>
}
   18798:	e022      	b.n	187e0 <set_absolute_alarm+0x5e>
		event_clear(chan);
   1879a:	4630      	mov	r0, r6
   1879c:	f7ff ffd4 	bl	18748 <event_clear>
		event_enable(chan);
   187a0:	4630      	mov	r0, r6
   187a2:	f7fb f8fd 	bl	139a0 <event_enable>
		set_comparator(chan, cc_val);
   187a6:	4629      	mov	r1, r5
   187a8:	4630      	mov	r0, r6
   187aa:	f7fb f8e7 	bl	1397c <set_comparator>
		now2 = counter();
   187ae:	f7fb f90b 	bl	139c8 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   187b2:	4284      	cmp	r4, r0
   187b4:	d01e      	beq.n	187f4 <set_absolute_alarm+0x72>
   187b6:	1c81      	adds	r1, r0, #2
   187b8:	4628      	mov	r0, r5
   187ba:	f7ff ffc1 	bl	18740 <counter_sub>
	} while ((now2 != now) &&
   187be:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   187c2:	d917      	bls.n	187f4 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   187c4:	462f      	mov	r7, r5
		now = counter();
   187c6:	f7fb f8ff 	bl	139c8 <counter>
   187ca:	4604      	mov	r4, r0
		set_comparator(chan, now);
   187cc:	4601      	mov	r1, r0
   187ce:	4630      	mov	r0, r6
   187d0:	f7fb f8d4 	bl	1397c <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   187d4:	4621      	mov	r1, r4
   187d6:	4638      	mov	r0, r7
   187d8:	f7ff ffb2 	bl	18740 <counter_sub>
   187dc:	2801      	cmp	r0, #1
   187de:	d0d8      	beq.n	18792 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   187e0:	1ca7      	adds	r7, r4, #2
   187e2:	4639      	mov	r1, r7
   187e4:	4628      	mov	r0, r5
   187e6:	f7ff ffab 	bl	18740 <counter_sub>
   187ea:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   187ee:	d9d4      	bls.n	1879a <set_absolute_alarm+0x18>
			cc_val = now + 2;
   187f0:	463d      	mov	r5, r7
   187f2:	e7d2      	b.n	1879a <set_absolute_alarm+0x18>
}
   187f4:	4628      	mov	r0, r5
   187f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000187f8 <compare_set>:
{
   187f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   187fa:	b083      	sub	sp, #12
   187fc:	4604      	mov	r4, r0
   187fe:	4617      	mov	r7, r2
   18800:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   18802:	f7fb f8e7 	bl	139d4 <compare_int_lock>
   18806:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   18808:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1880a:	9301      	str	r3, [sp, #4]
   1880c:	9b08      	ldr	r3, [sp, #32]
   1880e:	9300      	str	r3, [sp, #0]
   18810:	463a      	mov	r2, r7
   18812:	462b      	mov	r3, r5
   18814:	4620      	mov	r0, r4
   18816:	f7fb f9bb 	bl	13b90 <compare_set_nolocks>
   1881a:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   1881c:	4631      	mov	r1, r6
   1881e:	4620      	mov	r0, r4
   18820:	f7fb f932 	bl	13a88 <compare_int_unlock>
}
   18824:	4628      	mov	r0, r5
   18826:	b003      	add	sp, #12
   18828:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001882a <sleeping_thread_init>:
{
   1882a:	b508      	push	{r3, lr}
	k_sem_init(&thread->sem, 0, 1);
   1882c:	3004      	adds	r0, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
   1882e:	2201      	movs	r2, #1
   18830:	2100      	movs	r1, #0
   18832:	f000 fb06 	bl	18e42 <z_impl_k_sem_init>
}
   18836:	bd08      	pop	{r3, pc}

00018838 <nrf_modem_os_busywait>:
{
   18838:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   1883a:	f000 fcbf 	bl	191bc <z_impl_k_busy_wait>
}
   1883e:	bd08      	pop	{r3, pc}

00018840 <nrf_modem_os_timedwait>:
{
   18840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18844:	b086      	sub	sp, #24
   18846:	460e      	mov	r6, r1
	return z_impl_k_uptime_ticks();
   18848:	f000 fcb4 	bl	191b4 <z_impl_k_uptime_ticks>
   1884c:	014b      	lsls	r3, r1, #5
   1884e:	0142      	lsls	r2, r0, #5
   18850:	ea43 67d0 	orr.w	r7, r3, r0, lsr #27
   18854:	1a13      	subs	r3, r2, r0
   18856:	eb67 0201 	sbc.w	r2, r7, r1
   1885a:	0097      	lsls	r7, r2, #2
   1885c:	ea47 7793 	orr.w	r7, r7, r3, lsr #30
   18860:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   18864:	463a      	mov	r2, r7
   18866:	eb1c 0300 	adds.w	r3, ip, r0
   1886a:	eb41 0202 	adc.w	r2, r1, r2
   1886e:	00d1      	lsls	r1, r2, #3
   18870:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   18874:	00d8      	lsls	r0, r3, #3
   18876:	0bc3      	lsrs	r3, r0, #15
	return k_ticks_to_ms_floor64(k_uptime_ticks());
   18878:	ea43 4741 	orr.w	r7, r3, r1, lsl #17
	if (*timeout == 0) {
   1887c:	6833      	ldr	r3, [r6, #0]
   1887e:	2b00      	cmp	r3, #0
   18880:	d060      	beq.n	18944 <nrf_modem_os_timedwait+0x104>
   18882:	ea4f 3ad1 	mov.w	sl, r1, lsr #15
	if (*timeout < 0) {
   18886:	2b00      	cmp	r3, #0
   18888:	db60      	blt.n	1894c <nrf_modem_os_timedwait+0x10c>
	sleeping_thread_init(&thread);
   1888a:	a801      	add	r0, sp, #4
   1888c:	f7ff ffcd 	bl	1882a <sleeping_thread_init>
	if (!sleeping_thread_add(&thread)) {
   18890:	a801      	add	r0, sp, #4
   18892:	f7fb fb37 	bl	13f04 <sleeping_thread_add>
   18896:	2800      	cmp	r0, #0
   18898:	d062      	beq.n	18960 <nrf_modem_os_timedwait+0x120>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   1889a:	6833      	ldr	r3, [r6, #0]
   1889c:	f1b3 3fff 	cmp.w	r3, #4294967295
   188a0:	d058      	beq.n	18954 <nrf_modem_os_timedwait+0x114>
   188a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   188a6:	ea4f 79e3 	mov.w	r9, r3, asr #31
   188aa:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   188ae:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   188b2:	03d8      	lsls	r0, r3, #15
   188b4:	f240 3ce7 	movw	ip, #999	; 0x3e7
   188b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   188bc:	2300      	movs	r3, #0
   188be:	eb10 000c 	adds.w	r0, r0, ip
   188c2:	f04f 0c00 	mov.w	ip, #0
   188c6:	eb41 010c 	adc.w	r1, r1, ip
   188ca:	f7f8 f9e3 	bl	10c94 <__aeabi_uldivmod>
   188ce:	4602      	mov	r2, r0
   188d0:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   188d2:	a802      	add	r0, sp, #8
   188d4:	f7fe f888 	bl	169e8 <z_impl_k_sem_take>
	sleeping_thread_remove(&thread);
   188d8:	a801      	add	r0, sp, #4
   188da:	f7fb fb37 	bl	13f4c <sleeping_thread_remove>
	if (*timeout == SYS_FOREVER_MS) {
   188de:	6833      	ldr	r3, [r6, #0]
   188e0:	f1b3 3fff 	cmp.w	r3, #4294967295
   188e4:	d040      	beq.n	18968 <nrf_modem_os_timedwait+0x128>
	remaining = *timeout - k_uptime_delta(&start);
   188e6:	4698      	mov	r8, r3
   188e8:	ea4f 79e3 	mov.w	r9, r3, asr #31
	return z_impl_k_uptime_ticks();
   188ec:	f000 fc62 	bl	191b4 <z_impl_k_uptime_ticks>
   188f0:	014b      	lsls	r3, r1, #5
   188f2:	0142      	lsls	r2, r0, #5
   188f4:	ea43 6cd0 	orr.w	ip, r3, r0, lsr #27
   188f8:	1a13      	subs	r3, r2, r0
   188fa:	eb6c 0201 	sbc.w	r2, ip, r1
   188fe:	ea4f 0c82 	mov.w	ip, r2, lsl #2
   18902:	ea4c 7c93 	orr.w	ip, ip, r3, lsr #30
   18906:	ea4f 0e83 	mov.w	lr, r3, lsl #2
   1890a:	4662      	mov	r2, ip
   1890c:	eb1e 0300 	adds.w	r3, lr, r0
   18910:	eb41 0202 	adc.w	r2, r1, r2
   18914:	00d1      	lsls	r1, r2, #3
   18916:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   1891a:	00d8      	lsls	r0, r3, #3
   1891c:	0bc3      	lsrs	r3, r0, #15
   1891e:	ea43 4241 	orr.w	r2, r3, r1, lsl #17
   18922:	0bc8      	lsrs	r0, r1, #15
   18924:	1abf      	subs	r7, r7, r2
   18926:	eb6a 0a00 	sbc.w	sl, sl, r0
   1892a:	eb17 0408 	adds.w	r4, r7, r8
   1892e:	eb4a 0509 	adc.w	r5, sl, r9
	*timeout = remaining > 0 ? remaining : 0;
   18932:	4623      	mov	r3, r4
   18934:	2c00      	cmp	r4, #0
   18936:	f175 0200 	sbcs.w	r2, r5, #0
   1893a:	db0f      	blt.n	1895c <nrf_modem_os_timedwait+0x11c>
   1893c:	6033      	str	r3, [r6, #0]
	if (*timeout == 0) {
   1893e:	b1ab      	cbz	r3, 1896c <nrf_modem_os_timedwait+0x12c>
	return 0;
   18940:	2000      	movs	r0, #0
   18942:	e00e      	b.n	18962 <nrf_modem_os_timedwait+0x122>
	z_impl_k_yield();
   18944:	f7fe fb76 	bl	17034 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   18948:	2074      	movs	r0, #116	; 0x74
   1894a:	e00a      	b.n	18962 <nrf_modem_os_timedwait+0x122>
		*timeout = SYS_FOREVER_MS;
   1894c:	f04f 33ff 	mov.w	r3, #4294967295
   18950:	6033      	str	r3, [r6, #0]
   18952:	e79a      	b.n	1888a <nrf_modem_os_timedwait+0x4a>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   18954:	f04f 32ff 	mov.w	r2, #4294967295
   18958:	4613      	mov	r3, r2
   1895a:	e7ba      	b.n	188d2 <nrf_modem_os_timedwait+0x92>
	*timeout = remaining > 0 ? remaining : 0;
   1895c:	2300      	movs	r3, #0
   1895e:	e7ed      	b.n	1893c <nrf_modem_os_timedwait+0xfc>
		return 0;
   18960:	2000      	movs	r0, #0
}
   18962:	b006      	add	sp, #24
   18964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
   18968:	2000      	movs	r0, #0
   1896a:	e7fa      	b.n	18962 <nrf_modem_os_timedwait+0x122>
		return NRF_ETIMEDOUT;
   1896c:	2074      	movs	r0, #116	; 0x74
   1896e:	e7f8      	b.n	18962 <nrf_modem_os_timedwait+0x122>

00018970 <nrf_modem_os_is_in_isr>:
{
   18970:	b508      	push	{r3, lr}
	return k_is_in_isr();
   18972:	f000 fa2e 	bl	18dd2 <k_is_in_isr>
}
   18976:	bd08      	pop	{r3, pc}

00018978 <nrf_modem_os_sem_give>:
{
   18978:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1897a:	f7fe f811 	bl	169a0 <z_impl_k_sem_give>
}
   1897e:	bd08      	pop	{r3, pc}

00018980 <nrf_modem_os_sem_take>:
{
   18980:	b538      	push	{r3, r4, r5, lr}
   18982:	4604      	mov	r4, r0
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   18984:	f1b1 3fff 	cmp.w	r1, #4294967295
   18988:	d01c      	beq.n	189c4 <nrf_modem_os_sem_take+0x44>
   1898a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1898e:	17cb      	asrs	r3, r1, #31
   18990:	03dd      	lsls	r5, r3, #15
   18992:	ea45 4551 	orr.w	r5, r5, r1, lsr #17
   18996:	03c8      	lsls	r0, r1, #15
   18998:	f240 31e7 	movw	r1, #999	; 0x3e7
   1899c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   189a0:	2300      	movs	r3, #0
   189a2:	1840      	adds	r0, r0, r1
   189a4:	f04f 0100 	mov.w	r1, #0
   189a8:	eb45 0101 	adc.w	r1, r5, r1
   189ac:	f7f8 f972 	bl	10c94 <__aeabi_uldivmod>
   189b0:	4602      	mov	r2, r0
   189b2:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   189b4:	4620      	mov	r0, r4
   189b6:	f7fe f817 	bl	169e8 <z_impl_k_sem_take>
	if (err == -EAGAIN) {
   189ba:	f110 0f0b 	cmn.w	r0, #11
   189be:	d005      	beq.n	189cc <nrf_modem_os_sem_take+0x4c>
	return 0;
   189c0:	2000      	movs	r0, #0
}
   189c2:	bd38      	pop	{r3, r4, r5, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   189c4:	f04f 32ff 	mov.w	r2, #4294967295
   189c8:	4613      	mov	r3, r2
   189ca:	e7f3      	b.n	189b4 <nrf_modem_os_sem_take+0x34>
		return NRF_ETIMEDOUT;
   189cc:	2074      	movs	r0, #116	; 0x74
   189ce:	e7f8      	b.n	189c2 <nrf_modem_os_sem_take+0x42>

000189d0 <read_task_create>:
{
   189d0:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(NRF_MODEM_APPLICATION_IRQ,
   189d2:	2200      	movs	r2, #0
   189d4:	2106      	movs	r1, #6
   189d6:	201c      	movs	r0, #28
   189d8:	f7f9 fee2 	bl	127a0 <z_arm_irq_priority_set>
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
   189dc:	201c      	movs	r0, #28
   189de:	f7f9 fec1 	bl	12764 <arch_irq_enable>
}
   189e2:	bd08      	pop	{r3, pc}

000189e4 <nrf_modem_os_trace_put>:
	if (err) {
		LOG_ERR("nrf_modem_trace_processed_callback failed, err %d", err);
	}
#endif
	return 0;
}
   189e4:	2000      	movs	r0, #0
   189e6:	4770      	bx	lr

000189e8 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   189e8:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   189ea:	2000      	movs	r0, #0
   189ec:	f7fa f930 	bl	12c50 <sys_arch_reboot>

000189f0 <ext_api_satisfies_req>:
{
   189f0:	b430      	push	{r4, r5}
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   189f2:	690b      	ldr	r3, [r1, #16]
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   189f4:	694d      	ldr	r5, [r1, #20]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   189f6:	698c      	ldr	r4, [r1, #24]
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   189f8:	69c9      	ldr	r1, [r1, #28]
	return ((ext_api->ext_api_id == req_id)
   189fa:	6902      	ldr	r2, [r0, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   189fc:	429a      	cmp	r2, r3
   189fe:	d002      	beq.n	18a06 <ext_api_satisfies_req+0x16>
   18a00:	2000      	movs	r0, #0
}
   18a02:	bc30      	pop	{r4, r5}
   18a04:	4770      	bx	lr
		&&  (ext_api->ext_api_version >= req_min_version)
   18a06:	6983      	ldr	r3, [r0, #24]
   18a08:	42a3      	cmp	r3, r4
   18a0a:	d307      	bcc.n	18a1c <ext_api_satisfies_req+0x2c>
		&&  (ext_api->ext_api_version <  req_max_version)
   18a0c:	428b      	cmp	r3, r1
   18a0e:	d207      	bcs.n	18a20 <ext_api_satisfies_req+0x30>
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   18a10:	6943      	ldr	r3, [r0, #20]
   18a12:	ea35 0303 	bics.w	r3, r5, r3
   18a16:	d005      	beq.n	18a24 <ext_api_satisfies_req+0x34>
   18a18:	2000      	movs	r0, #0
   18a1a:	e7f2      	b.n	18a02 <ext_api_satisfies_req+0x12>
   18a1c:	2000      	movs	r0, #0
   18a1e:	e7f0      	b.n	18a02 <ext_api_satisfies_req+0x12>
   18a20:	2000      	movs	r0, #0
   18a22:	e7ee      	b.n	18a02 <ext_api_satisfies_req+0x12>
   18a24:	2001      	movs	r0, #1
   18a26:	e7ec      	b.n	18a02 <ext_api_satisfies_req+0x12>

00018a28 <skip_ext_apis>:
{
   18a28:	4601      	mov	r1, r0
	const struct fw_info_ext_api *ext_api = &fw_info->ext_apis[0];
   18a2a:	303c      	adds	r0, #60	; 0x3c
	for (uint32_t j = 0; j < fw_info->ext_api_num; j++) {
   18a2c:	2300      	movs	r3, #0
   18a2e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   18a30:	429a      	cmp	r2, r3
   18a32:	d903      	bls.n	18a3c <skip_ext_apis+0x14>
		ADVANCE_EXT_API(ext_api);
   18a34:	68c2      	ldr	r2, [r0, #12]
   18a36:	4410      	add	r0, r2
	for (uint32_t j = 0; j < fw_info->ext_api_num; j++) {
   18a38:	3301      	adds	r3, #1
   18a3a:	e7f8      	b.n	18a2e <skip_ext_apis+0x6>
}
   18a3c:	4770      	bx	lr

00018a3e <SystemInit>:

void SystemInit(void)
{
   18a3e:	b508      	push	{r3, lr}
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
   18a40:	f7fb fbb4 	bl	141ac <SystemCoreClockUpdate>
}
   18a44:	bd08      	pop	{r3, pc}

00018a46 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   18a46:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   18a48:	4780      	blx	r0
}
   18a4a:	bd08      	pop	{r3, pc}

00018a4c <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   18a4c:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   18a4e:	f000 fbb5 	bl	191bc <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   18a52:	bd08      	pop	{r3, pc}

00018a54 <nrfx_clock_enable>:
{
   18a54:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   18a56:	2005      	movs	r0, #5
   18a58:	f7f9 fe94 	bl	12784 <arch_irq_is_enabled>
   18a5c:	b100      	cbz	r0, 18a60 <nrfx_clock_enable+0xc>
}
   18a5e:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   18a60:	2005      	movs	r0, #5
   18a62:	f7f9 fe7f 	bl	12764 <arch_irq_enable>
   18a66:	e7fa      	b.n	18a5e <nrfx_clock_enable+0xa>

00018a68 <pin_is_task_output>:
{
   18a68:	b510      	push	{r4, lr}
   18a6a:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   18a6c:	f7fb fd06 	bl	1447c <pin_is_output>
   18a70:	b128      	cbz	r0, 18a7e <pin_is_task_output+0x16>
   18a72:	4620      	mov	r0, r4
   18a74:	f7fb fcec 	bl	14450 <pin_in_use_by_te>
   18a78:	b118      	cbz	r0, 18a82 <pin_is_task_output+0x1a>
   18a7a:	2001      	movs	r0, #1
   18a7c:	e000      	b.n	18a80 <pin_is_task_output+0x18>
   18a7e:	2000      	movs	r0, #0
}
   18a80:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   18a82:	2000      	movs	r0, #0
   18a84:	e7fc      	b.n	18a80 <pin_is_task_output+0x18>

00018a86 <pin_is_input>:
{
   18a86:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   18a88:	f7fb fcf8 	bl	1447c <pin_is_output>
   18a8c:	f080 0001 	eor.w	r0, r0, #1
}
   18a90:	b2c0      	uxtb	r0, r0
   18a92:	bd08      	pop	{r3, pc}

00018a94 <gpiote_polarity_to_trigger>:
}
   18a94:	4770      	bx	lr

00018a96 <gpiote_trigger_to_polarity>:
}
   18a96:	4770      	bx	lr

00018a98 <is_level>:
}
   18a98:	2803      	cmp	r0, #3
   18a9a:	bf94      	ite	ls
   18a9c:	2000      	movls	r0, #0
   18a9e:	2001      	movhi	r0, #1
   18aa0:	4770      	bx	lr

00018aa2 <rpc_handle_ctrl_message>:
   18aa2:	2902      	cmp	r1, #2
   18aa4:	b510      	push	{r4, lr}
   18aa6:	4604      	mov	r4, r0
   18aa8:	d005      	beq.n	18ab6 <rpc_handle_ctrl_message+0x14>
   18aaa:	2904      	cmp	r1, #4
   18aac:	d001      	beq.n	18ab2 <rpc_handle_ctrl_message+0x10>
   18aae:	2901      	cmp	r1, #1
   18ab0:	d107      	bne.n	18ac2 <rpc_handle_ctrl_message+0x20>
   18ab2:	2000      	movs	r0, #0
   18ab4:	bd10      	pop	{r4, pc}
   18ab6:	6880      	ldr	r0, [r0, #8]
   18ab8:	2800      	cmp	r0, #0
   18aba:	d0fa      	beq.n	18ab2 <rpc_handle_ctrl_message+0x10>
   18abc:	f000 f831 	bl	18b22 <rpc_transport_local_data_free>
   18ac0:	e7f7      	b.n	18ab2 <rpc_handle_ctrl_message+0x10>
   18ac2:	6880      	ldr	r0, [r0, #8]
   18ac4:	b108      	cbz	r0, 18aca <rpc_handle_ctrl_message+0x28>
   18ac6:	f000 f82c 	bl	18b22 <rpc_transport_local_data_free>
   18aca:	4620      	mov	r0, r4
   18acc:	f000 f825 	bl	18b1a <rpc_transport_msg_free>
   18ad0:	e7ef      	b.n	18ab2 <rpc_handle_ctrl_message+0x10>

00018ad2 <rpc_message_send>:
   18ad2:	6843      	ldr	r3, [r0, #4]
   18ad4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   18ad8:	f043 0302 	orr.w	r3, r3, #2
   18adc:	6043      	str	r3, [r0, #4]
   18ade:	f000 b824 	b.w	18b2a <rpc_transport_data_msg_send>

00018ae2 <rpc_message_alloc>:
   18ae2:	b570      	push	{r4, r5, r6, lr}
   18ae4:	4606      	mov	r6, r0
   18ae6:	b130      	cbz	r0, 18af6 <rpc_message_alloc+0x14>
   18ae8:	f000 f819 	bl	18b1e <rpc_transport_data_alloc>
   18aec:	4605      	mov	r5, r0
   18aee:	b918      	cbnz	r0, 18af8 <rpc_message_alloc+0x16>
   18af0:	2400      	movs	r4, #0
   18af2:	4620      	mov	r0, r4
   18af4:	bd70      	pop	{r4, r5, r6, pc}
   18af6:	4605      	mov	r5, r0
   18af8:	f000 f80d 	bl	18b16 <rpc_transport_data_msg_alloc>
   18afc:	4604      	mov	r4, r0
   18afe:	b110      	cbz	r0, 18b06 <rpc_message_alloc+0x24>
   18b00:	60c6      	str	r6, [r0, #12]
   18b02:	6085      	str	r5, [r0, #8]
   18b04:	e7f5      	b.n	18af2 <rpc_message_alloc+0x10>
   18b06:	2d00      	cmp	r5, #0
   18b08:	d0f2      	beq.n	18af0 <rpc_message_alloc+0xe>
   18b0a:	4628      	mov	r0, r5
   18b0c:	f000 f809 	bl	18b22 <rpc_transport_local_data_free>
   18b10:	e7ef      	b.n	18af2 <rpc_message_alloc+0x10>

00018b12 <rpc_message_data_free>:
   18b12:	f000 b808 	b.w	18b26 <rpc_transport_peer_data_free>

00018b16 <rpc_transport_data_msg_alloc>:
   18b16:	f7fc bbe5 	b.w	152e4 <rpc_transport_ipc_data_msg_alloc>

00018b1a <rpc_transport_msg_free>:
   18b1a:	f7fc bc2f 	b.w	1537c <rpc_transport_ipc_msg_free>

00018b1e <rpc_transport_data_alloc>:
   18b1e:	f7fc bc13 	b.w	15348 <rpc_transport_ipc_data_alloc>

00018b22 <rpc_transport_local_data_free>:
   18b22:	f000 b804 	b.w	18b2e <rpc_transport_ipc_local_data_free>

00018b26 <rpc_transport_peer_data_free>:
   18b26:	f000 b809 	b.w	18b3c <rpc_transport_ipc_peer_data_free>

00018b2a <rpc_transport_data_msg_send>:
   18b2a:	f7fc bb9f 	b.w	1526c <rpc_transport_ipc_data_msg_send>

00018b2e <rpc_transport_ipc_local_data_free>:
   18b2e:	b508      	push	{r3, lr}
   18b30:	f7fb fac2 	bl	140b8 <nrf_modem_os_shm_tx_free>
   18b34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   18b38:	f7fb ba82 	b.w	14040 <nrf_modem_os_application_irq_set>

00018b3c <rpc_transport_ipc_peer_data_free>:
   18b3c:	b510      	push	{r4, lr}
   18b3e:	4604      	mov	r4, r0
   18b40:	f7fc fbe2 	bl	15308 <rpc_transport_ipc_ctrl_msg_alloc>
   18b44:	2101      	movs	r1, #1
   18b46:	2200      	movs	r2, #0
   18b48:	7001      	strb	r1, [r0, #0]
   18b4a:	2102      	movs	r1, #2
   18b4c:	6084      	str	r4, [r0, #8]
   18b4e:	7042      	strb	r2, [r0, #1]
   18b50:	7081      	strb	r1, [r0, #2]
   18b52:	70c2      	strb	r2, [r0, #3]
   18b54:	f7fc fba8 	bl	152a8 <rpc_transport_ipc_ctrl_msg_send>
   18b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18b5c:	f7fb ba70 	b.w	14040 <nrf_modem_os_application_irq_set>

00018b60 <rpc_client_request_alloc>:
   18b60:	b508      	push	{r3, lr}
   18b62:	f7ff ffbe 	bl	18ae2 <rpc_message_alloc>
   18b66:	b100      	cbz	r0, 18b6a <rpc_client_request_alloc+0xa>
   18b68:	3008      	adds	r0, #8
   18b6a:	bd08      	pop	{r3, pc}

00018b6c <rpc_client_request_send>:
   18b6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   18b70:	4610      	mov	r0, r2
   18b72:	f840 1d08 	str.w	r1, [r0, #-8]!
   18b76:	f7ff bfac 	b.w	18ad2 <rpc_message_send>

00018b7a <rpc_client_data_free>:
   18b7a:	f7ff bfca 	b.w	18b12 <rpc_message_data_free>

00018b7e <ip_interface_request_create>:
   18b7e:	b570      	push	{r4, r5, r6, lr}
   18b80:	4606      	mov	r6, r0
   18b82:	4618      	mov	r0, r3
   18b84:	460d      	mov	r5, r1
   18b86:	4614      	mov	r4, r2
   18b88:	f7ff ffea 	bl	18b60 <rpc_client_request_alloc>
   18b8c:	b148      	cbz	r0, 18ba2 <ip_interface_request_create+0x24>
   18b8e:	2300      	movs	r3, #0
   18b90:	2208      	movs	r2, #8
   18b92:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   18b96:	60c4      	str	r4, [r0, #12]
   18b98:	6105      	str	r5, [r0, #16]
   18b9a:	7202      	strb	r2, [r0, #8]
   18b9c:	7243      	strb	r3, [r0, #9]
   18b9e:	7283      	strb	r3, [r0, #10]
   18ba0:	72c3      	strb	r3, [r0, #11]
   18ba2:	bd70      	pop	{r4, r5, r6, pc}

00018ba4 <ip_interface_wait>:
   18ba4:	b538      	push	{r3, r4, r5, lr}
   18ba6:	4605      	mov	r5, r0
   18ba8:	f7fc fd6e 	bl	15688 <interface_socket_wait>
   18bac:	4604      	mov	r4, r0
   18bae:	b938      	cbnz	r0, 18bc0 <ip_interface_wait+0x1c>
   18bb0:	4628      	mov	r0, r5
   18bb2:	f7fc fde3 	bl	1577c <interface_socket_from_handle_get>
   18bb6:	b118      	cbz	r0, 18bc0 <ip_interface_wait+0x1c>
   18bb8:	6844      	ldr	r4, [r0, #4]
   18bba:	b10c      	cbz	r4, 18bc0 <ip_interface_wait+0x1c>
   18bbc:	2300      	movs	r3, #0
   18bbe:	6043      	str	r3, [r0, #4]
   18bc0:	4620      	mov	r0, r4
   18bc2:	bd38      	pop	{r3, r4, r5, pc}

00018bc4 <secure_client_socket>:
   18bc4:	f04f 33ff 	mov.w	r3, #4294967295
   18bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18bca:	9301      	str	r3, [sp, #4]
   18bcc:	680b      	ldr	r3, [r1, #0]
   18bce:	4606      	mov	r6, r0
   18bd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   18bd4:	600b      	str	r3, [r1, #0]
   18bd6:	680b      	ldr	r3, [r1, #0]
   18bd8:	460c      	mov	r4, r1
   18bda:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   18bde:	600b      	str	r3, [r1, #0]
   18be0:	680f      	ldr	r7, [r1, #0]
   18be2:	463a      	mov	r2, r7
   18be4:	f7fd f896 	bl	15d14 <secure_socket_attach_initiate>
   18be8:	4605      	mov	r5, r0
   18bea:	b950      	cbnz	r0, 18c02 <secure_client_socket+0x3e>
   18bec:	220c      	movs	r2, #12
   18bee:	4630      	mov	r0, r6
   18bf0:	4611      	mov	r1, r2
   18bf2:	ab01      	add	r3, sp, #4
   18bf4:	f7ff ffd6 	bl	18ba4 <ip_interface_wait>
   18bf8:	4605      	mov	r5, r0
   18bfa:	b128      	cbz	r0, 18c08 <secure_client_socket+0x44>
   18bfc:	2877      	cmp	r0, #119	; 0x77
   18bfe:	d000      	beq.n	18c02 <secure_client_socket+0x3e>
   18c00:	6027      	str	r7, [r4, #0]
   18c02:	4628      	mov	r0, r5
   18c04:	b003      	add	sp, #12
   18c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18c08:	4630      	mov	r0, r6
   18c0a:	f7fd f871 	bl	15cf0 <hostname_free>
   18c0e:	6823      	ldr	r3, [r4, #0]
   18c10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   18c14:	6023      	str	r3, [r4, #0]
   18c16:	6823      	ldr	r3, [r4, #0]
   18c18:	0c1b      	lsrs	r3, r3, #16
   18c1a:	041b      	lsls	r3, r3, #16
   18c1c:	f043 030c 	orr.w	r3, r3, #12
   18c20:	6023      	str	r3, [r4, #0]
   18c22:	6823      	ldr	r3, [r4, #0]
   18c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   18c28:	6023      	str	r3, [r4, #0]
   18c2a:	6823      	ldr	r3, [r4, #0]
   18c2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   18c30:	6023      	str	r3, [r4, #0]
   18c32:	e7e6      	b.n	18c02 <secure_client_socket+0x3e>

00018c34 <nrf_modem_recoverable_error_handler>:
   18c34:	4770      	bx	lr

00018c36 <nrf_modem_platform_error_handler>:
   18c36:	b508      	push	{r3, lr}
   18c38:	f7ff fffc 	bl	18c34 <nrf_modem_recoverable_error_handler>
   18c3c:	bd08      	pop	{r3, pc}

00018c3e <rpc_transport_ipc_fault_handler>:
   18c3e:	f7ff bffa 	b.w	18c36 <nrf_modem_platform_error_handler>

00018c42 <nrf_modem_platform_init>:
   18c42:	b513      	push	{r0, r1, r4, lr}
   18c44:	4604      	mov	r4, r0
   18c46:	f7fb fa3f 	bl	140c8 <nrf_modem_os_init>
   18c4a:	6a23      	ldr	r3, [r4, #32]
   18c4c:	4668      	mov	r0, sp
   18c4e:	9400      	str	r4, [sp, #0]
   18c50:	f88d 3004 	strb.w	r3, [sp, #4]
   18c54:	f7fc fbb8 	bl	153c8 <rpc_transport_ipc_init>
   18c58:	4604      	mov	r4, r0
   18c5a:	b948      	cbnz	r0, 18c70 <nrf_modem_platform_init+0x2e>
   18c5c:	f7fc fd08 	bl	15670 <interface_init>
   18c60:	f7fd f94c 	bl	15efc <nrf_modem_at_init>
   18c64:	4604      	mov	r4, r0
   18c66:	b918      	cbnz	r0, 18c70 <nrf_modem_platform_init+0x2e>
   18c68:	f7fc fdc0 	bl	157ec <ip_interface_init>
   18c6c:	f7fd f8a4 	bl	15db8 <tls_interface_init>
   18c70:	4620      	mov	r0, r4
   18c72:	b002      	add	sp, #8
   18c74:	bd10      	pop	{r4, pc}

00018c76 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   18c76:	b148      	cbz	r0, 18c8c <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   18c78:	68c3      	ldr	r3, [r0, #12]
   18c7a:	8818      	ldrh	r0, [r3, #0]
   18c7c:	f3c0 0008 	ubfx	r0, r0, #0, #9
   18c80:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   18c84:	bf14      	ite	ne
   18c86:	2000      	movne	r0, #0
   18c88:	2001      	moveq	r0, #1
   18c8a:	4770      	bx	lr
		return false;
   18c8c:	2000      	movs	r0, #0
}
   18c8e:	4770      	bx	lr

00018c90 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   18c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18c92:	4605      	mov	r5, r0
   18c94:	460e      	mov	r6, r1
	__asm__ volatile(
   18c96:	f04f 0320 	mov.w	r3, #32
   18c9a:	f3ef 8711 	mrs	r7, BASEPRI
   18c9e:	f383 8812 	msr	BASEPRI_MAX, r3
   18ca2:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   18ca6:	f7fe fa85 	bl	171b4 <z_impl_z_current_get>
   18caa:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   18cac:	4631      	mov	r1, r6
   18cae:	4628      	mov	r0, r5
   18cb0:	f7ff fe9a 	bl	189e8 <k_sys_fatal_error_handler>
	__asm__ volatile(
   18cb4:	f387 8811 	msr	BASEPRI, r7
   18cb8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   18cbc:	4620      	mov	r0, r4
   18cbe:	f7f9 ffd9 	bl	12c74 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   18cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018cc4 <k_heap_init>:
{
   18cc4:	b510      	push	{r4, lr}
   18cc6:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   18cca:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   18ccc:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   18cce:	f7fe ffc3 	bl	17c58 <sys_heap_init>
}
   18cd2:	bd10      	pop	{r4, pc}

00018cd4 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   18cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18cd8:	b087      	sub	sp, #28
   18cda:	4680      	mov	r8, r0
   18cdc:	9103      	str	r1, [sp, #12]
   18cde:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   18ce0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   18ce4:	f000 fa70 	bl	191c8 <sys_clock_timeout_end_calc>
   18ce8:	4681      	mov	r9, r0
   18cea:	468b      	mov	fp, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   18cec:	f108 0314 	add.w	r3, r8, #20
   18cf0:	9305      	str	r3, [sp, #20]
	__asm__ volatile(
   18cf2:	f04f 0320 	mov.w	r3, #32
   18cf6:	f3ef 8511 	mrs	r5, BASEPRI
   18cfa:	f383 8812 	msr	BASEPRI_MAX, r3
   18cfe:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   18d02:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
   18d06:	4654      	mov	r4, sl

	while (ret == NULL) {
   18d08:	e00f      	b.n	18d2a <k_heap_aligned_alloc+0x56>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   18d0a:	e9cd 6700 	strd	r6, r7, [sp]
   18d0e:	f108 020c 	add.w	r2, r8, #12
   18d12:	4629      	mov	r1, r5
   18d14:	9805      	ldr	r0, [sp, #20]
   18d16:	f7fe f857 	bl	16dc8 <z_pend_curr>
   18d1a:	f04f 0320 	mov.w	r3, #32
   18d1e:	f3ef 8511 	mrs	r5, BASEPRI
   18d22:	f383 8812 	msr	BASEPRI_MAX, r3
   18d26:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   18d2a:	b9b4      	cbnz	r4, 18d5a <k_heap_aligned_alloc+0x86>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   18d2c:	9a04      	ldr	r2, [sp, #16]
   18d2e:	9903      	ldr	r1, [sp, #12]
   18d30:	4640      	mov	r0, r8
   18d32:	f7fe ff20 	bl	17b76 <sys_heap_aligned_alloc>
   18d36:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   18d38:	f7fe fbd8 	bl	174ec <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   18d3c:	b96c      	cbnz	r4, 18d5a <k_heap_aligned_alloc+0x86>
		    (ret != NULL) || ((end - now) <= 0)) {
   18d3e:	ebb9 0600 	subs.w	r6, r9, r0
   18d42:	eb6b 0701 	sbc.w	r7, fp, r1
   18d46:	2e01      	cmp	r6, #1
   18d48:	f177 0300 	sbcs.w	r3, r7, #0
   18d4c:	db05      	blt.n	18d5a <k_heap_aligned_alloc+0x86>
		if (!blocked_alloc) {
   18d4e:	f1ba 0f00 	cmp.w	sl, #0
   18d52:	d1da      	bne.n	18d0a <k_heap_aligned_alloc+0x36>
			blocked_alloc = true;
   18d54:	f04f 0a01 	mov.w	sl, #1
   18d58:	e7d7      	b.n	18d0a <k_heap_aligned_alloc+0x36>
	__asm__ volatile(
   18d5a:	f385 8811 	msr	BASEPRI, r5
   18d5e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   18d62:	4620      	mov	r0, r4
   18d64:	b007      	add	sp, #28
   18d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018d6a <k_heap_alloc>:

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   18d6a:	b500      	push	{lr}
   18d6c:	b083      	sub	sp, #12
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, alloc, h, timeout);

	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   18d6e:	e9cd 2300 	strd	r2, r3, [sp]
   18d72:	460a      	mov	r2, r1
   18d74:	2104      	movs	r1, #4
   18d76:	f7ff ffad 	bl	18cd4 <k_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, alloc, h, timeout, ret);

	return ret;
}
   18d7a:	b003      	add	sp, #12
   18d7c:	f85d fb04 	ldr.w	pc, [sp], #4

00018d80 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   18d80:	b570      	push	{r4, r5, r6, lr}
   18d82:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   18d84:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   18d88:	f04f 0320 	mov.w	r3, #32
   18d8c:	f3ef 8511 	mrs	r5, BASEPRI
   18d90:	f383 8812 	msr	BASEPRI_MAX, r3
   18d94:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   18d98:	f7fe fea9 	bl	17aee <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   18d9c:	f104 000c 	add.w	r0, r4, #12
   18da0:	f000 f979 	bl	19096 <z_unpend_all>
   18da4:	b920      	cbnz	r0, 18db0 <k_heap_free+0x30>
	__asm__ volatile(
   18da6:	f385 8811 	msr	BASEPRI, r5
   18daa:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   18dae:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
   18db0:	4629      	mov	r1, r5
   18db2:	4630      	mov	r0, r6
   18db4:	f7fd fea4 	bl	16b00 <z_reschedule>
   18db8:	e7f9      	b.n	18dae <k_heap_free+0x2e>

00018dba <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   18dba:	3207      	adds	r2, #7
   18dbc:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   18dc0:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
   18dc4:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
   18dc8:	2300      	movs	r3, #0
   18dca:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
   18dce:	1888      	adds	r0, r1, r2
   18dd0:	4770      	bx	lr

00018dd2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   18dd2:	f3ef 8005 	mrs	r0, IPSR
}
   18dd6:	3800      	subs	r0, #0
   18dd8:	bf18      	it	ne
   18dda:	2001      	movne	r0, #1
   18ddc:	4770      	bx	lr

00018dde <z_impl_k_thread_start>:
{
   18dde:	b508      	push	{r3, lr}
	z_sched_start(thread);
   18de0:	f7fd ffb8 	bl	16d54 <z_sched_start>
}
   18de4:	bd08      	pop	{r3, pc}

00018de6 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   18de6:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   18de8:	2400      	movs	r4, #0
   18dea:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   18dec:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   18dee:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   18df0:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   18df2:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   18df4:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   18df6:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   18df8:	bc10      	pop	{r4}
   18dfa:	4770      	bx	lr

00018dfc <z_pm_save_idle_exit>:
{
   18dfc:	b508      	push	{r3, lr}
	pm_system_resume();
   18dfe:	f7f9 fb6d 	bl	124dc <pm_system_resume>
	sys_clock_idle_exit();
   18e02:	f7ff fc9c 	bl	1873e <sys_clock_idle_exit>
}
   18e06:	bd08      	pop	{r3, pc}

00018e08 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   18e08:	4288      	cmp	r0, r1
   18e0a:	da00      	bge.n	18e0e <new_prio_for_inheritance+0x6>
   18e0c:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   18e0e:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   18e12:	db01      	blt.n	18e18 <new_prio_for_inheritance+0x10>
   18e14:	4608      	mov	r0, r1
   18e16:	4770      	bx	lr
   18e18:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   18e1c:	4770      	bx	lr

00018e1e <adjust_owner_prio>:
{
   18e1e:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   18e20:	6880      	ldr	r0, [r0, #8]
   18e22:	f990 300e 	ldrsb.w	r3, [r0, #14]
   18e26:	428b      	cmp	r3, r1
   18e28:	d101      	bne.n	18e2e <adjust_owner_prio+0x10>
	return false;
   18e2a:	2000      	movs	r0, #0
}
   18e2c:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   18e2e:	f7fd ffdf 	bl	16df0 <z_set_prio>
   18e32:	e7fb      	b.n	18e2c <adjust_owner_prio+0xe>

00018e34 <z_impl_k_mutex_init>:
{
   18e34:	4603      	mov	r3, r0
	mutex->owner = NULL;
   18e36:	2000      	movs	r0, #0
   18e38:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   18e3a:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   18e3c:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   18e3e:	605b      	str	r3, [r3, #4]
}
   18e40:	4770      	bx	lr

00018e42 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   18e42:	b13a      	cbz	r2, 18e54 <z_impl_k_sem_init+0x12>
   18e44:	428a      	cmp	r2, r1
   18e46:	d308      	bcc.n	18e5a <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
   18e48:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   18e4a:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   18e4c:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   18e4e:	6040      	str	r0, [r0, #4]
	return 0;
   18e50:	2000      	movs	r0, #0
   18e52:	4770      	bx	lr
		return -EINVAL;
   18e54:	f06f 0015 	mvn.w	r0, #21
   18e58:	4770      	bx	lr
   18e5a:	f06f 0015 	mvn.w	r0, #21
}
   18e5e:	4770      	bx	lr

00018e60 <thread_active_elsewhere>:
}
   18e60:	2000      	movs	r0, #0
   18e62:	4770      	bx	lr

00018e64 <pended_on_thread>:
}
   18e64:	6880      	ldr	r0, [r0, #8]
   18e66:	4770      	bx	lr

00018e68 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   18e68:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   18e6c:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   18e70:	4283      	cmp	r3, r0
   18e72:	d001      	beq.n	18e78 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   18e74:	1ac0      	subs	r0, r0, r3
   18e76:	4770      	bx	lr
	return 0;
   18e78:	2000      	movs	r0, #0
}
   18e7a:	4770      	bx	lr

00018e7c <z_reschedule_irqlock>:
{
   18e7c:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   18e7e:	4603      	mov	r3, r0
   18e80:	b920      	cbnz	r0, 18e8c <z_reschedule_irqlock+0x10>
   18e82:	f3ef 8205 	mrs	r2, IPSR
   18e86:	b942      	cbnz	r2, 18e9a <z_reschedule_irqlock+0x1e>
   18e88:	2201      	movs	r2, #1
   18e8a:	e000      	b.n	18e8e <z_reschedule_irqlock+0x12>
   18e8c:	2200      	movs	r2, #0
	if (resched(key)) {
   18e8e:	b932      	cbnz	r2, 18e9e <z_reschedule_irqlock+0x22>
   18e90:	f383 8811 	msr	BASEPRI, r3
   18e94:	f3bf 8f6f 	isb	sy
}
   18e98:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   18e9a:	2200      	movs	r2, #0
   18e9c:	e7f7      	b.n	18e8e <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   18e9e:	4618      	mov	r0, r3
   18ea0:	f7f9 fccc 	bl	1283c <arch_swap>
	return ret;
   18ea4:	e7f8      	b.n	18e98 <z_reschedule_irqlock+0x1c>

00018ea6 <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   18ea6:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   18ea8:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
   18eaa:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   18eac:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   18eae:	2300      	movs	r3, #0
   18eb0:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   18eb2:	604b      	str	r3, [r1, #4]
}
   18eb4:	4770      	bx	lr

00018eb6 <z_unpend_thread>:
{
   18eb6:	b538      	push	{r3, r4, r5, lr}
   18eb8:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   18eba:	2300      	movs	r3, #0
	__asm__ volatile(
   18ebc:	f04f 0220 	mov.w	r2, #32
   18ec0:	f3ef 8511 	mrs	r5, BASEPRI
   18ec4:	f382 8812 	msr	BASEPRI_MAX, r2
   18ec8:	f3bf 8f6f 	isb	sy
   18ecc:	b98b      	cbnz	r3, 18ef2 <z_unpend_thread+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   18ece:	4620      	mov	r0, r4
   18ed0:	f7ff ffc8 	bl	18e64 <pended_on_thread>
   18ed4:	4621      	mov	r1, r4
   18ed6:	f7ff ffe6 	bl	18ea6 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   18eda:	7b63      	ldrb	r3, [r4, #13]
   18edc:	f023 0302 	bic.w	r3, r3, #2
   18ee0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   18ee2:	2300      	movs	r3, #0
   18ee4:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   18ee6:	f385 8811 	msr	BASEPRI, r5
   18eea:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   18eee:	2301      	movs	r3, #1
   18ef0:	e7ec      	b.n	18ecc <z_unpend_thread+0x16>
	return z_abort_timeout(&thread->base.timeout);
   18ef2:	f104 0018 	add.w	r0, r4, #24
   18ef6:	f000 f8fa 	bl	190ee <z_abort_timeout>
}
   18efa:	bd38      	pop	{r3, r4, r5, pc}

00018efc <z_priq_dumb_best>:
{
   18efc:	4603      	mov	r3, r0
	return list->head == list;
   18efe:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18f00:	4283      	cmp	r3, r0
   18f02:	d000      	beq.n	18f06 <z_priq_dumb_best+0xa>
}
   18f04:	4770      	bx	lr
	struct k_thread *thread = NULL;
   18f06:	2000      	movs	r0, #0
	return thread;
   18f08:	e7fc      	b.n	18f04 <z_priq_dumb_best+0x8>

00018f0a <z_ready_thread>:
{
   18f0a:	b538      	push	{r3, r4, r5, lr}
   18f0c:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   18f0e:	2300      	movs	r3, #0
	__asm__ volatile(
   18f10:	f04f 0220 	mov.w	r2, #32
   18f14:	f3ef 8511 	mrs	r5, BASEPRI
   18f18:	f382 8812 	msr	BASEPRI_MAX, r2
   18f1c:	f3bf 8f6f 	isb	sy
   18f20:	e007      	b.n	18f32 <z_ready_thread+0x28>
			ready_thread(thread);
   18f22:	4620      	mov	r0, r4
   18f24:	f7fd fed6 	bl	16cd4 <ready_thread>
	__asm__ volatile(
   18f28:	f385 8811 	msr	BASEPRI, r5
   18f2c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   18f30:	2301      	movs	r3, #1
   18f32:	b92b      	cbnz	r3, 18f40 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   18f34:	4620      	mov	r0, r4
   18f36:	f7ff ff93 	bl	18e60 <thread_active_elsewhere>
   18f3a:	2800      	cmp	r0, #0
   18f3c:	d1f4      	bne.n	18f28 <z_ready_thread+0x1e>
   18f3e:	e7f0      	b.n	18f22 <z_ready_thread+0x18>
}
   18f40:	bd38      	pop	{r3, r4, r5, pc}

00018f42 <z_thread_timeout>:
{
   18f42:	b570      	push	{r4, r5, r6, lr}
   18f44:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   18f46:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   18f4a:	2300      	movs	r3, #0
	__asm__ volatile(
   18f4c:	f04f 0220 	mov.w	r2, #32
   18f50:	f3ef 8611 	mrs	r6, BASEPRI
   18f54:	f382 8812 	msr	BASEPRI_MAX, r2
   18f58:	f3bf 8f6f 	isb	sy
   18f5c:	e019      	b.n	18f92 <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   18f5e:	4628      	mov	r0, r5
   18f60:	f7ff ff80 	bl	18e64 <pended_on_thread>
   18f64:	4629      	mov	r1, r5
   18f66:	f7ff ff9e 	bl	18ea6 <z_priq_dumb_remove>
   18f6a:	7b6b      	ldrb	r3, [r5, #13]
   18f6c:	f023 0302 	bic.w	r3, r3, #2
   18f70:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   18f72:	2300      	movs	r3, #0
   18f74:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18f76:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   18f7a:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   18f7e:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   18f82:	4628      	mov	r0, r5
   18f84:	f7fd fea6 	bl	16cd4 <ready_thread>
	__asm__ volatile(
   18f88:	f386 8811 	msr	BASEPRI, r6
   18f8c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   18f90:	2301      	movs	r3, #1
   18f92:	b94b      	cbnz	r3, 18fa8 <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   18f94:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   18f98:	f013 0f28 	tst.w	r3, #40	; 0x28
   18f9c:	d1f4      	bne.n	18f88 <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
   18f9e:	f854 3c10 	ldr.w	r3, [r4, #-16]
   18fa2:	2b00      	cmp	r3, #0
   18fa4:	d1db      	bne.n	18f5e <z_thread_timeout+0x1c>
   18fa6:	e7e6      	b.n	18f76 <z_thread_timeout+0x34>
}
   18fa8:	bd70      	pop	{r4, r5, r6, pc}

00018faa <add_to_waitq_locked>:
{
   18faa:	b570      	push	{r4, r5, r6, lr}
   18fac:	4605      	mov	r5, r0
   18fae:	460e      	mov	r6, r1
	unready_thread(thread);
   18fb0:	f7fd feee 	bl	16d90 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   18fb4:	7b6b      	ldrb	r3, [r5, #13]
   18fb6:	f043 0302 	orr.w	r3, r3, #2
   18fba:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   18fbc:	b1b6      	cbz	r6, 18fec <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   18fbe:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   18fc0:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18fc2:	42a6      	cmp	r6, r4
   18fc4:	d019      	beq.n	18ffa <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18fc6:	b164      	cbz	r4, 18fe2 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   18fc8:	4621      	mov	r1, r4
   18fca:	4628      	mov	r0, r5
   18fcc:	f7ff ff4c 	bl	18e68 <z_sched_prio_cmp>
   18fd0:	2800      	cmp	r0, #0
   18fd2:	dc0c      	bgt.n	18fee <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   18fd4:	b12c      	cbz	r4, 18fe2 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   18fd6:	6873      	ldr	r3, [r6, #4]
   18fd8:	429c      	cmp	r4, r3
   18fda:	d002      	beq.n	18fe2 <add_to_waitq_locked+0x38>
   18fdc:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18fde:	2c00      	cmp	r4, #0
   18fe0:	d1f1      	bne.n	18fc6 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   18fe2:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   18fe4:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   18fe6:	606b      	str	r3, [r5, #4]
	tail->next = node;
   18fe8:	601d      	str	r5, [r3, #0]
	list->tail = node;
   18fea:	6075      	str	r5, [r6, #4]
}
   18fec:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   18fee:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   18ff0:	606b      	str	r3, [r5, #4]
	node->next = successor;
   18ff2:	602c      	str	r4, [r5, #0]
	prev->next = node;
   18ff4:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   18ff6:	6065      	str	r5, [r4, #4]
}
   18ff8:	e7f8      	b.n	18fec <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18ffa:	2400      	movs	r4, #0
   18ffc:	e7e3      	b.n	18fc6 <add_to_waitq_locked+0x1c>

00018ffe <pend>:
{
   18ffe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19002:	4605      	mov	r5, r0
   19004:	460f      	mov	r7, r1
   19006:	4691      	mov	r9, r2
   19008:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   1900a:	2400      	movs	r4, #0
	__asm__ volatile(
   1900c:	f04f 0320 	mov.w	r3, #32
   19010:	f3ef 8611 	mrs	r6, BASEPRI
   19014:	f383 8812 	msr	BASEPRI_MAX, r3
   19018:	f3bf 8f6f 	isb	sy
   1901c:	b94c      	cbnz	r4, 19032 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
   1901e:	4639      	mov	r1, r7
   19020:	4628      	mov	r0, r5
   19022:	f7ff ffc2 	bl	18faa <add_to_waitq_locked>
	__asm__ volatile(
   19026:	f386 8811 	msr	BASEPRI, r6
   1902a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1902e:	2401      	movs	r4, #1
   19030:	e7f4      	b.n	1901c <pend+0x1e>
	add_thread_timeout(thread, timeout);
   19032:	464a      	mov	r2, r9
   19034:	4643      	mov	r3, r8
   19036:	4628      	mov	r0, r5
   19038:	f7fd fd00 	bl	16a3c <add_thread_timeout>
}
   1903c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00019040 <z_unpend_first_thread>:
{
   19040:	b570      	push	{r4, r5, r6, lr}
   19042:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   19044:	2300      	movs	r3, #0
	__asm__ volatile(
   19046:	f04f 0220 	mov.w	r2, #32
   1904a:	f3ef 8511 	mrs	r5, BASEPRI
   1904e:	f382 8812 	msr	BASEPRI_MAX, r2
   19052:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   19056:	461c      	mov	r4, r3
   19058:	e013      	b.n	19082 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1905a:	f7ff ff03 	bl	18e64 <pended_on_thread>
   1905e:	4621      	mov	r1, r4
   19060:	f7ff ff21 	bl	18ea6 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   19064:	7b63      	ldrb	r3, [r4, #13]
   19066:	f023 0302 	bic.w	r3, r3, #2
   1906a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1906c:	2300      	movs	r3, #0
   1906e:	60a3      	str	r3, [r4, #8]
   19070:	f104 0018 	add.w	r0, r4, #24
   19074:	f000 f83b 	bl	190ee <z_abort_timeout>
	__asm__ volatile(
   19078:	f385 8811 	msr	BASEPRI, r5
   1907c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   19080:	2301      	movs	r3, #1
   19082:	b933      	cbnz	r3, 19092 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   19084:	4630      	mov	r0, r6
   19086:	f7ff ff39 	bl	18efc <z_priq_dumb_best>
		if (thread != NULL) {
   1908a:	4604      	mov	r4, r0
   1908c:	2800      	cmp	r0, #0
   1908e:	d1e4      	bne.n	1905a <z_unpend_first_thread+0x1a>
   19090:	e7f2      	b.n	19078 <z_unpend_first_thread+0x38>
}
   19092:	4620      	mov	r0, r4
   19094:	bd70      	pop	{r4, r5, r6, pc}

00019096 <z_unpend_all>:
{
   19096:	b538      	push	{r3, r4, r5, lr}
   19098:	4605      	mov	r5, r0
	int need_sched = 0;
   1909a:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1909c:	e006      	b.n	190ac <z_unpend_all+0x16>
		z_unpend_thread(thread);
   1909e:	4620      	mov	r0, r4
   190a0:	f7ff ff09 	bl	18eb6 <z_unpend_thread>
		z_ready_thread(thread);
   190a4:	4620      	mov	r0, r4
   190a6:	f7ff ff30 	bl	18f0a <z_ready_thread>
		need_sched = 1;
   190aa:	2001      	movs	r0, #1
	return list->head == list;
   190ac:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   190ae:	42a5      	cmp	r5, r4
   190b0:	d001      	beq.n	190b6 <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   190b2:	2c00      	cmp	r4, #0
   190b4:	d1f3      	bne.n	1909e <z_unpend_all+0x8>
}
   190b6:	bd38      	pop	{r3, r4, r5, pc}

000190b8 <init_ready_q>:
	sys_dlist_init(&rq->runq);
   190b8:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   190ba:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   190bc:	6083      	str	r3, [r0, #8]
}
   190be:	4770      	bx	lr

000190c0 <remove_timeout>:
{
   190c0:	b538      	push	{r3, r4, r5, lr}
   190c2:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   190c4:	f7fe f8c8 	bl	17258 <next>
   190c8:	b148      	cbz	r0, 190de <remove_timeout+0x1e>
   190ca:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   190cc:	6920      	ldr	r0, [r4, #16]
   190ce:	6965      	ldr	r5, [r4, #20]
   190d0:	6913      	ldr	r3, [r2, #16]
   190d2:	6951      	ldr	r1, [r2, #20]
   190d4:	181b      	adds	r3, r3, r0
   190d6:	eb45 0101 	adc.w	r1, r5, r1
   190da:	6113      	str	r3, [r2, #16]
   190dc:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   190de:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   190e0:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   190e2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   190e4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   190e6:	2300      	movs	r3, #0
   190e8:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   190ea:	6063      	str	r3, [r4, #4]
}
   190ec:	bd38      	pop	{r3, r4, r5, pc}

000190ee <z_abort_timeout>:
{
   190ee:	b570      	push	{r4, r5, r6, lr}
   190f0:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   190f2:	2300      	movs	r3, #0
	__asm__ volatile(
   190f4:	f04f 0220 	mov.w	r2, #32
   190f8:	f3ef 8611 	mrs	r6, BASEPRI
   190fc:	f382 8812 	msr	BASEPRI_MAX, r2
   19100:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   19104:	f06f 0015 	mvn.w	r0, #21
   19108:	e008      	b.n	1911c <z_abort_timeout+0x2e>
			remove_timeout(to);
   1910a:	4620      	mov	r0, r4
   1910c:	f7ff ffd8 	bl	190c0 <remove_timeout>
			ret = 0;
   19110:	4628      	mov	r0, r5
	__asm__ volatile(
   19112:	f386 8811 	msr	BASEPRI, r6
   19116:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1911a:	2301      	movs	r3, #1
   1911c:	461d      	mov	r5, r3
   1911e:	b91b      	cbnz	r3, 19128 <z_abort_timeout+0x3a>
	return node->next != NULL;
   19120:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   19122:	2b00      	cmp	r3, #0
   19124:	d1f1      	bne.n	1910a <z_abort_timeout+0x1c>
   19126:	e7f4      	b.n	19112 <z_abort_timeout+0x24>
}
   19128:	bd70      	pop	{r4, r5, r6, pc}

0001912a <z_get_next_timeout_expiry>:
{
   1912a:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   1912c:	2300      	movs	r3, #0
	__asm__ volatile(
   1912e:	f04f 0220 	mov.w	r2, #32
   19132:	f3ef 8411 	mrs	r4, BASEPRI
   19136:	f382 8812 	msr	BASEPRI_MAX, r2
   1913a:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   1913e:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
   19142:	b93b      	cbnz	r3, 19154 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
   19144:	f7fe f8a0 	bl	17288 <next_timeout>
	__asm__ volatile(
   19148:	f384 8811 	msr	BASEPRI, r4
   1914c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   19150:	2301      	movs	r3, #1
   19152:	e7f6      	b.n	19142 <z_get_next_timeout_expiry+0x18>
}
   19154:	bd10      	pop	{r4, pc}

00019156 <z_set_timeout_expiry>:
{
   19156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19158:	4606      	mov	r6, r0
   1915a:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   1915c:	2300      	movs	r3, #0
	__asm__ volatile(
   1915e:	f04f 0220 	mov.w	r2, #32
   19162:	f3ef 8511 	mrs	r5, BASEPRI
   19166:	f382 8812 	msr	BASEPRI_MAX, r2
   1916a:	f3bf 8f6f 	isb	sy
   1916e:	e00a      	b.n	19186 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   19170:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   19172:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   19176:	2801      	cmp	r0, #1
   19178:	dd00      	ble.n	1917c <z_set_timeout_expiry+0x26>
   1917a:	b97c      	cbnz	r4, 1919c <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   1917c:	f385 8811 	msr	BASEPRI, r5
   19180:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   19184:	2301      	movs	r3, #1
   19186:	461c      	mov	r4, r3
   19188:	b97b      	cbnz	r3, 191aa <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   1918a:	f7fe f87d 	bl	17288 <next_timeout>
			      || (ticks <= next_to);
   1918e:	f1b0 3fff 	cmp.w	r0, #4294967295
   19192:	d0ed      	beq.n	19170 <z_set_timeout_expiry+0x1a>
   19194:	42b0      	cmp	r0, r6
   19196:	dbec      	blt.n	19172 <z_set_timeout_expiry+0x1c>
   19198:	2401      	movs	r4, #1
   1919a:	e7ea      	b.n	19172 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1919c:	4639      	mov	r1, r7
   1919e:	42b0      	cmp	r0, r6
   191a0:	bfa8      	it	ge
   191a2:	4630      	movge	r0, r6
   191a4:	f7fa fdec 	bl	13d80 <sys_clock_set_timeout>
   191a8:	e7e8      	b.n	1917c <z_set_timeout_expiry+0x26>
}
   191aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000191ac <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   191ac:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   191ae:	f7fe f99d 	bl	174ec <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   191b2:	bd08      	pop	{r3, pc}

000191b4 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   191b4:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   191b6:	f7fe f999 	bl	174ec <sys_clock_tick_get>
}
   191ba:	bd08      	pop	{r3, pc}

000191bc <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   191bc:	b900      	cbnz	r0, 191c0 <z_impl_k_busy_wait+0x4>
   191be:	4770      	bx	lr
{
   191c0:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   191c2:	f7f9 f97f 	bl	124c4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   191c6:	bd08      	pop	{r3, pc}

000191c8 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   191c8:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   191ca:	f1b1 3fff 	cmp.w	r1, #4294967295
   191ce:	bf08      	it	eq
   191d0:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   191d4:	d024      	beq.n	19220 <sys_clock_timeout_end_calc+0x58>
   191d6:	4604      	mov	r4, r0
   191d8:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   191da:	ea54 0105 	orrs.w	r1, r4, r5
   191de:	d00d      	beq.n	191fc <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   191e0:	f06f 0101 	mvn.w	r1, #1
   191e4:	1a0a      	subs	r2, r1, r0
   191e6:	f04f 31ff 	mov.w	r1, #4294967295
   191ea:	eb61 0305 	sbc.w	r3, r1, r5
   191ee:	2a00      	cmp	r2, #0
   191f0:	f173 0100 	sbcs.w	r1, r3, #0
   191f4:	db05      	blt.n	19202 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   191f6:	4610      	mov	r0, r2
   191f8:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   191fa:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   191fc:	f7fe f976 	bl	174ec <sys_clock_tick_get>
   19200:	e7fb      	b.n	191fa <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
   19202:	f7fe f973 	bl	174ec <sys_clock_tick_get>
   19206:	4623      	mov	r3, r4
   19208:	462a      	mov	r2, r5
   1920a:	2c01      	cmp	r4, #1
   1920c:	f175 0400 	sbcs.w	r4, r5, #0
   19210:	db03      	blt.n	1921a <sys_clock_timeout_end_calc+0x52>
   19212:	18c0      	adds	r0, r0, r3
   19214:	eb42 0101 	adc.w	r1, r2, r1
   19218:	e7ef      	b.n	191fa <sys_clock_timeout_end_calc+0x32>
   1921a:	2301      	movs	r3, #1
   1921c:	2200      	movs	r2, #0
   1921e:	e7f8      	b.n	19212 <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
   19220:	f04f 30ff 	mov.w	r0, #4294967295
   19224:	4601      	mov	r1, r0
   19226:	e7e8      	b.n	191fa <sys_clock_timeout_end_calc+0x32>

00019228 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   19228:	4770      	bx	lr
	...

0001922c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1922c:	f7ff bc07 	b.w	18a3e <SystemInit>
